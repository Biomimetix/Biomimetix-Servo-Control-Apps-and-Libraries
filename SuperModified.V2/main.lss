
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000076  00800100  00004dc2  00004e56  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00004dc2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000001dc  00800176  00800176  00004ecc  2**0
                  ALLOC
  3 .debug_aranges 00000260  00000000  00000000  00004ecc  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 000015aa  00000000  00000000  0000512c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00006f59  00000000  00000000  000066d6  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00001e11  00000000  00000000  0000d62f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00004751  00000000  00000000  0000f440  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000e00  00000000  00000000  00013b94  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00002a10  00000000  00000000  00014994  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00001fa0  00000000  00000000  000173a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000180  00000000  00000000  00019344  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
       4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      18:	0c 94 88 01 	jmp	0x310	; 0x310 <__vector_6>
      1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      28:	0c 94 0e 20 	jmp	0x401c	; 0x401c <__vector_10>
      2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      34:	0c 94 aa 20 	jmp	0x4154	; 0x4154 <__vector_13>
      38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      40:	0c 94 9c 05 	jmp	0xb38	; 0xb38 <__vector_16>
      44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      48:	0c 94 e5 1b 	jmp	0x37ca	; 0x37ca <__vector_18>
      4c:	0c 94 98 1b 	jmp	0x3730	; 0x3730 <__vector_19>
      50:	0c 94 6c 1b 	jmp	0x36d8	; 0x36d8 <__vector_20>
      54:	0c 94 60 16 	jmp	0x2cc0	; 0x2cc0 <__vector_21>
      58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      60:	0c 94 48 17 	jmp	0x2e90	; 0x2e90 <__vector_24>
      64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
      68:	11 24       	eor	r1, r1
      6a:	1f be       	out	0x3f, r1	; 63
      6c:	cf ef       	ldi	r28, 0xFF	; 255
      6e:	d8 e0       	ldi	r29, 0x08	; 8
      70:	de bf       	out	0x3e, r29	; 62
      72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
      74:	11 e0       	ldi	r17, 0x01	; 1
      76:	a0 e0       	ldi	r26, 0x00	; 0
      78:	b1 e0       	ldi	r27, 0x01	; 1
      7a:	e2 ec       	ldi	r30, 0xC2	; 194
      7c:	fd e4       	ldi	r31, 0x4D	; 77
      7e:	02 c0       	rjmp	.+4      	; 0x84 <.do_copy_data_start>

00000080 <.do_copy_data_loop>:
      80:	05 90       	lpm	r0, Z+
      82:	0d 92       	st	X+, r0

00000084 <.do_copy_data_start>:
      84:	a6 37       	cpi	r26, 0x76	; 118
      86:	b1 07       	cpc	r27, r17
      88:	d9 f7       	brne	.-10     	; 0x80 <.do_copy_data_loop>

0000008a <__do_clear_bss>:
      8a:	13 e0       	ldi	r17, 0x03	; 3
      8c:	a6 e7       	ldi	r26, 0x76	; 118
      8e:	b1 e0       	ldi	r27, 0x01	; 1
      90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
      92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
      94:	a2 35       	cpi	r26, 0x52	; 82
      96:	b1 07       	cpc	r27, r17
      98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
      9a:	0e 94 14 22 	call	0x4428	; 0x4428 <main>
      9e:	0c 94 df 26 	jmp	0x4dbe	; 0x4dbe <_exit>

000000a2 <__bad_interrupt>:
      a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <zoErrorInit>:
#include "zoError.h"
#include "zoMcu.h"

void zoErrorInit(ZO_ERROR *p)
{
      a6:	fc 01       	movw	r30, r24
	enterCritical();
      a8:	0f b6       	in	r0, 0x3f	; 63
      aa:	0f 92       	push	r0
      ac:	f8 94       	cli
	p->ctr = 0;						//initialize counter to 0
      ae:	10 82       	st	Z, r1
	p->pIn = p->error;	//initialize in pointer to start of data
      b0:	05 96       	adiw	r24, 0x05	; 5
      b2:	92 83       	std	Z+2, r25	; 0x02
      b4:	81 83       	std	Z+1, r24	; 0x01
	p->pOut = p->error;	//initialize out pinter to start of data
      b6:	94 83       	std	Z+4, r25	; 0x04
      b8:	83 83       	std	Z+3, r24	; 0x03
	exitCritical();
      ba:	0f 90       	pop	r0
      bc:	0f be       	out	0x3f, r0	; 63
}
      be:	08 95       	ret

000000c0 <zoErrorGetIsr>:

inline u08 zoErrorGetIsr(ZO_ERROR *p)
{
      c0:	dc 01       	movw	r26, r24
	u08 c;
	
	p->ctr--;							//decrement count of bytes in buffer
      c2:	8c 91       	ld	r24, X
      c4:	81 50       	subi	r24, 0x01	; 1
      c6:	8c 93       	st	X, r24
	c = *p->pOut;					//get one piece of data
      c8:	13 96       	adiw	r26, 0x03	; 3
      ca:	ed 91       	ld	r30, X+
      cc:	fc 91       	ld	r31, X
      ce:	14 97       	sbiw	r26, 0x04	; 4
      d0:	e0 81       	ld	r30, Z
	p->pOut++;						//point to next place from which data will be fetched
      d2:	13 96       	adiw	r26, 0x03	; 3
      d4:	8d 91       	ld	r24, X+
      d6:	9c 91       	ld	r25, X
      d8:	14 97       	sbiw	r26, 0x04	; 4
      da:	01 96       	adiw	r24, 0x01	; 1
      dc:	14 96       	adiw	r26, 0x04	; 4
      de:	9c 93       	st	X, r25
      e0:	8e 93       	st	-X, r24
      e2:	13 97       	sbiw	r26, 0x03	; 3
	if(p->pOut == &p->error[ZO_ERROR_STORAGE_SIZE])	//wrap pout pointer
      e4:	13 96       	adiw	r26, 0x03	; 3
      e6:	2d 91       	ld	r18, X+
      e8:	3c 91       	ld	r19, X
      ea:	14 97       	sbiw	r26, 0x04	; 4
      ec:	ad 01       	movw	r20, r26
      ee:	4b 5f       	subi	r20, 0xFB	; 251
      f0:	5f 4f       	sbci	r21, 0xFF	; 255
      f2:	cd 01       	movw	r24, r26
      f4:	0d 96       	adiw	r24, 0x0d	; 13
      f6:	28 17       	cp	r18, r24
      f8:	39 07       	cpc	r19, r25
      fa:	11 f0       	breq	.+4      	; 0x100 <zoErrorGetIsr+0x40>
		p->pOut = &p->error[0];

	return c;
}
      fc:	8e 2f       	mov	r24, r30
      fe:	08 95       	ret
	
	p->ctr--;							//decrement count of bytes in buffer
	c = *p->pOut;					//get one piece of data
	p->pOut++;						//point to next place from which data will be fetched
	if(p->pOut == &p->error[ZO_ERROR_STORAGE_SIZE])	//wrap pout pointer
		p->pOut = &p->error[0];
     100:	14 96       	adiw	r26, 0x04	; 4
     102:	5c 93       	st	X, r21
     104:	4e 93       	st	-X, r20
     106:	13 97       	sbiw	r26, 0x03	; 3

	return c;
}
     108:	8e 2f       	mov	r24, r30
     10a:	08 95       	ret

0000010c <zoErrorPutIsr>:
	exitCritical();
	return c;
}

inline void zoErrorPutIsr(ZO_ERROR *p,const u08 error)
{
     10c:	dc 01       	movw	r26, r24
	if( p->ctr < ZO_ERROR_STORAGE_SIZE )
     10e:	8c 91       	ld	r24, X
     110:	88 30       	cpi	r24, 0x08	; 8
     112:	18 f4       	brcc	.+6      	; 0x11a <zoErrorPutIsr+0xe>
		p->ctr++;;
     114:	8c 91       	ld	r24, X
     116:	8f 5f       	subi	r24, 0xFF	; 255
     118:	8c 93       	st	X, r24

	*p->pIn = error;
     11a:	11 96       	adiw	r26, 0x01	; 1
     11c:	ed 91       	ld	r30, X+
     11e:	fc 91       	ld	r31, X
     120:	12 97       	sbiw	r26, 0x02	; 2
     122:	60 83       	st	Z, r22
	p->pIn++;
     124:	11 96       	adiw	r26, 0x01	; 1
     126:	8d 91       	ld	r24, X+
     128:	9c 91       	ld	r25, X
     12a:	12 97       	sbiw	r26, 0x02	; 2
     12c:	01 96       	adiw	r24, 0x01	; 1
     12e:	12 96       	adiw	r26, 0x02	; 2
     130:	9c 93       	st	X, r25
     132:	8e 93       	st	-X, r24
     134:	11 97       	sbiw	r26, 0x01	; 1
	if(p->pIn == &p->error[ZO_ERROR_STORAGE_SIZE])	//wrap the pIn ptr
     136:	11 96       	adiw	r26, 0x01	; 1
     138:	2d 91       	ld	r18, X+
     13a:	3c 91       	ld	r19, X
     13c:	12 97       	sbiw	r26, 0x02	; 2
     13e:	ad 01       	movw	r20, r26
     140:	4b 5f       	subi	r20, 0xFB	; 251
     142:	5f 4f       	sbci	r21, 0xFF	; 255
     144:	cd 01       	movw	r24, r26
     146:	0d 96       	adiw	r24, 0x0d	; 13
     148:	28 17       	cp	r18, r24
     14a:	39 07       	cpc	r19, r25
     14c:	09 f0       	breq	.+2      	; 0x150 <zoErrorPutIsr+0x44>
     14e:	08 95       	ret
		p->pIn = &p->error[0];	
     150:	12 96       	adiw	r26, 0x02	; 2
     152:	5c 93       	st	X, r21
     154:	4e 93       	st	-X, r20
     156:	11 97       	sbiw	r26, 0x01	; 1
     158:	08 95       	ret

0000015a <zoErrorIsEmpty>:
	zoErrorPutIsr(p,error);
	exitCritical();
}

inline bool zoErrorIsEmpty(ZO_ERROR *p)
{
     15a:	fc 01       	movw	r30, r24
	return (p->ctr>0)?FALSE:TRUE;
     15c:	80 81       	ld	r24, Z
     15e:	88 23       	and	r24, r24
     160:	11 f0       	breq	.+4      	; 0x166 <zoErrorIsEmpty+0xc>
     162:	80 e0       	ldi	r24, 0x00	; 0
}
     164:	08 95       	ret
	exitCritical();
}

inline bool zoErrorIsEmpty(ZO_ERROR *p)
{
	return (p->ctr>0)?FALSE:TRUE;
     166:	8f ef       	ldi	r24, 0xFF	; 255
     168:	08 95       	ret

0000016a <zoErrorGet>:

	return c;
}

u08 zoErrorGet(ZO_ERROR *p)
{
     16a:	dc 01       	movw	r26, r24
	u08 c;
	
	enterCritical();
     16c:	0f b6       	in	r0, 0x3f	; 63
     16e:	0f 92       	push	r0
     170:	f8 94       	cli

inline u08 zoErrorGetIsr(ZO_ERROR *p)
{
	u08 c;
	
	p->ctr--;							//decrement count of bytes in buffer
     172:	8c 91       	ld	r24, X
     174:	81 50       	subi	r24, 0x01	; 1
     176:	8c 93       	st	X, r24
	c = *p->pOut;					//get one piece of data
     178:	13 96       	adiw	r26, 0x03	; 3
     17a:	ed 91       	ld	r30, X+
     17c:	fc 91       	ld	r31, X
     17e:	14 97       	sbiw	r26, 0x04	; 4
     180:	e0 81       	ld	r30, Z
	p->pOut++;						//point to next place from which data will be fetched
     182:	13 96       	adiw	r26, 0x03	; 3
     184:	8d 91       	ld	r24, X+
     186:	9c 91       	ld	r25, X
     188:	14 97       	sbiw	r26, 0x04	; 4
     18a:	01 96       	adiw	r24, 0x01	; 1
     18c:	14 96       	adiw	r26, 0x04	; 4
     18e:	9c 93       	st	X, r25
     190:	8e 93       	st	-X, r24
     192:	13 97       	sbiw	r26, 0x03	; 3
	if(p->pOut == &p->error[ZO_ERROR_STORAGE_SIZE])	//wrap pout pointer
     194:	13 96       	adiw	r26, 0x03	; 3
     196:	2d 91       	ld	r18, X+
     198:	3c 91       	ld	r19, X
     19a:	14 97       	sbiw	r26, 0x04	; 4
     19c:	ad 01       	movw	r20, r26
     19e:	4b 5f       	subi	r20, 0xFB	; 251
     1a0:	5f 4f       	sbci	r21, 0xFF	; 255
     1a2:	cd 01       	movw	r24, r26
     1a4:	0d 96       	adiw	r24, 0x0d	; 13
     1a6:	28 17       	cp	r18, r24
     1a8:	39 07       	cpc	r19, r25
     1aa:	21 f0       	breq	.+8      	; 0x1b4 <zoErrorGet+0x4a>
{
	u08 c;
	
	enterCritical();
	c = zoErrorGetIsr(p);
	exitCritical();
     1ac:	0f 90       	pop	r0
     1ae:	0f be       	out	0x3f, r0	; 63
	return c;
}
     1b0:	8e 2f       	mov	r24, r30
     1b2:	08 95       	ret
	
	p->ctr--;							//decrement count of bytes in buffer
	c = *p->pOut;					//get one piece of data
	p->pOut++;						//point to next place from which data will be fetched
	if(p->pOut == &p->error[ZO_ERROR_STORAGE_SIZE])	//wrap pout pointer
		p->pOut = &p->error[0];
     1b4:	14 96       	adiw	r26, 0x04	; 4
     1b6:	5c 93       	st	X, r21
     1b8:	4e 93       	st	-X, r20
     1ba:	13 97       	sbiw	r26, 0x03	; 3
{
	u08 c;
	
	enterCritical();
	c = zoErrorGetIsr(p);
	exitCritical();
     1bc:	0f 90       	pop	r0
     1be:	0f be       	out	0x3f, r0	; 63
	return c;
}
     1c0:	8e 2f       	mov	r24, r30
     1c2:	08 95       	ret

000001c4 <zoErrorPut>:
	if(p->pIn == &p->error[ZO_ERROR_STORAGE_SIZE])	//wrap the pIn ptr
		p->pIn = &p->error[0];	
}

void zoErrorPut(ZO_ERROR *p,const u08 error)
{
     1c4:	dc 01       	movw	r26, r24
	enterCritical();
     1c6:	0f b6       	in	r0, 0x3f	; 63
     1c8:	0f 92       	push	r0
     1ca:	f8 94       	cli
	return c;
}

inline void zoErrorPutIsr(ZO_ERROR *p,const u08 error)
{
	if( p->ctr < ZO_ERROR_STORAGE_SIZE )
     1cc:	8c 91       	ld	r24, X
     1ce:	88 30       	cpi	r24, 0x08	; 8
     1d0:	18 f4       	brcc	.+6      	; 0x1d8 <zoErrorPut+0x14>
		p->ctr++;;
     1d2:	8c 91       	ld	r24, X
     1d4:	8f 5f       	subi	r24, 0xFF	; 255
     1d6:	8c 93       	st	X, r24

	*p->pIn = error;
     1d8:	11 96       	adiw	r26, 0x01	; 1
     1da:	ed 91       	ld	r30, X+
     1dc:	fc 91       	ld	r31, X
     1de:	12 97       	sbiw	r26, 0x02	; 2
     1e0:	60 83       	st	Z, r22
	p->pIn++;
     1e2:	11 96       	adiw	r26, 0x01	; 1
     1e4:	8d 91       	ld	r24, X+
     1e6:	9c 91       	ld	r25, X
     1e8:	12 97       	sbiw	r26, 0x02	; 2
     1ea:	01 96       	adiw	r24, 0x01	; 1
     1ec:	12 96       	adiw	r26, 0x02	; 2
     1ee:	9c 93       	st	X, r25
     1f0:	8e 93       	st	-X, r24
     1f2:	11 97       	sbiw	r26, 0x01	; 1
	if(p->pIn == &p->error[ZO_ERROR_STORAGE_SIZE])	//wrap the pIn ptr
     1f4:	11 96       	adiw	r26, 0x01	; 1
     1f6:	2d 91       	ld	r18, X+
     1f8:	3c 91       	ld	r19, X
     1fa:	12 97       	sbiw	r26, 0x02	; 2
     1fc:	ad 01       	movw	r20, r26
     1fe:	4b 5f       	subi	r20, 0xFB	; 251
     200:	5f 4f       	sbci	r21, 0xFF	; 255
     202:	cd 01       	movw	r24, r26
     204:	0d 96       	adiw	r24, 0x0d	; 13
     206:	28 17       	cp	r18, r24
     208:	39 07       	cpc	r19, r25
     20a:	19 f0       	breq	.+6      	; 0x212 <zoErrorPut+0x4e>

void zoErrorPut(ZO_ERROR *p,const u08 error)
{
	enterCritical();
	zoErrorPutIsr(p,error);
	exitCritical();
     20c:	0f 90       	pop	r0
     20e:	0f be       	out	0x3f, r0	; 63
}
     210:	08 95       	ret
		p->ctr++;;

	*p->pIn = error;
	p->pIn++;
	if(p->pIn == &p->error[ZO_ERROR_STORAGE_SIZE])	//wrap the pIn ptr
		p->pIn = &p->error[0];	
     212:	12 96       	adiw	r26, 0x02	; 2
     214:	5c 93       	st	X, r21
     216:	4e 93       	st	-X, r20
     218:	11 97       	sbiw	r26, 0x01	; 1

void zoErrorPut(ZO_ERROR *p,const u08 error)
{
	enterCritical();
	zoErrorPutIsr(p,error);
	exitCritical();
     21a:	0f 90       	pop	r0
     21c:	0f be       	out	0x3f, r0	; 63
}
     21e:	08 95       	ret

00000220 <zoSystemTimerInit>:

void zoSystemTimerInit(void)
{
	//MCUSR &= ~_BV(WDRF);		//allow for WDE clear
	//WDTCSR |= _BV(WDCE);		//enable watchdog change
	WDTCSR = 0xD8;				//0b11011000:WDIF WDIE WDP3 WDCE WDE WDP2 WDP1 WDP0 
     220:	88 ed       	ldi	r24, 0xD8	; 216
     222:	80 93 60 00 	sts	0x0060, r24
	exitCritical();
}

inline void zoSystemTimerWatchDogDisable(void)
{
	enterCritical();
     226:	0f b6       	in	r0, 0x3f	; 63
     228:	0f 92       	push	r0
     22a:	f8 94       	cli
	WatchDogResetEnabled = TRUE;
     22c:	8f ef       	ldi	r24, 0xFF	; 255
     22e:	80 93 7a 01 	sts	0x017A, r24
	exitCritical();
     232:	0f 90       	pop	r0
     234:	0f be       	out	0x3f, r0	; 63
	//MCUSR &= ~_BV(WDRF);		//allow for WDE clear
	//WDTCSR |= _BV(WDCE);		//enable watchdog change
	WDTCSR = 0xD8;				//0b11011000:WDIF WDIE WDP3 WDCE WDE WDP2 WDP1 WDP0 
								//configure interrupt and system reset mode  
	zoSystemTimerWatchDogDisable();
}
     236:	08 95       	ret

00000238 <zoSystemTimerWatchDogInit>:

//watchdog functionality 
inline void zoSystemTimerWatchDogInit(const u16 timeOutMiliSecond)
{
	enterCritical();
     238:	0f b6       	in	r0, 0x3f	; 63
     23a:	0f 92       	push	r0
     23c:	f8 94       	cli
	WatchDogTimeOut = timeOutMiliSecond;
     23e:	90 93 01 01 	sts	0x0101, r25
     242:	80 93 00 01 	sts	0x0100, r24
	exitCritical();
     246:	0f 90       	pop	r0
     248:	0f be       	out	0x3f, r0	; 63
}
     24a:	08 95       	ret

0000024c <zoSystemTimerWatchDogEnable>:

inline void zoSystemTimerWatchDogEnable(void)
{
	enterCritical();
     24c:	0f b6       	in	r0, 0x3f	; 63
     24e:	0f 92       	push	r0
     250:	f8 94       	cli
	WatchDogResetEnabled = TRUE;
     252:	8f ef       	ldi	r24, 0xFF	; 255
     254:	80 93 7a 01 	sts	0x017A, r24
	exitCritical();
     258:	0f 90       	pop	r0
     25a:	0f be       	out	0x3f, r0	; 63
}
     25c:	08 95       	ret

0000025e <zoSystemTimerWatchDogDisable>:

inline void zoSystemTimerWatchDogDisable(void)
{
	enterCritical();
     25e:	0f b6       	in	r0, 0x3f	; 63
     260:	0f 92       	push	r0
     262:	f8 94       	cli
	WatchDogResetEnabled = TRUE;
     264:	8f ef       	ldi	r24, 0xFF	; 255
     266:	80 93 7a 01 	sts	0x017A, r24
	exitCritical();
     26a:	0f 90       	pop	r0
     26c:	0f be       	out	0x3f, r0	; 63
}
     26e:	08 95       	ret

00000270 <zoSystemTimerWatchDogReset>:

inline void zoSystemTimerWatchDogReset(void)
{
	enterCritical();
     270:	0f b6       	in	r0, 0x3f	; 63
     272:	0f 92       	push	r0
     274:	f8 94       	cli
	WatchDogMiliseconds = 0;
     276:	10 92 79 01 	sts	0x0179, r1
     27a:	10 92 78 01 	sts	0x0178, r1
	exitCritical();
     27e:	0f 90       	pop	r0
     280:	0f be       	out	0x3f, r0	; 63
}
     282:	08 95       	ret

00000284 <zoSystemTimerTimeOutInit>:

//timeout functionality 
inline void zoSystemTimerTimeOutInit(u16 *counter)
{
     284:	fc 01       	movw	r30, r24

//time measuring functionality
//system measured in ms
inline void zoSystemTimerMeasureStart(u16 *counter)
{
	enterCritical();
     286:	0f b6       	in	r0, 0x3f	; 63
     288:	0f 92       	push	r0
     28a:	f8 94       	cli
	*counter = Miliseconds;
     28c:	80 91 76 01 	lds	r24, 0x0176
     290:	90 91 77 01 	lds	r25, 0x0177
     294:	91 83       	std	Z+1, r25	; 0x01
     296:	80 83       	st	Z, r24
	exitCritical();
     298:	0f 90       	pop	r0
     29a:	0f be       	out	0x3f, r0	; 63

//timeout functionality 
inline void zoSystemTimerTimeOutInit(u16 *counter)
{
	zoSystemTimerMeasureStart(counter);
}
     29c:	08 95       	ret

0000029e <zoSystemTimerMeasureStart>:
}

//time measuring functionality
//system measured in ms
inline void zoSystemTimerMeasureStart(u16 *counter)
{
     29e:	fc 01       	movw	r30, r24
	enterCritical();
     2a0:	0f b6       	in	r0, 0x3f	; 63
     2a2:	0f 92       	push	r0
     2a4:	f8 94       	cli
	*counter = Miliseconds;
     2a6:	80 91 76 01 	lds	r24, 0x0176
     2aa:	90 91 77 01 	lds	r25, 0x0177
     2ae:	91 83       	std	Z+1, r25	; 0x01
     2b0:	80 83       	st	Z, r24
	exitCritical();
     2b2:	0f 90       	pop	r0
     2b4:	0f be       	out	0x3f, r0	; 63
}
     2b6:	08 95       	ret

000002b8 <zoSystemTimerMeasureGet>:

u16 zoSystemTimerMeasureGet(u16 *counter)
{
     2b8:	fc 01       	movw	r30, r24
	u16 curr;
	
	enterCritical();
     2ba:	0f b6       	in	r0, 0x3f	; 63
     2bc:	0f 92       	push	r0
     2be:	f8 94       	cli
	curr= Miliseconds;	
     2c0:	80 91 76 01 	lds	r24, 0x0176
     2c4:	90 91 77 01 	lds	r25, 0x0177
	exitCritical();
     2c8:	0f 90       	pop	r0
     2ca:	0f be       	out	0x3f, r0	; 63

	if(*counter <= curr)
     2cc:	01 90       	ld	r0, Z+
     2ce:	f0 81       	ld	r31, Z
     2d0:	e0 2d       	mov	r30, r0
     2d2:	8e 17       	cp	r24, r30
     2d4:	9f 07       	cpc	r25, r31
     2d6:	38 f4       	brcc	.+14     	; 0x2e6 <zoSystemTimerMeasureGet+0x2e>
		return (curr - *counter);
	else
		return (0xFFFF + curr -*counter); 
     2d8:	9c 01       	movw	r18, r24
     2da:	21 50       	subi	r18, 0x01	; 1
     2dc:	30 40       	sbci	r19, 0x00	; 0
     2de:	2e 1b       	sub	r18, r30
     2e0:	3f 0b       	sbc	r19, r31
}
     2e2:	c9 01       	movw	r24, r18
     2e4:	08 95       	ret
	enterCritical();
	curr= Miliseconds;	
	exitCritical();

	if(*counter <= curr)
		return (curr - *counter);
     2e6:	9c 01       	movw	r18, r24
     2e8:	2e 1b       	sub	r18, r30
     2ea:	3f 0b       	sbc	r19, r31
	else
		return (0xFFFF + curr -*counter); 
}
     2ec:	c9 01       	movw	r24, r18
     2ee:	08 95       	ret

000002f0 <zoSystemTimerTimeOutExpired>:
{
	zoSystemTimerMeasureStart(counter);
}

inline bool zoSystemTimerTimeOutExpired(u16 *counter, const u16 timeOutMiliSecond)
{
     2f0:	0f 93       	push	r16
     2f2:	1f 93       	push	r17
     2f4:	8b 01       	movw	r16, r22
	return( ( zoSystemTimerMeasureGet(counter) >= timeOutMiliSecond )?TRUE:FALSE );
     2f6:	0e 94 5c 01 	call	0x2b8	; 0x2b8 <zoSystemTimerMeasureGet>
     2fa:	80 17       	cp	r24, r16
     2fc:	91 07       	cpc	r25, r17
     2fe:	20 f4       	brcc	.+8      	; 0x308 <zoSystemTimerTimeOutExpired+0x18>
     300:	80 e0       	ldi	r24, 0x00	; 0
}
     302:	1f 91       	pop	r17
     304:	0f 91       	pop	r16
     306:	08 95       	ret
	zoSystemTimerMeasureStart(counter);
}

inline bool zoSystemTimerTimeOutExpired(u16 *counter, const u16 timeOutMiliSecond)
{
	return( ( zoSystemTimerMeasureGet(counter) >= timeOutMiliSecond )?TRUE:FALSE );
     308:	8f ef       	ldi	r24, 0xFF	; 255
}
     30a:	1f 91       	pop	r17
     30c:	0f 91       	pop	r16
     30e:	08 95       	ret

00000310 <__vector_6>:
	else
		return (0xFFFF + curr -*counter); 
}

ISR(WDT_vect)
{
     310:	1f 92       	push	r1
     312:	0f 92       	push	r0
     314:	0f b6       	in	r0, 0x3f	; 63
     316:	0f 92       	push	r0
     318:	11 24       	eor	r1, r1
     31a:	2f 93       	push	r18
     31c:	3f 93       	push	r19
     31e:	8f 93       	push	r24
     320:	9f 93       	push	r25
	Miliseconds+=16;
     322:	80 91 76 01 	lds	r24, 0x0176
     326:	90 91 77 01 	lds	r25, 0x0177
     32a:	40 96       	adiw	r24, 0x10	; 16
     32c:	90 93 77 01 	sts	0x0177, r25
     330:	80 93 76 01 	sts	0x0176, r24
	WatchDogMiliseconds+=16;
     334:	80 91 78 01 	lds	r24, 0x0178
     338:	90 91 79 01 	lds	r25, 0x0179
     33c:	40 96       	adiw	r24, 0x10	; 16
     33e:	90 93 79 01 	sts	0x0179, r25
     342:	80 93 78 01 	sts	0x0178, r24

	if( (WatchDogMiliseconds <= WatchDogTimeOut) || (!WatchDogResetEnabled) )
     346:	20 91 78 01 	lds	r18, 0x0178
     34a:	30 91 79 01 	lds	r19, 0x0179
     34e:	80 91 00 01 	lds	r24, 0x0100
     352:	90 91 01 01 	lds	r25, 0x0101
     356:	82 17       	cp	r24, r18
     358:	93 07       	cpc	r25, r19
     35a:	20 f4       	brcc	.+8      	; 0x364 <__vector_6+0x54>
     35c:	80 91 7a 01 	lds	r24, 0x017A
     360:	88 23       	and	r24, r24
     362:	29 f4       	brne	.+10     	; 0x36e <__vector_6+0x5e>
		WDTCSR |= _BV(WDCE)|_BV(WDIE);	//avoid reseting MCU			
     364:	80 91 60 00 	lds	r24, 0x0060
     368:	80 65       	ori	r24, 0x50	; 80
     36a:	80 93 60 00 	sts	0x0060, r24
     36e:	9f 91       	pop	r25
     370:	8f 91       	pop	r24
     372:	3f 91       	pop	r19
     374:	2f 91       	pop	r18
     376:	0f 90       	pop	r0
     378:	0f be       	out	0x3f, r0	; 63
     37a:	0f 90       	pop	r0
     37c:	1f 90       	pop	r1
     37e:	18 95       	reti

00000380 <zoProtocolLRC>:

	return (hal->putPacket(packet));
}

u08 zoProtocolLRC(const u08* crcBytes, u08 crcByteCount)
{
     380:	48 2f       	mov	r20, r24
	u08 i;
	u08 lrc = 0;

	for( i=0; i<crcByteCount; i++)
     382:	66 23       	and	r22, r22
     384:	59 f0       	breq	.+22     	; 0x39c <zoProtocolLRC+0x1c>
     386:	9c 01       	movw	r18, r24
     388:	f9 01       	movw	r30, r18
     38a:	90 e0       	ldi	r25, 0x00	; 0
		lrc ^= crcBytes[i];
     38c:	81 91       	ld	r24, Z+
     38e:	98 27       	eor	r25, r24
u08 zoProtocolLRC(const u08* crcBytes, u08 crcByteCount)
{
	u08 i;
	u08 lrc = 0;

	for( i=0; i<crcByteCount; i++)
     390:	8e 2f       	mov	r24, r30
     392:	84 1b       	sub	r24, r20
     394:	86 17       	cp	r24, r22
     396:	d0 f3       	brcs	.-12     	; 0x38c <zoProtocolLRC+0xc>
		lrc ^= crcBytes[i];

   return lrc;
}
     398:	89 2f       	mov	r24, r25
     39a:	08 95       	ret
u08 zoProtocolLRC(const u08* crcBytes, u08 crcByteCount)
{
	u08 i;
	u08 lrc = 0;

	for( i=0; i<crcByteCount; i++)
     39c:	90 e0       	ldi	r25, 0x00	; 0
     39e:	fc cf       	rjmp	.-8      	; 0x398 <zoProtocolLRC+0x18>

000003a0 <zoProtocolCommandResponse>:


bool zoProtocolCommandResponse(ZO_PROTOCOL_HAL *hal,
							   ZO_PROTOCOL_PACKET* packet,
							   ZO_ERROR *error)
{
     3a0:	cf 92       	push	r12
     3a2:	df 92       	push	r13
     3a4:	ef 92       	push	r14
     3a6:	ff 92       	push	r15
     3a8:	0f 93       	push	r16
     3aa:	1f 93       	push	r17
     3ac:	cf 93       	push	r28
     3ae:	df 93       	push	r29
     3b0:	6c 01       	movw	r12, r24
     3b2:	8b 01       	movw	r16, r22
     3b4:	7a 01       	movw	r14, r20
	//were we addressed directly? ie not with broadcast or through local acceptance
	//mechanism? no -> do not respond at all
	if( packet->AddressedNodeID  !=  hal->localNodeID )
     3b6:	db 01       	movw	r26, r22
     3b8:	9c 91       	ld	r25, X
     3ba:	f6 01       	movw	r30, r12
     3bc:	80 81       	ld	r24, Z
     3be:	98 17       	cp	r25, r24
     3c0:	51 f0       	breq	.+20     	; 0x3d6 <zoProtocolCommandResponse+0x36>
     3c2:	8f ef       	ldi	r24, 0xFF	; 255

	//compute lrc
	packet->lrc = zoProtocolLRC((u08*)&(packet->commandID),packet->byteCount + 2);

	return (hal->putPacket(packet));
}
     3c4:	df 91       	pop	r29
     3c6:	cf 91       	pop	r28
     3c8:	1f 91       	pop	r17
     3ca:	0f 91       	pop	r16
     3cc:	ff 90       	pop	r15
     3ce:	ef 90       	pop	r14
     3d0:	df 90       	pop	r13
     3d2:	cf 90       	pop	r12
     3d4:	08 95       	ret
	//mechanism? no -> do not respond at all
	if( packet->AddressedNodeID  !=  hal->localNodeID )
		return TRUE;

	//respond to the node that issued the command
	packet->AddressedNodeID =  packet->OwnNodeID;
     3d6:	db 01       	movw	r26, r22
     3d8:	11 96       	adiw	r26, 0x01	; 1
     3da:	8c 91       	ld	r24, X
     3dc:	11 97       	sbiw	r26, 0x01	; 1
     3de:	8c 93       	st	X, r24
	packet->OwnNodeID = hal->localNodeID;
     3e0:	f6 01       	movw	r30, r12
     3e2:	80 81       	ld	r24, Z
     3e4:	11 96       	adiw	r26, 0x01	; 1
     3e6:	8c 93       	st	X, r24
     3e8:	11 97       	sbiw	r26, 0x01	; 1

	//if it was a set command set bytecount to zero
	if ( packet->commandID < ZO_PROTOCOL_GET_COMMANDS_START )
     3ea:	12 96       	adiw	r26, 0x02	; 2
     3ec:	8c 91       	ld	r24, X
     3ee:	12 97       	sbiw	r26, 0x02	; 2
     3f0:	84 36       	cpi	r24, 0x64	; 100
     3f2:	18 f1       	brcs	.+70     	; 0x43a <zoProtocolCommandResponse+0x9a>
		packet->byteCount = 0;

	if(error != 0) //if the error struct pointer exists
     3f4:	e1 14       	cp	r14, r1
     3f6:	f1 04       	cpc	r15, r1
     3f8:	29 f0       	breq	.+10     	; 0x404 <zoProtocolCommandResponse+0x64>
	{
		if( !zoErrorIsEmpty(error) )		//are there any errors in the system?
     3fa:	c7 01       	movw	r24, r14
     3fc:	0e 94 ad 00 	call	0x15a	; 0x15a <zoErrorIsEmpty>
     400:	88 23       	and	r24, r24
     402:	f1 f0       	breq	.+60     	; 0x440 <zoProtocolCommandResponse+0xa0>
			}while(!zoErrorIsEmpty(error));
		}
	}

	//compute lrc
	packet->lrc = zoProtocolLRC((u08*)&(packet->commandID),packet->byteCount + 2);
     404:	98 01       	movw	r18, r16
     406:	2e 5f       	subi	r18, 0xFE	; 254
     408:	3f 4f       	sbci	r19, 0xFF	; 255
     40a:	f8 01       	movw	r30, r16
     40c:	43 81       	ldd	r20, Z+3	; 0x03
     40e:	4e 5f       	subi	r20, 0xFE	; 254
u08 zoProtocolLRC(const u08* crcBytes, u08 crcByteCount)
{
	u08 i;
	u08 lrc = 0;

	for( i=0; i<crcByteCount; i++)
     410:	a9 f1       	breq	.+106    	; 0x47c <zoProtocolCommandResponse+0xdc>
     412:	52 2f       	mov	r21, r18
     414:	f9 01       	movw	r30, r18
     416:	90 e0       	ldi	r25, 0x00	; 0
		lrc ^= crcBytes[i];
     418:	81 91       	ld	r24, Z+
     41a:	98 27       	eor	r25, r24
u08 zoProtocolLRC(const u08* crcBytes, u08 crcByteCount)
{
	u08 i;
	u08 lrc = 0;

	for( i=0; i<crcByteCount; i++)
     41c:	8e 2f       	mov	r24, r30
     41e:	85 1b       	sub	r24, r21
     420:	84 17       	cp	r24, r20
     422:	d0 f3       	brcs	.-12     	; 0x418 <zoProtocolCommandResponse+0x78>
			}while(!zoErrorIsEmpty(error));
		}
	}

	//compute lrc
	packet->lrc = zoProtocolLRC((u08*)&(packet->commandID),packet->byteCount + 2);
     424:	d8 01       	movw	r26, r16
     426:	54 96       	adiw	r26, 0x14	; 20
     428:	9c 93       	st	X, r25

	return (hal->putPacket(packet));
     42a:	d6 01       	movw	r26, r12
     42c:	14 96       	adiw	r26, 0x04	; 4
     42e:	ed 91       	ld	r30, X+
     430:	fc 91       	ld	r31, X
     432:	15 97       	sbiw	r26, 0x05	; 5
     434:	c8 01       	movw	r24, r16
     436:	09 95       	icall
     438:	c5 cf       	rjmp	.-118    	; 0x3c4 <zoProtocolCommandResponse+0x24>
	packet->AddressedNodeID =  packet->OwnNodeID;
	packet->OwnNodeID = hal->localNodeID;

	//if it was a set command set bytecount to zero
	if ( packet->commandID < ZO_PROTOCOL_GET_COMMANDS_START )
		packet->byteCount = 0;
     43a:	13 96       	adiw	r26, 0x03	; 3
     43c:	1c 92       	st	X, r1
     43e:	da cf       	rjmp	.-76     	; 0x3f4 <zoProtocolCommandResponse+0x54>
	if(error != 0) //if the error struct pointer exists
	{
		if( !zoErrorIsEmpty(error) )		//are there any errors in the system?
		{
			//yes there are, prepare the error response
			packet->commandID = ZO_PROTOCOL_ERROR_ID;
     440:	8a ef       	ldi	r24, 0xFA	; 250
     442:	d8 01       	movw	r26, r16
     444:	12 96       	adiw	r26, 0x02	; 2
     446:	8c 93       	st	X, r24
     448:	12 97       	sbiw	r26, 0x02	; 2
			packet->byteCount = 0;
     44a:	13 96       	adiw	r26, 0x03	; 3
     44c:	1c 92       	st	X, r1
			do {
				packet->data[packet->byteCount] = zoErrorGet(error);
     44e:	f8 01       	movw	r30, r16
     450:	83 81       	ldd	r24, Z+3	; 0x03
     452:	c8 2f       	mov	r28, r24
     454:	d0 e0       	ldi	r29, 0x00	; 0
     456:	c7 01       	movw	r24, r14
     458:	0e 94 b5 00 	call	0x16a	; 0x16a <zoErrorGet>
     45c:	c0 0f       	add	r28, r16
     45e:	d1 1f       	adc	r29, r17
     460:	8c 83       	std	Y+4, r24	; 0x04
				packet->byteCount++;
     462:	d8 01       	movw	r26, r16
     464:	13 96       	adiw	r26, 0x03	; 3
     466:	8c 91       	ld	r24, X
     468:	13 97       	sbiw	r26, 0x03	; 3
     46a:	8f 5f       	subi	r24, 0xFF	; 255
     46c:	13 96       	adiw	r26, 0x03	; 3
     46e:	8c 93       	st	X, r24
			}while(!zoErrorIsEmpty(error));
     470:	c7 01       	movw	r24, r14
     472:	0e 94 ad 00 	call	0x15a	; 0x15a <zoErrorIsEmpty>
     476:	88 23       	and	r24, r24
     478:	51 f3       	breq	.-44     	; 0x44e <zoProtocolCommandResponse+0xae>
     47a:	c4 cf       	rjmp	.-120    	; 0x404 <zoProtocolCommandResponse+0x64>
u08 zoProtocolLRC(const u08* crcBytes, u08 crcByteCount)
{
	u08 i;
	u08 lrc = 0;

	for( i=0; i<crcByteCount; i++)
     47c:	90 e0       	ldi	r25, 0x00	; 0
     47e:	d2 cf       	rjmp	.-92     	; 0x424 <zoProtocolCommandResponse+0x84>

00000480 <zoProtocolParse>:
	return success;
}

//slave operations
inline bool zoProtocolParse(ZO_PROTOCOL_HAL *hal, ZO_PROTOCOL_PACKET *packet )
{
     480:	0f 93       	push	r16
     482:	1f 93       	push	r17
     484:	cf 93       	push	r28
     486:	df 93       	push	r29
     488:	8c 01       	movw	r16, r24
     48a:	eb 01       	movw	r28, r22
	if( hal->getPacket(packet) )
     48c:	dc 01       	movw	r26, r24
     48e:	16 96       	adiw	r26, 0x06	; 6
     490:	ed 91       	ld	r30, X+
     492:	fc 91       	ld	r31, X
     494:	17 97       	sbiw	r26, 0x07	; 7
     496:	cb 01       	movw	r24, r22
     498:	09 95       	icall
     49a:	88 23       	and	r24, r24
     49c:	29 f4       	brne	.+10     	; 0x4a8 <zoProtocolParse+0x28>
		else
			zoErrorPut(hal->error,ZO_PROTOCOL_ERROR_WRONG_LRC);
	}

	return FALSE;
}
     49e:	df 91       	pop	r29
     4a0:	cf 91       	pop	r28
     4a2:	1f 91       	pop	r17
     4a4:	0f 91       	pop	r16
     4a6:	08 95       	ret
#include "zoProtocolUart.h"
#include "zoSystemTimer.h"

static inline bool checkLRC(ZO_PROTOCOL_PACKET* packet)
{
	return ( ( packet->lrc == 
     4a8:	5c 89       	ldd	r21, Y+20	; 0x14
     4aa:	9e 01       	movw	r18, r28
     4ac:	2e 5f       	subi	r18, 0xFE	; 254
     4ae:	3f 4f       	sbci	r19, 0xFF	; 255
     4b0:	6b 81       	ldd	r22, Y+3	; 0x03
     4b2:	6e 5f       	subi	r22, 0xFE	; 254
u08 zoProtocolLRC(const u08* crcBytes, u08 crcByteCount)
{
	u08 i;
	u08 lrc = 0;

	for( i=0; i<crcByteCount; i++)
     4b4:	a9 f0       	breq	.+42     	; 0x4e0 <zoProtocolParse+0x60>
     4b6:	42 2f       	mov	r20, r18
     4b8:	f9 01       	movw	r30, r18
     4ba:	90 e0       	ldi	r25, 0x00	; 0
		lrc ^= crcBytes[i];
     4bc:	81 91       	ld	r24, Z+
     4be:	98 27       	eor	r25, r24
u08 zoProtocolLRC(const u08* crcBytes, u08 crcByteCount)
{
	u08 i;
	u08 lrc = 0;

	for( i=0; i<crcByteCount; i++)
     4c0:	8e 2f       	mov	r24, r30
     4c2:	84 1b       	sub	r24, r20
     4c4:	86 17       	cp	r24, r22
     4c6:	d0 f3       	brcs	.-12     	; 0x4bc <zoProtocolParse+0x3c>
#include "zoProtocolUart.h"
#include "zoSystemTimer.h"

static inline bool checkLRC(ZO_PROTOCOL_PACKET* packet)
{
	return ( ( packet->lrc == 
     4c8:	59 17       	cp	r21, r25
     4ca:	41 f0       	breq	.+16     	; 0x4dc <zoProtocolParse+0x5c>
	if( hal->getPacket(packet) )
	{
		if ( checkLRC(packet) )
			return TRUE;
		else
			zoErrorPut(hal->error,ZO_PROTOCOL_ERROR_WRONG_LRC);
     4cc:	f8 01       	movw	r30, r16
     4ce:	82 81       	ldd	r24, Z+2	; 0x02
     4d0:	93 81       	ldd	r25, Z+3	; 0x03
     4d2:	62 e2       	ldi	r22, 0x22	; 34
     4d4:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <zoErrorPut>
     4d8:	80 e0       	ldi	r24, 0x00	; 0
     4da:	e1 cf       	rjmp	.-62     	; 0x49e <zoProtocolParse+0x1e>
#include "zoProtocolUart.h"
#include "zoSystemTimer.h"

static inline bool checkLRC(ZO_PROTOCOL_PACKET* packet)
{
	return ( ( packet->lrc == 
     4dc:	8f ef       	ldi	r24, 0xFF	; 255
     4de:	df cf       	rjmp	.-66     	; 0x49e <zoProtocolParse+0x1e>
u08 zoProtocolLRC(const u08* crcBytes, u08 crcByteCount)
{
	u08 i;
	u08 lrc = 0;

	for( i=0; i<crcByteCount; i++)
     4e0:	90 e0       	ldi	r25, 0x00	; 0
     4e2:	f2 cf       	rjmp	.-28     	; 0x4c8 <zoProtocolParse+0x48>

000004e4 <zoProtocolCommand>:
	return success;
}

//master operations
bool zoProtocolCommand(ZO_PROTOCOL_HAL* hal, ZO_PROTOCOL_PACKET* packet)
{
     4e4:	af 92       	push	r10
     4e6:	bf 92       	push	r11
     4e8:	cf 92       	push	r12
     4ea:	df 92       	push	r13
     4ec:	ef 92       	push	r14
     4ee:	ff 92       	push	r15
     4f0:	0f 93       	push	r16
     4f2:	1f 93       	push	r17
     4f4:	df 93       	push	r29
     4f6:	cf 93       	push	r28
     4f8:	00 d0       	rcall	.+0      	; 0x4fa <zoProtocolCommand+0x16>
     4fa:	cd b7       	in	r28, 0x3d	; 61
     4fc:	de b7       	in	r29, 0x3e	; 62
     4fe:	6c 01       	movw	r12, r24
     500:	8b 01       	movw	r16, r22
	bool success = TRUE;
	u16 t;
	
	//compute lrc
	packet->lrc = zoProtocolLRC((u08*)&(packet->commandID),packet->byteCount + 2);
     502:	82 e0       	ldi	r24, 0x02	; 2
     504:	e8 2e       	mov	r14, r24
     506:	f1 2c       	mov	r15, r1
     508:	e6 0e       	add	r14, r22
     50a:	f7 1e       	adc	r15, r23
     50c:	db 01       	movw	r26, r22
     50e:	13 96       	adiw	r26, 0x03	; 3
     510:	4c 91       	ld	r20, X
     512:	4e 5f       	subi	r20, 0xFE	; 254
u08 zoProtocolLRC(const u08* crcBytes, u08 crcByteCount)
{
	u08 i;
	u08 lrc = 0;

	for( i=0; i<crcByteCount; i++)
     514:	09 f4       	brne	.+2      	; 0x518 <zoProtocolCommand+0x34>
     516:	4b c0       	rjmp	.+150    	; 0x5ae <zoProtocolCommand+0xca>
     518:	5e 2d       	mov	r21, r14
     51a:	f7 01       	movw	r30, r14
     51c:	90 e0       	ldi	r25, 0x00	; 0
		lrc ^= crcBytes[i];
     51e:	81 91       	ld	r24, Z+
     520:	98 27       	eor	r25, r24
u08 zoProtocolLRC(const u08* crcBytes, u08 crcByteCount)
{
	u08 i;
	u08 lrc = 0;

	for( i=0; i<crcByteCount; i++)
     522:	8e 2f       	mov	r24, r30
     524:	85 1b       	sub	r24, r21
     526:	84 17       	cp	r24, r20
     528:	d0 f3       	brcs	.-12     	; 0x51e <zoProtocolCommand+0x3a>
{
	bool success = TRUE;
	u16 t;
	
	//compute lrc
	packet->lrc = zoProtocolLRC((u08*)&(packet->commandID),packet->byteCount + 2);
     52a:	f8 01       	movw	r30, r16
     52c:	94 8b       	std	Z+20, r25	; 0x14

	//is it a broadcast command? Then send it and do not wait on response
	if( packet->commandID >= ZO_PROTOCOL_BRC_COMMANDS_START )
     52e:	82 81       	ldd	r24, Z+2	; 0x02
     530:	88 3c       	cpi	r24, 0xC8	; 200
     532:	b0 f4       	brcc	.+44     	; 0x560 <zoProtocolCommand+0x7c>
		return (hal->putPacket(packet));

	//if it is a set or get command: Send it and wait with timeout on response
	if( hal->putPacket(packet) )
     534:	d6 01       	movw	r26, r12
     536:	14 96       	adiw	r26, 0x04	; 4
     538:	ed 91       	ld	r30, X+
     53a:	fc 91       	ld	r31, X
     53c:	15 97       	sbiw	r26, 0x05	; 5
     53e:	c8 01       	movw	r24, r16
     540:	09 95       	icall
     542:	88 23       	and	r24, r24
     544:	a9 f4       	brne	.+42     	; 0x570 <zoProtocolCommand+0x8c>
	}
	else
		success = FALSE;

	return success;
}
     546:	0f 90       	pop	r0
     548:	0f 90       	pop	r0
     54a:	cf 91       	pop	r28
     54c:	df 91       	pop	r29
     54e:	1f 91       	pop	r17
     550:	0f 91       	pop	r16
     552:	ff 90       	pop	r15
     554:	ef 90       	pop	r14
     556:	df 90       	pop	r13
     558:	cf 90       	pop	r12
     55a:	bf 90       	pop	r11
     55c:	af 90       	pop	r10
     55e:	08 95       	ret
	//compute lrc
	packet->lrc = zoProtocolLRC((u08*)&(packet->commandID),packet->byteCount + 2);

	//is it a broadcast command? Then send it and do not wait on response
	if( packet->commandID >= ZO_PROTOCOL_BRC_COMMANDS_START )
		return (hal->putPacket(packet));
     560:	d6 01       	movw	r26, r12
     562:	14 96       	adiw	r26, 0x04	; 4
     564:	ed 91       	ld	r30, X+
     566:	fc 91       	ld	r31, X
     568:	15 97       	sbiw	r26, 0x05	; 5
     56a:	c8 01       	movw	r24, r16
     56c:	09 95       	icall
     56e:	eb cf       	rjmp	.-42     	; 0x546 <zoProtocolCommand+0x62>

	//if it is a set or get command: Send it and wait with timeout on response
	if( hal->putPacket(packet) )
	{
		zoSystemTimerTimeOutInit(&t);
     570:	5e 01       	movw	r10, r28
     572:	08 94       	sec
     574:	a1 1c       	adc	r10, r1
     576:	b1 1c       	adc	r11, r1
     578:	c5 01       	movw	r24, r10
     57a:	0e 94 42 01 	call	0x284	; 0x284 <zoSystemTimerTimeOutInit>
		while( !(hal->getPacket(packet)) )
     57e:	d6 01       	movw	r26, r12
     580:	16 96       	adiw	r26, 0x06	; 6
     582:	ed 91       	ld	r30, X+
     584:	fc 91       	ld	r31, X
     586:	17 97       	sbiw	r26, 0x07	; 7
     588:	c8 01       	movw	r24, r16
     58a:	09 95       	icall
     58c:	88 23       	and	r24, r24
     58e:	89 f4       	brne	.+34     	; 0x5b2 <zoProtocolCommand+0xce>
		{
			if( zoSystemTimerTimeOutExpired(&t,ZO_PROTOCOL_COMMAND_RESPONSE_TIMEOUT_MS) )
     590:	c5 01       	movw	r24, r10
     592:	68 ec       	ldi	r22, 0xC8	; 200
     594:	70 e0       	ldi	r23, 0x00	; 0
     596:	0e 94 78 01 	call	0x2f0	; 0x2f0 <zoSystemTimerTimeOutExpired>
     59a:	88 23       	and	r24, r24
     59c:	81 f3       	breq	.-32     	; 0x57e <zoProtocolCommand+0x9a>
			{
				zoErrorPut(hal->error,ZO_PROTOCOL_ERROR_RESPONSE_TIMEOUT);
     59e:	f6 01       	movw	r30, r12
     5a0:	82 81       	ldd	r24, Z+2	; 0x02
     5a2:	93 81       	ldd	r25, Z+3	; 0x03
     5a4:	61 e2       	ldi	r22, 0x21	; 33
     5a6:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <zoErrorPut>
     5aa:	80 e0       	ldi	r24, 0x00	; 0
     5ac:	cc cf       	rjmp	.-104    	; 0x546 <zoProtocolCommand+0x62>
u08 zoProtocolLRC(const u08* crcBytes, u08 crcByteCount)
{
	u08 i;
	u08 lrc = 0;

	for( i=0; i<crcByteCount; i++)
     5ae:	90 e0       	ldi	r25, 0x00	; 0
     5b0:	bc cf       	rjmp	.-136    	; 0x52a <zoProtocolCommand+0x46>
#include "zoProtocolUart.h"
#include "zoSystemTimer.h"

static inline bool checkLRC(ZO_PROTOCOL_PACKET* packet)
{
	return ( ( packet->lrc == 
     5b2:	f8 01       	movw	r30, r16
     5b4:	54 89       	ldd	r21, Z+20	; 0x14
     5b6:	63 81       	ldd	r22, Z+3	; 0x03
     5b8:	6e 5f       	subi	r22, 0xFE	; 254
u08 zoProtocolLRC(const u08* crcBytes, u08 crcByteCount)
{
	u08 i;
	u08 lrc = 0;

	for( i=0; i<crcByteCount; i++)
     5ba:	c1 f0       	breq	.+48     	; 0x5ec <zoProtocolCommand+0x108>
     5bc:	4e 2d       	mov	r20, r14
     5be:	c7 01       	movw	r24, r14
     5c0:	fc 01       	movw	r30, r24
     5c2:	90 e0       	ldi	r25, 0x00	; 0
		lrc ^= crcBytes[i];
     5c4:	81 91       	ld	r24, Z+
     5c6:	98 27       	eor	r25, r24
u08 zoProtocolLRC(const u08* crcBytes, u08 crcByteCount)
{
	u08 i;
	u08 lrc = 0;

	for( i=0; i<crcByteCount; i++)
     5c8:	8e 2f       	mov	r24, r30
     5ca:	84 1b       	sub	r24, r20
     5cc:	86 17       	cp	r24, r22
     5ce:	d0 f3       	brcs	.-12     	; 0x5c4 <zoProtocolCommand+0xe0>
#include "zoProtocolUart.h"
#include "zoSystemTimer.h"

static inline bool checkLRC(ZO_PROTOCOL_PACKET* packet)
{
	return ( ( packet->lrc == 
     5d0:	59 17       	cp	r21, r25
     5d2:	51 f0       	breq	.+20     	; 0x5e8 <zoProtocolCommand+0x104>

		if( success )
		{
			if( ! checkLRC(packet)  )
			{
				zoErrorPut(hal->error,ZO_PROTOCOL_ERROR_WRONG_LRC);
     5d4:	d6 01       	movw	r26, r12
     5d6:	12 96       	adiw	r26, 0x02	; 2
     5d8:	8d 91       	ld	r24, X+
     5da:	9c 91       	ld	r25, X
     5dc:	13 97       	sbiw	r26, 0x03	; 3
     5de:	62 e2       	ldi	r22, 0x22	; 34
     5e0:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <zoErrorPut>
     5e4:	80 e0       	ldi	r24, 0x00	; 0
     5e6:	af cf       	rjmp	.-162    	; 0x546 <zoProtocolCommand+0x62>
#include "zoProtocolUart.h"
#include "zoSystemTimer.h"

static inline bool checkLRC(ZO_PROTOCOL_PACKET* packet)
{
	return ( ( packet->lrc == 
     5e8:	8f ef       	ldi	r24, 0xFF	; 255
     5ea:	ad cf       	rjmp	.-166    	; 0x546 <zoProtocolCommand+0x62>
u08 zoProtocolLRC(const u08* crcBytes, u08 crcByteCount)
{
	u08 i;
	u08 lrc = 0;

	for( i=0; i<crcByteCount; i++)
     5ec:	90 e0       	ldi	r25, 0x00	; 0
     5ee:	f0 cf       	rjmp	.-32     	; 0x5d0 <zoProtocolCommand+0xec>

000005f0 <zoProtocolInit>:
}


//initialization
bool zoProtocolInit(ZO_PROTOCOL_HW_TYPE hw,ZO_PROTOCOL_HAL *hal, u08 localNodeID)
{
     5f0:	ff 92       	push	r15
     5f2:	0f 93       	push	r16
     5f4:	1f 93       	push	r17
     5f6:	cf 93       	push	r28
     5f8:	df 93       	push	r29
     5fa:	08 2f       	mov	r16, r24
     5fc:	eb 01       	movw	r28, r22
     5fe:	f4 2e       	mov	r15, r20
	bool success = TRUE;

	switch (hw)
     600:	88 23       	and	r24, r24
     602:	49 f5       	brne	.+82     	; 0x656 <zoProtocolInit+0x66>
	{
	case ZO_PROTOCOL_HW_I2C:
		hal->putPacket = zoProtocolI2cPutPacket;
     604:	85 e5       	ldi	r24, 0x55	; 85
     606:	9a e1       	ldi	r25, 0x1A	; 26
     608:	9d 83       	std	Y+5, r25	; 0x05
     60a:	8c 83       	std	Y+4, r24	; 0x04
		hal->getPacket = zoProtocolI2cGetPacket;
     60c:	8a e1       	ldi	r24, 0x1A	; 26
     60e:	9a e1       	ldi	r25, 0x1A	; 26
     610:	9f 83       	std	Y+7, r25	; 0x07
     612:	8e 83       	std	Y+6, r24	; 0x06
		hal->setLAM = zoProtocolI2cSetLAM;
     614:	8a e0       	ldi	r24, 0x0A	; 10
     616:	9a e1       	ldi	r25, 0x1A	; 26
     618:	99 87       	std	Y+9, r25	; 0x09
     61a:	88 87       	std	Y+8, r24	; 0x08
		hal->setBitRate = zoProtocolI2cSetBitrate;
     61c:	8f e0       	ldi	r24, 0x0F	; 15
     61e:	9a e1       	ldi	r25, 0x1A	; 26
     620:	9b 87       	std	Y+11, r25	; 0x0b
     622:	8a 87       	std	Y+10, r24	; 0x0a
		hal->error = zoProtocolI2cError;
     624:	80 91 68 01 	lds	r24, 0x0168
     628:	90 91 69 01 	lds	r25, 0x0169
     62c:	9b 83       	std	Y+3, r25	; 0x03
     62e:	8a 83       	std	Y+2, r24	; 0x02
		zoProtocolI2cInit(localNodeID,100);
     630:	84 2f       	mov	r24, r20
     632:	64 e6       	ldi	r22, 0x64	; 100
     634:	70 e0       	ldi	r23, 0x00	; 0
     636:	0e 94 99 1a 	call	0x3532	; 0x3532 <zoProtocolI2cInit>
     63a:	1f ef       	ldi	r17, 0xFF	; 255
	case ZO_PROTOCOL_HW_CAN:
		//TODO (for processors that support it)
		break;
	}

	hal->hw = hw;
     63c:	09 83       	std	Y+1, r16	; 0x01
	hal->localNodeID = localNodeID;
     63e:	f8 82       	st	Y, r15
	hal->setLAM(ZO_PROTOCOL_DEFAULT_LAM);
     640:	e8 85       	ldd	r30, Y+8	; 0x08
     642:	f9 85       	ldd	r31, Y+9	; 0x09
     644:	8f ef       	ldi	r24, 0xFF	; 255
     646:	09 95       	icall

	return success;
}
     648:	81 2f       	mov	r24, r17
     64a:	df 91       	pop	r29
     64c:	cf 91       	pop	r28
     64e:	1f 91       	pop	r17
     650:	0f 91       	pop	r16
     652:	ff 90       	pop	r15
     654:	08 95       	ret
//initialization
bool zoProtocolInit(ZO_PROTOCOL_HW_TYPE hw,ZO_PROTOCOL_HAL *hal, u08 localNodeID)
{
	bool success = TRUE;

	switch (hw)
     656:	84 30       	cpi	r24, 0x04	; 4
     658:	10 f0       	brcs	.+4      	; 0x65e <zoProtocolInit+0x6e>
		hal->putPacket = zoProtocolUartPutPacket;
		hal->getPacket = zoProtocolUartGetPacket;
		hal->setLAM = zoProtocolUartSetLAM;
		hal->setBitRate = zoProtocolUartSetBitrate;
		hal->error = zoProtocolUartError;
		if( ! zoProtocolUartInit(hal->hw,localNodeID,9600) )
     65a:	1f ef       	ldi	r17, 0xFF	; 255
     65c:	ef cf       	rjmp	.-34     	; 0x63c <zoProtocolInit+0x4c>
		break;

	case ZO_PROTOCOL_HW_RS232:
	case ZO_PROTOCOL_HW_UART_5V:
	case ZO_PROTOCOL_HW_HALF_DUPLEX_RS485:
		hal->putPacket = zoProtocolUartPutPacket;
     65e:	83 ed       	ldi	r24, 0xD3	; 211
     660:	9d e1       	ldi	r25, 0x1D	; 29
     662:	9d 83       	std	Y+5, r25	; 0x05
     664:	8c 83       	std	Y+4, r24	; 0x04
		hal->getPacket = zoProtocolUartGetPacket;
     666:	84 e4       	ldi	r24, 0x44	; 68
     668:	9d e1       	ldi	r25, 0x1D	; 29
     66a:	9f 83       	std	Y+7, r25	; 0x07
     66c:	8e 83       	std	Y+6, r24	; 0x06
		hal->setLAM = zoProtocolUartSetLAM;
     66e:	8e e3       	ldi	r24, 0x3E	; 62
     670:	9d e1       	ldi	r25, 0x1D	; 29
     672:	99 87       	std	Y+9, r25	; 0x09
     674:	88 87       	std	Y+8, r24	; 0x08
		hal->setBitRate = zoProtocolUartSetBitrate;
     676:	81 e4       	ldi	r24, 0x41	; 65
     678:	9d e1       	ldi	r25, 0x1D	; 29
     67a:	9b 87       	std	Y+11, r25	; 0x0b
     67c:	8a 87       	std	Y+10, r24	; 0x0a
		hal->error = zoProtocolUartError;
     67e:	80 91 6c 01 	lds	r24, 0x016C
     682:	90 91 6d 01 	lds	r25, 0x016D
     686:	9b 83       	std	Y+3, r25	; 0x03
     688:	8a 83       	std	Y+2, r24	; 0x02
		if( ! zoProtocolUartInit(hal->hw,localNodeID,9600) )
     68a:	89 81       	ldd	r24, Y+1	; 0x01
     68c:	64 2f       	mov	r22, r20
     68e:	20 e8       	ldi	r18, 0x80	; 128
     690:	35 e2       	ldi	r19, 0x25	; 37
     692:	40 e0       	ldi	r20, 0x00	; 0
     694:	50 e0       	ldi	r21, 0x00	; 0
     696:	0e 94 06 1e 	call	0x3c0c	; 0x3c0c <zoProtocolUartInit>
     69a:	88 23       	and	r24, r24
     69c:	f1 f6       	brne	.-68     	; 0x65a <zoProtocolInit+0x6a>
     69e:	10 e0       	ldi	r17, 0x00	; 0
     6a0:	cd cf       	rjmp	.-102    	; 0x63c <zoProtocolInit+0x4c>

000006a2 <zoEncoderGetVel>:

s16 zoEncoderGetVel(void)
{
	s16 vel;

	enterCritical();
     6a2:	0f b6       	in	r0, 0x3f	; 63
     6a4:	0f 92       	push	r0
     6a6:	f8 94       	cli
	vel = DeltaPos;
     6a8:	60 91 83 01 	lds	r22, 0x0183
     6ac:	70 91 84 01 	lds	r23, 0x0184
	exitCritical();
     6b0:	0f 90       	pop	r0
     6b2:	0f be       	out	0x3f, r0	; 63

	vel = (s16)( (double)(vel) *
     6b4:	88 27       	eor	r24, r24
     6b6:	77 fd       	sbrc	r23, 7
     6b8:	80 95       	com	r24
     6ba:	98 2f       	mov	r25, r24
     6bc:	0e 94 bf 23 	call	0x477e	; 0x477e <__floatsisf>
     6c0:	20 91 04 01 	lds	r18, 0x0104
     6c4:	30 91 05 01 	lds	r19, 0x0105
     6c8:	40 91 06 01 	lds	r20, 0x0106
     6cc:	50 91 07 01 	lds	r21, 0x0107
     6d0:	0e 94 4b 24 	call	0x4896	; 0x4896 <__mulsf3>
     6d4:	20 e0       	ldi	r18, 0x00	; 0
     6d6:	30 e0       	ldi	r19, 0x00	; 0
     6d8:	48 ec       	ldi	r20, 0xC8	; 200
     6da:	52 e4       	ldi	r21, 0x42	; 66
     6dc:	0e 94 24 23 	call	0x4648	; 0x4648 <__divsf3>
     6e0:	0e 94 8c 23 	call	0x4718	; 0x4718 <__fixsfsi>
				 Sms.Control.LoopHz / 
				 (double)VELOCITY_READ_CONTROL_LOOP_ENTRIES );

	return vel;
}
     6e4:	cb 01       	movw	r24, r22
     6e6:	08 95       	ret

000006e8 <zoEncoderSetVel>:
//this function needs to run inside the control loop, because accurate timing is needed
//in order to calculate velocity.

void zoEncoderSetVel(void)
{
	if(NoOfEntriesControlLoopIsr++ >= VELOCITY_READ_CONTROL_LOOP_ENTRIES)
     6e8:	80 91 02 01 	lds	r24, 0x0102
     6ec:	8f 5f       	subi	r24, 0xFF	; 255
     6ee:	80 93 02 01 	sts	0x0102, r24
     6f2:	81 50       	subi	r24, 0x01	; 1
     6f4:	84 36       	cpi	r24, 0x64	; 100
     6f6:	48 f1       	brcs	.+82     	; 0x74a <zoEncoderSetVel+0x62>
	{
		NoOfEntriesControlLoopIsr = 1;
     6f8:	81 e0       	ldi	r24, 0x01	; 1
     6fa:	80 93 02 01 	sts	0x0102, r24
		DeltaPos = (s16)( (EncoderPos - LastEncoderPos) );
     6fe:	80 91 7b 01 	lds	r24, 0x017B
     702:	90 91 7c 01 	lds	r25, 0x017C
     706:	a0 91 7d 01 	lds	r26, 0x017D
     70a:	b0 91 7e 01 	lds	r27, 0x017E
     70e:	20 91 7f 01 	lds	r18, 0x017F
     712:	30 91 80 01 	lds	r19, 0x0180
     716:	40 91 81 01 	lds	r20, 0x0181
     71a:	50 91 82 01 	lds	r21, 0x0182
     71e:	82 1b       	sub	r24, r18
     720:	93 0b       	sbc	r25, r19
     722:	90 93 84 01 	sts	0x0184, r25
     726:	80 93 83 01 	sts	0x0183, r24
		LastEncoderPos = EncoderPos;
     72a:	80 91 7b 01 	lds	r24, 0x017B
     72e:	90 91 7c 01 	lds	r25, 0x017C
     732:	a0 91 7d 01 	lds	r26, 0x017D
     736:	b0 91 7e 01 	lds	r27, 0x017E
     73a:	80 93 7f 01 	sts	0x017F, r24
     73e:	90 93 80 01 	sts	0x0180, r25
     742:	a0 93 81 01 	sts	0x0181, r26
     746:	b0 93 82 01 	sts	0x0182, r27
     74a:	08 95       	ret

0000074c <zoEncoderPollOverFlowError>:

inline bool zoEncoderPollOverFlowError(void)
{
	bool ovfl = FALSE;
	
	enterCritical();
     74c:	0f b6       	in	r0, 0x3f	; 63
     74e:	0f 92       	push	r0
     750:	f8 94       	cli
	if(	EncoderPos >= ((s32)0x7FFFFC00) )
     752:	80 91 7b 01 	lds	r24, 0x017B
     756:	90 91 7c 01 	lds	r25, 0x017C
     75a:	a0 91 7d 01 	lds	r26, 0x017D
     75e:	b0 91 7e 01 	lds	r27, 0x017E
     762:	80 50       	subi	r24, 0x00	; 0
     764:	9c 4f       	sbci	r25, 0xFC	; 252
     766:	af 4f       	sbci	r26, 0xFF	; 255
     768:	bf 47       	sbci	r27, 0x7F	; 127
     76a:	24 f4       	brge	.+8      	; 0x774 <zoEncoderPollOverFlowError+0x28>
     76c:	80 e0       	ldi	r24, 0x00	; 0
		ovfl = TRUE;
	exitCritical();
     76e:	0f 90       	pop	r0
     770:	0f be       	out	0x3f, r0	; 63

	return ovfl;
}
     772:	08 95       	ret
inline bool zoEncoderPollOverFlowError(void)
{
	bool ovfl = FALSE;
	
	enterCritical();
	if(	EncoderPos >= ((s32)0x7FFFFC00) )
     774:	8f ef       	ldi	r24, 0xFF	; 255
     776:	fb cf       	rjmp	.-10     	; 0x76e <zoEncoderPollOverFlowError+0x22>

00000778 <zoEncoderPollUnderFlowError>:

inline bool zoEncoderPollUnderFlowError(void)
{
	bool unfl = FALSE;
	
	enterCritical();
     778:	0f b6       	in	r0, 0x3f	; 63
     77a:	0f 92       	push	r0
     77c:	f8 94       	cli
	if(	EncoderPos <= ((s32)0x80000400) )
     77e:	80 91 7b 01 	lds	r24, 0x017B
     782:	90 91 7c 01 	lds	r25, 0x017C
     786:	a0 91 7d 01 	lds	r26, 0x017D
     78a:	b0 91 7e 01 	lds	r27, 0x017E
     78e:	81 50       	subi	r24, 0x01	; 1
     790:	94 40       	sbci	r25, 0x04	; 4
     792:	a0 40       	sbci	r26, 0x00	; 0
     794:	b0 48       	sbci	r27, 0x80	; 128
     796:	24 f0       	brlt	.+8      	; 0x7a0 <zoEncoderPollUnderFlowError+0x28>
     798:	80 e0       	ldi	r24, 0x00	; 0
		unfl = TRUE;
	exitCritical();
     79a:	0f 90       	pop	r0
     79c:	0f be       	out	0x3f, r0	; 63

	return unfl;
}
     79e:	08 95       	ret
inline bool zoEncoderPollUnderFlowError(void)
{
	bool unfl = FALSE;
	
	enterCritical();
	if(	EncoderPos <= ((s32)0x80000400) )
     7a0:	8f ef       	ldi	r24, 0xFF	; 255
     7a2:	fb cf       	rjmp	.-10     	; 0x79a <zoEncoderPollUnderFlowError+0x22>

000007a4 <zoEncoderGetPosSpi>:

	return pos;
}

u16 zoEncoderGetPosSpi(void)
{
     7a4:	df 93       	push	r29
     7a6:	cf 93       	push	r28
     7a8:	00 d0       	rcall	.+0      	; 0x7aa <zoEncoderGetPosSpi+0x6>
     7aa:	cd b7       	in	r28, 0x3d	; 61
     7ac:	de b7       	in	r29, 0x3e	; 62
	u08 dummy = 0;
	u08 data[2] = {0,0};
	u16 posSPI;

	PORTB &= ~_BV(PB2);
     7ae:	2a 98       	cbi	0x05, 2	; 5
	__asm__ __volatile__ ("nop" ::);
     7b0:	00 00       	nop
	__asm__ __volatile__ ("nop" ::);
     7b2:	00 00       	nop
	__asm__ __volatile__ ("nop" ::);
     7b4:	00 00       	nop
	__asm__ __volatile__ ("nop" ::);
     7b6:	00 00       	nop
	__asm__ __volatile__ ("nop" ::);
     7b8:	00 00       	nop
	__asm__ __volatile__ ("nop" ::);
     7ba:	00 00       	nop
	__asm__ __volatile__ ("nop" ::);
     7bc:	00 00       	nop
	__asm__ __volatile__ ("nop" ::);
     7be:	00 00       	nop
	__asm__ __volatile__ ("nop" ::);
     7c0:	00 00       	nop
	__asm__ __volatile__ ("nop" ::);
     7c2:	00 00       	nop
	data[1] = zoSpiTransferByte(dummy);
     7c4:	80 e0       	ldi	r24, 0x00	; 0
     7c6:	0e 94 d5 16 	call	0x2daa	; 0x2daa <zoSpiTransferByte>
     7ca:	8a 83       	std	Y+2, r24	; 0x02
	data[0] = zoSpiTransferByte(dummy);
     7cc:	80 e0       	ldi	r24, 0x00	; 0
     7ce:	0e 94 d5 16 	call	0x2daa	; 0x2daa <zoSpiTransferByte>
     7d2:	89 83       	std	Y+1, r24	; 0x01
	PORTB |= _BV(PB2);
     7d4:	2a 9a       	sbi	0x05, 2	; 5
     7d6:	29 81       	ldd	r18, Y+1	; 0x01
     7d8:	3a 81       	ldd	r19, Y+2	; 0x02
     7da:	32 95       	swap	r19
     7dc:	22 95       	swap	r18
     7de:	2f 70       	andi	r18, 0x0F	; 15
     7e0:	23 27       	eor	r18, r19
     7e2:	3f 70       	andi	r19, 0x0F	; 15
     7e4:	23 27       	eor	r18, r19
	posSPI = strToU16(data)>>4;
		
	return posSPI;
}
     7e6:	c9 01       	movw	r24, r18
     7e8:	0f 90       	pop	r0
     7ea:	0f 90       	pop	r0
     7ec:	cf 91       	pop	r28
     7ee:	df 91       	pop	r29
     7f0:	08 95       	ret

000007f2 <zoEncoderReset>:

void zoEncoderReset(void)
{
	s32 pos;
	
	pos = zoEncoderGetPosSpi();
     7f2:	0e 94 d2 03 	call	0x7a4	; 0x7a4 <zoEncoderGetPosSpi>
     7f6:	9c 01       	movw	r18, r24
     7f8:	40 e0       	ldi	r20, 0x00	; 0
     7fa:	50 e0       	ldi	r21, 0x00	; 0

	enterCritical();
     7fc:	0f b6       	in	r0, 0x3f	; 63
     7fe:	0f 92       	push	r0
     800:	f8 94       	cli
	InitialAbsPos = pos;
     802:	20 93 85 01 	sts	0x0185, r18
     806:	30 93 86 01 	sts	0x0186, r19
     80a:	40 93 87 01 	sts	0x0187, r20
     80e:	50 93 88 01 	sts	0x0188, r21
	PositionAbsolute = pos;
     812:	90 93 8a 01 	sts	0x018A, r25
     816:	80 93 89 01 	sts	0x0189, r24
	LastPositionAbsolute = pos;
     81a:	90 93 8c 01 	sts	0x018C, r25
     81e:	80 93 8b 01 	sts	0x018B, r24
	DeltaPos = 0;
     822:	10 92 84 01 	sts	0x0184, r1
     826:	10 92 83 01 	sts	0x0183, r1
	EncoderPos = 0;
     82a:	10 92 7b 01 	sts	0x017B, r1
     82e:	10 92 7c 01 	sts	0x017C, r1
     832:	10 92 7d 01 	sts	0x017D, r1
     836:	10 92 7e 01 	sts	0x017E, r1
	LastEncoderPos = 0;
     83a:	10 92 7f 01 	sts	0x017F, r1
     83e:	10 92 80 01 	sts	0x0180, r1
     842:	10 92 81 01 	sts	0x0181, r1
     846:	10 92 82 01 	sts	0x0182, r1
	NoOfEntriesControlLoopIsr = 1;
     84a:	81 e0       	ldi	r24, 0x01	; 1
     84c:	80 93 02 01 	sts	0x0102, r24
	FullTurns = 0;
     850:	10 92 8d 01 	sts	0x018D, r1
     854:	10 92 8e 01 	sts	0x018E, r1
     858:	10 92 8f 01 	sts	0x018F, r1
     85c:	10 92 90 01 	sts	0x0190, r1
	exitCritical();	
     860:	0f 90       	pop	r0
     862:	0f be       	out	0x3f, r0	; 63
}
     864:	08 95       	ret

00000866 <zoEncoderGetPosAbsolute>:
	return posSPI;
}

u16 zoEncoderGetPosAbsolute(void)
{
	return zoEncoderGetPosSpi();
     866:	0e 94 d2 03 	call	0x7a4	; 0x7a4 <zoEncoderGetPosSpi>
}
     86a:	08 95       	ret

0000086c <zoEncoderGetPos>:
	FullTurns = 0;
	exitCritical();
}

s32 zoEncoderGetPos(void)
{
     86c:	ef 92       	push	r14
     86e:	ff 92       	push	r15
     870:	0f 93       	push	r16
     872:	1f 93       	push	r17
	s32 pos;

	enterCritical();
     874:	0f b6       	in	r0, 0x3f	; 63
     876:	0f 92       	push	r0
     878:	f8 94       	cli
	LastPositionAbsolute = PositionAbsolute;
     87a:	80 91 89 01 	lds	r24, 0x0189
     87e:	90 91 8a 01 	lds	r25, 0x018A
     882:	90 93 8c 01 	sts	0x018C, r25
     886:	80 93 8b 01 	sts	0x018B, r24
	PositionAbsolute = zoEncoderGetPosSpi();
     88a:	0e 94 d2 03 	call	0x7a4	; 0x7a4 <zoEncoderGetPosSpi>
     88e:	90 93 8a 01 	sts	0x018A, r25
     892:	80 93 89 01 	sts	0x0189, r24
	
	if(( (s32)PositionAbsolute - (s32)LastPositionAbsolute ) < -2000)
     896:	20 91 89 01 	lds	r18, 0x0189
     89a:	30 91 8a 01 	lds	r19, 0x018A
     89e:	80 91 8b 01 	lds	r24, 0x018B
     8a2:	90 91 8c 01 	lds	r25, 0x018C
     8a6:	40 e0       	ldi	r20, 0x00	; 0
     8a8:	50 e0       	ldi	r21, 0x00	; 0
     8aa:	a0 e0       	ldi	r26, 0x00	; 0
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	28 1b       	sub	r18, r24
     8b0:	39 0b       	sbc	r19, r25
     8b2:	4a 0b       	sbc	r20, r26
     8b4:	5b 0b       	sbc	r21, r27
     8b6:	20 53       	subi	r18, 0x30	; 48
     8b8:	38 4f       	sbci	r19, 0xF8	; 248
     8ba:	4f 4f       	sbci	r20, 0xFF	; 255
     8bc:	5f 4f       	sbci	r21, 0xFF	; 255
     8be:	9c f4       	brge	.+38     	; 0x8e6 <zoEncoderGetPos+0x7a>
		FullTurns++;
     8c0:	80 91 8d 01 	lds	r24, 0x018D
     8c4:	90 91 8e 01 	lds	r25, 0x018E
     8c8:	a0 91 8f 01 	lds	r26, 0x018F
     8cc:	b0 91 90 01 	lds	r27, 0x0190
     8d0:	01 96       	adiw	r24, 0x01	; 1
     8d2:	a1 1d       	adc	r26, r1
     8d4:	b1 1d       	adc	r27, r1
     8d6:	80 93 8d 01 	sts	0x018D, r24
     8da:	90 93 8e 01 	sts	0x018E, r25
     8de:	a0 93 8f 01 	sts	0x018F, r26
     8e2:	b0 93 90 01 	sts	0x0190, r27
	
	if(( (s32)PositionAbsolute - (s32)LastPositionAbsolute ) > 2000)
     8e6:	20 91 89 01 	lds	r18, 0x0189
     8ea:	30 91 8a 01 	lds	r19, 0x018A
     8ee:	80 91 8b 01 	lds	r24, 0x018B
     8f2:	90 91 8c 01 	lds	r25, 0x018C
     8f6:	40 e0       	ldi	r20, 0x00	; 0
     8f8:	50 e0       	ldi	r21, 0x00	; 0
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	b0 e0       	ldi	r27, 0x00	; 0
     8fe:	28 1b       	sub	r18, r24
     900:	39 0b       	sbc	r19, r25
     902:	4a 0b       	sbc	r20, r26
     904:	5b 0b       	sbc	r21, r27
     906:	21 5d       	subi	r18, 0xD1	; 209
     908:	37 40       	sbci	r19, 0x07	; 7
     90a:	40 40       	sbci	r20, 0x00	; 0
     90c:	50 40       	sbci	r21, 0x00	; 0
     90e:	9c f0       	brlt	.+38     	; 0x936 <__stack+0x37>
		FullTurns--;
     910:	80 91 8d 01 	lds	r24, 0x018D
     914:	90 91 8e 01 	lds	r25, 0x018E
     918:	a0 91 8f 01 	lds	r26, 0x018F
     91c:	b0 91 90 01 	lds	r27, 0x0190
     920:	01 97       	sbiw	r24, 0x01	; 1
     922:	a1 09       	sbc	r26, r1
     924:	b1 09       	sbc	r27, r1
     926:	80 93 8d 01 	sts	0x018D, r24
     92a:	90 93 8e 01 	sts	0x018E, r25
     92e:	a0 93 8f 01 	sts	0x018F, r26
     932:	b0 93 90 01 	sts	0x0190, r27
	
	pos = (FullTurns << 12) + PositionAbsolute - InitialAbsPos;
     936:	80 91 8d 01 	lds	r24, 0x018D
     93a:	90 91 8e 01 	lds	r25, 0x018E
     93e:	a0 91 8f 01 	lds	r26, 0x018F
     942:	b0 91 90 01 	lds	r27, 0x0190
     946:	20 91 89 01 	lds	r18, 0x0189
     94a:	30 91 8a 01 	lds	r19, 0x018A
     94e:	e0 90 85 01 	lds	r14, 0x0185
     952:	f0 90 86 01 	lds	r15, 0x0186
     956:	00 91 87 01 	lds	r16, 0x0187
     95a:	10 91 88 01 	lds	r17, 0x0188
     95e:	40 e0       	ldi	r20, 0x00	; 0
     960:	50 e0       	ldi	r21, 0x00	; 0
     962:	6c e0       	ldi	r22, 0x0C	; 12
     964:	88 0f       	add	r24, r24
     966:	99 1f       	adc	r25, r25
     968:	aa 1f       	adc	r26, r26
     96a:	bb 1f       	adc	r27, r27
     96c:	6a 95       	dec	r22
     96e:	d1 f7       	brne	.-12     	; 0x964 <__stack+0x65>
     970:	28 0f       	add	r18, r24
     972:	39 1f       	adc	r19, r25
     974:	4a 1f       	adc	r20, r26
     976:	5b 1f       	adc	r21, r27
     978:	2e 19       	sub	r18, r14
     97a:	3f 09       	sbc	r19, r15
     97c:	40 0b       	sbc	r20, r16
     97e:	51 0b       	sbc	r21, r17
	EncoderPos = pos;
     980:	20 93 7b 01 	sts	0x017B, r18
     984:	30 93 7c 01 	sts	0x017C, r19
     988:	40 93 7d 01 	sts	0x017D, r20
     98c:	50 93 7e 01 	sts	0x017E, r21
	exitCritical();
     990:	0f 90       	pop	r0
     992:	0f be       	out	0x3f, r0	; 63

	return pos;
}
     994:	b9 01       	movw	r22, r18
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	08 95       	ret

000009a2 <zoEncoderInit>:

void zoEncoderInit(void)
{
	u16 pos;
	
	zoSpiInit();
     9a2:	0e 94 be 16 	call	0x2d7c	; 0x2d7c <zoSpiInit>
	zoEncoderGetPosSpi();
     9a6:	0e 94 d2 03 	call	0x7a4	; 0x7a4 <zoEncoderGetPosSpi>
	pos = zoEncoderGetPosSpi();
     9aa:	0e 94 d2 03 	call	0x7a4	; 0x7a4 <zoEncoderGetPosSpi>

	enterCritical();
     9ae:	0f b6       	in	r0, 0x3f	; 63
     9b0:	0f 92       	push	r0
     9b2:	f8 94       	cli
	InitialAbsPos = pos;
     9b4:	9c 01       	movw	r18, r24
     9b6:	40 e0       	ldi	r20, 0x00	; 0
     9b8:	50 e0       	ldi	r21, 0x00	; 0
     9ba:	20 93 85 01 	sts	0x0185, r18
     9be:	30 93 86 01 	sts	0x0186, r19
     9c2:	40 93 87 01 	sts	0x0187, r20
     9c6:	50 93 88 01 	sts	0x0188, r21
	PositionAbsolute = pos;
     9ca:	90 93 8a 01 	sts	0x018A, r25
     9ce:	80 93 89 01 	sts	0x0189, r24
	LastPositionAbsolute = pos;
     9d2:	90 93 8c 01 	sts	0x018C, r25
     9d6:	80 93 8b 01 	sts	0x018B, r24
	DeltaPos = 0;
     9da:	10 92 84 01 	sts	0x0184, r1
     9de:	10 92 83 01 	sts	0x0183, r1
	EncoderPos = 0;
     9e2:	10 92 7b 01 	sts	0x017B, r1
     9e6:	10 92 7c 01 	sts	0x017C, r1
     9ea:	10 92 7d 01 	sts	0x017D, r1
     9ee:	10 92 7e 01 	sts	0x017E, r1
	LastEncoderPos = 0;
     9f2:	10 92 7f 01 	sts	0x017F, r1
     9f6:	10 92 80 01 	sts	0x0180, r1
     9fa:	10 92 81 01 	sts	0x0181, r1
     9fe:	10 92 82 01 	sts	0x0182, r1
	NoOfEntriesControlLoopIsr = 1;
     a02:	81 e0       	ldi	r24, 0x01	; 1
     a04:	80 93 02 01 	sts	0x0102, r24
	FullTurns = 0;
     a08:	10 92 8d 01 	sts	0x018D, r1
     a0c:	10 92 8e 01 	sts	0x018E, r1
     a10:	10 92 8f 01 	sts	0x018F, r1
     a14:	10 92 90 01 	sts	0x0190, r1
	exitCritical();
     a18:	0f 90       	pop	r0
     a1a:	0f be       	out	0x3f, r0	; 63
}
     a1c:	08 95       	ret

00000a1e <zoMotorSetTimedEventHandler>:

static void (*timedEventHandler)(void)=FALSE;

void zoMotorSetTimedEventHandler(void (*timedEventFunction)(void))
{
	timedEventHandler = timedEventFunction;
     a1e:	90 93 94 01 	sts	0x0194, r25
     a22:	80 93 93 01 	sts	0x0193, r24
}
     a26:	08 95       	ret

00000a28 <zoMotorInit>:

void zoMotorInit(void)
{
	Sms.Control.LoopHz = (double)F_CPU/(double)2040/(double)TIMER_0_OVERFLOWS_FOR_CONTROL_LOOP;
     a28:	84 e6       	ldi	r24, 0x64	; 100
     a2a:	9a e2       	ldi	r25, 0x2A	; 42
     a2c:	a8 e8       	ldi	r26, 0x88	; 136
     a2e:	b4 e4       	ldi	r27, 0x44	; 68
     a30:	80 93 04 01 	sts	0x0104, r24
     a34:	90 93 05 01 	sts	0x0105, r25
     a38:	a0 93 06 01 	sts	0x0106, r26
     a3c:	b0 93 07 01 	sts	0x0107, r27
		
	//set timer prescalers to zero -> PWM frequency 39215 Hz for phase correct mode
	TCCR0B = 0x02;	//set prescaler to 1
     a40:	82 e0       	ldi	r24, 0x02	; 2
     a42:	85 bd       	out	0x25, r24	; 37
	TCCR2B = 0x02;	//set prescaler to 1
     a44:	e1 eb       	ldi	r30, 0xB1	; 177
     a46:	f0 e0       	ldi	r31, 0x00	; 0
     a48:	80 83       	st	Z, r24

	//configure phase correct mode
	TCCR0B &= ~0x08;	//clear WGM02
     a4a:	85 b5       	in	r24, 0x25	; 37
     a4c:	87 7f       	andi	r24, 0xF7	; 247
     a4e:	85 bd       	out	0x25, r24	; 37
	TCCR0A &= ~0x02;	//clear WGM01
     a50:	84 b5       	in	r24, 0x24	; 36
     a52:	8d 7f       	andi	r24, 0xFD	; 253
     a54:	84 bd       	out	0x24, r24	; 36
	TCCR0A |= 0x03;		//set WGM00
     a56:	84 b5       	in	r24, 0x24	; 36
     a58:	83 60       	ori	r24, 0x03	; 3
     a5a:	84 bd       	out	0x24, r24	; 36
	TCCR0A |= 0x10;		//set COM0B0
     a5c:	84 b5       	in	r24, 0x24	; 36
     a5e:	80 61       	ori	r24, 0x10	; 16
     a60:	84 bd       	out	0x24, r24	; 36
	TCCR0A |= 0x20;		//set COM0B1
     a62:	84 b5       	in	r24, 0x24	; 36
     a64:	80 62       	ori	r24, 0x20	; 32
     a66:	84 bd       	out	0x24, r24	; 36
	TCCR0A &= ~0xC0;	//clear COM0A0 and COM0A1
     a68:	84 b5       	in	r24, 0x24	; 36
     a6a:	8f 73       	andi	r24, 0x3F	; 63
     a6c:	84 bd       	out	0x24, r24	; 36
	
	TCCR2B &= ~0x08;	//clear WGM22
     a6e:	80 81       	ld	r24, Z
     a70:	87 7f       	andi	r24, 0xF7	; 247
     a72:	80 83       	st	Z, r24
	TCCR2A &= ~0x02;	//clear WGM21
     a74:	e0 eb       	ldi	r30, 0xB0	; 176
     a76:	f0 e0       	ldi	r31, 0x00	; 0
     a78:	80 81       	ld	r24, Z
     a7a:	8d 7f       	andi	r24, 0xFD	; 253
     a7c:	80 83       	st	Z, r24
	TCCR2A |= 0x03;		//set WGM20	
     a7e:	80 81       	ld	r24, Z
     a80:	83 60       	ori	r24, 0x03	; 3
     a82:	80 83       	st	Z, r24
	TCCR2A |= 0x10;		//set COM2B0
     a84:	80 81       	ld	r24, Z
     a86:	80 61       	ori	r24, 0x10	; 16
     a88:	80 83       	st	Z, r24
	TCCR2A |= 0x20;		//set COM2B1
     a8a:	80 81       	ld	r24, Z
     a8c:	80 62       	ori	r24, 0x20	; 32
     a8e:	80 83       	st	Z, r24
	TCCR2A &= ~0xC0;	//clear COM2A0 and COM2A1
     a90:	80 81       	ld	r24, Z
     a92:	8f 73       	andi	r24, 0x3F	; 63
     a94:	80 83       	st	Z, r24

	OCR0B = 0x00;		//set PWM duty to zero
     a96:	18 bc       	out	0x28, r1	; 40
	OCR2B = 0x00;		//set PWM duty to zero
     a98:	10 92 b4 00 	sts	0x00B4, r1

	TIMSK0 |= _BV(0);	//enable timer 0 overflow interrupt
     a9c:	ee e6       	ldi	r30, 0x6E	; 110
     a9e:	f0 e0       	ldi	r31, 0x00	; 0
     aa0:	80 81       	ld	r24, Z
     aa2:	81 60       	ori	r24, 0x01	; 1
     aa4:	80 83       	st	Z, r24
	sei();				//enable global interrupts
     aa6:	78 94       	sei

	PRR &=~ (_BV(PRTIM0)|_BV(PRTIM2));		//enable timer0 and timer2	
     aa8:	e4 e6       	ldi	r30, 0x64	; 100
     aaa:	f0 e0       	ldi	r31, 0x00	; 0
     aac:	80 81       	ld	r24, Z
     aae:	8f 79       	andi	r24, 0x9F	; 159
     ab0:	80 83       	st	Z, r24
}
     ab2:	08 95       	ret

00000ab4 <zoMotorSet>:
void zoMotorSet(s32 pwmDuty)
{
	u08 ocrReg;
	u32 pwmDutyAbsolute;

	pwmDutyAbsolute = labs(pwmDuty);	//compute absolute value of motor command
     ab4:	9b 01       	movw	r18, r22
     ab6:	ac 01       	movw	r20, r24
     ab8:	97 fd       	sbrc	r25, 7
     aba:	18 c0       	rjmp	.+48     	; 0xaec <zoMotorSet+0x38>

	pwmDutyAbsolute >>= 8;	//discard lower 8 bits : this is done to allow finer tuning of gains			
     abc:	23 2f       	mov	r18, r19
     abe:	34 2f       	mov	r19, r20
     ac0:	45 2f       	mov	r20, r21
     ac2:	55 27       	eor	r21, r21

	if(pwmDutyAbsolute > 0xFF)
		pwmDutyAbsolute = 0xFF;
	
	ocrReg = (u08)pwmDutyAbsolute;		
     ac4:	2f 3f       	cpi	r18, 0xFF	; 255
     ac6:	31 05       	cpc	r19, r1
     ac8:	41 05       	cpc	r20, r1
     aca:	51 05       	cpc	r21, r1
     acc:	29 f0       	breq	.+10     	; 0xad8 <zoMotorSet+0x24>
     ace:	20 f0       	brcs	.+8      	; 0xad8 <zoMotorSet+0x24>
     ad0:	2f ef       	ldi	r18, 0xFF	; 255
     ad2:	30 e0       	ldi	r19, 0x00	; 0
     ad4:	40 e0       	ldi	r20, 0x00	; 0
     ad6:	50 e0       	ldi	r21, 0x00	; 0

	if(pwmDuty >= 0)
     ad8:	97 fd       	sbrc	r25, 7
     ada:	04 c0       	rjmp	.+8      	; 0xae4 <zoMotorSet+0x30>
	{
		OCR0B = ocrReg;
     adc:	28 bd       	out	0x28, r18	; 40
		OCR2B = 0x00;		//constantly high
     ade:	10 92 b4 00 	sts	0x00B4, r1
     ae2:	08 95       	ret
	}
	else
	{
		OCR0B = 0x00;		//constantly high
     ae4:	18 bc       	out	0x28, r1	; 40
		OCR2B = ocrReg;
     ae6:	20 93 b4 00 	sts	0x00B4, r18
     aea:	08 95       	ret
void zoMotorSet(s32 pwmDuty)
{
	u08 ocrReg;
	u32 pwmDutyAbsolute;

	pwmDutyAbsolute = labs(pwmDuty);	//compute absolute value of motor command
     aec:	22 27       	eor	r18, r18
     aee:	33 27       	eor	r19, r19
     af0:	a9 01       	movw	r20, r18
     af2:	26 1b       	sub	r18, r22
     af4:	37 0b       	sbc	r19, r23
     af6:	48 0b       	sbc	r20, r24
     af8:	59 0b       	sbc	r21, r25
     afa:	e0 cf       	rjmp	.-64     	; 0xabc <zoMotorSet+0x8>

00000afc <zoMotorSetState>:
		OCR2B = ocrReg;
	}
}

void zoMotorSetState(bool onOff)
{
     afc:	1f 93       	push	r17
     afe:	18 2f       	mov	r17, r24
	if(onOff)
     b00:	88 23       	and	r24, r24
     b02:	81 f4       	brne	.+32     	; 0xb24 <zoMotorSetState+0x28>
		PORTD |= _BV(PORT4);
	else
		PORTD &= ~_BV(PORT4);
     b04:	5c 98       	cbi	0x0b, 4	; 11

	zoMotorSet(0);
     b06:	60 e0       	ldi	r22, 0x00	; 0
     b08:	70 e0       	ldi	r23, 0x00	; 0
     b0a:	80 e0       	ldi	r24, 0x00	; 0
     b0c:	90 e0       	ldi	r25, 0x00	; 0
     b0e:	0e 94 5a 05 	call	0xab4	; 0xab4 <zoMotorSet>
	enterCritical();
     b12:	0f b6       	in	r0, 0x3f	; 63
     b14:	0f 92       	push	r0
     b16:	f8 94       	cli
	MotorState = onOff;
     b18:	10 93 95 01 	sts	0x0195, r17
	exitCritical();
     b1c:	0f 90       	pop	r0
     b1e:	0f be       	out	0x3f, r0	; 63
}
     b20:	1f 91       	pop	r17
     b22:	08 95       	ret
}

void zoMotorSetState(bool onOff)
{
	if(onOff)
		PORTD |= _BV(PORT4);
     b24:	5c 9a       	sbi	0x0b, 4	; 11
     b26:	ef cf       	rjmp	.-34     	; 0xb06 <zoMotorSetState+0xa>

00000b28 <zoMotorGetState>:

bool zoMotorGetState(void)
{
	bool state;

	enterCritical();
     b28:	0f b6       	in	r0, 0x3f	; 63
     b2a:	0f 92       	push	r0
     b2c:	f8 94       	cli
	state = MotorState;
     b2e:	80 91 95 01 	lds	r24, 0x0195
	exitCritical();
     b32:	0f 90       	pop	r0
     b34:	0f be       	out	0x3f, r0	; 63

	return state;
}
     b36:	08 95       	ret

00000b38 <__vector_16>:

ISR(TIMER0_OVF_vect)
{
     b38:	1f 92       	push	r1
     b3a:	0f 92       	push	r0
     b3c:	0f b6       	in	r0, 0x3f	; 63
     b3e:	0f 92       	push	r0
     b40:	11 24       	eor	r1, r1
     b42:	2f 93       	push	r18
     b44:	3f 93       	push	r19
     b46:	4f 93       	push	r20
     b48:	5f 93       	push	r21
     b4a:	6f 93       	push	r22
     b4c:	7f 93       	push	r23
     b4e:	8f 93       	push	r24
     b50:	9f 93       	push	r25
     b52:	af 93       	push	r26
     b54:	bf 93       	push	r27
     b56:	ef 93       	push	r30
     b58:	ff 93       	push	r31
	if( NoOfTimer0OverFlowIsrEntries++ >= TIMER_0_OVERFLOWS_FOR_CONTROL_LOOP )
     b5a:	80 91 91 01 	lds	r24, 0x0191
     b5e:	90 91 92 01 	lds	r25, 0x0192
     b62:	01 96       	adiw	r24, 0x01	; 1
     b64:	90 93 92 01 	sts	0x0192, r25
     b68:	80 93 91 01 	sts	0x0191, r24
     b6c:	01 97       	sbiw	r24, 0x01	; 1
     b6e:	09 97       	sbiw	r24, 0x09	; 9
     b70:	48 f0       	brcs	.+18     	; 0xb84 <__vector_16+0x4c>
	{
		timedEventHandler();
     b72:	e0 91 93 01 	lds	r30, 0x0193
     b76:	f0 91 94 01 	lds	r31, 0x0194
     b7a:	09 95       	icall
		NoOfTimer0OverFlowIsrEntries = 0;
     b7c:	10 92 92 01 	sts	0x0192, r1
     b80:	10 92 91 01 	sts	0x0191, r1
	}
     b84:	ff 91       	pop	r31
     b86:	ef 91       	pop	r30
     b88:	bf 91       	pop	r27
     b8a:	af 91       	pop	r26
     b8c:	9f 91       	pop	r25
     b8e:	8f 91       	pop	r24
     b90:	7f 91       	pop	r23
     b92:	6f 91       	pop	r22
     b94:	5f 91       	pop	r21
     b96:	4f 91       	pop	r20
     b98:	3f 91       	pop	r19
     b9a:	2f 91       	pop	r18
     b9c:	0f 90       	pop	r0
     b9e:	0f be       	out	0x3f, r0	; 63
     ba0:	0f 90       	pop	r0
     ba2:	1f 90       	pop	r1
     ba4:	18 95       	reti

00000ba6 <zoPidDoPid>:
#include "zoPid.h"

void zoPidDoPid( struct ZO_PID *p )
{
     ba6:	6f 92       	push	r6
     ba8:	7f 92       	push	r7
     baa:	8f 92       	push	r8
     bac:	9f 92       	push	r9
     bae:	af 92       	push	r10
     bb0:	bf 92       	push	r11
     bb2:	cf 92       	push	r12
     bb4:	df 92       	push	r13
     bb6:	ef 92       	push	r14
     bb8:	ff 92       	push	r15
     bba:	0f 93       	push	r16
     bbc:	1f 93       	push	r17
     bbe:	cf 93       	push	r28
     bc0:	df 93       	push	r29
     bc2:	ec 01       	movw	r28, r24
	p->PrevError = p->Error;						//store previous error
     bc4:	8e 81       	ldd	r24, Y+6	; 0x06
     bc6:	9f 81       	ldd	r25, Y+7	; 0x07
     bc8:	a8 85       	ldd	r26, Y+8	; 0x08
     bca:	b9 85       	ldd	r27, Y+9	; 0x09
     bcc:	8a 87       	std	Y+10, r24	; 0x0a
     bce:	9b 87       	std	Y+11, r25	; 0x0b
     bd0:	ac 87       	std	Y+12, r26	; 0x0c
     bd2:	bd 87       	std	Y+13, r27	; 0x0d
	p->Error = p->getFeedBack() - p->SetPoint;		//calculate error
     bd4:	ee 8d       	ldd	r30, Y+30	; 0x1e
     bd6:	ff 8d       	ldd	r31, Y+31	; 0x1f
     bd8:	09 95       	icall
     bda:	2e 89       	ldd	r18, Y+22	; 0x16
     bdc:	3f 89       	ldd	r19, Y+23	; 0x17
     bde:	48 8d       	ldd	r20, Y+24	; 0x18
     be0:	59 8d       	ldd	r21, Y+25	; 0x19
     be2:	62 1b       	sub	r22, r18
     be4:	73 0b       	sbc	r23, r19
     be6:	84 0b       	sbc	r24, r20
     be8:	95 0b       	sbc	r25, r21
     bea:	6e 83       	std	Y+6, r22	; 0x06
     bec:	7f 83       	std	Y+7, r23	; 0x07
     bee:	88 87       	std	Y+8, r24	; 0x08
     bf0:	99 87       	std	Y+9, r25	; 0x09
	p->Integral += p->Error;							//integration
     bf2:	2e 85       	ldd	r18, Y+14	; 0x0e
     bf4:	3f 85       	ldd	r19, Y+15	; 0x0f
     bf6:	48 89       	ldd	r20, Y+16	; 0x10
     bf8:	59 89       	ldd	r21, Y+17	; 0x11
     bfa:	26 0f       	add	r18, r22
     bfc:	37 1f       	adc	r19, r23
     bfe:	48 1f       	adc	r20, r24
     c00:	59 1f       	adc	r21, r25
     c02:	2e 87       	std	Y+14, r18	; 0x0e
     c04:	3f 87       	std	Y+15, r19	; 0x0f
     c06:	48 8b       	std	Y+16, r20	; 0x10
     c08:	59 8b       	std	Y+17, r21	; 0x11

 	if( p->Integral > p->AntiWindUp )					//anti wind-up implementation
     c0a:	8a 89       	ldd	r24, Y+18	; 0x12
     c0c:	9b 89       	ldd	r25, Y+19	; 0x13
     c0e:	ac 89       	ldd	r26, Y+20	; 0x14
     c10:	bd 89       	ldd	r27, Y+21	; 0x15
     c12:	82 17       	cp	r24, r18
     c14:	93 07       	cpc	r25, r19
     c16:	a4 07       	cpc	r26, r20
     c18:	b5 07       	cpc	r27, r21
     c1a:	34 f4       	brge	.+12     	; 0xc28 <zoPidDoPid+0x82>
 		p->Integral = p->AntiWindUp;
     c1c:	8e 87       	std	Y+14, r24	; 0x0e
     c1e:	9f 87       	std	Y+15, r25	; 0x0f
     c20:	a8 8b       	std	Y+16, r26	; 0x10
     c22:	b9 8b       	std	Y+17, r27	; 0x11
     c24:	9c 01       	movw	r18, r24
     c26:	ad 01       	movw	r20, r26
 	if( p->Integral < (- p->AntiWindUp) )
     c28:	66 24       	eor	r6, r6
     c2a:	77 24       	eor	r7, r7
     c2c:	43 01       	movw	r8, r6
     c2e:	68 1a       	sub	r6, r24
     c30:	79 0a       	sbc	r7, r25
     c32:	8a 0a       	sbc	r8, r26
     c34:	9b 0a       	sbc	r9, r27
     c36:	26 15       	cp	r18, r6
     c38:	37 05       	cpc	r19, r7
     c3a:	48 05       	cpc	r20, r8
     c3c:	59 05       	cpc	r21, r9
     c3e:	0c f0       	brlt	.+2      	; 0xc42 <zoPidDoPid+0x9c>
     c40:	4c c0       	rjmp	.+152    	; 0xcda <zoPidDoPid+0x134>
 		p->Integral = (-p->AntiWindUp);
     c42:	6e 86       	std	Y+14, r6	; 0x0e
     c44:	7f 86       	std	Y+15, r7	; 0x0f
     c46:	88 8a       	std	Y+16, r8	; 0x10
     c48:	99 8a       	std	Y+17, r9	; 0x11

	p->setActuator(( ((s32)p->GainP * p->Error + 
     c4a:	ae 80       	ldd	r10, Y+6	; 0x06
     c4c:	bf 80       	ldd	r11, Y+7	; 0x07
     c4e:	c8 84       	ldd	r12, Y+8	; 0x08
     c50:	d9 84       	ldd	r13, Y+9	; 0x09
     c52:	8a 85       	ldd	r24, Y+10	; 0x0a
     c54:	9b 85       	ldd	r25, Y+11	; 0x0b
     c56:	ac 85       	ldd	r26, Y+12	; 0x0c
     c58:	bd 85       	ldd	r27, Y+13	; 0x0d
     c5a:	a6 01       	movw	r20, r12
     c5c:	95 01       	movw	r18, r10
     c5e:	28 1b       	sub	r18, r24
     c60:	39 0b       	sbc	r19, r25
     c62:	4a 0b       	sbc	r20, r26
     c64:	5b 0b       	sbc	r21, r27
     c66:	ca 01       	movw	r24, r20
     c68:	b9 01       	movw	r22, r18
     c6a:	2c 81       	ldd	r18, Y+4	; 0x04
     c6c:	3d 81       	ldd	r19, Y+5	; 0x05
     c6e:	40 e0       	ldi	r20, 0x00	; 0
     c70:	50 e0       	ldi	r21, 0x00	; 0
     c72:	0e 94 08 25 	call	0x4a10	; 0x4a10 <__mulsi3>
     c76:	7b 01       	movw	r14, r22
     c78:	8c 01       	movw	r16, r24
     c7a:	68 81       	ld	r22, Y
     c7c:	79 81       	ldd	r23, Y+1	; 0x01
     c7e:	80 e0       	ldi	r24, 0x00	; 0
     c80:	90 e0       	ldi	r25, 0x00	; 0
     c82:	a6 01       	movw	r20, r12
     c84:	95 01       	movw	r18, r10
     c86:	0e 94 08 25 	call	0x4a10	; 0x4a10 <__mulsi3>
     c8a:	e6 0e       	add	r14, r22
     c8c:	f7 1e       	adc	r15, r23
     c8e:	08 1f       	adc	r16, r24
     c90:	19 1f       	adc	r17, r25
     c92:	2a 81       	ldd	r18, Y+2	; 0x02
     c94:	3b 81       	ldd	r19, Y+3	; 0x03
     c96:	40 e0       	ldi	r20, 0x00	; 0
     c98:	50 e0       	ldi	r21, 0x00	; 0
     c9a:	c4 01       	movw	r24, r8
     c9c:	b3 01       	movw	r22, r6
     c9e:	0e 94 08 25 	call	0x4a10	; 0x4a10 <__mulsi3>
     ca2:	67 2f       	mov	r22, r23
     ca4:	78 2f       	mov	r23, r24
     ca6:	89 2f       	mov	r24, r25
     ca8:	99 27       	eor	r25, r25
     caa:	87 fd       	sbrc	r24, 7
     cac:	9a 95       	dec	r25
     cae:	6e 0d       	add	r22, r14
     cb0:	7f 1d       	adc	r23, r15
     cb2:	80 1f       	adc	r24, r16
     cb4:	91 1f       	adc	r25, r17
     cb6:	ec 8d       	ldd	r30, Y+28	; 0x1c
     cb8:	fd 8d       	ldd	r31, Y+29	; 0x1d
     cba:	09 95       	icall
				     (((s32)p->GainI * p->Integral)>>8) ) 
				   ));	//write actuator using user provided function
	
	//the >>8 is to compensate for the control loop frequency
	//division is not used to optimize execution speed
     cbc:	df 91       	pop	r29
     cbe:	cf 91       	pop	r28
     cc0:	1f 91       	pop	r17
     cc2:	0f 91       	pop	r16
     cc4:	ff 90       	pop	r15
     cc6:	ef 90       	pop	r14
     cc8:	df 90       	pop	r13
     cca:	cf 90       	pop	r12
     ccc:	bf 90       	pop	r11
     cce:	af 90       	pop	r10
     cd0:	9f 90       	pop	r9
     cd2:	8f 90       	pop	r8
     cd4:	7f 90       	pop	r7
     cd6:	6f 90       	pop	r6
     cd8:	08 95       	ret
	p->Error = p->getFeedBack() - p->SetPoint;		//calculate error
	p->Integral += p->Error;							//integration

 	if( p->Integral > p->AntiWindUp )					//anti wind-up implementation
 		p->Integral = p->AntiWindUp;
 	if( p->Integral < (- p->AntiWindUp) )
     cda:	39 01       	movw	r6, r18
     cdc:	4a 01       	movw	r8, r20
     cde:	b5 cf       	rjmp	.-150    	; 0xc4a <zoPidDoPid+0xa4>

00000ce0 <zoSmsPinsInit>:
	//PB2: ENC_B	: B channel of encoder, pull up enabled
	//PB3: DIO2		: Digitl IO 2 initialized as input
	//PB4: DIO3		: Digitl IO 2 initialized as input
	//PB5: DIO4		: Digitl IO 2 initialized as input
	
	DDRB = 0x04;
     ce0:	84 e0       	ldi	r24, 0x04	; 4
     ce2:	84 b9       	out	0x04, r24	; 4
	PORTB |= 0x3E;	
     ce4:	85 b1       	in	r24, 0x05	; 5
     ce6:	8e 63       	ori	r24, 0x3E	; 62
     ce8:	85 b9       	out	0x05, r24	; 5
	//PC4: SDA		: I2C data, configured as input, pull-up enabled
	//PC5: SCL		: I2C clock, configured as input, pull-up enabled
	//PC6: NOT USED
	//PC7: NOT USED

	DDRC = 0x00;
     cea:	17 b8       	out	0x07, r1	; 7
	PORTC |= 0x30;
     cec:	88 b1       	in	r24, 0x08	; 8
     cee:	80 63       	ori	r24, 0x30	; 48
     cf0:	88 b9       	out	0x08, r24	; 8
	//PD5: PWM1		: PWM2 output to motor driver
	//PD6: FAULT\	: Active low fault input from motor driver (not used with MCP17511), 
	//				  pull-up enabled
	//PD7: DIO1		: Digital IO, initially configured as input

	DDRD = 0x3E;
     cf2:	8e e3       	ldi	r24, 0x3E	; 62
     cf4:	8a b9       	out	0x0a, r24	; 10
	PORTD = 0xC1;
     cf6:	81 ec       	ldi	r24, 0xC1	; 193
     cf8:	8b b9       	out	0x0b, r24	; 11
}
     cfa:	08 95       	ret

00000cfc <accelerationCompleteCriterion>:
	return(  0.5 * square(Sms.Profile.VelocityDeltaPos) / 
		((double)(Sms.Profile.TargetPosition - zoEncoderGetPos())));
}

bool inline accelerationCompleteCriterion(void)
{
     cfc:	af 92       	push	r10
     cfe:	bf 92       	push	r11
     d00:	cf 92       	push	r12
     d02:	df 92       	push	r13
     d04:	ef 92       	push	r14
     d06:	ff 92       	push	r15
     d08:	0f 93       	push	r16
     d0a:	1f 93       	push	r17
	return (( (s32)((Sms.Profile.LastVelocityDeltaPos - Sms.Profile.TargetVelDeltaPos) *
     d0c:	e0 90 1c 01 	lds	r14, 0x011C
     d10:	f0 90 1d 01 	lds	r15, 0x011D
     d14:	00 91 1e 01 	lds	r16, 0x011E
     d18:	10 91 1f 01 	lds	r17, 0x011F
     d1c:	60 91 24 01 	lds	r22, 0x0124
     d20:	70 91 25 01 	lds	r23, 0x0125
     d24:	80 91 26 01 	lds	r24, 0x0126
     d28:	90 91 27 01 	lds	r25, 0x0127
     d2c:	a8 01       	movw	r20, r16
     d2e:	97 01       	movw	r18, r14
     d30:	0e 94 bf 22 	call	0x457e	; 0x457e <__subsf3>
     d34:	5b 01       	movw	r10, r22
     d36:	6c 01       	movw	r12, r24
     d38:	60 91 20 01 	lds	r22, 0x0120
     d3c:	70 91 21 01 	lds	r23, 0x0121
     d40:	80 91 22 01 	lds	r24, 0x0122
     d44:	90 91 23 01 	lds	r25, 0x0123
     d48:	a8 01       	movw	r20, r16
     d4a:	97 01       	movw	r18, r14
     d4c:	0e 94 bf 22 	call	0x457e	; 0x457e <__subsf3>
     d50:	9b 01       	movw	r18, r22
     d52:	ac 01       	movw	r20, r24
     d54:	c6 01       	movw	r24, r12
     d56:	b5 01       	movw	r22, r10
     d58:	0e 94 4b 24 	call	0x4896	; 0x4896 <__mulsf3>
     d5c:	20 91 04 01 	lds	r18, 0x0104
     d60:	30 91 05 01 	lds	r19, 0x0105
     d64:	40 91 06 01 	lds	r20, 0x0106
     d68:	50 91 07 01 	lds	r21, 0x0107
     d6c:	0e 94 4b 24 	call	0x4896	; 0x4896 <__mulsf3>
     d70:	0e 94 8c 23 	call	0x4718	; 0x4718 <__fixsfsi>
     d74:	16 16       	cp	r1, r22
     d76:	17 06       	cpc	r1, r23
     d78:	18 06       	cpc	r1, r24
     d7a:	19 06       	cpc	r1, r25
     d7c:	54 f4       	brge	.+20     	; 0xd92 <accelerationCompleteCriterion+0x96>
     d7e:	80 e0       	ldi	r24, 0x00	; 0
		     (Sms.Profile.VelocityDeltaPos - Sms.Profile.TargetVelDeltaPos)*Sms.Control.LoopHz) > 0 )?
		     FALSE:TRUE);
}
     d80:	1f 91       	pop	r17
     d82:	0f 91       	pop	r16
     d84:	ff 90       	pop	r15
     d86:	ef 90       	pop	r14
     d88:	df 90       	pop	r13
     d8a:	cf 90       	pop	r12
     d8c:	bf 90       	pop	r11
     d8e:	af 90       	pop	r10
     d90:	08 95       	ret
		((double)(Sms.Profile.TargetPosition - zoEncoderGetPos())));
}

bool inline accelerationCompleteCriterion(void)
{
	return (( (s32)((Sms.Profile.LastVelocityDeltaPos - Sms.Profile.TargetVelDeltaPos) *
     d92:	8f ef       	ldi	r24, 0xFF	; 255
     d94:	f5 cf       	rjmp	.-22     	; 0xd80 <accelerationCompleteCriterion+0x84>

00000d96 <positionReachedCriterion>:
	return (( labs(zoEncoderGetPos() - Sms.Profile.DeccelerationKnee) >= 2 )?FALSE:TRUE);
}

bool inline positionReachedCriterion(void)
{
	return (( labs(zoEncoderGetPos() - Sms.Profile.TargetPosition) >= 2 )?FALSE:TRUE);
     d96:	0e 94 36 04 	call	0x86c	; 0x86c <zoEncoderGetPos>
     d9a:	9b 01       	movw	r18, r22
     d9c:	ac 01       	movw	r20, r24
     d9e:	80 91 34 01 	lds	r24, 0x0134
     da2:	90 91 35 01 	lds	r25, 0x0135
     da6:	a0 91 36 01 	lds	r26, 0x0136
     daa:	b0 91 37 01 	lds	r27, 0x0137
     dae:	28 1b       	sub	r18, r24
     db0:	39 0b       	sbc	r19, r25
     db2:	4a 0b       	sbc	r20, r26
     db4:	5b 0b       	sbc	r21, r27
     db6:	57 fd       	sbrc	r21, 7
     db8:	07 c0       	rjmp	.+14     	; 0xdc8 <positionReachedCriterion+0x32>
     dba:	22 30       	cpi	r18, 0x02	; 2
     dbc:	31 05       	cpc	r19, r1
     dbe:	41 05       	cpc	r20, r1
     dc0:	51 05       	cpc	r21, r1
     dc2:	74 f0       	brlt	.+28     	; 0xde0 <positionReachedCriterion+0x4a>
     dc4:	80 e0       	ldi	r24, 0x00	; 0
}
     dc6:	08 95       	ret
	return (( labs(zoEncoderGetPos() - Sms.Profile.DeccelerationKnee) >= 2 )?FALSE:TRUE);
}

bool inline positionReachedCriterion(void)
{
	return (( labs(zoEncoderGetPos() - Sms.Profile.TargetPosition) >= 2 )?FALSE:TRUE);
     dc8:	50 95       	com	r21
     dca:	40 95       	com	r20
     dcc:	30 95       	com	r19
     dce:	21 95       	neg	r18
     dd0:	3f 4f       	sbci	r19, 0xFF	; 255
     dd2:	4f 4f       	sbci	r20, 0xFF	; 255
     dd4:	5f 4f       	sbci	r21, 0xFF	; 255
     dd6:	22 30       	cpi	r18, 0x02	; 2
     dd8:	31 05       	cpc	r19, r1
     dda:	41 05       	cpc	r20, r1
     ddc:	51 05       	cpc	r21, r1
     dde:	94 f7       	brge	.-28     	; 0xdc4 <positionReachedCriterion+0x2e>
     de0:	8f ef       	ldi	r24, 0xFF	; 255
     de2:	08 95       	ret

00000de4 <constantVelocityCompletedCriterion>:
		     FALSE:TRUE);
}

bool inline constantVelocityCompletedCriterion(void)
{
	return (( labs(zoEncoderGetPos() - Sms.Profile.DeccelerationKnee) >= 2 )?FALSE:TRUE);
     de4:	0e 94 36 04 	call	0x86c	; 0x86c <zoEncoderGetPos>
     de8:	9b 01       	movw	r18, r22
     dea:	ac 01       	movw	r20, r24
     dec:	80 91 30 01 	lds	r24, 0x0130
     df0:	90 91 31 01 	lds	r25, 0x0131
     df4:	a0 91 32 01 	lds	r26, 0x0132
     df8:	b0 91 33 01 	lds	r27, 0x0133
     dfc:	28 1b       	sub	r18, r24
     dfe:	39 0b       	sbc	r19, r25
     e00:	4a 0b       	sbc	r20, r26
     e02:	5b 0b       	sbc	r21, r27
     e04:	57 fd       	sbrc	r21, 7
     e06:	07 c0       	rjmp	.+14     	; 0xe16 <constantVelocityCompletedCriterion+0x32>
     e08:	22 30       	cpi	r18, 0x02	; 2
     e0a:	31 05       	cpc	r19, r1
     e0c:	41 05       	cpc	r20, r1
     e0e:	51 05       	cpc	r21, r1
     e10:	74 f0       	brlt	.+28     	; 0xe2e <constantVelocityCompletedCriterion+0x4a>
     e12:	80 e0       	ldi	r24, 0x00	; 0
}
     e14:	08 95       	ret
		     FALSE:TRUE);
}

bool inline constantVelocityCompletedCriterion(void)
{
	return (( labs(zoEncoderGetPos() - Sms.Profile.DeccelerationKnee) >= 2 )?FALSE:TRUE);
     e16:	50 95       	com	r21
     e18:	40 95       	com	r20
     e1a:	30 95       	com	r19
     e1c:	21 95       	neg	r18
     e1e:	3f 4f       	sbci	r19, 0xFF	; 255
     e20:	4f 4f       	sbci	r20, 0xFF	; 255
     e22:	5f 4f       	sbci	r21, 0xFF	; 255
     e24:	22 30       	cpi	r18, 0x02	; 2
     e26:	31 05       	cpc	r19, r1
     e28:	41 05       	cpc	r20, r1
     e2a:	51 05       	cpc	r21, r1
     e2c:	94 f7       	brge	.-28     	; 0xe12 <constantVelocityCompletedCriterion+0x2e>
     e2e:	8f ef       	ldi	r24, 0xFF	; 255
     e30:	08 95       	ret

00000e32 <deccelRecalc>:
	eeprom_write_byte((u08*)ZO_EEPROM_ADDRESS_LAM, ZO_DEFAULT_LAM);
	eeprom_write_byte((u08*)ZO_EEPROM_ADDRESS_ERROR_REPORTING_LVL, ZO_DEFAULT_ERROR_REPORTING_LVL);
}

double inline deccelRecalc(void)
{
     e32:	6f 92       	push	r6
     e34:	7f 92       	push	r7
     e36:	8f 92       	push	r8
     e38:	9f 92       	push	r9
     e3a:	af 92       	push	r10
     e3c:	bf 92       	push	r11
     e3e:	cf 92       	push	r12
     e40:	df 92       	push	r13
     e42:	ef 92       	push	r14
     e44:	ff 92       	push	r15
     e46:	0f 93       	push	r16
     e48:	1f 93       	push	r17
	return(  0.5 * square(Sms.Profile.VelocityDeltaPos) / 
     e4a:	60 91 20 01 	lds	r22, 0x0120
     e4e:	70 91 21 01 	lds	r23, 0x0121
     e52:	80 91 22 01 	lds	r24, 0x0122
     e56:	90 91 23 01 	lds	r25, 0x0123
     e5a:	0e 94 f0 24 	call	0x49e0	; 0x49e0 <square>
     e5e:	5b 01       	movw	r10, r22
     e60:	6c 01       	movw	r12, r24
     e62:	e0 90 34 01 	lds	r14, 0x0134
     e66:	f0 90 35 01 	lds	r15, 0x0135
     e6a:	00 91 36 01 	lds	r16, 0x0136
     e6e:	10 91 37 01 	lds	r17, 0x0137
     e72:	0e 94 36 04 	call	0x86c	; 0x86c <zoEncoderGetPos>
     e76:	3b 01       	movw	r6, r22
     e78:	4c 01       	movw	r8, r24
     e7a:	c6 01       	movw	r24, r12
     e7c:	b5 01       	movw	r22, r10
     e7e:	20 e0       	ldi	r18, 0x00	; 0
     e80:	30 e0       	ldi	r19, 0x00	; 0
     e82:	40 e0       	ldi	r20, 0x00	; 0
     e84:	5f e3       	ldi	r21, 0x3F	; 63
     e86:	0e 94 4b 24 	call	0x4896	; 0x4896 <__mulsf3>
     e8a:	5b 01       	movw	r10, r22
     e8c:	6c 01       	movw	r12, r24
     e8e:	e6 18       	sub	r14, r6
     e90:	f7 08       	sbc	r15, r7
     e92:	08 09       	sbc	r16, r8
     e94:	19 09       	sbc	r17, r9
     e96:	c8 01       	movw	r24, r16
     e98:	b7 01       	movw	r22, r14
     e9a:	0e 94 bf 23 	call	0x477e	; 0x477e <__floatsisf>
     e9e:	9b 01       	movw	r18, r22
     ea0:	ac 01       	movw	r20, r24
     ea2:	c6 01       	movw	r24, r12
     ea4:	b5 01       	movw	r22, r10
     ea6:	0e 94 24 23 	call	0x4648	; 0x4648 <__divsf3>
		((double)(Sms.Profile.TargetPosition - zoEncoderGetPos())));
}
     eaa:	1f 91       	pop	r17
     eac:	0f 91       	pop	r16
     eae:	ff 90       	pop	r15
     eb0:	ef 90       	pop	r14
     eb2:	df 90       	pop	r13
     eb4:	cf 90       	pop	r12
     eb6:	bf 90       	pop	r11
     eb8:	af 90       	pop	r10
     eba:	9f 90       	pop	r9
     ebc:	8f 90       	pop	r8
     ebe:	7f 90       	pop	r7
     ec0:	6f 90       	pop	r6
     ec2:	08 95       	ret

00000ec4 <zoSmsRestoreDefaults>:
	Sms.Settings.errorReportingLevel = eeprom_read_byte((u08*)ZO_EEPROM_ADDRESS_ERROR_REPORTING_LVL);
}

void zoSmsRestoreDefaults(void)
{
	eeprom_write_byte((u08*)ZO_EEPROM_ADDRESS_NODE_ID, ZO_DEFAULT_NODE_ID);
     ec4:	80 e0       	ldi	r24, 0x00	; 0
     ec6:	90 e0       	ldi	r25, 0x00	; 0
     ec8:	64 e0       	ldi	r22, 0x04	; 4
     eca:	0e 94 b4 26 	call	0x4d68	; 0x4d68 <__eewr_byte_m328p>
	eeprom_write_word((u16*)ZO_EEPROM_ADDRESS_GAIN_P, ZO_DEFAULT_GAIN_P);
     ece:	80 e1       	ldi	r24, 0x10	; 16
     ed0:	90 e0       	ldi	r25, 0x00	; 0
     ed2:	60 ea       	ldi	r22, 0xA0	; 160
     ed4:	7f e0       	ldi	r23, 0x0F	; 15
     ed6:	0e 94 ca 26 	call	0x4d94	; 0x4d94 <__eewr_word_m328p>
	eeprom_write_word((u16*)ZO_EEPROM_ADDRESS_GAIN_I, ZO_DEFAULT_GAIN_I);
     eda:	80 e2       	ldi	r24, 0x20	; 32
     edc:	90 e0       	ldi	r25, 0x00	; 0
     ede:	64 e6       	ldi	r22, 0x64	; 100
     ee0:	70 e0       	ldi	r23, 0x00	; 0
     ee2:	0e 94 ca 26 	call	0x4d94	; 0x4d94 <__eewr_word_m328p>
	eeprom_write_word((u16*)ZO_EEPROM_ADDRESS_GAIN_D, ZO_DEFAULT_GAIN_D);
     ee6:	80 e3       	ldi	r24, 0x30	; 48
     ee8:	90 e0       	ldi	r25, 0x00	; 0
     eea:	68 ee       	ldi	r22, 0xE8	; 232
     eec:	73 e0       	ldi	r23, 0x03	; 3
     eee:	0e 94 ca 26 	call	0x4d94	; 0x4d94 <__eewr_word_m328p>
	eeprom_write_word((u16*)ZO_EEPROM_ADDRESS_CURRENT_LIMIT, ZO_DEFAULT_CURRENT_LIMIT);
     ef2:	80 e4       	ldi	r24, 0x40	; 64
     ef4:	90 e0       	ldi	r25, 0x00	; 0
     ef6:	68 e8       	ldi	r22, 0x88	; 136
     ef8:	73 e1       	ldi	r23, 0x13	; 19
     efa:	0e 94 ca 26 	call	0x4d94	; 0x4d94 <__eewr_word_m328p>
	eeprom_write_word((u16*)ZO_EEPROM_ADDRESS_CURRENT_LIMIT_DURATION, ZO_DEFAULT_CURRENT_LIMIT_DURATION);
     efe:	80 e5       	ldi	r24, 0x50	; 80
     f00:	90 e0       	ldi	r25, 0x00	; 0
     f02:	68 e8       	ldi	r22, 0x88	; 136
     f04:	73 e1       	ldi	r23, 0x13	; 19
     f06:	0e 94 ca 26 	call	0x4d94	; 0x4d94 <__eewr_word_m328p>
	eeprom_write_byte((u08*)ZO_EEPROM_ADDRESS_DIGITAL_IO_CONFIG, ZO_DEFAULT_DIGITAL_IO_CONFIG);
     f0a:	80 e8       	ldi	r24, 0x80	; 128
     f0c:	90 e0       	ldi	r25, 0x00	; 0
     f0e:	60 e0       	ldi	r22, 0x00	; 0
     f10:	0e 94 b4 26 	call	0x4d68	; 0x4d68 <__eewr_byte_m328p>
	eeprom_write_dword((u32*)ZO_EEPROM_ADDRESS_BAUD_UART, ZO_DEFAULT_BAUD_UART);
     f14:	80 ea       	ldi	r24, 0xA0	; 160
     f16:	90 e0       	ldi	r25, 0x00	; 0
     f18:	40 e0       	ldi	r20, 0x00	; 0
     f1a:	52 ec       	ldi	r21, 0xC2	; 194
     f1c:	61 e0       	ldi	r22, 0x01	; 1
     f1e:	70 e0       	ldi	r23, 0x00	; 0
     f20:	0e 94 c2 26 	call	0x4d84	; 0x4d84 <__eewr_dword_m328p>
	eeprom_write_dword((u32*)ZO_EEPROM_ADDRESS_BAUD_I2C, ZO_DEFAULT_BAUD_I2C);
     f24:	80 e9       	ldi	r24, 0x90	; 144
     f26:	90 e0       	ldi	r25, 0x00	; 0
     f28:	40 ea       	ldi	r20, 0xA0	; 160
     f2a:	56 e8       	ldi	r21, 0x86	; 134
     f2c:	61 e0       	ldi	r22, 0x01	; 1
     f2e:	70 e0       	ldi	r23, 0x00	; 0
     f30:	0e 94 c2 26 	call	0x4d84	; 0x4d84 <__eewr_dword_m328p>
	eeprom_write_word((u16*)ZO_EEPROM_ADDRESS_PROFILE_ACCELERATION, ZO_DEFAULT_PROFILE_ACCELERATION);
     f34:	80 e6       	ldi	r24, 0x60	; 96
     f36:	90 e0       	ldi	r25, 0x00	; 0
     f38:	60 e2       	ldi	r22, 0x20	; 32
     f3a:	73 e0       	ldi	r23, 0x03	; 3
     f3c:	0e 94 ca 26 	call	0x4d94	; 0x4d94 <__eewr_word_m328p>
	eeprom_write_word((u16*)ZO_EEPROM_ADDRESS_PROFILE_VELOCITY, ZO_DEFAULT_PROFILE_VELOCITY);
     f40:	80 e7       	ldi	r24, 0x70	; 112
     f42:	90 e0       	ldi	r25, 0x00	; 0
     f44:	60 e2       	ldi	r22, 0x20	; 32
     f46:	73 e0       	ldi	r23, 0x03	; 3
     f48:	0e 94 ca 26 	call	0x4d94	; 0x4d94 <__eewr_word_m328p>
	eeprom_write_byte((u08*)ZO_EEPROM_ADDRESS_LAM, ZO_DEFAULT_LAM);
     f4c:	80 eb       	ldi	r24, 0xB0	; 176
     f4e:	90 e0       	ldi	r25, 0x00	; 0
     f50:	6f ef       	ldi	r22, 0xFF	; 255
     f52:	0e 94 b4 26 	call	0x4d68	; 0x4d68 <__eewr_byte_m328p>
	eeprom_write_byte((u08*)ZO_EEPROM_ADDRESS_ERROR_REPORTING_LVL, ZO_DEFAULT_ERROR_REPORTING_LVL);
     f56:	80 ec       	ldi	r24, 0xC0	; 192
     f58:	90 e0       	ldi	r25, 0x00	; 0
     f5a:	60 e0       	ldi	r22, 0x00	; 0
     f5c:	0e 94 b4 26 	call	0x4d68	; 0x4d68 <__eewr_byte_m328p>
}
     f60:	08 95       	ret

00000f62 <zoSmsInitSettingsFromEeprom>:
}


void zoSmsInitSettingsFromEeprom(void)
{
	Sms.Settings.NodeID = eeprom_read_byte((u08*)ZO_EEPROM_ADDRESS_NODE_ID);
     f62:	80 e0       	ldi	r24, 0x00	; 0
     f64:	90 e0       	ldi	r25, 0x00	; 0
     f66:	0e 94 a0 26 	call	0x4d40	; 0x4d40 <__eerd_byte_m328p>
     f6a:	80 93 08 01 	sts	0x0108, r24
	Sms.Pid.GainP = eeprom_read_word((u16*)ZO_EEPROM_ADDRESS_GAIN_P);
     f6e:	80 e1       	ldi	r24, 0x10	; 16
     f70:	90 e0       	ldi	r25, 0x00	; 0
     f72:	0e 94 ae 26 	call	0x4d5c	; 0x4d5c <__eerd_word_m328p>
     f76:	90 93 3e 01 	sts	0x013E, r25
     f7a:	80 93 3d 01 	sts	0x013D, r24
	Sms.Pid.GainI = eeprom_read_word((u16*)ZO_EEPROM_ADDRESS_GAIN_I);
     f7e:	80 e2       	ldi	r24, 0x20	; 32
     f80:	90 e0       	ldi	r25, 0x00	; 0
     f82:	0e 94 ae 26 	call	0x4d5c	; 0x4d5c <__eerd_word_m328p>
     f86:	90 93 40 01 	sts	0x0140, r25
     f8a:	80 93 3f 01 	sts	0x013F, r24
	Sms.Pid.GainD = eeprom_read_word((u16*)ZO_EEPROM_ADDRESS_GAIN_D);
     f8e:	80 e3       	ldi	r24, 0x30	; 48
     f90:	90 e0       	ldi	r25, 0x00	; 0
     f92:	0e 94 ae 26 	call	0x4d5c	; 0x4d5c <__eerd_word_m328p>
     f96:	90 93 42 01 	sts	0x0142, r25
     f9a:	80 93 41 01 	sts	0x0141, r24
	Sms.Settings.CurrentLimit = eeprom_read_word((u16*)ZO_EEPROM_ADDRESS_CURRENT_LIMIT);
     f9e:	80 e4       	ldi	r24, 0x40	; 64
     fa0:	90 e0       	ldi	r25, 0x00	; 0
     fa2:	0e 94 ae 26 	call	0x4d5c	; 0x4d5c <__eerd_word_m328p>
     fa6:	90 93 0b 01 	sts	0x010B, r25
     faa:	80 93 0a 01 	sts	0x010A, r24
	Sms.Settings.CurrentLimitDuration = eeprom_read_word((u16*)ZO_EEPROM_ADDRESS_CURRENT_LIMIT_DURATION);
     fae:	80 e5       	ldi	r24, 0x50	; 80
     fb0:	90 e0       	ldi	r25, 0x00	; 0
     fb2:	0e 94 ae 26 	call	0x4d5c	; 0x4d5c <__eerd_word_m328p>
     fb6:	90 93 0d 01 	sts	0x010D, r25
     fba:	80 93 0c 01 	sts	0x010C, r24
	Sms.Settings.DigitalIoConfig = eeprom_read_byte((u08*)ZO_EEPROM_ADDRESS_DIGITAL_IO_CONFIG);
     fbe:	80 e8       	ldi	r24, 0x80	; 128
     fc0:	90 e0       	ldi	r25, 0x00	; 0
     fc2:	0e 94 a0 26 	call	0x4d40	; 0x4d40 <__eerd_byte_m328p>
     fc6:	80 93 09 01 	sts	0x0109, r24
	Sms.Settings.BaudUart = eeprom_read_dword((u32*)ZO_EEPROM_ADDRESS_BAUD_UART);
     fca:	80 ea       	ldi	r24, 0xA0	; 160
     fcc:	90 e0       	ldi	r25, 0x00	; 0
     fce:	0e 94 a8 26 	call	0x4d50	; 0x4d50 <__eerd_dword_m328p>
     fd2:	60 93 0e 01 	sts	0x010E, r22
     fd6:	70 93 0f 01 	sts	0x010F, r23
     fda:	80 93 10 01 	sts	0x0110, r24
     fde:	90 93 11 01 	sts	0x0111, r25
	Sms.Settings.BaudI2C = eeprom_read_dword((u32*)ZO_EEPROM_ADDRESS_BAUD_I2C);
     fe2:	80 e9       	ldi	r24, 0x90	; 144
     fe4:	90 e0       	ldi	r25, 0x00	; 0
     fe6:	0e 94 a8 26 	call	0x4d50	; 0x4d50 <__eerd_dword_m328p>
     fea:	60 93 12 01 	sts	0x0112, r22
     fee:	70 93 13 01 	sts	0x0113, r23
     ff2:	80 93 14 01 	sts	0x0114, r24
     ff6:	90 93 15 01 	sts	0x0115, r25
	Sms.Profile.DesiredAcceleration = eeprom_read_word((u16*)ZO_EEPROM_ADDRESS_PROFILE_ACCELERATION);
     ffa:	80 e6       	ldi	r24, 0x60	; 96
     ffc:	90 e0       	ldi	r25, 0x00	; 0
     ffe:	0e 94 ae 26 	call	0x4d5c	; 0x4d5c <__eerd_word_m328p>
    1002:	90 93 39 01 	sts	0x0139, r25
    1006:	80 93 38 01 	sts	0x0138, r24
	Sms.Profile.DesiredVelocity = eeprom_read_word((u16*)ZO_EEPROM_ADDRESS_PROFILE_VELOCITY);
    100a:	80 e7       	ldi	r24, 0x70	; 112
    100c:	90 e0       	ldi	r25, 0x00	; 0
    100e:	0e 94 ae 26 	call	0x4d5c	; 0x4d5c <__eerd_word_m328p>
    1012:	90 93 3b 01 	sts	0x013B, r25
    1016:	80 93 3a 01 	sts	0x013A, r24
	Sms.Settings.localAcceptanceMask = eeprom_read_byte((u08*)ZO_EEPROM_ADDRESS_LAM);
    101a:	80 eb       	ldi	r24, 0xB0	; 176
    101c:	90 e0       	ldi	r25, 0x00	; 0
    101e:	0e 94 a0 26 	call	0x4d40	; 0x4d40 <__eerd_byte_m328p>
    1022:	80 93 16 01 	sts	0x0116, r24
	Sms.Settings.errorReportingLevel = eeprom_read_byte((u08*)ZO_EEPROM_ADDRESS_ERROR_REPORTING_LVL);
    1026:	80 ec       	ldi	r24, 0xC0	; 192
    1028:	90 e0       	ldi	r25, 0x00	; 0
    102a:	0e 94 a0 26 	call	0x4d40	; 0x4d40 <__eerd_byte_m328p>
    102e:	80 93 17 01 	sts	0x0117, r24
}
    1032:	08 95       	ret

00001034 <zoSmsInit>:
}

void zoSmsInit(void)
{
	//initialize MCU pins
	zoSmsPinsInit();
    1034:	0e 94 70 06 	call	0xce0	; 0xce0 <zoSmsPinsInit>

	//initialize motor. Also responsible for control loop timing.
	zoMotorInit();
    1038:	0e 94 14 05 	call	0xa28	; 0xa28 <zoMotorInit>
	zoMotorSetState(FALSE);
    103c:	80 e0       	ldi	r24, 0x00	; 0
    103e:	0e 94 7e 05 	call	0xafc	; 0xafc <zoMotorSetState>
	cli();	//disable interrupts during initialization
    1042:	f8 94       	cli

	//attach the control loop handler
	zoMotorSetTimedEventHandler(zoSmsControlLoop);
    1044:	88 e9       	ldi	r24, 0x98	; 152
    1046:	98 e0       	ldi	r25, 0x08	; 8
    1048:	0e 94 0f 05 	call	0xa1e	; 0xa1e <zoMotorSetTimedEventHandler>

	//initialize the encoder
	zoEncoderInit();
    104c:	0e 94 d1 04 	call	0x9a2	; 0x9a2 <zoEncoderInit>
	zoEncoderReset();
    1050:	0e 94 f9 03 	call	0x7f2	; 0x7f2 <zoEncoderReset>
	cli();
    1054:	f8 94       	cli

	//get all settings from eeprom
	zoSmsInitSettingsFromEeprom();
    1056:	0e 94 b1 07 	call	0xf62	; 0xf62 <zoSmsInitSettingsFromEeprom>
	
	//initialize other variables
	Sms.BufferdSetPoint.type = ZO_SMS_SETPOINT_NONE;
    105a:	10 92 5d 01 	sts	0x015D, r1
	Sms.Pid.Error = 0;
    105e:	10 92 43 01 	sts	0x0143, r1
    1062:	10 92 44 01 	sts	0x0144, r1
    1066:	10 92 45 01 	sts	0x0145, r1
    106a:	10 92 46 01 	sts	0x0146, r1
	Sms.Pid.PrevError = 0;
    106e:	10 92 47 01 	sts	0x0147, r1
    1072:	10 92 48 01 	sts	0x0148, r1
    1076:	10 92 49 01 	sts	0x0149, r1
    107a:	10 92 4a 01 	sts	0x014A, r1
	Sms.Pid.Integral = 0;
    107e:	10 92 4b 01 	sts	0x014B, r1
    1082:	10 92 4c 01 	sts	0x014C, r1
    1086:	10 92 4d 01 	sts	0x014D, r1
    108a:	10 92 4e 01 	sts	0x014E, r1
	Sms.Pid.SetPoint = 0;
    108e:	10 92 53 01 	sts	0x0153, r1
    1092:	10 92 54 01 	sts	0x0154, r1
    1096:	10 92 55 01 	sts	0x0155, r1
    109a:	10 92 56 01 	sts	0x0156, r1
	Sms.Pid.setActuator = zoMotorSet;
    109e:	8a e5       	ldi	r24, 0x5A	; 90
    10a0:	95 e0       	ldi	r25, 0x05	; 5
    10a2:	90 93 5a 01 	sts	0x015A, r25
    10a6:	80 93 59 01 	sts	0x0159, r24
	Sms.Pid.getFeedBack = zoEncoderGetPos;
    10aa:	86 e3       	ldi	r24, 0x36	; 54
    10ac:	94 e0       	ldi	r25, 0x04	; 4
    10ae:	90 93 5c 01 	sts	0x015C, r25
    10b2:	80 93 5b 01 	sts	0x015B, r24
	Sms.Pid.AntiWindUp = 0xFFFF/(Sms.Pid.GainP)*0xFF;
    10b6:	60 91 3d 01 	lds	r22, 0x013D
    10ba:	70 91 3e 01 	lds	r23, 0x013E
    10be:	8f ef       	ldi	r24, 0xFF	; 255
    10c0:	9f ef       	ldi	r25, 0xFF	; 255
    10c2:	0e 94 27 25 	call	0x4a4e	; 0x4a4e <__udivmodhi4>
    10c6:	96 2f       	mov	r25, r22
    10c8:	88 27       	eor	r24, r24
    10ca:	86 1b       	sub	r24, r22
    10cc:	97 0b       	sbc	r25, r23
    10ce:	a0 e0       	ldi	r26, 0x00	; 0
    10d0:	b0 e0       	ldi	r27, 0x00	; 0
    10d2:	80 93 4f 01 	sts	0x014F, r24
    10d6:	90 93 50 01 	sts	0x0150, r25
    10da:	a0 93 51 01 	sts	0x0151, r26
    10de:	b0 93 52 01 	sts	0x0152, r27
	Sms.Profile.VelocityDeltaPos = 0;
    10e2:	80 e0       	ldi	r24, 0x00	; 0
    10e4:	90 e0       	ldi	r25, 0x00	; 0
    10e6:	a0 e0       	ldi	r26, 0x00	; 0
    10e8:	b0 e0       	ldi	r27, 0x00	; 0
    10ea:	80 93 20 01 	sts	0x0120, r24
    10ee:	90 93 21 01 	sts	0x0121, r25
    10f2:	a0 93 22 01 	sts	0x0122, r26
    10f6:	b0 93 23 01 	sts	0x0123, r27
	Sms.Control.State = ZO_SMS_CONTROL_NO_CONTROL;
    10fa:	10 92 03 01 	sts	0x0103, r1
	
	zoSmsErrorInit();
    10fe:	0e 94 51 0b 	call	0x16a2	; 0x16a2 <zoSmsErrorInit>

	//TODO: think of another ADC scheme that takes less CPU power
	//now the adcisr runs at ~10KHz
	zoAdcInit();
    1102:	0e 94 e7 15 	call	0x2bce	; 0x2bce <zoAdcInit>
	cli();
    1106:	f8 94       	cli
	zoAdcSetTrigger(ZO_ADC_TRIGGER_FREE_RUNNING);
    1108:	80 e0       	ldi	r24, 0x00	; 0
    110a:	0e 94 2a 16 	call	0x2c54	; 0x2c54 <zoAdcSetTrigger>
	zoAdcChannelEnable(ZO_ADC_CHANNEL_0);
    110e:	80 e0       	ldi	r24, 0x00	; 0
    1110:	0e 94 3a 16 	call	0x2c74	; 0x2c74 <zoAdcChannelEnable>
	zoAdcChannelEnable(ZO_ADC_CHANNEL_1);
    1114:	81 e0       	ldi	r24, 0x01	; 1
    1116:	0e 94 3a 16 	call	0x2c74	; 0x2c74 <zoAdcChannelEnable>
	zoAdcChannelEnable(ZO_ADC_CHANNEL_2);
    111a:	82 e0       	ldi	r24, 0x02	; 2
    111c:	0e 94 3a 16 	call	0x2c74	; 0x2c74 <zoAdcChannelEnable>
	zoAdcChannelEnable(ZO_ADC_CHANNEL_3);
    1120:	83 e0       	ldi	r24, 0x03	; 3
    1122:	0e 94 3a 16 	call	0x2c74	; 0x2c74 <zoAdcChannelEnable>
	zoAdcChannelEnable(ZO_ADC_CHANNEL_7);
    1126:	87 e0       	ldi	r24, 0x07	; 7
    1128:	0e 94 3a 16 	call	0x2c74	; 0x2c74 <zoAdcChannelEnable>
	
	//initialize global interrupts -> go
	sei();
    112c:	78 94       	sei
}
    112e:	08 95       	ret

00001130 <zoSmsControlLoop>:
		 {ZO_SMS_SETPOINT_NONE,0}
		};


void zoSmsControlLoop(void)
{
    1130:	af 92       	push	r10
    1132:	bf 92       	push	r11
    1134:	cf 92       	push	r12
    1136:	df 92       	push	r13
    1138:	ef 92       	push	r14
    113a:	ff 92       	push	r15
    113c:	0f 93       	push	r16
    113e:	1f 93       	push	r17
	zoEncoderSetVel();
    1140:	0e 94 74 03 	call	0x6e8	; 0x6e8 <zoEncoderSetVel>
	
	if(Sms.Control.State == ZO_SMS_CONTROL_NO_CONTROL)
    1144:	80 91 03 01 	lds	r24, 0x0103
    1148:	88 23       	and	r24, r24
    114a:	79 f0       	breq	.+30     	; 0x116a <zoSmsControlLoop+0x3a>
		return;

	switch (Sms.Control.State)
    114c:	83 30       	cpi	r24, 0x03	; 3
    114e:	b1 f0       	breq	.+44     	; 0x117c <zoSmsControlLoop+0x4c>
    1150:	84 30       	cpi	r24, 0x04	; 4
    1152:	09 f4       	brne	.+2      	; 0x1156 <zoSmsControlLoop+0x26>
    1154:	ab c0       	rjmp	.+342    	; 0x12ac <zoSmsControlLoop+0x17c>
    1156:	82 30       	cpi	r24, 0x02	; 2
    1158:	09 f4       	brne	.+2      	; 0x115c <zoSmsControlLoop+0x2c>
    115a:	7c c0       	rjmp	.+248    	; 0x1254 <zoSmsControlLoop+0x124>

			case ZO_SMS_CONTROL_NO_CONTROL:	//Prevent compiler warning
				break;
	}

	Sms.Pid.doPID(&Sms.Pid);
    115c:	e0 91 57 01 	lds	r30, 0x0157
    1160:	f0 91 58 01 	lds	r31, 0x0158
    1164:	8d e3       	ldi	r24, 0x3D	; 61
    1166:	91 e0       	ldi	r25, 0x01	; 1
    1168:	09 95       	icall
}
    116a:	1f 91       	pop	r17
    116c:	0f 91       	pop	r16
    116e:	ff 90       	pop	r15
    1170:	ef 90       	pop	r14
    1172:	df 90       	pop	r13
    1174:	cf 90       	pop	r12
    1176:	bf 90       	pop	r11
    1178:	af 90       	pop	r10
    117a:	08 95       	ret
			Sms.Profile.PositionSetpoint += Sms.Profile.VelocityDeltaPos;
			Sms.Pid.SetPoint = (s32)Sms.Profile.PositionSetpoint;  
			break;

		case ZO_SMS_CONTROL_PROFILED_VELOCITY_CONTROL:
			Sms.Profile.LastVelocityDeltaPos = Sms.Profile.VelocityDeltaPos;
    117c:	e0 90 20 01 	lds	r14, 0x0120
    1180:	f0 90 21 01 	lds	r15, 0x0121
    1184:	00 91 22 01 	lds	r16, 0x0122
    1188:	10 91 23 01 	lds	r17, 0x0123
    118c:	e0 92 24 01 	sts	0x0124, r14
    1190:	f0 92 25 01 	sts	0x0125, r15
    1194:	00 93 26 01 	sts	0x0126, r16
    1198:	10 93 27 01 	sts	0x0127, r17
		((double)(Sms.Profile.TargetPosition - zoEncoderGetPos())));
}

bool inline accelerationCompleteCriterion(void)
{
	return (( (s32)((Sms.Profile.LastVelocityDeltaPos - Sms.Profile.TargetVelDeltaPos) *
    119c:	a0 90 1c 01 	lds	r10, 0x011C
    11a0:	b0 90 1d 01 	lds	r11, 0x011D
    11a4:	c0 90 1e 01 	lds	r12, 0x011E
    11a8:	d0 90 1f 01 	lds	r13, 0x011F
    11ac:	c8 01       	movw	r24, r16
    11ae:	b7 01       	movw	r22, r14
    11b0:	a6 01       	movw	r20, r12
    11b2:	95 01       	movw	r18, r10
    11b4:	0e 94 bf 22 	call	0x457e	; 0x457e <__subsf3>
    11b8:	9b 01       	movw	r18, r22
    11ba:	ac 01       	movw	r20, r24
    11bc:	0e 94 4b 24 	call	0x4896	; 0x4896 <__mulsf3>
    11c0:	20 91 04 01 	lds	r18, 0x0104
    11c4:	30 91 05 01 	lds	r19, 0x0105
    11c8:	40 91 06 01 	lds	r20, 0x0106
    11cc:	50 91 07 01 	lds	r21, 0x0107
    11d0:	0e 94 4b 24 	call	0x4896	; 0x4896 <__mulsf3>
    11d4:	0e 94 8c 23 	call	0x4718	; 0x4718 <__fixsfsi>
    11d8:	16 16       	cp	r1, r22
    11da:	17 06       	cpc	r1, r23
    11dc:	18 06       	cpc	r1, r24
    11de:	19 06       	cpc	r1, r25
    11e0:	0c f0       	brlt	.+2      	; 0x11e4 <zoSmsControlLoop+0xb4>
    11e2:	e9 c0       	rjmp	.+466    	; 0x13b6 <zoSmsControlLoop+0x286>
			switch(Sms.Profile.State)
			{
				case ZO_SMS_PROFILE_ACCELERATING:
					if( !accelerationCompleteCriterion() )
					{
						Sms.Profile.VelocityDeltaPos += Sms.Profile.ConstAccelDeltaVel;
    11e4:	c8 01       	movw	r24, r16
    11e6:	b7 01       	movw	r22, r14
    11e8:	20 91 28 01 	lds	r18, 0x0128
    11ec:	30 91 29 01 	lds	r19, 0x0129
    11f0:	40 91 2a 01 	lds	r20, 0x012A
    11f4:	50 91 2b 01 	lds	r21, 0x012B
    11f8:	0e 94 c0 22 	call	0x4580	; 0x4580 <__addsf3>
					break;

				case ZO_SMS_PROFILE_DECCELERATING:
					if( !positionReachedCriterion() )
					{
						Sms.Profile.VelocityDeltaPos -= deccelRecalc();
    11fc:	60 93 20 01 	sts	0x0120, r22
    1200:	70 93 21 01 	sts	0x0121, r23
    1204:	80 93 22 01 	sts	0x0122, r24
    1208:	90 93 23 01 	sts	0x0123, r25
						Sms.Profile.PositionSetpoint +=	Sms.Profile.VelocityDeltaPos;
    120c:	20 91 18 01 	lds	r18, 0x0118
    1210:	30 91 19 01 	lds	r19, 0x0119
    1214:	40 91 1a 01 	lds	r20, 0x011A
    1218:	50 91 1b 01 	lds	r21, 0x011B
    121c:	0e 94 c0 22 	call	0x4580	; 0x4580 <__addsf3>
    1220:	60 93 18 01 	sts	0x0118, r22
    1224:	70 93 19 01 	sts	0x0119, r23
    1228:	80 93 1a 01 	sts	0x011A, r24
    122c:	90 93 1b 01 	sts	0x011B, r25
						Sms.Pid.SetPoint = (s32)Sms.Profile.PositionSetpoint;
    1230:	0e 94 8c 23 	call	0x4718	; 0x4718 <__fixsfsi>
    1234:	60 93 53 01 	sts	0x0153, r22
    1238:	70 93 54 01 	sts	0x0154, r23
    123c:	80 93 55 01 	sts	0x0155, r24
    1240:	90 93 56 01 	sts	0x0156, r25

			case ZO_SMS_CONTROL_NO_CONTROL:	//Prevent compiler warning
				break;
	}

	Sms.Pid.doPID(&Sms.Pid);
    1244:	e0 91 57 01 	lds	r30, 0x0157
    1248:	f0 91 58 01 	lds	r31, 0x0158
    124c:	8d e3       	ldi	r24, 0x3D	; 61
    124e:	91 e0       	ldi	r25, 0x01	; 1
    1250:	09 95       	icall
    1252:	8b cf       	rjmp	.-234    	; 0x116a <zoSmsControlLoop+0x3a>
	{
		case ZO_SMS_CONTROL_POSITION_CONTROL:
			break;

		case ZO_SMS_CONTROL_VELOCITY_CONTROL:
			Sms.Profile.PositionSetpoint += Sms.Profile.VelocityDeltaPos;
    1254:	60 91 18 01 	lds	r22, 0x0118
    1258:	70 91 19 01 	lds	r23, 0x0119
    125c:	80 91 1a 01 	lds	r24, 0x011A
    1260:	90 91 1b 01 	lds	r25, 0x011B
    1264:	20 91 20 01 	lds	r18, 0x0120
    1268:	30 91 21 01 	lds	r19, 0x0121
    126c:	40 91 22 01 	lds	r20, 0x0122
    1270:	50 91 23 01 	lds	r21, 0x0123
    1274:	0e 94 c0 22 	call	0x4580	; 0x4580 <__addsf3>
    1278:	60 93 18 01 	sts	0x0118, r22
    127c:	70 93 19 01 	sts	0x0119, r23
    1280:	80 93 1a 01 	sts	0x011A, r24
    1284:	90 93 1b 01 	sts	0x011B, r25
			Sms.Pid.SetPoint = (s32)Sms.Profile.PositionSetpoint;  
    1288:	0e 94 8c 23 	call	0x4718	; 0x4718 <__fixsfsi>
    128c:	60 93 53 01 	sts	0x0153, r22
    1290:	70 93 54 01 	sts	0x0154, r23
    1294:	80 93 55 01 	sts	0x0155, r24
    1298:	90 93 56 01 	sts	0x0156, r25

			case ZO_SMS_CONTROL_NO_CONTROL:	//Prevent compiler warning
				break;
	}

	Sms.Pid.doPID(&Sms.Pid);
    129c:	e0 91 57 01 	lds	r30, 0x0157
    12a0:	f0 91 58 01 	lds	r31, 0x0158
    12a4:	8d e3       	ldi	r24, 0x3D	; 61
    12a6:	91 e0       	ldi	r25, 0x01	; 1
    12a8:	09 95       	icall
    12aa:	5f cf       	rjmp	.-322    	; 0x116a <zoSmsControlLoop+0x3a>
				Sms.Profile.VelocityDeltaPos = Sms.Profile.TargetVelDeltaPos;
			}
			break;

		case ZO_SMS_CONTROL_PROFILED_POSITION_CONTROL:
			Sms.Profile.LastVelocityDeltaPos = Sms.Profile.VelocityDeltaPos;
    12ac:	e0 90 20 01 	lds	r14, 0x0120
    12b0:	f0 90 21 01 	lds	r15, 0x0121
    12b4:	00 91 22 01 	lds	r16, 0x0122
    12b8:	10 91 23 01 	lds	r17, 0x0123
    12bc:	e0 92 24 01 	sts	0x0124, r14
    12c0:	f0 92 25 01 	sts	0x0125, r15
    12c4:	00 93 26 01 	sts	0x0126, r16
    12c8:	10 93 27 01 	sts	0x0127, r17
			switch(Sms.Profile.State)
    12cc:	80 91 3c 01 	lds	r24, 0x013C
    12d0:	81 30       	cpi	r24, 0x01	; 1
    12d2:	99 f1       	breq	.+102    	; 0x133a <zoSmsControlLoop+0x20a>
    12d4:	81 30       	cpi	r24, 0x01	; 1
    12d6:	40 f1       	brcs	.+80     	; 0x1328 <zoSmsControlLoop+0x1f8>
    12d8:	82 30       	cpi	r24, 0x02	; 2
    12da:	09 f0       	breq	.+2      	; 0x12de <zoSmsControlLoop+0x1ae>
    12dc:	3f cf       	rjmp	.-386    	; 0x115c <zoSmsControlLoop+0x2c>
					else
						Sms.Profile.State = ZO_SMS_PROFILE_DECCELERATING;
					break;

				case ZO_SMS_PROFILE_DECCELERATING:
					if( !positionReachedCriterion() )
    12de:	0e 94 cb 06 	call	0xd96	; 0xd96 <positionReachedCriterion>
    12e2:	88 23       	and	r24, r24
    12e4:	09 f4       	brne	.+2      	; 0x12e8 <zoSmsControlLoop+0x1b8>
    12e6:	56 c0       	rjmp	.+172    	; 0x1394 <zoSmsControlLoop+0x264>
						Sms.Profile.PositionSetpoint +=	Sms.Profile.VelocityDeltaPos;
						Sms.Pid.SetPoint = (s32)Sms.Profile.PositionSetpoint;
					}
					else
					{
						Sms.Profile.PositionSetpoint = Sms.Profile.TargetPosition;
    12e8:	e0 90 34 01 	lds	r14, 0x0134
    12ec:	f0 90 35 01 	lds	r15, 0x0135
    12f0:	00 91 36 01 	lds	r16, 0x0136
    12f4:	10 91 37 01 	lds	r17, 0x0137
    12f8:	c8 01       	movw	r24, r16
    12fa:	b7 01       	movw	r22, r14
    12fc:	0e 94 bf 23 	call	0x477e	; 0x477e <__floatsisf>
    1300:	60 93 18 01 	sts	0x0118, r22
    1304:	70 93 19 01 	sts	0x0119, r23
    1308:	80 93 1a 01 	sts	0x011A, r24
    130c:	90 93 1b 01 	sts	0x011B, r25
						Sms.Pid.SetPoint = Sms.Profile.TargetPosition;
    1310:	e0 92 53 01 	sts	0x0153, r14
    1314:	f0 92 54 01 	sts	0x0154, r15
    1318:	00 93 55 01 	sts	0x0155, r16
    131c:	10 93 56 01 	sts	0x0156, r17
						Sms.Control.State = ZO_SMS_CONTROL_POSITION_CONTROL;
    1320:	81 e0       	ldi	r24, 0x01	; 1
    1322:	80 93 03 01 	sts	0x0103, r24
    1326:	1a cf       	rjmp	.-460    	; 0x115c <zoSmsControlLoop+0x2c>
		case ZO_SMS_CONTROL_PROFILED_POSITION_CONTROL:
			Sms.Profile.LastVelocityDeltaPos = Sms.Profile.VelocityDeltaPos;
			switch(Sms.Profile.State)
			{
				case ZO_SMS_PROFILE_ACCELERATING:
					if( !accelerationCompleteCriterion() )
    1328:	0e 94 7e 06 	call	0xcfc	; 0xcfc <accelerationCompleteCriterion>
    132c:	88 23       	and	r24, r24
    132e:	09 f4       	brne	.+2      	; 0x1332 <zoSmsControlLoop+0x202>
    1330:	59 cf       	rjmp	.-334    	; 0x11e4 <zoSmsControlLoop+0xb4>
						Sms.Profile.PositionSetpoint +=	Sms.Profile.VelocityDeltaPos;					
						Sms.Pid.SetPoint = (s32)Sms.Profile.PositionSetpoint;
					}
					else
					{
						Sms.Profile.State  = ZO_SMS_PROFILE_MOVING_WITH_VELOCITY;
    1332:	81 e0       	ldi	r24, 0x01	; 1
    1334:	80 93 3c 01 	sts	0x013C, r24
    1338:	11 cf       	rjmp	.-478    	; 0x115c <zoSmsControlLoop+0x2c>
					}
					break;

				case ZO_SMS_PROFILE_MOVING_WITH_VELOCITY:
					if( !constantVelocityCompletedCriterion() )
    133a:	0e 94 f2 06 	call	0xde4	; 0xde4 <constantVelocityCompletedCriterion>
    133e:	88 23       	and	r24, r24
    1340:	29 f5       	brne	.+74     	; 0x138c <zoSmsControlLoop+0x25c>
					{
						Sms.Profile.PositionSetpoint += Sms.Profile.TargetVelDeltaPos;
    1342:	60 91 18 01 	lds	r22, 0x0118
    1346:	70 91 19 01 	lds	r23, 0x0119
    134a:	80 91 1a 01 	lds	r24, 0x011A
    134e:	90 91 1b 01 	lds	r25, 0x011B
    1352:	20 91 1c 01 	lds	r18, 0x011C
    1356:	30 91 1d 01 	lds	r19, 0x011D
    135a:	40 91 1e 01 	lds	r20, 0x011E
    135e:	50 91 1f 01 	lds	r21, 0x011F
    1362:	0e 94 c0 22 	call	0x4580	; 0x4580 <__addsf3>
    1366:	60 93 18 01 	sts	0x0118, r22
    136a:	70 93 19 01 	sts	0x0119, r23
    136e:	80 93 1a 01 	sts	0x011A, r24
    1372:	90 93 1b 01 	sts	0x011B, r25
						Sms.Pid.SetPoint = (s32)Sms.Profile.PositionSetpoint;
    1376:	0e 94 8c 23 	call	0x4718	; 0x4718 <__fixsfsi>
    137a:	60 93 53 01 	sts	0x0153, r22
    137e:	70 93 54 01 	sts	0x0154, r23
    1382:	80 93 55 01 	sts	0x0155, r24
    1386:	90 93 56 01 	sts	0x0156, r25
    138a:	e8 ce       	rjmp	.-560    	; 0x115c <zoSmsControlLoop+0x2c>
					}
					else
						Sms.Profile.State = ZO_SMS_PROFILE_DECCELERATING;
    138c:	82 e0       	ldi	r24, 0x02	; 2
    138e:	80 93 3c 01 	sts	0x013C, r24
    1392:	e4 ce       	rjmp	.-568    	; 0x115c <zoSmsControlLoop+0x2c>
					break;

				case ZO_SMS_PROFILE_DECCELERATING:
					if( !positionReachedCriterion() )
					{
						Sms.Profile.VelocityDeltaPos -= deccelRecalc();
    1394:	e0 90 20 01 	lds	r14, 0x0120
    1398:	f0 90 21 01 	lds	r15, 0x0121
    139c:	00 91 22 01 	lds	r16, 0x0122
    13a0:	10 91 23 01 	lds	r17, 0x0123
    13a4:	0e 94 19 07 	call	0xe32	; 0xe32 <deccelRecalc>
    13a8:	9b 01       	movw	r18, r22
    13aa:	ac 01       	movw	r20, r24
    13ac:	c8 01       	movw	r24, r16
    13ae:	b7 01       	movw	r22, r14
    13b0:	0e 94 bf 22 	call	0x457e	; 0x457e <__subsf3>
    13b4:	23 cf       	rjmp	.-442    	; 0x11fc <zoSmsControlLoop+0xcc>
				Sms.Profile.PositionSetpoint +=	Sms.Profile.VelocityDeltaPos;					
				Sms.Pid.SetPoint = (s32)Sms.Profile.PositionSetpoint;
			}
			else
			{
				Sms.Control.State  = ZO_SMS_CONTROL_VELOCITY_CONTROL;
    13b6:	82 e0       	ldi	r24, 0x02	; 2
    13b8:	80 93 03 01 	sts	0x0103, r24
				Sms.Profile.VelocityDeltaPos = Sms.Profile.TargetVelDeltaPos;
    13bc:	a0 92 20 01 	sts	0x0120, r10
    13c0:	b0 92 21 01 	sts	0x0121, r11
    13c4:	c0 92 22 01 	sts	0x0122, r12
    13c8:	d0 92 23 01 	sts	0x0123, r13
    13cc:	c7 ce       	rjmp	.-626    	; 0x115c <zoSmsControlLoop+0x2c>

000013ce <zoSmsMotorStalled>:
}


//this should be called only if the motor is initialized
bool zoSmsMotorStalled(void)
{
    13ce:	af 92       	push	r10
    13d0:	bf 92       	push	r11
    13d2:	cf 92       	push	r12
    13d4:	df 92       	push	r13
    13d6:	ef 92       	push	r14
    13d8:	ff 92       	push	r15
    13da:	0f 93       	push	r16
    13dc:	1f 93       	push	r17
	s32 currentPos;
	s32 lastPos;
	s32 commandedPos;

	enterCritical();
    13de:	0f b6       	in	r0, 0x3f	; 63
    13e0:	0f 92       	push	r0
    13e2:	f8 94       	cli
	lastPos = StalledLastPosition;
    13e4:	a0 90 b0 01 	lds	r10, 0x01B0
    13e8:	b0 90 b1 01 	lds	r11, 0x01B1
    13ec:	c0 90 b2 01 	lds	r12, 0x01B2
    13f0:	d0 90 b3 01 	lds	r13, 0x01B3
	currentPos = zoEncoderGetPos();
    13f4:	0e 94 36 04 	call	0x86c	; 0x86c <zoEncoderGetPos>
	StalledLastPosition = currentPos;
    13f8:	60 93 b0 01 	sts	0x01B0, r22
    13fc:	70 93 b1 01 	sts	0x01B1, r23
    1400:	80 93 b2 01 	sts	0x01B2, r24
    1404:	90 93 b3 01 	sts	0x01B3, r25
	commandedPos = Sms.Pid.SetPoint; 
    1408:	e0 90 53 01 	lds	r14, 0x0153
    140c:	f0 90 54 01 	lds	r15, 0x0154
    1410:	00 91 55 01 	lds	r16, 0x0155
    1414:	10 91 56 01 	lds	r17, 0x0156
	exitCritical();
    1418:	0f 90       	pop	r0
    141a:	0f be       	out	0x3f, r0	; 63

	//if the motor is not enabled or if it is approximately here it was commanded to be
	//then it is not stalled	
	if( labs(currentPos - commandedPos) < 200 )
    141c:	9b 01       	movw	r18, r22
    141e:	ac 01       	movw	r20, r24
    1420:	2e 19       	sub	r18, r14
    1422:	3f 09       	sbc	r19, r15
    1424:	40 0b       	sbc	r20, r16
    1426:	51 0b       	sbc	r21, r17
    1428:	da 01       	movw	r26, r20
    142a:	c9 01       	movw	r24, r18
    142c:	89 53       	subi	r24, 0x39	; 57
    142e:	9f 4f       	sbci	r25, 0xFF	; 255
    1430:	af 4f       	sbci	r26, 0xFF	; 255
    1432:	bf 4f       	sbci	r27, 0xFF	; 255
    1434:	8f 58       	subi	r24, 0x8F	; 143
    1436:	91 40       	sbci	r25, 0x01	; 1
    1438:	a0 40       	sbci	r26, 0x00	; 0
    143a:	b0 40       	sbci	r27, 0x00	; 0
    143c:	28 f1       	brcs	.+74     	; 0x1488 <zoSmsMotorStalled+0xba>
	}

	//if the motor is still or moving away from the target then it is stalled. 
	//If it remains like this for more than a specific time then indicate the 
	//stalled condition.
	if( labs(currentPos - commandedPos) >= labs(lastPos - commandedPos) )
    143e:	ca 01       	movw	r24, r20
    1440:	b9 01       	movw	r22, r18
    1442:	57 fd       	sbrc	r21, 7
    1444:	27 c0       	rjmp	.+78     	; 0x1494 <zoSmsMotorStalled+0xc6>
    1446:	a6 01       	movw	r20, r12
    1448:	95 01       	movw	r18, r10
    144a:	2e 19       	sub	r18, r14
    144c:	3f 09       	sbc	r19, r15
    144e:	40 0b       	sbc	r20, r16
    1450:	51 0b       	sbc	r21, r17
    1452:	57 fd       	sbrc	r21, 7
    1454:	2e c0       	rjmp	.+92     	; 0x14b2 <zoSmsMotorStalled+0xe4>
    1456:	62 17       	cp	r22, r18
    1458:	73 07       	cpc	r23, r19
    145a:	84 07       	cpc	r24, r20
    145c:	95 07       	cpc	r25, r21
    145e:	54 f0       	brlt	.+20     	; 0x1474 <zoSmsMotorStalled+0xa6>
	{
		if( zoSystemTimerTimeOutExpired(&StalledTimeOutTimer,ZO_SMS_MOTOR_STALLED_TIMEOUT_MS) )
    1460:	84 eb       	ldi	r24, 0xB4	; 180
    1462:	91 e0       	ldi	r25, 0x01	; 1
    1464:	60 ed       	ldi	r22, 0xD0	; 208
    1466:	77 e0       	ldi	r23, 0x07	; 7
    1468:	0e 94 78 01 	call	0x2f0	; 0x2f0 <zoSystemTimerTimeOutExpired>
    146c:	88 23       	and	r24, r24
    146e:	11 f0       	breq	.+4      	; 0x1474 <zoSmsMotorStalled+0xa6>
    1470:	8f ef       	ldi	r24, 0xFF	; 255
    1472:	01 c0       	rjmp	.+2      	; 0x1476 <zoSmsMotorStalled+0xa8>
    1474:	80 e0       	ldi	r24, 0x00	; 0
			return TRUE;
	}

	return FALSE;
    1476:	1f 91       	pop	r17
    1478:	0f 91       	pop	r16
    147a:	ff 90       	pop	r15
    147c:	ef 90       	pop	r14
    147e:	df 90       	pop	r13
    1480:	cf 90       	pop	r12
    1482:	bf 90       	pop	r11
    1484:	af 90       	pop	r10
    1486:	08 95       	ret

	//if the motor is not enabled or if it is approximately here it was commanded to be
	//then it is not stalled	
	if( labs(currentPos - commandedPos) < 200 )
	{
		zoSystemTimerTimeOutInit(&StalledTimeOutTimer);
    1488:	84 eb       	ldi	r24, 0xB4	; 180
    148a:	91 e0       	ldi	r25, 0x01	; 1
    148c:	0e 94 42 01 	call	0x284	; 0x284 <zoSystemTimerTimeOutInit>
    1490:	80 e0       	ldi	r24, 0x00	; 0
    1492:	f1 cf       	rjmp	.-30     	; 0x1476 <zoSmsMotorStalled+0xa8>
	}

	//if the motor is still or moving away from the target then it is stalled. 
	//If it remains like this for more than a specific time then indicate the 
	//stalled condition.
	if( labs(currentPos - commandedPos) >= labs(lastPos - commandedPos) )
    1494:	90 95       	com	r25
    1496:	80 95       	com	r24
    1498:	70 95       	com	r23
    149a:	61 95       	neg	r22
    149c:	7f 4f       	sbci	r23, 0xFF	; 255
    149e:	8f 4f       	sbci	r24, 0xFF	; 255
    14a0:	9f 4f       	sbci	r25, 0xFF	; 255
    14a2:	a6 01       	movw	r20, r12
    14a4:	95 01       	movw	r18, r10
    14a6:	2e 19       	sub	r18, r14
    14a8:	3f 09       	sbc	r19, r15
    14aa:	40 0b       	sbc	r20, r16
    14ac:	51 0b       	sbc	r21, r17
    14ae:	57 ff       	sbrs	r21, 7
    14b0:	d2 cf       	rjmp	.-92     	; 0x1456 <zoSmsMotorStalled+0x88>
    14b2:	50 95       	com	r21
    14b4:	40 95       	com	r20
    14b6:	30 95       	com	r19
    14b8:	21 95       	neg	r18
    14ba:	3f 4f       	sbci	r19, 0xFF	; 255
    14bc:	4f 4f       	sbci	r20, 0xFF	; 255
    14be:	5f 4f       	sbci	r21, 0xFF	; 255
    14c0:	ca cf       	rjmp	.-108    	; 0x1456 <zoSmsMotorStalled+0x88>

000014c2 <zoSmsErrorHandleServiceCommandFailure>:

void zoSmsErrorHandleServiceCommandFailure(void)
{
	u08 err;
	
	while( !zoErrorIsEmpty(&zoCommandsError) )
    14c2:	86 eb       	ldi	r24, 0xB6	; 182
    14c4:	91 e0       	ldi	r25, 0x01	; 1
    14c6:	0e 94 ad 00 	call	0x15a	; 0x15a <zoErrorIsEmpty>
    14ca:	88 23       	and	r24, r24
    14cc:	b1 f4       	brne	.+44     	; 0x14fa <zoSmsErrorHandleServiceCommandFailure+0x38>
	{
		err = zoErrorGet(&zoCommandsError);
    14ce:	86 eb       	ldi	r24, 0xB6	; 182
    14d0:	91 e0       	ldi	r25, 0x01	; 1
    14d2:	0e 94 b5 00 	call	0x16a	; 0x16a <zoErrorGet>
    14d6:	68 2f       	mov	r22, r24

		if(err <= ZO_COMMANDS_ERROR_INVALID_COMMAND)
    14d8:	85 30       	cpi	r24, 0x05	; 5
    14da:	80 f0       	brcs	.+32     	; 0x14fc <zoSmsErrorHandleServiceCommandFailure+0x3a>
			zoErrorPut(&zoSmsError,err + ZO_SMS_ERROR_COMMAND_ERRORS_OFFSET);
		else
		{
			if( Sms.Settings.errorReportingLevel == 0 )
    14dc:	80 91 17 01 	lds	r24, 0x0117
    14e0:	88 23       	and	r24, r24
    14e2:	61 f4       	brne	.+24     	; 0x14fc <zoSmsErrorHandleServiceCommandFailure+0x3a>
				zoErrorPut(&zoSmsWarning,err + ZO_SMS_ERROR_COMMAND_ERRORS_OFFSET);
    14e4:	60 5f       	subi	r22, 0xF0	; 240
    14e6:	83 ea       	ldi	r24, 0xA3	; 163
    14e8:	91 e0       	ldi	r25, 0x01	; 1
    14ea:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <zoErrorPut>

void zoSmsErrorHandleServiceCommandFailure(void)
{
	u08 err;
	
	while( !zoErrorIsEmpty(&zoCommandsError) )
    14ee:	86 eb       	ldi	r24, 0xB6	; 182
    14f0:	91 e0       	ldi	r25, 0x01	; 1
    14f2:	0e 94 ad 00 	call	0x15a	; 0x15a <zoErrorIsEmpty>
    14f6:	88 23       	and	r24, r24
    14f8:	51 f3       	breq	.-44     	; 0x14ce <zoSmsErrorHandleServiceCommandFailure+0xc>
				zoErrorPut(&zoSmsWarning,err + ZO_SMS_ERROR_COMMAND_ERRORS_OFFSET);
			else
				zoErrorPut(&zoSmsError,err + ZO_SMS_ERROR_COMMAND_ERRORS_OFFSET);
		}
	}
}		
    14fa:	08 95       	ret
		else
		{
			if( Sms.Settings.errorReportingLevel == 0 )
				zoErrorPut(&zoSmsWarning,err + ZO_SMS_ERROR_COMMAND_ERRORS_OFFSET);
			else
				zoErrorPut(&zoSmsError,err + ZO_SMS_ERROR_COMMAND_ERRORS_OFFSET);
    14fc:	60 5f       	subi	r22, 0xF0	; 240
    14fe:	86 e9       	ldi	r24, 0x96	; 150
    1500:	91 e0       	ldi	r25, 0x01	; 1
    1502:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <zoErrorPut>
    1506:	dd cf       	rjmp	.-70     	; 0x14c2 <zoSmsErrorHandleServiceCommandFailure>

00001508 <zoSmsErrorHandleCommandResponseFailure>:
		}
	}
}		

void zoSmsErrorHandleCommandResponseFailure(ZO_PROTOCOL_HAL *hal,ZO_PROTOCOL_PACKET *p)
{
    1508:	ef 92       	push	r14
    150a:	ff 92       	push	r15
    150c:	1f 93       	push	r17
    150e:	cf 93       	push	r28
    1510:	df 93       	push	r29
    1512:	ec 01       	movw	r28, r24
    1514:	7b 01       	movw	r14, r22
    1516:	10 e0       	ldi	r17, 0x00	; 0
	//This is a point in code that should not be reached easily. It happens only if there 
	//is a problem transmitting a response. This can be due to arbitration loss or full Tx
	//buffers etc. Software retries 5 times to issue the response, then gives up.
	for(i=0;i<5;i++)
	{
		while(!zoErrorIsEmpty(hal->error))	
    1518:	8a 81       	ldd	r24, Y+2	; 0x02
    151a:	9b 81       	ldd	r25, Y+3	; 0x03
    151c:	0e 94 ad 00 	call	0x15a	; 0x15a <zoErrorIsEmpty>
    1520:	88 23       	and	r24, r24
    1522:	c9 f4       	brne	.+50     	; 0x1556 <zoSmsErrorHandleCommandResponseFailure+0x4e>
		{
			err = zoErrorGet(hal->error);
    1524:	8a 81       	ldd	r24, Y+2	; 0x02
    1526:	9b 81       	ldd	r25, Y+3	; 0x03
    1528:	0e 94 b5 00 	call	0x16a	; 0x16a <zoErrorGet>
    152c:	68 2f       	mov	r22, r24
			
			switch(hal->hw)
    152e:	89 81       	ldd	r24, Y+1	; 0x01
    1530:	88 23       	and	r24, r24
    1532:	11 f5       	brne	.+68     	; 0x1578 <zoSmsErrorHandleCommandResponseFailure+0x70>
			{
			case ZO_PROTOCOL_HW_I2C:
				if(err == ZO_I2C_ERROR_ARBITRATION_LOST)
    1534:	63 30       	cpi	r22, 0x03	; 3
    1536:	41 f5       	brne	.+80     	; 0x1588 <zoSmsErrorHandleCommandResponseFailure+0x80>
				{
					if(Sms.Settings.errorReportingLevel == 0)
    1538:	80 91 17 01 	lds	r24, 0x0117
    153c:	88 23       	and	r24, r24
    153e:	51 f5       	brne	.+84     	; 0x1594 <zoSmsErrorHandleCommandResponseFailure+0x8c>
						zoErrorPut(&zoSmsWarning,err + ZO_SMS_ERROR_I2C_ERRORS_OFFSET);
    1540:	83 ea       	ldi	r24, 0xA3	; 163
    1542:	91 e0       	ldi	r25, 0x01	; 1
    1544:	63 e2       	ldi	r22, 0x23	; 35
    1546:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <zoErrorPut>
	//This is a point in code that should not be reached easily. It happens only if there 
	//is a problem transmitting a response. This can be due to arbitration loss or full Tx
	//buffers etc. Software retries 5 times to issue the response, then gives up.
	for(i=0;i<5;i++)
	{
		while(!zoErrorIsEmpty(hal->error))	
    154a:	8a 81       	ldd	r24, Y+2	; 0x02
    154c:	9b 81       	ldd	r25, Y+3	; 0x03
    154e:	0e 94 ad 00 	call	0x15a	; 0x15a <zoErrorIsEmpty>
    1552:	88 23       	and	r24, r24
    1554:	39 f3       	breq	.-50     	; 0x1524 <zoSmsErrorHandleCommandResponseFailure+0x1c>
				break;
			}
		}

		//If this retry of responding is successfull stop retrying to respond
		if( zoProtocolCommandResponse(hal,p,&zoSmsError) )
    1556:	ce 01       	movw	r24, r28
    1558:	b7 01       	movw	r22, r14
    155a:	46 e9       	ldi	r20, 0x96	; 150
    155c:	51 e0       	ldi	r21, 0x01	; 1
    155e:	0e 94 d0 01 	call	0x3a0	; 0x3a0 <zoProtocolCommandResponse>
    1562:	88 23       	and	r24, r24
    1564:	19 f4       	brne	.+6      	; 0x156c <zoSmsErrorHandleCommandResponseFailure+0x64>
	u08 i,err;

	//This is a point in code that should not be reached easily. It happens only if there 
	//is a problem transmitting a response. This can be due to arbitration loss or full Tx
	//buffers etc. Software retries 5 times to issue the response, then gives up.
	for(i=0;i<5;i++)
    1566:	1f 5f       	subi	r17, 0xFF	; 255
    1568:	15 30       	cpi	r17, 0x05	; 5
    156a:	b1 f6       	brne	.-84     	; 0x1518 <zoSmsErrorHandleCommandResponseFailure+0x10>

		//If this retry of responding is successfull stop retrying to respond
		if( zoProtocolCommandResponse(hal,p,&zoSmsError) )
			return;
	}
}
    156c:	df 91       	pop	r29
    156e:	cf 91       	pop	r28
    1570:	1f 91       	pop	r17
    1572:	ff 90       	pop	r15
    1574:	ef 90       	pop	r14
    1576:	08 95       	ret
	{
		while(!zoErrorIsEmpty(hal->error))	
		{
			err = zoErrorGet(hal->error);
			
			switch(hal->hw)
    1578:	84 30       	cpi	r24, 0x04	; 4
    157a:	70 f6       	brcc	.-100    	; 0x1518 <zoSmsErrorHandleCommandResponseFailure+0x10>
				break;

			case ZO_PROTOCOL_HW_RS232:
			case ZO_PROTOCOL_HW_HALF_DUPLEX_RS485:
			case ZO_PROTOCOL_HW_UART_5V:
				zoErrorPut(&zoSmsError,err + ZO_SMS_ERROR_UART_ERRORS_OFFSET);
    157c:	60 5c       	subi	r22, 0xC0	; 192
    157e:	86 e9       	ldi	r24, 0x96	; 150
    1580:	91 e0       	ldi	r25, 0x01	; 1
    1582:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <zoErrorPut>
    1586:	c8 cf       	rjmp	.-112    	; 0x1518 <zoSmsErrorHandleCommandResponseFailure+0x10>
						zoErrorPut(&zoSmsWarning,err + ZO_SMS_ERROR_I2C_ERRORS_OFFSET);
					else
						zoErrorPut(&zoSmsError,err + ZO_SMS_ERROR_I2C_ERRORS_OFFSET);
				}
				else
					zoErrorPut(&zoSmsError,err + ZO_SMS_ERROR_I2C_ERRORS_OFFSET);
    1588:	60 5e       	subi	r22, 0xE0	; 224
    158a:	86 e9       	ldi	r24, 0x96	; 150
    158c:	91 e0       	ldi	r25, 0x01	; 1
    158e:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <zoErrorPut>
    1592:	c2 cf       	rjmp	.-124    	; 0x1518 <zoSmsErrorHandleCommandResponseFailure+0x10>
				if(err == ZO_I2C_ERROR_ARBITRATION_LOST)
				{
					if(Sms.Settings.errorReportingLevel == 0)
						zoErrorPut(&zoSmsWarning,err + ZO_SMS_ERROR_I2C_ERRORS_OFFSET);
					else
						zoErrorPut(&zoSmsError,err + ZO_SMS_ERROR_I2C_ERRORS_OFFSET);
    1594:	86 e9       	ldi	r24, 0x96	; 150
    1596:	91 e0       	ldi	r25, 0x01	; 1
    1598:	63 e2       	ldi	r22, 0x23	; 35
    159a:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <zoErrorPut>
    159e:	bc cf       	rjmp	.-136    	; 0x1518 <zoSmsErrorHandleCommandResponseFailure+0x10>

000015a0 <zoSmsErrorHandleParseFailure>:
		}
	}
}

void zoSmsErrorHandleParseFailure(ZO_PROTOCOL_HAL *hal,ZO_PROTOCOL_PACKET *p)
{
    15a0:	ef 92       	push	r14
    15a2:	ff 92       	push	r15
    15a4:	0f 93       	push	r16
    15a6:	1f 93       	push	r17
    15a8:	cf 93       	push	r28
    15aa:	df 93       	push	r29
    15ac:	ec 01       	movw	r28, r24
    15ae:	7b 01       	movw	r14, r22
    15b0:	00 e0       	ldi	r16, 0x00	; 0
	u08 err;
	bool issueCommandResponseNow = FALSE;
	
	while( !zoErrorIsEmpty(hal->error) )
    15b2:	8a 81       	ldd	r24, Y+2	; 0x02
    15b4:	9b 81       	ldd	r25, Y+3	; 0x03
    15b6:	0e 94 ad 00 	call	0x15a	; 0x15a <zoErrorIsEmpty>
    15ba:	88 23       	and	r24, r24
    15bc:	d9 f4       	brne	.+54     	; 0x15f4 <zoSmsErrorHandleParseFailure+0x54>
	{
		err = zoErrorGet(hal->error);
    15be:	8a 81       	ldd	r24, Y+2	; 0x02
    15c0:	9b 81       	ldd	r25, Y+3	; 0x03
    15c2:	0e 94 b5 00 	call	0x16a	; 0x16a <zoErrorGet>
    15c6:	18 2f       	mov	r17, r24

		if(err > ZO_PROTOCOL_ERROR_NONE)			//process protocol errors first
    15c8:	81 32       	cpi	r24, 0x21	; 33
    15ca:	60 f5       	brcc	.+88     	; 0x1624 <zoSmsErrorHandleParseFailure+0x84>
			if(err == ZO_PROTOCOL_ERROR_WRONG_LRC)  //if it was wrong lrc issue response
				issueCommandResponseNow = TRUE;		//immediately
		}
		else
		{
			switch(hal->hw)
    15cc:	89 81       	ldd	r24, Y+1	; 0x01
    15ce:	88 23       	and	r24, r24
    15d0:	01 f5       	brne	.+64     	; 0x1612 <zoSmsErrorHandleParseFailure+0x72>
			{
			case ZO_PROTOCOL_HW_I2C:
				zoErrorPut(&zoSmsError,err + ZO_SMS_ERROR_I2C_ERRORS_OFFSET);
    15d2:	61 2f       	mov	r22, r17
    15d4:	60 5e       	subi	r22, 0xE0	; 224
    15d6:	86 e9       	ldi	r24, 0x96	; 150
    15d8:	91 e0       	ldi	r25, 0x01	; 1
    15da:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <zoErrorPut>
				if(err == ZO_PROTOCOL_I2C_ERROR_RX_PACKET_OVERWRITTEN)
    15de:	11 31       	cpi	r17, 0x11	; 17
    15e0:	11 f0       	breq	.+4      	; 0x15e6 <zoSmsErrorHandleParseFailure+0x46>
					issueCommandResponseNow = TRUE;
				if(err == ZO_PROTOCOL_I2C_ERROR_INVALID_RX_BYTECOUNT)
    15e2:	12 31       	cpi	r17, 0x12	; 18
    15e4:	31 f7       	brne	.-52     	; 0x15b2 <zoSmsErrorHandleParseFailure+0x12>
				break;

			case ZO_PROTOCOL_HW_RS232:
			case ZO_PROTOCOL_HW_HALF_DUPLEX_RS485:
			case ZO_PROTOCOL_HW_UART_5V:
				zoErrorPut(&zoSmsError,err + ZO_SMS_ERROR_UART_ERRORS_OFFSET);
    15e6:	0f ef       	ldi	r16, 0xFF	; 255
void zoSmsErrorHandleParseFailure(ZO_PROTOCOL_HAL *hal,ZO_PROTOCOL_PACKET *p)
{
	u08 err;
	bool issueCommandResponseNow = FALSE;
	
	while( !zoErrorIsEmpty(hal->error) )
    15e8:	8a 81       	ldd	r24, Y+2	; 0x02
    15ea:	9b 81       	ldd	r25, Y+3	; 0x03
    15ec:	0e 94 ad 00 	call	0x15a	; 0x15a <zoErrorIsEmpty>
    15f0:	88 23       	and	r24, r24
    15f2:	29 f3       	breq	.-54     	; 0x15be <zoSmsErrorHandleParseFailure+0x1e>
				break;
			}
		}
	}

	if (issueCommandResponseNow)
    15f4:	00 23       	and	r16, r16
    15f6:	31 f0       	breq	.+12     	; 0x1604 <zoSmsErrorHandleParseFailure+0x64>
		zoProtocolCommandResponse(hal,p,&zoSmsError);
    15f8:	ce 01       	movw	r24, r28
    15fa:	b7 01       	movw	r22, r14
    15fc:	46 e9       	ldi	r20, 0x96	; 150
    15fe:	51 e0       	ldi	r21, 0x01	; 1
    1600:	0e 94 d0 01 	call	0x3a0	; 0x3a0 <zoProtocolCommandResponse>
}
    1604:	df 91       	pop	r29
    1606:	cf 91       	pop	r28
    1608:	1f 91       	pop	r17
    160a:	0f 91       	pop	r16
    160c:	ff 90       	pop	r15
    160e:	ef 90       	pop	r14
    1610:	08 95       	ret
			if(err == ZO_PROTOCOL_ERROR_WRONG_LRC)  //if it was wrong lrc issue response
				issueCommandResponseNow = TRUE;		//immediately
		}
		else
		{
			switch(hal->hw)
    1612:	84 30       	cpi	r24, 0x04	; 4
    1614:	70 f6       	brcc	.-100    	; 0x15b2 <zoSmsErrorHandleParseFailure+0x12>
				break;

			case ZO_PROTOCOL_HW_RS232:
			case ZO_PROTOCOL_HW_HALF_DUPLEX_RS485:
			case ZO_PROTOCOL_HW_UART_5V:
				zoErrorPut(&zoSmsError,err + ZO_SMS_ERROR_UART_ERRORS_OFFSET);
    1616:	10 5c       	subi	r17, 0xC0	; 192
    1618:	86 e9       	ldi	r24, 0x96	; 150
    161a:	91 e0       	ldi	r25, 0x01	; 1
    161c:	61 2f       	mov	r22, r17
    161e:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <zoErrorPut>
    1622:	c7 cf       	rjmp	.-114    	; 0x15b2 <zoSmsErrorHandleParseFailure+0x12>
	{
		err = zoErrorGet(hal->error);

		if(err > ZO_PROTOCOL_ERROR_NONE)			//process protocol errors first
		{
			zoErrorPut(&zoSmsError,err + ZO_SMS_ERROR_PROTOCOL_ERRORS_OFFSET);
    1624:	68 2f       	mov	r22, r24
    1626:	60 5d       	subi	r22, 0xD0	; 208
    1628:	86 e9       	ldi	r24, 0x96	; 150
    162a:	91 e0       	ldi	r25, 0x01	; 1
    162c:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <zoErrorPut>
						
			if(err == ZO_PROTOCOL_ERROR_WRONG_LRC)  //if it was wrong lrc issue response
    1630:	12 32       	cpi	r17, 0x22	; 34
    1632:	09 f0       	breq	.+2      	; 0x1636 <zoSmsErrorHandleParseFailure+0x96>
    1634:	be cf       	rjmp	.-132    	; 0x15b2 <zoSmsErrorHandleParseFailure+0x12>
				break;

			case ZO_PROTOCOL_HW_RS232:
			case ZO_PROTOCOL_HW_HALF_DUPLEX_RS485:
			case ZO_PROTOCOL_HW_UART_5V:
				zoErrorPut(&zoSmsError,err + ZO_SMS_ERROR_UART_ERRORS_OFFSET);
    1636:	0f ef       	ldi	r16, 0xFF	; 255
    1638:	d7 cf       	rjmp	.-82     	; 0x15e8 <zoSmsErrorHandleParseFailure+0x48>

0000163a <zoSmsErrorPoll>:
	//dummy packet pointer to enable calling of command functions
	//attention: only commands of bytecount = 0  can be called
	ZO_PROTOCOL_PACKET *dummy = 0;
	ZO_SMS_CONTROL_STATE state;
	
	enterCritical();
    163a:	0f b6       	in	r0, 0x3f	; 63
    163c:	0f 92       	push	r0
    163e:	f8 94       	cli
	state = Sms.Control.State;
	exitCritical();
    1640:	0f 90       	pop	r0
    1642:	0f be       	out	0x3f, r0	; 63

	//these errors can occur only when the controller is initialized
	//no point of checking them when it is not
	if( state != ZO_SMS_CONTROL_NO_CONTROL )
    1644:	80 91 03 01 	lds	r24, 0x0103
    1648:	88 23       	and	r24, r24
    164a:	09 f4       	brne	.+2      	; 0x164e <zoSmsErrorPoll+0x14>
    164c:	08 95       	ret
	{
		//these are very serious error conditions: motor is stopped if they are encountered
		if( zoSmsMotorStalled() )
    164e:	0e 94 e7 09 	call	0x13ce	; 0x13ce <zoSmsMotorStalled>
    1652:	88 23       	and	r24, r24
    1654:	e1 f4       	brne	.+56     	; 0x168e <zoSmsErrorPoll+0x54>
		{
			zoCommandStop(dummy);
			zoErrorPut(&zoSmsError,ZO_SMS_ERROR_MOTOR_STALLED);
		}

		if( zoEncoderPollOverFlowError() )
    1656:	0e 94 a6 03 	call	0x74c	; 0x74c <zoEncoderPollOverFlowError>
    165a:	88 23       	and	r24, r24
    165c:	71 f4       	brne	.+28     	; 0x167a <zoSmsErrorPoll+0x40>
		{
			zoCommandStop(dummy);
			zoErrorPut(&zoSmsError,ZO_SMS_ERROR_ENCODER_OVERFLOW);
		}

		if( zoEncoderPollUnderFlowError() )
    165e:	0e 94 bc 03 	call	0x778	; 0x778 <zoEncoderPollUnderFlowError>
    1662:	88 23       	and	r24, r24
    1664:	99 f3       	breq	.-26     	; 0x164c <zoSmsErrorPoll+0x12>
		{
			zoCommandStop(dummy);
    1666:	80 e0       	ldi	r24, 0x00	; 0
    1668:	90 e0       	ldi	r25, 0x00	; 0
    166a:	0e 94 f2 12 	call	0x25e4	; 0x25e4 <zoCommandStop>
			zoErrorPut(&zoSmsError,ZO_SMS_ERROR_ENCODER_UNDERFLOW);
    166e:	86 e9       	ldi	r24, 0x96	; 150
    1670:	91 e0       	ldi	r25, 0x01	; 1
    1672:	63 e0       	ldi	r22, 0x03	; 3
    1674:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <zoErrorPut>
    1678:	08 95       	ret
			zoErrorPut(&zoSmsError,ZO_SMS_ERROR_MOTOR_STALLED);
		}

		if( zoEncoderPollOverFlowError() )
		{
			zoCommandStop(dummy);
    167a:	80 e0       	ldi	r24, 0x00	; 0
    167c:	90 e0       	ldi	r25, 0x00	; 0
    167e:	0e 94 f2 12 	call	0x25e4	; 0x25e4 <zoCommandStop>
			zoErrorPut(&zoSmsError,ZO_SMS_ERROR_ENCODER_OVERFLOW);
    1682:	86 e9       	ldi	r24, 0x96	; 150
    1684:	91 e0       	ldi	r25, 0x01	; 1
    1686:	62 e0       	ldi	r22, 0x02	; 2
    1688:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <zoErrorPut>
    168c:	e8 cf       	rjmp	.-48     	; 0x165e <zoSmsErrorPoll+0x24>
	if( state != ZO_SMS_CONTROL_NO_CONTROL )
	{
		//these are very serious error conditions: motor is stopped if they are encountered
		if( zoSmsMotorStalled() )
		{
			zoCommandStop(dummy);
    168e:	80 e0       	ldi	r24, 0x00	; 0
    1690:	90 e0       	ldi	r25, 0x00	; 0
    1692:	0e 94 f2 12 	call	0x25e4	; 0x25e4 <zoCommandStop>
			zoErrorPut(&zoSmsError,ZO_SMS_ERROR_MOTOR_STALLED);
    1696:	86 e9       	ldi	r24, 0x96	; 150
    1698:	91 e0       	ldi	r25, 0x01	; 1
    169a:	61 e0       	ldi	r22, 0x01	; 1
    169c:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <zoErrorPut>
    16a0:	da cf       	rjmp	.-76     	; 0x1656 <zoSmsErrorPoll+0x1c>

000016a2 <zoSmsErrorInit>:
static u16 StalledTimeOutTimer;

void zoSmsErrorInit(void)
{
	//initialize error buffers
	zoErrorInit(&zoSmsError);
    16a2:	86 e9       	ldi	r24, 0x96	; 150
    16a4:	91 e0       	ldi	r25, 0x01	; 1
    16a6:	0e 94 53 00 	call	0xa6	; 0xa6 <zoErrorInit>
	zoErrorInit(&zoSmsWarning);
    16aa:	83 ea       	ldi	r24, 0xA3	; 163
    16ac:	91 e0       	ldi	r25, 0x01	; 1
    16ae:	0e 94 53 00 	call	0xa6	; 0xa6 <zoErrorInit>

	//Initialize the system timer
	zoSystemTimerInit();
    16b2:	0e 94 10 01 	call	0x220	; 0x220 <zoSystemTimerInit>
	//initialize the timeout for the motor stall regognition function
	zoSystemTimerTimeOutInit(&StalledTimeOutTimer);
    16b6:	84 eb       	ldi	r24, 0xB4	; 180
    16b8:	91 e0       	ldi	r25, 0x01	; 1
    16ba:	0e 94 42 01 	call	0x284	; 0x284 <zoSystemTimerTimeOutInit>
}
    16be:	08 95       	ret

000016c0 <zoCommandAbsolutePositionMove>:

inline s32 strToS32(u08* str)
{
	S32 *num;
	num = (S32*)str;
	return num->all;
    16c0:	fc 01       	movw	r30, r24
    16c2:	84 81       	ldd	r24, Z+4	; 0x04
    16c4:	95 81       	ldd	r25, Z+5	; 0x05
    16c6:	a6 81       	ldd	r26, Z+6	; 0x06
    16c8:	b7 81       	ldd	r27, Z+7	; 0x07
/*08*/	void zoCommandAbsolutePositionMove(ZO_PROTOCOL_PACKET *packet)
{
	s32 pos;
	pos = strToS32(packet->data);

	enterCritical();
    16ca:	0f b6       	in	r0, 0x3f	; 63
    16cc:	0f 92       	push	r0
    16ce:	f8 94       	cli
	Sms.Control.State = ZO_SMS_CONTROL_POSITION_CONTROL;
    16d0:	21 e0       	ldi	r18, 0x01	; 1
    16d2:	20 93 03 01 	sts	0x0103, r18
	Sms.Pid.SetPoint = pos;
    16d6:	80 93 53 01 	sts	0x0153, r24
    16da:	90 93 54 01 	sts	0x0154, r25
    16de:	a0 93 55 01 	sts	0x0155, r26
    16e2:	b0 93 56 01 	sts	0x0156, r27
	exitCritical();
    16e6:	0f 90       	pop	r0
    16e8:	0f be       	out	0x3f, r0	; 63
}
    16ea:	08 95       	ret

000016ec <zoCommandRelativePositionMove>:
    16ec:	fc 01       	movw	r30, r24
    16ee:	84 81       	ldd	r24, Z+4	; 0x04
    16f0:	95 81       	ldd	r25, Z+5	; 0x05
    16f2:	a6 81       	ldd	r26, Z+6	; 0x06
    16f4:	b7 81       	ldd	r27, Z+7	; 0x07
{
	s32 pos;

	pos = strToS32(packet->data);

	enterCritical();
    16f6:	0f b6       	in	r0, 0x3f	; 63
    16f8:	0f 92       	push	r0
    16fa:	f8 94       	cli
	Sms.Control.State = ZO_SMS_CONTROL_POSITION_CONTROL;
    16fc:	21 e0       	ldi	r18, 0x01	; 1
    16fe:	20 93 03 01 	sts	0x0103, r18
	Sms.Pid.SetPoint += pos;
    1702:	20 91 53 01 	lds	r18, 0x0153
    1706:	30 91 54 01 	lds	r19, 0x0154
    170a:	40 91 55 01 	lds	r20, 0x0155
    170e:	50 91 56 01 	lds	r21, 0x0156
    1712:	82 0f       	add	r24, r18
    1714:	93 1f       	adc	r25, r19
    1716:	a4 1f       	adc	r26, r20
    1718:	b5 1f       	adc	r27, r21
    171a:	80 93 53 01 	sts	0x0153, r24
    171e:	90 93 54 01 	sts	0x0154, r25
    1722:	a0 93 55 01 	sts	0x0155, r26
    1726:	b0 93 56 01 	sts	0x0156, r27
	exitCritical();
    172a:	0f 90       	pop	r0
    172c:	0f be       	out	0x3f, r0	; 63
}
    172e:	08 95       	ret

00001730 <zoCommandSetVelocitySetpoint>:

inline s16 strToS16(u08* str)
{
	S16* num;
	num = (S16*)str;
	return num->all;
    1730:	fc 01       	movw	r30, r24
    1732:	84 81       	ldd	r24, Z+4	; 0x04
    1734:	95 81       	ldd	r25, Z+5	; 0x05
{
	s16 vel;

	vel = strToS16(packet->data);

	enterCritical();
    1736:	0f b6       	in	r0, 0x3f	; 63
    1738:	0f 92       	push	r0
    173a:	f8 94       	cli
	Sms.BufferdSetPoint.type = ZO_SMS_SETPOINT_VELOCITY;
    173c:	21 e0       	ldi	r18, 0x01	; 1
    173e:	20 93 5d 01 	sts	0x015D, r18
	Sms.BufferdSetPoint.value = (s32)vel;
    1742:	aa 27       	eor	r26, r26
    1744:	97 fd       	sbrc	r25, 7
    1746:	a0 95       	com	r26
    1748:	ba 2f       	mov	r27, r26
    174a:	80 93 5e 01 	sts	0x015E, r24
    174e:	90 93 5f 01 	sts	0x015F, r25
    1752:	a0 93 60 01 	sts	0x0160, r26
    1756:	b0 93 61 01 	sts	0x0161, r27
	exitCritical();
    175a:	0f 90       	pop	r0
    175c:	0f be       	out	0x3f, r0	; 63
}
    175e:	08 95       	ret

00001760 <zoCommandSetAbsolutePositionSetpoint>:

inline s32 strToS32(u08* str)
{
	S32 *num;
	num = (S32*)str;
	return num->all;
    1760:	fc 01       	movw	r30, r24
    1762:	84 81       	ldd	r24, Z+4	; 0x04
    1764:	95 81       	ldd	r25, Z+5	; 0x05
    1766:	a6 81       	ldd	r26, Z+6	; 0x06
    1768:	b7 81       	ldd	r27, Z+7	; 0x07
{
	s32 pos;

	pos = strToS32(packet->data);

	enterCritical();
    176a:	0f b6       	in	r0, 0x3f	; 63
    176c:	0f 92       	push	r0
    176e:	f8 94       	cli
	Sms.BufferdSetPoint.type = ZO_SMS_SETPOINT_ABSOLUTE_POSITION;
    1770:	22 e0       	ldi	r18, 0x02	; 2
    1772:	20 93 5d 01 	sts	0x015D, r18
	Sms.BufferdSetPoint.value = pos;
    1776:	80 93 5e 01 	sts	0x015E, r24
    177a:	90 93 5f 01 	sts	0x015F, r25
    177e:	a0 93 60 01 	sts	0x0160, r26
    1782:	b0 93 61 01 	sts	0x0161, r27
	exitCritical();
    1786:	0f 90       	pop	r0
    1788:	0f be       	out	0x3f, r0	; 63
}
    178a:	08 95       	ret

0000178c <zoCommandSetRelativePositionSetpoint>:
    178c:	fc 01       	movw	r30, r24
    178e:	84 81       	ldd	r24, Z+4	; 0x04
    1790:	95 81       	ldd	r25, Z+5	; 0x05
    1792:	a6 81       	ldd	r26, Z+6	; 0x06
    1794:	b7 81       	ldd	r27, Z+7	; 0x07
{
	s32 pos;

	pos = strToS32(packet->data);

	enterCritical();
    1796:	0f b6       	in	r0, 0x3f	; 63
    1798:	0f 92       	push	r0
    179a:	f8 94       	cli
	Sms.BufferdSetPoint.type = ZO_SMS_SETPOINT_RELATIVE_POSITION;
    179c:	23 e0       	ldi	r18, 0x03	; 3
    179e:	20 93 5d 01 	sts	0x015D, r18
	Sms.BufferdSetPoint.value = pos;
    17a2:	80 93 5e 01 	sts	0x015E, r24
    17a6:	90 93 5f 01 	sts	0x015F, r25
    17aa:	a0 93 60 01 	sts	0x0160, r26
    17ae:	b0 93 61 01 	sts	0x0161, r27
	exitCritical();
    17b2:	0f 90       	pop	r0
    17b4:	0f be       	out	0x3f, r0	; 63
}
    17b6:	08 95       	ret

000017b8 <zoCommandSetProfiledVelocitySetpoint>:

inline s16 strToS16(u08* str)
{
	S16* num;
	num = (S16*)str;
	return num->all;
    17b8:	fc 01       	movw	r30, r24
    17ba:	84 81       	ldd	r24, Z+4	; 0x04
    17bc:	95 81       	ldd	r25, Z+5	; 0x05
{
	s16 vel;

	vel = strToS16(packet->data);

	enterCritical();
    17be:	0f b6       	in	r0, 0x3f	; 63
    17c0:	0f 92       	push	r0
    17c2:	f8 94       	cli
	Sms.BufferdSetPoint.type = ZO_SMS_SETPOINT_PROFILED_VELOCITY;
    17c4:	24 e0       	ldi	r18, 0x04	; 4
    17c6:	20 93 5d 01 	sts	0x015D, r18
	Sms.BufferdSetPoint.value = (s32)vel;
    17ca:	aa 27       	eor	r26, r26
    17cc:	97 fd       	sbrc	r25, 7
    17ce:	a0 95       	com	r26
    17d0:	ba 2f       	mov	r27, r26
    17d2:	80 93 5e 01 	sts	0x015E, r24
    17d6:	90 93 5f 01 	sts	0x015F, r25
    17da:	a0 93 60 01 	sts	0x0160, r26
    17de:	b0 93 61 01 	sts	0x0161, r27
	exitCritical();
    17e2:	0f 90       	pop	r0
    17e4:	0f be       	out	0x3f, r0	; 63
}
    17e6:	08 95       	ret

000017e8 <zoCommandSetProfiledAbsolutePositionSetpoint>:

inline s32 strToS32(u08* str)
{
	S32 *num;
	num = (S32*)str;
	return num->all;
    17e8:	fc 01       	movw	r30, r24
    17ea:	84 81       	ldd	r24, Z+4	; 0x04
    17ec:	95 81       	ldd	r25, Z+5	; 0x05
    17ee:	a6 81       	ldd	r26, Z+6	; 0x06
    17f0:	b7 81       	ldd	r27, Z+7	; 0x07
{
	s32 pos;

	pos = strToS32(packet->data);

	enterCritical();
    17f2:	0f b6       	in	r0, 0x3f	; 63
    17f4:	0f 92       	push	r0
    17f6:	f8 94       	cli
	Sms.BufferdSetPoint.type = ZO_SMS_SETPOINT_PROFILED_ABSOLUTE_POSITION;
    17f8:	25 e0       	ldi	r18, 0x05	; 5
    17fa:	20 93 5d 01 	sts	0x015D, r18
	Sms.BufferdSetPoint.value = pos;
    17fe:	80 93 5e 01 	sts	0x015E, r24
    1802:	90 93 5f 01 	sts	0x015F, r25
    1806:	a0 93 60 01 	sts	0x0160, r26
    180a:	b0 93 61 01 	sts	0x0161, r27
	exitCritical();
    180e:	0f 90       	pop	r0
    1810:	0f be       	out	0x3f, r0	; 63
}
    1812:	08 95       	ret

00001814 <zoCommandSetProfiledRelativePositionSetpoint>:
    1814:	fc 01       	movw	r30, r24
    1816:	84 81       	ldd	r24, Z+4	; 0x04
    1818:	95 81       	ldd	r25, Z+5	; 0x05
    181a:	a6 81       	ldd	r26, Z+6	; 0x06
    181c:	b7 81       	ldd	r27, Z+7	; 0x07
{
	s32 pos;

	pos = strToS32(packet->data);

	enterCritical();
    181e:	0f b6       	in	r0, 0x3f	; 63
    1820:	0f 92       	push	r0
    1822:	f8 94       	cli
	Sms.BufferdSetPoint.type = ZO_SMS_SETPOINT_PROFILED_RELATIVE_POSITION;
    1824:	26 e0       	ldi	r18, 0x06	; 6
    1826:	20 93 5d 01 	sts	0x015D, r18
	Sms.BufferdSetPoint.value = pos;
    182a:	80 93 5e 01 	sts	0x015E, r24
    182e:	90 93 5f 01 	sts	0x015F, r25
    1832:	a0 93 60 01 	sts	0x0160, r26
    1836:	b0 93 61 01 	sts	0x0161, r27
	exitCritical();
    183a:	0f 90       	pop	r0
    183c:	0f be       	out	0x3f, r0	; 63
}
    183e:	08 95       	ret

00001840 <zoCommandSetDigitalOut>:
	Sms.Settings.DigitalIoConfig = dir & 0x0F;
	exitCritical();
}

/*14*/	void zoCommandSetDigitalOut(ZO_PROTOCOL_PACKET *packet)
{
    1840:	fc 01       	movw	r30, r24
	u08 out;

	enterCritical();
    1842:	0f b6       	in	r0, 0x3f	; 63
    1844:	0f 92       	push	r0
    1846:	f8 94       	cli
	//if a pin is input leave respective bit zero
	out = packet->data[0] & Sms.Settings.DigitalIoConfig;
	//set digital out 1:if it is input leave it as it is (pull up enabled)
	PORTD = (PORTD & (~0x80)) | ( (out<<7) & 0x80 );
    1848:	4b b1       	in	r20, 0x0b	; 11
    184a:	80 91 09 01 	lds	r24, 0x0109
    184e:	24 81       	ldd	r18, Z+4	; 0x04
    1850:	82 23       	and	r24, r18
    1852:	90 e0       	ldi	r25, 0x00	; 0
    1854:	9c 01       	movw	r18, r24
    1856:	36 95       	lsr	r19
    1858:	32 2f       	mov	r19, r18
    185a:	22 27       	eor	r18, r18
    185c:	37 95       	ror	r19
    185e:	27 95       	ror	r18
    1860:	4f 77       	andi	r20, 0x7F	; 127
    1862:	42 2b       	or	r20, r18
    1864:	4b b9       	out	0x0b, r20	; 11
	//set digital IO 2,3,4 direction -> portB3,4,5 respectively
	PORTB = (PORTB & (~0x38)) | ( (out<<3) & 0x38 );
    1866:	25 b1       	in	r18, 0x05	; 5
    1868:	88 0f       	add	r24, r24
    186a:	99 1f       	adc	r25, r25
    186c:	88 0f       	add	r24, r24
    186e:	99 1f       	adc	r25, r25
    1870:	88 0f       	add	r24, r24
    1872:	99 1f       	adc	r25, r25
    1874:	88 73       	andi	r24, 0x38	; 56
    1876:	27 7c       	andi	r18, 0xC7	; 199
    1878:	82 2b       	or	r24, r18
    187a:	85 b9       	out	0x05, r24	; 5
	exitCritical();
    187c:	0f 90       	pop	r0
    187e:	0f be       	out	0x3f, r0	; 63
}
    1880:	08 95       	ret

00001882 <zoCommandGetGainP>:
	Sms.Settings.errorReportingLevel = packet->data[0];
	exitCritical();	
}

/*64*/	void zoCommandGetGainP(ZO_PROTOCOL_PACKET *packet)
{
    1882:	fc 01       	movw	r30, r24
	packet->byteCount = 2;
    1884:	82 e0       	ldi	r24, 0x02	; 2
    1886:	83 83       	std	Z+3, r24	; 0x03
	
	enterCritical();
    1888:	0f b6       	in	r0, 0x3f	; 63
    188a:	0f 92       	push	r0
    188c:	f8 94       	cli

inline void u16ToStr(u16 data, u08* str)
{
	U16* num;
	num = (U16*)str;
	num->all = data;
    188e:	80 91 3d 01 	lds	r24, 0x013D
    1892:	90 91 3e 01 	lds	r25, 0x013E
    1896:	95 83       	std	Z+5, r25	; 0x05
    1898:	84 83       	std	Z+4, r24	; 0x04
	u16ToStr(Sms.Pid.GainP,packet->data);
	exitCritical();
    189a:	0f 90       	pop	r0
    189c:	0f be       	out	0x3f, r0	; 63
}
    189e:	08 95       	ret

000018a0 <zoCommandGetGainI>:

/*65*/	void zoCommandGetGainI(ZO_PROTOCOL_PACKET *packet)
{
    18a0:	fc 01       	movw	r30, r24
	packet->byteCount = 2;
    18a2:	82 e0       	ldi	r24, 0x02	; 2
    18a4:	83 83       	std	Z+3, r24	; 0x03

	enterCritical();
    18a6:	0f b6       	in	r0, 0x3f	; 63
    18a8:	0f 92       	push	r0
    18aa:	f8 94       	cli
    18ac:	80 91 3f 01 	lds	r24, 0x013F
    18b0:	90 91 40 01 	lds	r25, 0x0140
    18b4:	95 83       	std	Z+5, r25	; 0x05
    18b6:	84 83       	std	Z+4, r24	; 0x04
	u16ToStr(Sms.Pid.GainI,packet->data);
	exitCritical();
    18b8:	0f 90       	pop	r0
    18ba:	0f be       	out	0x3f, r0	; 63
}
    18bc:	08 95       	ret

000018be <zoCommandGetGainD>:
/*66*/	void zoCommandGetGainD(ZO_PROTOCOL_PACKET *packet)
{
    18be:	fc 01       	movw	r30, r24
	packet->byteCount = 2;
    18c0:	82 e0       	ldi	r24, 0x02	; 2
    18c2:	83 83       	std	Z+3, r24	; 0x03

	enterCritical();
    18c4:	0f b6       	in	r0, 0x3f	; 63
    18c6:	0f 92       	push	r0
    18c8:	f8 94       	cli
    18ca:	80 91 41 01 	lds	r24, 0x0141
    18ce:	90 91 42 01 	lds	r25, 0x0142
    18d2:	95 83       	std	Z+5, r25	; 0x05
    18d4:	84 83       	std	Z+4, r24	; 0x04
	u16ToStr(Sms.Pid.GainD,packet->data);
	exitCritical();
    18d6:	0f 90       	pop	r0
    18d8:	0f be       	out	0x3f, r0	; 63
}
    18da:	08 95       	ret

000018dc <zoCommandGetProfileAcceleration>:

/*67*/	void zoCommandGetProfileAcceleration(ZO_PROTOCOL_PACKET *packet)
{
    18dc:	fc 01       	movw	r30, r24
	packet->byteCount = 2;
    18de:	82 e0       	ldi	r24, 0x02	; 2
    18e0:	83 83       	std	Z+3, r24	; 0x03

	enterCritical();
    18e2:	0f b6       	in	r0, 0x3f	; 63
    18e4:	0f 92       	push	r0
    18e6:	f8 94       	cli
    18e8:	80 91 38 01 	lds	r24, 0x0138
    18ec:	90 91 39 01 	lds	r25, 0x0139
    18f0:	95 83       	std	Z+5, r25	; 0x05
    18f2:	84 83       	std	Z+4, r24	; 0x04
	u16ToStr(Sms.Profile.DesiredAcceleration,packet->data);
	exitCritical();
    18f4:	0f 90       	pop	r0
    18f6:	0f be       	out	0x3f, r0	; 63
}
    18f8:	08 95       	ret

000018fa <zoCommandGetProfileVelocity>:

/*68*/	void zoCommandGetProfileVelocity(ZO_PROTOCOL_PACKET *packet)
{
    18fa:	fc 01       	movw	r30, r24
	packet->byteCount = 2;
    18fc:	82 e0       	ldi	r24, 0x02	; 2
    18fe:	83 83       	std	Z+3, r24	; 0x03
	
	enterCritical();
    1900:	0f b6       	in	r0, 0x3f	; 63
    1902:	0f 92       	push	r0
    1904:	f8 94       	cli
    1906:	80 91 3a 01 	lds	r24, 0x013A
    190a:	90 91 3b 01 	lds	r25, 0x013B
    190e:	95 83       	std	Z+5, r25	; 0x05
    1910:	84 83       	std	Z+4, r24	; 0x04
	u16ToStr(Sms.Profile.DesiredVelocity,packet->data);
	exitCritical();
    1912:	0f 90       	pop	r0
    1914:	0f be       	out	0x3f, r0	; 63
}
    1916:	08 95       	ret

00001918 <zoCommandGetCurrentLimit>:

/*69*/	void zoCommandGetCurrentLimit(ZO_PROTOCOL_PACKET *packet)
{
    1918:	fc 01       	movw	r30, r24
	packet->byteCount = 2;
    191a:	82 e0       	ldi	r24, 0x02	; 2
    191c:	83 83       	std	Z+3, r24	; 0x03
	
	enterCritical();
    191e:	0f b6       	in	r0, 0x3f	; 63
    1920:	0f 92       	push	r0
    1922:	f8 94       	cli
    1924:	80 91 0a 01 	lds	r24, 0x010A
    1928:	90 91 0b 01 	lds	r25, 0x010B
    192c:	95 83       	std	Z+5, r25	; 0x05
    192e:	84 83       	std	Z+4, r24	; 0x04
	u16ToStr(Sms.Settings.CurrentLimit,packet->data);
	exitCritical();
    1930:	0f 90       	pop	r0
    1932:	0f be       	out	0x3f, r0	; 63
}
    1934:	08 95       	ret

00001936 <zoCommandGetCurrentLimitDuration>:

/*6A*/	void zoCommandGetCurrentLimitDuration(ZO_PROTOCOL_PACKET *packet)
{
    1936:	fc 01       	movw	r30, r24
	packet->byteCount = 2;
    1938:	82 e0       	ldi	r24, 0x02	; 2
    193a:	83 83       	std	Z+3, r24	; 0x03
	
	enterCritical();
    193c:	0f b6       	in	r0, 0x3f	; 63
    193e:	0f 92       	push	r0
    1940:	f8 94       	cli
    1942:	80 91 0c 01 	lds	r24, 0x010C
    1946:	90 91 0d 01 	lds	r25, 0x010D
    194a:	95 83       	std	Z+5, r25	; 0x05
    194c:	84 83       	std	Z+4, r24	; 0x04
	u16ToStr(Sms.Settings.CurrentLimitDuration,packet->data);
	exitCritical();
    194e:	0f 90       	pop	r0
    1950:	0f be       	out	0x3f, r0	; 63
}
    1952:	08 95       	ret

00001954 <zoCommandGetDigitalIoConfiguration>:
/*6B*/	void zoCommandGetDigitalIoConfiguration(ZO_PROTOCOL_PACKET *packet)
{
    1954:	fc 01       	movw	r30, r24
	packet->byteCount = 1;
    1956:	81 e0       	ldi	r24, 0x01	; 1
    1958:	83 83       	std	Z+3, r24	; 0x03
	packet->data[0] = Sms.Settings.DigitalIoConfig;
    195a:	80 91 09 01 	lds	r24, 0x0109
    195e:	84 83       	std	Z+4, r24	; 0x04
}
    1960:	08 95       	ret

00001962 <zoCommandGetLocalAcceptanceMask>:
/*6C*/	void zoCommandGetLocalAcceptanceMask(ZO_PROTOCOL_PACKET *packet)
{
    1962:	fc 01       	movw	r30, r24
	packet->byteCount = 1;
    1964:	81 e0       	ldi	r24, 0x01	; 1
    1966:	83 83       	std	Z+3, r24	; 0x03
	packet->data[0]	= Sms.Settings.localAcceptanceMask;
    1968:	80 91 16 01 	lds	r24, 0x0116
    196c:	84 83       	std	Z+4, r24	; 0x04
}
    196e:	08 95       	ret

00001970 <zoCommandGetDigitalIn>:

/*6D*/	void zoCommandGetDigitalIn(ZO_PROTOCOL_PACKET *packet)
{
    1970:	fc 01       	movw	r30, r24
	u08 in=0;

	packet->byteCount = 1;
    1972:	81 e0       	ldi	r24, 0x01	; 1
    1974:	83 83       	std	Z+3, r24	; 0x03

	enterCritical();
    1976:	0f b6       	in	r0, 0x3f	; 63
    1978:	0f 92       	push	r0
    197a:	f8 94       	cli
	in = (PIND>>7) & 0x01;
    197c:	29 b1       	in	r18, 0x09	; 9
	in |= (PINB & 0x38) >> 2;
    197e:	83 b1       	in	r24, 0x03	; 3
    1980:	90 e0       	ldi	r25, 0x00	; 0
    1982:	88 73       	andi	r24, 0x38	; 56
    1984:	90 70       	andi	r25, 0x00	; 0
    1986:	95 95       	asr	r25
    1988:	87 95       	ror	r24
    198a:	95 95       	asr	r25
    198c:	87 95       	ror	r24
    198e:	22 1f       	adc	r18, r18
    1990:	22 27       	eor	r18, r18
    1992:	22 1f       	adc	r18, r18
    1994:	28 2b       	or	r18, r24
	exitCritical();
    1996:	0f 90       	pop	r0
    1998:	0f be       	out	0x3f, r0	; 63

	packet->data[0] = in;
    199a:	24 83       	std	Z+4, r18	; 0x04
}
    199c:	08 95       	ret

0000199e <zoCommandGetVelocity>:
	packet->byteCount = 2;

	u16ToStr(zoEncoderGetPosAbsolute(),packet->data);
}
/*71*/	void zoCommandGetVelocity(ZO_PROTOCOL_PACKET *packet)
{
    199e:	0f 93       	push	r16
    19a0:	1f 93       	push	r17
    19a2:	8c 01       	movw	r16, r24
	packet->byteCount = 2;
    19a4:	82 e0       	ldi	r24, 0x02	; 2
    19a6:	f8 01       	movw	r30, r16
    19a8:	83 83       	std	Z+3, r24	; 0x03

	s16ToStr(zoEncoderGetVel(),packet->data);	
    19aa:	0e 94 51 03 	call	0x6a2	; 0x6a2 <zoEncoderGetVel>

inline void s16ToStr(s16 data, u08* str)
{
	S16* num;
	num = (S16*)str;
	num->all = data;
    19ae:	f8 01       	movw	r30, r16
    19b0:	95 83       	std	Z+5, r25	; 0x05
    19b2:	84 83       	std	Z+4, r24	; 0x04
}
    19b4:	1f 91       	pop	r17
    19b6:	0f 91       	pop	r16
    19b8:	08 95       	ret

000019ba <zoProfiledVelocity>:
/*C9*/	//zoCommandGlobalStart(ZO_PROTOCOL_PACKET *packet){}
/*CA*/	//zoCommandGlobalHalt(ZO_PROTOCOL_PACKET *packet){}
/*CB*/	//zoCommandGlobalStop(ZO_PROTOCOL_PACKET *packet){}

void zoProfiledVelocity(s16 velocity)
{
    19ba:	2f 92       	push	r2
    19bc:	3f 92       	push	r3
    19be:	4f 92       	push	r4
    19c0:	5f 92       	push	r5
    19c2:	6f 92       	push	r6
    19c4:	7f 92       	push	r7
    19c6:	8f 92       	push	r8
    19c8:	9f 92       	push	r9
    19ca:	af 92       	push	r10
    19cc:	bf 92       	push	r11
    19ce:	cf 92       	push	r12
    19d0:	df 92       	push	r13
    19d2:	ef 92       	push	r14
    19d4:	ff 92       	push	r15
    19d6:	0f 93       	push	r16
    19d8:	1f 93       	push	r17
    19da:	df 93       	push	r29
    19dc:	cf 93       	push	r28
    19de:	cd b7       	in	r28, 0x3d	; 61
    19e0:	de b7       	in	r29, 0x3e	; 62
    19e2:	28 97       	sbiw	r28, 0x08	; 8
    19e4:	0f b6       	in	r0, 0x3f	; 63
    19e6:	f8 94       	cli
    19e8:	de bf       	out	0x3e, r29	; 62
    19ea:	0f be       	out	0x3f, r0	; 63
    19ec:	cd bf       	out	0x3d, r28	; 61
	s32 currentVel;
	s32 accel;
	s32 vel;
		
	s08 s=1;
	vel = (s32)velocity;
    19ee:	3c 01       	movw	r6, r24
    19f0:	88 24       	eor	r8, r8
    19f2:	77 fc       	sbrc	r7, 7
    19f4:	80 94       	com	r8
    19f6:	98 2c       	mov	r9, r8

	enterCritical();
    19f8:	0f b6       	in	r0, 0x3f	; 63
    19fa:	0f 92       	push	r0
    19fc:	f8 94       	cli
	if(Sms.Control.State == ZO_SMS_CONTROL_POSITION_CONTROL)					//if previous state was again profiled
    19fe:	80 91 03 01 	lds	r24, 0x0103
    1a02:	81 30       	cpi	r24, 0x01	; 1
    1a04:	09 f4       	brne	.+2      	; 0x1a08 <zoProfiledVelocity+0x4e>
    1a06:	f2 c0       	rjmp	.+484    	; 0x1bec <zoProfiledVelocity+0x232>
		currentPos = zoEncoderGetPos();
		currentVel = zoEncoderGetVel();
	}
	else
	{
		currentVel = (s32)(Sms.Profile.VelocityDeltaPos * Sms.Control.LoopHz);
    1a08:	80 91 04 01 	lds	r24, 0x0104
    1a0c:	90 91 05 01 	lds	r25, 0x0105
    1a10:	a0 91 06 01 	lds	r26, 0x0106
    1a14:	b0 91 07 01 	lds	r27, 0x0107
    1a18:	89 83       	std	Y+1, r24	; 0x01
    1a1a:	9a 83       	std	Y+2, r25	; 0x02
    1a1c:	ab 83       	std	Y+3, r26	; 0x03
    1a1e:	bc 83       	std	Y+4, r27	; 0x04
    1a20:	bc 01       	movw	r22, r24
    1a22:	cd 01       	movw	r24, r26
    1a24:	20 91 20 01 	lds	r18, 0x0120
    1a28:	30 91 21 01 	lds	r19, 0x0121
    1a2c:	40 91 22 01 	lds	r20, 0x0122
    1a30:	50 91 23 01 	lds	r21, 0x0123
    1a34:	0e 94 4b 24 	call	0x4896	; 0x4896 <__mulsf3>
    1a38:	0e 94 8c 23 	call	0x4718	; 0x4718 <__fixsfsi>
    1a3c:	5b 01       	movw	r10, r22
    1a3e:	6c 01       	movw	r12, r24
		currentPos = (s32)Sms.Profile.PositionSetpoint;
    1a40:	60 91 18 01 	lds	r22, 0x0118
    1a44:	70 91 19 01 	lds	r23, 0x0119
    1a48:	80 91 1a 01 	lds	r24, 0x011A
    1a4c:	90 91 1b 01 	lds	r25, 0x011B
    1a50:	0e 94 8c 23 	call	0x4718	; 0x4718 <__fixsfsi>
    1a54:	1b 01       	movw	r2, r22
    1a56:	2c 01       	movw	r4, r24
	}

	s = ( vel >= currentVel ) ? 1 : -1;
    1a58:	6a 14       	cp	r6, r10
    1a5a:	7b 04       	cpc	r7, r11
    1a5c:	8c 04       	cpc	r8, r12
    1a5e:	9d 04       	cpc	r9, r13
    1a60:	0c f4       	brge	.+2      	; 0x1a64 <zoProfiledVelocity+0xaa>
    1a62:	b2 c0       	rjmp	.+356    	; 0x1bc8 <zoProfiledVelocity+0x20e>
	accel = ( s == 1 ) ? (s32)Sms.Profile.DesiredAcceleration : 
    1a64:	80 91 38 01 	lds	r24, 0x0138
    1a68:	90 91 39 01 	lds	r25, 0x0139
    1a6c:	9c 01       	movw	r18, r24
    1a6e:	40 e0       	ldi	r20, 0x00	; 0
    1a70:	50 e0       	ldi	r21, 0x00	; 0
    1a72:	2d 83       	std	Y+5, r18	; 0x05
    1a74:	3e 83       	std	Y+6, r19	; 0x06
    1a76:	4f 83       	std	Y+7, r20	; 0x07
    1a78:	58 87       	std	Y+8, r21	; 0x08
							   -((s32)Sms.Profile.DesiredAcceleration);
	exitCritical();
    1a7a:	0f 90       	pop	r0
    1a7c:	0f be       	out	0x3f, r0	; 63

	accelKnee = ( vel*vel - currentVel*currentVel ) / accel / 2 + currentPos;
	
	enterCritical();
    1a7e:	0f b6       	in	r0, 0x3f	; 63
    1a80:	0f 92       	push	r0
    1a82:	f8 94       	cli
	Sms.Profile.PositionSetpoint = currentPos;
    1a84:	c2 01       	movw	r24, r4
    1a86:	b1 01       	movw	r22, r2
    1a88:	0e 94 bf 23 	call	0x477e	; 0x477e <__floatsisf>
    1a8c:	60 93 18 01 	sts	0x0118, r22
    1a90:	70 93 19 01 	sts	0x0119, r23
    1a94:	80 93 1a 01 	sts	0x011A, r24
    1a98:	90 93 1b 01 	sts	0x011B, r25
	Sms.Profile.AccelerationKnee = accelKnee;
    1a9c:	c4 01       	movw	r24, r8
    1a9e:	b3 01       	movw	r22, r6
    1aa0:	a4 01       	movw	r20, r8
    1aa2:	93 01       	movw	r18, r6
    1aa4:	0e 94 08 25 	call	0x4a10	; 0x4a10 <__mulsi3>
    1aa8:	7b 01       	movw	r14, r22
    1aaa:	8c 01       	movw	r16, r24
    1aac:	c6 01       	movw	r24, r12
    1aae:	b5 01       	movw	r22, r10
    1ab0:	a6 01       	movw	r20, r12
    1ab2:	95 01       	movw	r18, r10
    1ab4:	0e 94 08 25 	call	0x4a10	; 0x4a10 <__mulsi3>
    1ab8:	e6 1a       	sub	r14, r22
    1aba:	f7 0a       	sbc	r15, r23
    1abc:	08 0b       	sbc	r16, r24
    1abe:	19 0b       	sbc	r17, r25
    1ac0:	c8 01       	movw	r24, r16
    1ac2:	b7 01       	movw	r22, r14
    1ac4:	2d 81       	ldd	r18, Y+5	; 0x05
    1ac6:	3e 81       	ldd	r19, Y+6	; 0x06
    1ac8:	4f 81       	ldd	r20, Y+7	; 0x07
    1aca:	58 85       	ldd	r21, Y+8	; 0x08
    1acc:	0e 94 5d 25 	call	0x4aba	; 0x4aba <__divmodsi4>
    1ad0:	ca 01       	movw	r24, r20
    1ad2:	b9 01       	movw	r22, r18
    1ad4:	22 e0       	ldi	r18, 0x02	; 2
    1ad6:	30 e0       	ldi	r19, 0x00	; 0
    1ad8:	40 e0       	ldi	r20, 0x00	; 0
    1ada:	50 e0       	ldi	r21, 0x00	; 0
    1adc:	0e 94 5d 25 	call	0x4aba	; 0x4aba <__divmodsi4>
    1ae0:	22 0d       	add	r18, r2
    1ae2:	33 1d       	adc	r19, r3
    1ae4:	44 1d       	adc	r20, r4
    1ae6:	55 1d       	adc	r21, r5
    1ae8:	20 93 2c 01 	sts	0x012C, r18
    1aec:	30 93 2d 01 	sts	0x012D, r19
    1af0:	40 93 2e 01 	sts	0x012E, r20
    1af4:	50 93 2f 01 	sts	0x012F, r21
	Sms.Control.State = ZO_SMS_CONTROL_PROFILED_VELOCITY_CONTROL;
    1af8:	83 e0       	ldi	r24, 0x03	; 3
    1afa:	80 93 03 01 	sts	0x0103, r24
	Sms.Profile.TargetVelDeltaPos = (double)vel/Sms.Control.LoopHz;
    1afe:	c4 01       	movw	r24, r8
    1b00:	b3 01       	movw	r22, r6
    1b02:	0e 94 bf 23 	call	0x477e	; 0x477e <__floatsisf>
    1b06:	29 81       	ldd	r18, Y+1	; 0x01
    1b08:	3a 81       	ldd	r19, Y+2	; 0x02
    1b0a:	4b 81       	ldd	r20, Y+3	; 0x03
    1b0c:	5c 81       	ldd	r21, Y+4	; 0x04
    1b0e:	0e 94 24 23 	call	0x4648	; 0x4648 <__divsf3>
    1b12:	60 93 1c 01 	sts	0x011C, r22
    1b16:	70 93 1d 01 	sts	0x011D, r23
    1b1a:	80 93 1e 01 	sts	0x011E, r24
    1b1e:	90 93 1f 01 	sts	0x011F, r25
	Sms.Profile.VelocityDeltaPos = (double)currentVel/Sms.Control.LoopHz;
    1b22:	c6 01       	movw	r24, r12
    1b24:	b5 01       	movw	r22, r10
    1b26:	0e 94 bf 23 	call	0x477e	; 0x477e <__floatsisf>
    1b2a:	29 81       	ldd	r18, Y+1	; 0x01
    1b2c:	3a 81       	ldd	r19, Y+2	; 0x02
    1b2e:	4b 81       	ldd	r20, Y+3	; 0x03
    1b30:	5c 81       	ldd	r21, Y+4	; 0x04
    1b32:	0e 94 24 23 	call	0x4648	; 0x4648 <__divsf3>
    1b36:	dc 01       	movw	r26, r24
    1b38:	9b 01       	movw	r18, r22
    1b3a:	ac 01       	movw	r20, r24
    1b3c:	20 93 20 01 	sts	0x0120, r18
    1b40:	30 93 21 01 	sts	0x0121, r19
    1b44:	40 93 22 01 	sts	0x0122, r20
    1b48:	50 93 23 01 	sts	0x0123, r21
	Sms.Profile.LastVelocityDeltaPos = Sms.Profile.VelocityDeltaPos;
    1b4c:	cb 01       	movw	r24, r22
    1b4e:	80 93 24 01 	sts	0x0124, r24
    1b52:	90 93 25 01 	sts	0x0125, r25
    1b56:	a0 93 26 01 	sts	0x0126, r26
    1b5a:	b0 93 27 01 	sts	0x0127, r27
	Sms.Profile.ConstAccelDeltaVel = (double)accel/Sms.Control.LoopHz/Sms.Control.LoopHz;
    1b5e:	6d 81       	ldd	r22, Y+5	; 0x05
    1b60:	7e 81       	ldd	r23, Y+6	; 0x06
    1b62:	8f 81       	ldd	r24, Y+7	; 0x07
    1b64:	98 85       	ldd	r25, Y+8	; 0x08
    1b66:	0e 94 bf 23 	call	0x477e	; 0x477e <__floatsisf>
    1b6a:	29 81       	ldd	r18, Y+1	; 0x01
    1b6c:	3a 81       	ldd	r19, Y+2	; 0x02
    1b6e:	4b 81       	ldd	r20, Y+3	; 0x03
    1b70:	5c 81       	ldd	r21, Y+4	; 0x04
    1b72:	0e 94 24 23 	call	0x4648	; 0x4648 <__divsf3>
    1b76:	29 81       	ldd	r18, Y+1	; 0x01
    1b78:	3a 81       	ldd	r19, Y+2	; 0x02
    1b7a:	4b 81       	ldd	r20, Y+3	; 0x03
    1b7c:	5c 81       	ldd	r21, Y+4	; 0x04
    1b7e:	0e 94 24 23 	call	0x4648	; 0x4648 <__divsf3>
    1b82:	60 93 28 01 	sts	0x0128, r22
    1b86:	70 93 29 01 	sts	0x0129, r23
    1b8a:	80 93 2a 01 	sts	0x012A, r24
    1b8e:	90 93 2b 01 	sts	0x012B, r25
	exitCritical();
    1b92:	0f 90       	pop	r0
    1b94:	0f be       	out	0x3f, r0	; 63
}
    1b96:	28 96       	adiw	r28, 0x08	; 8
    1b98:	0f b6       	in	r0, 0x3f	; 63
    1b9a:	f8 94       	cli
    1b9c:	de bf       	out	0x3e, r29	; 62
    1b9e:	0f be       	out	0x3f, r0	; 63
    1ba0:	cd bf       	out	0x3d, r28	; 61
    1ba2:	cf 91       	pop	r28
    1ba4:	df 91       	pop	r29
    1ba6:	1f 91       	pop	r17
    1ba8:	0f 91       	pop	r16
    1baa:	ff 90       	pop	r15
    1bac:	ef 90       	pop	r14
    1bae:	df 90       	pop	r13
    1bb0:	cf 90       	pop	r12
    1bb2:	bf 90       	pop	r11
    1bb4:	af 90       	pop	r10
    1bb6:	9f 90       	pop	r9
    1bb8:	8f 90       	pop	r8
    1bba:	7f 90       	pop	r7
    1bbc:	6f 90       	pop	r6
    1bbe:	5f 90       	pop	r5
    1bc0:	4f 90       	pop	r4
    1bc2:	3f 90       	pop	r3
    1bc4:	2f 90       	pop	r2
    1bc6:	08 95       	ret
		currentVel = (s32)(Sms.Profile.VelocityDeltaPos * Sms.Control.LoopHz);
		currentPos = (s32)Sms.Profile.PositionSetpoint;
	}

	s = ( vel >= currentVel ) ? 1 : -1;
	accel = ( s == 1 ) ? (s32)Sms.Profile.DesiredAcceleration : 
    1bc8:	80 91 38 01 	lds	r24, 0x0138
    1bcc:	90 91 39 01 	lds	r25, 0x0139
    1bd0:	a0 e0       	ldi	r26, 0x00	; 0
    1bd2:	b0 e0       	ldi	r27, 0x00	; 0
    1bd4:	22 27       	eor	r18, r18
    1bd6:	33 27       	eor	r19, r19
    1bd8:	a9 01       	movw	r20, r18
    1bda:	28 1b       	sub	r18, r24
    1bdc:	39 0b       	sbc	r19, r25
    1bde:	4a 0b       	sbc	r20, r26
    1be0:	5b 0b       	sbc	r21, r27
    1be2:	2d 83       	std	Y+5, r18	; 0x05
    1be4:	3e 83       	std	Y+6, r19	; 0x06
    1be6:	4f 83       	std	Y+7, r20	; 0x07
    1be8:	58 87       	std	Y+8, r21	; 0x08
    1bea:	47 cf       	rjmp	.-370    	; 0x1a7a <zoProfiledVelocity+0xc0>
	vel = (s32)velocity;

	enterCritical();
	if(Sms.Control.State == ZO_SMS_CONTROL_POSITION_CONTROL)					//if previous state was again profiled
	{
		currentPos = zoEncoderGetPos();
    1bec:	0e 94 36 04 	call	0x86c	; 0x86c <zoEncoderGetPos>
    1bf0:	1b 01       	movw	r2, r22
    1bf2:	2c 01       	movw	r4, r24
		currentVel = zoEncoderGetVel();
    1bf4:	0e 94 51 03 	call	0x6a2	; 0x6a2 <zoEncoderGetVel>
    1bf8:	5c 01       	movw	r10, r24
    1bfa:	cc 24       	eor	r12, r12
    1bfc:	b7 fc       	sbrc	r11, 7
    1bfe:	c0 94       	com	r12
    1c00:	dc 2c       	mov	r13, r12
    1c02:	20 91 04 01 	lds	r18, 0x0104
    1c06:	30 91 05 01 	lds	r19, 0x0105
    1c0a:	40 91 06 01 	lds	r20, 0x0106
    1c0e:	50 91 07 01 	lds	r21, 0x0107
    1c12:	29 83       	std	Y+1, r18	; 0x01
    1c14:	3a 83       	std	Y+2, r19	; 0x02
    1c16:	4b 83       	std	Y+3, r20	; 0x03
    1c18:	5c 83       	std	Y+4, r21	; 0x04
    1c1a:	1e cf       	rjmp	.-452    	; 0x1a58 <zoProfiledVelocity+0x9e>

00001c1c <zoCommandProfiledVelocityMove>:
/*0A*/  void zoCommandProfiledVelocityMove(ZO_PROTOCOL_PACKET *packet)
{
	s16 vel;

	vel = strToS16(packet->data);
	zoProfiledVelocity(vel);
    1c1c:	fc 01       	movw	r30, r24
    1c1e:	84 81       	ldd	r24, Z+4	; 0x04
    1c20:	95 81       	ldd	r25, Z+5	; 0x05
    1c22:	0e 94 dd 0c 	call	0x19ba	; 0x19ba <zoProfiledVelocity>
}
    1c26:	08 95       	ret

00001c28 <zoCommandGetPosition>:
	u16ToStr(zoAdcRead(ZO_ADC_CHANNEL_2),&packet->data[4]);
	u16ToStr(zoAdcRead(ZO_ADC_CHANNEL_3),&packet->data[6]);
}

/*6F*/  void zoCommandGetPosition(ZO_PROTOCOL_PACKET *packet)
{
    1c28:	0f 93       	push	r16
    1c2a:	1f 93       	push	r17
    1c2c:	8c 01       	movw	r16, r24
	packet->byteCount = 4;
    1c2e:	84 e0       	ldi	r24, 0x04	; 4
    1c30:	f8 01       	movw	r30, r16
    1c32:	83 83       	std	Z+3, r24	; 0x03

	s32ToStr(zoEncoderGetPos(),packet->data);
    1c34:	0e 94 36 04 	call	0x86c	; 0x86c <zoEncoderGetPos>

inline void s32ToStr(s32 data, u08* str)
{
	S32* num;
	num = (S32*)str;
	num->all = data;
    1c38:	f8 01       	movw	r30, r16
    1c3a:	64 83       	std	Z+4, r22	; 0x04
    1c3c:	75 83       	std	Z+5, r23	; 0x05
    1c3e:	86 83       	std	Z+6, r24	; 0x06
    1c40:	97 83       	std	Z+7, r25	; 0x07
}
    1c42:	1f 91       	pop	r17
    1c44:	0f 91       	pop	r16
    1c46:	08 95       	ret

00001c48 <zoCommandHalt>:
	zoMotorSetState(TRUE);
	exitCritical();
}
/*1A*/	void zoCommandHalt(ZO_PROTOCOL_PACKET *packet)
{
	enterCritical();
    1c48:	0f b6       	in	r0, 0x3f	; 63
    1c4a:	0f 92       	push	r0
    1c4c:	f8 94       	cli
	Sms.Control.State = ZO_SMS_CONTROL_POSITION_CONTROL;
    1c4e:	81 e0       	ldi	r24, 0x01	; 1
    1c50:	80 93 03 01 	sts	0x0103, r24
	Sms.Pid.SetPoint = zoEncoderGetPos();
    1c54:	0e 94 36 04 	call	0x86c	; 0x86c <zoEncoderGetPos>
    1c58:	60 93 53 01 	sts	0x0153, r22
    1c5c:	70 93 54 01 	sts	0x0154, r23
    1c60:	80 93 55 01 	sts	0x0155, r24
    1c64:	90 93 56 01 	sts	0x0156, r25
	exitCritical();
    1c68:	0f 90       	pop	r0
    1c6a:	0f be       	out	0x3f, r0	; 63
}
    1c6c:	08 95       	ret

00001c6e <zoCommandVelocityMove>:
	Sms.Settings.CurrentLimit = currLimDurMiliSecs;
	exitCritical();
}

/*07*/	void zoCommandVelocityMove(ZO_PROTOCOL_PACKET *packet)
{
    1c6e:	cf 93       	push	r28
    1c70:	df 93       	push	r29

inline s16 strToS16(u08* str)
{
	S16* num;
	num = (S16*)str;
	return num->all;
    1c72:	fc 01       	movw	r30, r24
    1c74:	c4 81       	ldd	r28, Z+4	; 0x04
    1c76:	d5 81       	ldd	r29, Z+5	; 0x05
	s16 vel;

	vel = strToS16(packet->data);

	enterCritical();
    1c78:	0f b6       	in	r0, 0x3f	; 63
    1c7a:	0f 92       	push	r0
    1c7c:	f8 94       	cli
	if(Sms.Control.State == ZO_SMS_CONTROL_POSITION_CONTROL)
    1c7e:	80 91 03 01 	lds	r24, 0x0103
    1c82:	81 30       	cpi	r24, 0x01	; 1
    1c84:	09 f1       	breq	.+66     	; 0x1cc8 <zoCommandVelocityMove+0x5a>
		Sms.Profile.PositionSetpoint = (double)zoEncoderGetPos();
	Sms.Profile.VelocityDeltaPos = (double)vel/Sms.Control.LoopHz;
    1c86:	be 01       	movw	r22, r28
    1c88:	88 27       	eor	r24, r24
    1c8a:	77 fd       	sbrc	r23, 7
    1c8c:	80 95       	com	r24
    1c8e:	98 2f       	mov	r25, r24
    1c90:	0e 94 bf 23 	call	0x477e	; 0x477e <__floatsisf>
    1c94:	20 91 04 01 	lds	r18, 0x0104
    1c98:	30 91 05 01 	lds	r19, 0x0105
    1c9c:	40 91 06 01 	lds	r20, 0x0106
    1ca0:	50 91 07 01 	lds	r21, 0x0107
    1ca4:	0e 94 24 23 	call	0x4648	; 0x4648 <__divsf3>
    1ca8:	60 93 20 01 	sts	0x0120, r22
    1cac:	70 93 21 01 	sts	0x0121, r23
    1cb0:	80 93 22 01 	sts	0x0122, r24
    1cb4:	90 93 23 01 	sts	0x0123, r25
	Sms.Control.State = ZO_SMS_CONTROL_VELOCITY_CONTROL;
    1cb8:	82 e0       	ldi	r24, 0x02	; 2
    1cba:	80 93 03 01 	sts	0x0103, r24
	exitCritical();
    1cbe:	0f 90       	pop	r0
    1cc0:	0f be       	out	0x3f, r0	; 63
}
    1cc2:	df 91       	pop	r29
    1cc4:	cf 91       	pop	r28
    1cc6:	08 95       	ret

	vel = strToS16(packet->data);

	enterCritical();
	if(Sms.Control.State == ZO_SMS_CONTROL_POSITION_CONTROL)
		Sms.Profile.PositionSetpoint = (double)zoEncoderGetPos();
    1cc8:	0e 94 36 04 	call	0x86c	; 0x86c <zoEncoderGetPos>
    1ccc:	0e 94 bf 23 	call	0x477e	; 0x477e <__floatsisf>
    1cd0:	60 93 18 01 	sts	0x0118, r22
    1cd4:	70 93 19 01 	sts	0x0119, r23
    1cd8:	80 93 1a 01 	sts	0x011A, r24
    1cdc:	90 93 1b 01 	sts	0x011B, r25
    1ce0:	d2 cf       	rjmp	.-92     	; 0x1c86 <zoCommandVelocityMove+0x18>

00001ce2 <zoProfiledMoveAbsolute>:
	Sms.Profile.ConstAccelDeltaVel = (double)accel/Sms.Control.LoopHz/Sms.Control.LoopHz;
	exitCritical();
}

void zoProfiledMoveAbsolute(s32 finalPos)
{
    1ce2:	2f 92       	push	r2
    1ce4:	3f 92       	push	r3
    1ce6:	4f 92       	push	r4
    1ce8:	5f 92       	push	r5
    1cea:	6f 92       	push	r6
    1cec:	7f 92       	push	r7
    1cee:	8f 92       	push	r8
    1cf0:	9f 92       	push	r9
    1cf2:	af 92       	push	r10
    1cf4:	bf 92       	push	r11
    1cf6:	cf 92       	push	r12
    1cf8:	df 92       	push	r13
    1cfa:	ef 92       	push	r14
    1cfc:	ff 92       	push	r15
    1cfe:	0f 93       	push	r16
    1d00:	1f 93       	push	r17
    1d02:	df 93       	push	r29
    1d04:	cf 93       	push	r28
    1d06:	cd b7       	in	r28, 0x3d	; 61
    1d08:	de b7       	in	r29, 0x3e	; 62
    1d0a:	6e 97       	sbiw	r28, 0x1e	; 30
    1d0c:	0f b6       	in	r0, 0x3f	; 63
    1d0e:	f8 94       	cli
    1d10:	de bf       	out	0x3e, r29	; 62
    1d12:	0f be       	out	0x3f, r0	; 63
    1d14:	cd bf       	out	0x3d, r28	; 61
    1d16:	6b 8f       	std	Y+27, r22	; 0x1b
    1d18:	7c 8f       	std	Y+28, r23	; 0x1c
    1d1a:	8d 8f       	std	Y+29, r24	; 0x1d
    1d1c:	9e 8f       	std	Y+30, r25	; 0x1e
	s32 velCalc = 0;
	s32 posCalc = 0;
	bool zeroCross = FALSE;
	s08 s = 1;

	enterCritical();
    1d1e:	0f b6       	in	r0, 0x3f	; 63
    1d20:	0f 92       	push	r0
    1d22:	f8 94       	cli
	if(Sms.Control.State == ZO_SMS_CONTROL_POSITION_CONTROL)					
    1d24:	80 91 03 01 	lds	r24, 0x0103
    1d28:	81 30       	cpi	r24, 0x01	; 1
    1d2a:	09 f4       	brne	.+2      	; 0x1d2e <zoProfiledMoveAbsolute+0x4c>
    1d2c:	b7 c2       	rjmp	.+1390   	; 0x229c <zoProfiledMoveAbsolute+0x5ba>
		currentVel = zoEncoderGetVel();
		currentPos = zoEncoderGetPos();
	}
	else
	{																			//if previous state was again profiled
		currentVel = (s32)(Sms.Profile.VelocityDeltaPos * Sms.Control.LoopHz);	//do not requery velocity
    1d2e:	20 91 04 01 	lds	r18, 0x0104
    1d32:	30 91 05 01 	lds	r19, 0x0105
    1d36:	40 91 06 01 	lds	r20, 0x0106
    1d3a:	50 91 07 01 	lds	r21, 0x0107
    1d3e:	2d 83       	std	Y+5, r18	; 0x05
    1d40:	3e 83       	std	Y+6, r19	; 0x06
    1d42:	4f 83       	std	Y+7, r20	; 0x07
    1d44:	58 87       	std	Y+8, r21	; 0x08
    1d46:	ca 01       	movw	r24, r20
    1d48:	b9 01       	movw	r22, r18
    1d4a:	20 91 20 01 	lds	r18, 0x0120
    1d4e:	30 91 21 01 	lds	r19, 0x0121
    1d52:	40 91 22 01 	lds	r20, 0x0122
    1d56:	50 91 23 01 	lds	r21, 0x0123
    1d5a:	0e 94 4b 24 	call	0x4896	; 0x4896 <__mulsf3>
    1d5e:	0e 94 8c 23 	call	0x4718	; 0x4718 <__fixsfsi>
    1d62:	6b 87       	std	Y+11, r22	; 0x0b
    1d64:	7c 87       	std	Y+12, r23	; 0x0c
    1d66:	8d 87       	std	Y+13, r24	; 0x0d
    1d68:	9e 87       	std	Y+14, r25	; 0x0e
		currentPos = (s32)(Sms.Profile.PositionSetpoint);						//and position
    1d6a:	60 91 18 01 	lds	r22, 0x0118
    1d6e:	70 91 19 01 	lds	r23, 0x0119
    1d72:	80 91 1a 01 	lds	r24, 0x011A
    1d76:	90 91 1b 01 	lds	r25, 0x011B
    1d7a:	0e 94 8c 23 	call	0x4718	; 0x4718 <__fixsfsi>
    1d7e:	6f 8b       	std	Y+23, r22	; 0x17
    1d80:	78 8f       	std	Y+24, r23	; 0x18
    1d82:	89 8f       	std	Y+25, r24	; 0x19
    1d84:	9a 8f       	std	Y+26, r25	; 0x1a
	}

	s = ( finalPos >= currentPos ) ? 1 : -1;	//calculate sign
    1d86:	8f 89       	ldd	r24, Y+23	; 0x17
    1d88:	98 8d       	ldd	r25, Y+24	; 0x18
    1d8a:	a9 8d       	ldd	r26, Y+25	; 0x19
    1d8c:	ba 8d       	ldd	r27, Y+26	; 0x1a
    1d8e:	2b 8d       	ldd	r18, Y+27	; 0x1b
    1d90:	3c 8d       	ldd	r19, Y+28	; 0x1c
    1d92:	4d 8d       	ldd	r20, Y+29	; 0x1d
    1d94:	5e 8d       	ldd	r21, Y+30	; 0x1e
    1d96:	28 17       	cp	r18, r24
    1d98:	39 07       	cpc	r19, r25
    1d9a:	4a 07       	cpc	r20, r26
    1d9c:	5b 07       	cpc	r21, r27
    1d9e:	0c f4       	brge	.+2      	; 0x1da2 <zoProfiledMoveAbsolute+0xc0>
    1da0:	76 c1       	rjmp	.+748    	; 0x208e <zoProfiledMoveAbsolute+0x3ac>
	accel = ( s == 1 ) ? (s32)Sms.Profile.DesiredAcceleration : 
    1da2:	80 91 38 01 	lds	r24, 0x0138
    1da6:	90 91 39 01 	lds	r25, 0x0139
    1daa:	9c 01       	movw	r18, r24
    1dac:	40 e0       	ldi	r20, 0x00	; 0
    1dae:	50 e0       	ldi	r21, 0x00	; 0
    1db0:	2b 8b       	std	Y+19, r18	; 0x13
    1db2:	3c 8b       	std	Y+20, r19	; 0x14
    1db4:	4d 8b       	std	Y+21, r20	; 0x15
    1db6:	5e 8b       	std	Y+22, r21	; 0x16
							   -((s32)Sms.Profile.DesiredAcceleration);			//get acceleration value
	deccel = -accel ;					
    1db8:	50 95       	com	r21
    1dba:	40 95       	com	r20
    1dbc:	30 95       	com	r19
    1dbe:	21 95       	neg	r18
    1dc0:	3f 4f       	sbci	r19, 0xFF	; 255
    1dc2:	4f 4f       	sbci	r20, 0xFF	; 255
    1dc4:	5f 4f       	sbci	r21, 0xFF	; 255
    1dc6:	2f 87       	std	Y+15, r18	; 0x0f
    1dc8:	38 8b       	std	Y+16, r19	; 0x10
    1dca:	49 8b       	std	Y+17, r20	; 0x11
    1dcc:	5a 8b       	std	Y+18, r21	; 0x12
	vel = ( s == 1 ) ? (s32)Sms.Profile.DesiredVelocity : 
    1dce:	80 91 3a 01 	lds	r24, 0x013A
    1dd2:	90 91 3b 01 	lds	r25, 0x013B
    1dd6:	1c 01       	movw	r2, r24
    1dd8:	44 24       	eor	r4, r4
    1dda:	55 24       	eor	r5, r5
    1ddc:	31 e0       	ldi	r19, 0x01	; 1
    1dde:	39 87       	std	Y+9, r19	; 0x09
    1de0:	81 e0       	ldi	r24, 0x01	; 1
    1de2:	90 e0       	ldi	r25, 0x00	; 0
    1de4:	a0 e0       	ldi	r26, 0x00	; 0
    1de6:	b0 e0       	ldi	r27, 0x00	; 0
    1de8:	89 83       	std	Y+1, r24	; 0x01
    1dea:	9a 83       	std	Y+2, r25	; 0x02
    1dec:	ab 83       	std	Y+3, r26	; 0x03
    1dee:	bc 83       	std	Y+4, r27	; 0x04
							  -((s32)Sms.Profile.DesiredVelocity);				//get target velocity
	exitCritical();
    1df0:	0f 90       	pop	r0
    1df2:	0f be       	out	0x3f, r0	; 63

	if ( (currentVel * vel) >= 0 )	//does the velocity change sign ?
    1df4:	c2 01       	movw	r24, r4
    1df6:	b1 01       	movw	r22, r2
    1df8:	2b 85       	ldd	r18, Y+11	; 0x0b
    1dfa:	3c 85       	ldd	r19, Y+12	; 0x0c
    1dfc:	4d 85       	ldd	r20, Y+13	; 0x0d
    1dfe:	5e 85       	ldd	r21, Y+14	; 0x0e
    1e00:	0e 94 08 25 	call	0x4a10	; 0x4a10 <__mulsi3>
    1e04:	97 fd       	sbrc	r25, 7
    1e06:	1d c2       	rjmp	.+1082   	; 0x2242 <zoProfiledMoveAbsolute+0x560>
    1e08:	59 01       	movw	r10, r18
    1e0a:	6a 01       	movw	r12, r20
    1e0c:	6f 88       	ldd	r6, Y+23	; 0x17
    1e0e:	78 8c       	ldd	r7, Y+24	; 0x18
    1e10:	89 8c       	ldd	r8, Y+25	; 0x19
    1e12:	9a 8c       	ldd	r9, Y+26	; 0x1a
    1e14:	1a 86       	std	Y+10, r1	; 0x0a
		posCalc = currentPos - ( currentVel * currentVel ) / 2 / accel ;
	}

	//calculate the square of the velocity 
	//at the intersection of the acceleration and decceleration curves
	velInt = s * (s32)sqrt( (double)(accel * ( finalPos - posCalc ) + ( velCalc * velCalc ) / 2) );
    1e16:	c6 01       	movw	r24, r12
    1e18:	b5 01       	movw	r22, r10
    1e1a:	a6 01       	movw	r20, r12
    1e1c:	95 01       	movw	r18, r10
    1e1e:	0e 94 08 25 	call	0x4a10	; 0x4a10 <__mulsi3>
    1e22:	22 e0       	ldi	r18, 0x02	; 2
    1e24:	30 e0       	ldi	r19, 0x00	; 0
    1e26:	40 e0       	ldi	r20, 0x00	; 0
    1e28:	50 e0       	ldi	r21, 0x00	; 0
    1e2a:	0e 94 5d 25 	call	0x4aba	; 0x4aba <__divmodsi4>
    1e2e:	79 01       	movw	r14, r18
    1e30:	8a 01       	movw	r16, r20
    1e32:	6b 8d       	ldd	r22, Y+27	; 0x1b
    1e34:	7c 8d       	ldd	r23, Y+28	; 0x1c
    1e36:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1e38:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1e3a:	66 19       	sub	r22, r6
    1e3c:	77 09       	sbc	r23, r7
    1e3e:	88 09       	sbc	r24, r8
    1e40:	99 09       	sbc	r25, r9
    1e42:	2b 89       	ldd	r18, Y+19	; 0x13
    1e44:	3c 89       	ldd	r19, Y+20	; 0x14
    1e46:	4d 89       	ldd	r20, Y+21	; 0x15
    1e48:	5e 89       	ldd	r21, Y+22	; 0x16
    1e4a:	0e 94 08 25 	call	0x4a10	; 0x4a10 <__mulsi3>
    1e4e:	e6 0e       	add	r14, r22
    1e50:	f7 1e       	adc	r15, r23
    1e52:	08 1f       	adc	r16, r24
    1e54:	19 1f       	adc	r17, r25
    1e56:	c8 01       	movw	r24, r16
    1e58:	b7 01       	movw	r22, r14
    1e5a:	0e 94 bf 23 	call	0x477e	; 0x477e <__floatsisf>
    1e5e:	0e 94 b2 24 	call	0x4964	; 0x4964 <sqrt>
    1e62:	0e 94 8c 23 	call	0x4718	; 0x4718 <__fixsfsi>
    1e66:	9b 01       	movw	r18, r22
    1e68:	ac 01       	movw	r20, r24
    1e6a:	69 81       	ldd	r22, Y+1	; 0x01
    1e6c:	7a 81       	ldd	r23, Y+2	; 0x02
    1e6e:	8b 81       	ldd	r24, Y+3	; 0x03
    1e70:	9c 81       	ldd	r25, Y+4	; 0x04
    1e72:	0e 94 08 25 	call	0x4a10	; 0x4a10 <__mulsi3>
    1e76:	7b 01       	movw	r14, r22
    1e78:	8c 01       	movw	r16, r24
	
	//we must deccelerate now with given decceleration but we will overshoot and
	//then we will need to go back. Make necessary changes.
	if(  ( (velCalc -  velInt) * s > 0 ) && (!zeroCross) ) 
    1e7a:	c6 01       	movw	r24, r12
    1e7c:	b5 01       	movw	r22, r10
    1e7e:	6e 19       	sub	r22, r14
    1e80:	7f 09       	sbc	r23, r15
    1e82:	80 0b       	sbc	r24, r16
    1e84:	91 0b       	sbc	r25, r17
    1e86:	29 81       	ldd	r18, Y+1	; 0x01
    1e88:	3a 81       	ldd	r19, Y+2	; 0x02
    1e8a:	4b 81       	ldd	r20, Y+3	; 0x03
    1e8c:	5c 81       	ldd	r21, Y+4	; 0x04
    1e8e:	0e 94 08 25 	call	0x4a10	; 0x4a10 <__mulsi3>
    1e92:	16 16       	cp	r1, r22
    1e94:	17 06       	cpc	r1, r23
    1e96:	18 06       	cpc	r1, r24
    1e98:	19 06       	cpc	r1, r25
    1e9a:	24 f4       	brge	.+8      	; 0x1ea4 <zoProfiledMoveAbsolute+0x1c2>
    1e9c:	4a 85       	ldd	r20, Y+10	; 0x0a
    1e9e:	44 23       	and	r20, r20
    1ea0:	09 f4       	brne	.+2      	; 0x1ea4 <zoProfiledMoveAbsolute+0x1c2>
    1ea2:	33 c1       	rjmp	.+614    	; 0x210a <zoProfiledMoveAbsolute+0x428>
		velCalc = 0;
		posCalc = currentPos - ( currentVel * currentVel ) / 2 / accel ;		
		velInt =  (-s) * (s32)sqrt( (double)(accel * ( finalPos - posCalc ) + ( velCalc * velCalc ) / 2 ) );
	}

	if ( (velInt - vel ) * s >= 0 ) //we can do full profile
    1ea4:	c8 01       	movw	r24, r16
    1ea6:	b7 01       	movw	r22, r14
    1ea8:	62 19       	sub	r22, r2
    1eaa:	73 09       	sbc	r23, r3
    1eac:	84 09       	sbc	r24, r4
    1eae:	95 09       	sbc	r25, r5
    1eb0:	29 81       	ldd	r18, Y+1	; 0x01
    1eb2:	3a 81       	ldd	r19, Y+2	; 0x02
    1eb4:	4b 81       	ldd	r20, Y+3	; 0x03
    1eb6:	5c 81       	ldd	r21, Y+4	; 0x04
    1eb8:	0e 94 08 25 	call	0x4a10	; 0x4a10 <__mulsi3>
    1ebc:	97 fd       	sbrc	r25, 7
    1ebe:	8b c1       	rjmp	.+790    	; 0x21d6 <zoProfiledMoveAbsolute+0x4f4>
	{								
		accel = ( (vel - velCalc ) * s >= 0 ) ? accel : -accel;	 //check wether we must initialy accelerate or deccelerate
    1ec0:	c2 01       	movw	r24, r4
    1ec2:	b1 01       	movw	r22, r2
    1ec4:	6a 19       	sub	r22, r10
    1ec6:	7b 09       	sbc	r23, r11
    1ec8:	8c 09       	sbc	r24, r12
    1eca:	9d 09       	sbc	r25, r13
    1ecc:	0e 94 08 25 	call	0x4a10	; 0x4a10 <__mulsi3>
    1ed0:	97 fd       	sbrc	r25, 7
    1ed2:	0b c1       	rjmp	.+534    	; 0x20ea <zoProfiledMoveAbsolute+0x408>
		accelKnee = ( vel * vel - velCalc * velCalc ) / 2 / accel + posCalc;	
    1ed4:	c2 01       	movw	r24, r4
    1ed6:	b1 01       	movw	r22, r2
    1ed8:	a2 01       	movw	r20, r4
    1eda:	91 01       	movw	r18, r2
    1edc:	0e 94 08 25 	call	0x4a10	; 0x4a10 <__mulsi3>
    1ee0:	7b 01       	movw	r14, r22
    1ee2:	8c 01       	movw	r16, r24
    1ee4:	c6 01       	movw	r24, r12
    1ee6:	b5 01       	movw	r22, r10
    1ee8:	a6 01       	movw	r20, r12
    1eea:	95 01       	movw	r18, r10
    1eec:	0e 94 08 25 	call	0x4a10	; 0x4a10 <__mulsi3>
    1ef0:	a8 01       	movw	r20, r16
    1ef2:	97 01       	movw	r18, r14
    1ef4:	26 1b       	sub	r18, r22
    1ef6:	37 0b       	sbc	r19, r23
    1ef8:	48 0b       	sbc	r20, r24
    1efa:	59 0b       	sbc	r21, r25
    1efc:	ca 01       	movw	r24, r20
    1efe:	b9 01       	movw	r22, r18
    1f00:	22 e0       	ldi	r18, 0x02	; 2
    1f02:	30 e0       	ldi	r19, 0x00	; 0
    1f04:	40 e0       	ldi	r20, 0x00	; 0
    1f06:	50 e0       	ldi	r21, 0x00	; 0
    1f08:	0e 94 5d 25 	call	0x4aba	; 0x4aba <__divmodsi4>
    1f0c:	ca 01       	movw	r24, r20
    1f0e:	b9 01       	movw	r22, r18
    1f10:	2b 89       	ldd	r18, Y+19	; 0x13
    1f12:	3c 89       	ldd	r19, Y+20	; 0x14
    1f14:	4d 89       	ldd	r20, Y+21	; 0x15
    1f16:	5e 89       	ldd	r21, Y+22	; 0x16
    1f18:	0e 94 5d 25 	call	0x4aba	; 0x4aba <__divmodsi4>
    1f1c:	59 01       	movw	r10, r18
    1f1e:	6a 01       	movw	r12, r20
    1f20:	a6 0c       	add	r10, r6
    1f22:	b7 1c       	adc	r11, r7
    1f24:	c8 1c       	adc	r12, r8
    1f26:	d9 1c       	adc	r13, r9
		deccelKnee = finalPos + vel * vel / 2 / deccel;
    1f28:	c8 01       	movw	r24, r16
    1f2a:	b7 01       	movw	r22, r14
    1f2c:	22 e0       	ldi	r18, 0x02	; 2
    1f2e:	30 e0       	ldi	r19, 0x00	; 0
    1f30:	40 e0       	ldi	r20, 0x00	; 0
    1f32:	50 e0       	ldi	r21, 0x00	; 0
    1f34:	0e 94 5d 25 	call	0x4aba	; 0x4aba <__divmodsi4>
    1f38:	ca 01       	movw	r24, r20
    1f3a:	b9 01       	movw	r22, r18
    1f3c:	2f 85       	ldd	r18, Y+15	; 0x0f
    1f3e:	38 89       	ldd	r19, Y+16	; 0x10
    1f40:	49 89       	ldd	r20, Y+17	; 0x11
    1f42:	5a 89       	ldd	r21, Y+18	; 0x12
    1f44:	0e 94 5d 25 	call	0x4aba	; 0x4aba <__divmodsi4>
    1f48:	79 01       	movw	r14, r18
    1f4a:	8a 01       	movw	r16, r20
    1f4c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1f4e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1f50:	ad 8d       	ldd	r26, Y+29	; 0x1d
    1f52:	be 8d       	ldd	r27, Y+30	; 0x1e
    1f54:	e8 0e       	add	r14, r24
    1f56:	f9 1e       	adc	r15, r25
    1f58:	0a 1f       	adc	r16, r26
    1f5a:	1b 1f       	adc	r17, r27
		vel = velInt;
	}

	//initialise profile and calculate delta pos and delta u
	//to achieve velocity and acceleration at control loop
	enterCritical();
    1f5c:	0f b6       	in	r0, 0x3f	; 63
    1f5e:	0f 92       	push	r0
    1f60:	f8 94       	cli
	Sms.Profile.PositionSetpoint = currentPos;
    1f62:	6f 89       	ldd	r22, Y+23	; 0x17
    1f64:	78 8d       	ldd	r23, Y+24	; 0x18
    1f66:	89 8d       	ldd	r24, Y+25	; 0x19
    1f68:	9a 8d       	ldd	r25, Y+26	; 0x1a
    1f6a:	0e 94 bf 23 	call	0x477e	; 0x477e <__floatsisf>
    1f6e:	60 93 18 01 	sts	0x0118, r22
    1f72:	70 93 19 01 	sts	0x0119, r23
    1f76:	80 93 1a 01 	sts	0x011A, r24
    1f7a:	90 93 1b 01 	sts	0x011B, r25
	Sms.Profile.AccelerationKnee = accelKnee;
    1f7e:	a0 92 2c 01 	sts	0x012C, r10
    1f82:	b0 92 2d 01 	sts	0x012D, r11
    1f86:	c0 92 2e 01 	sts	0x012E, r12
    1f8a:	d0 92 2f 01 	sts	0x012F, r13
	Sms.Profile.DeccelerationKnee = deccelKnee;
    1f8e:	e0 92 30 01 	sts	0x0130, r14
    1f92:	f0 92 31 01 	sts	0x0131, r15
    1f96:	00 93 32 01 	sts	0x0132, r16
    1f9a:	10 93 33 01 	sts	0x0133, r17
	Sms.Profile.TargetPosition = finalPos;
    1f9e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1fa0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1fa2:	ad 8d       	ldd	r26, Y+29	; 0x1d
    1fa4:	be 8d       	ldd	r27, Y+30	; 0x1e
    1fa6:	80 93 34 01 	sts	0x0134, r24
    1faa:	90 93 35 01 	sts	0x0135, r25
    1fae:	a0 93 36 01 	sts	0x0136, r26
    1fb2:	b0 93 37 01 	sts	0x0137, r27
	Sms.Profile.State = ZO_SMS_PROFILE_ACCELERATING;
    1fb6:	10 92 3c 01 	sts	0x013C, r1
	Sms.Control.State = ZO_SMS_CONTROL_PROFILED_POSITION_CONTROL;
    1fba:	84 e0       	ldi	r24, 0x04	; 4
    1fbc:	80 93 03 01 	sts	0x0103, r24
	Sms.Profile.TargetVelDeltaPos = (double)vel/Sms.Control.LoopHz;
    1fc0:	c2 01       	movw	r24, r4
    1fc2:	b1 01       	movw	r22, r2
    1fc4:	0e 94 bf 23 	call	0x477e	; 0x477e <__floatsisf>
    1fc8:	2d 81       	ldd	r18, Y+5	; 0x05
    1fca:	3e 81       	ldd	r19, Y+6	; 0x06
    1fcc:	4f 81       	ldd	r20, Y+7	; 0x07
    1fce:	58 85       	ldd	r21, Y+8	; 0x08
    1fd0:	0e 94 24 23 	call	0x4648	; 0x4648 <__divsf3>
    1fd4:	60 93 1c 01 	sts	0x011C, r22
    1fd8:	70 93 1d 01 	sts	0x011D, r23
    1fdc:	80 93 1e 01 	sts	0x011E, r24
    1fe0:	90 93 1f 01 	sts	0x011F, r25
	Sms.Profile.VelocityDeltaPos =(double)currentVel/Sms.Control.LoopHz;
    1fe4:	6b 85       	ldd	r22, Y+11	; 0x0b
    1fe6:	7c 85       	ldd	r23, Y+12	; 0x0c
    1fe8:	8d 85       	ldd	r24, Y+13	; 0x0d
    1fea:	9e 85       	ldd	r25, Y+14	; 0x0e
    1fec:	0e 94 bf 23 	call	0x477e	; 0x477e <__floatsisf>
    1ff0:	2d 81       	ldd	r18, Y+5	; 0x05
    1ff2:	3e 81       	ldd	r19, Y+6	; 0x06
    1ff4:	4f 81       	ldd	r20, Y+7	; 0x07
    1ff6:	58 85       	ldd	r21, Y+8	; 0x08
    1ff8:	0e 94 24 23 	call	0x4648	; 0x4648 <__divsf3>
    1ffc:	dc 01       	movw	r26, r24
    1ffe:	9b 01       	movw	r18, r22
    2000:	ac 01       	movw	r20, r24
    2002:	20 93 20 01 	sts	0x0120, r18
    2006:	30 93 21 01 	sts	0x0121, r19
    200a:	40 93 22 01 	sts	0x0122, r20
    200e:	50 93 23 01 	sts	0x0123, r21
	Sms.Profile.LastVelocityDeltaPos = Sms.Profile.VelocityDeltaPos;
    2012:	cb 01       	movw	r24, r22
    2014:	80 93 24 01 	sts	0x0124, r24
    2018:	90 93 25 01 	sts	0x0125, r25
    201c:	a0 93 26 01 	sts	0x0126, r26
    2020:	b0 93 27 01 	sts	0x0127, r27
	Sms.Profile.ConstAccelDeltaVel = (double)accel/Sms.Control.LoopHz/Sms.Control.LoopHz;
    2024:	6b 89       	ldd	r22, Y+19	; 0x13
    2026:	7c 89       	ldd	r23, Y+20	; 0x14
    2028:	8d 89       	ldd	r24, Y+21	; 0x15
    202a:	9e 89       	ldd	r25, Y+22	; 0x16
    202c:	0e 94 bf 23 	call	0x477e	; 0x477e <__floatsisf>
    2030:	2d 81       	ldd	r18, Y+5	; 0x05
    2032:	3e 81       	ldd	r19, Y+6	; 0x06
    2034:	4f 81       	ldd	r20, Y+7	; 0x07
    2036:	58 85       	ldd	r21, Y+8	; 0x08
    2038:	0e 94 24 23 	call	0x4648	; 0x4648 <__divsf3>
    203c:	2d 81       	ldd	r18, Y+5	; 0x05
    203e:	3e 81       	ldd	r19, Y+6	; 0x06
    2040:	4f 81       	ldd	r20, Y+7	; 0x07
    2042:	58 85       	ldd	r21, Y+8	; 0x08
    2044:	0e 94 24 23 	call	0x4648	; 0x4648 <__divsf3>
    2048:	60 93 28 01 	sts	0x0128, r22
    204c:	70 93 29 01 	sts	0x0129, r23
    2050:	80 93 2a 01 	sts	0x012A, r24
    2054:	90 93 2b 01 	sts	0x012B, r25
	exitCritical();
    2058:	0f 90       	pop	r0
    205a:	0f be       	out	0x3f, r0	; 63
}
    205c:	6e 96       	adiw	r28, 0x1e	; 30
    205e:	0f b6       	in	r0, 0x3f	; 63
    2060:	f8 94       	cli
    2062:	de bf       	out	0x3e, r29	; 62
    2064:	0f be       	out	0x3f, r0	; 63
    2066:	cd bf       	out	0x3d, r28	; 61
    2068:	cf 91       	pop	r28
    206a:	df 91       	pop	r29
    206c:	1f 91       	pop	r17
    206e:	0f 91       	pop	r16
    2070:	ff 90       	pop	r15
    2072:	ef 90       	pop	r14
    2074:	df 90       	pop	r13
    2076:	cf 90       	pop	r12
    2078:	bf 90       	pop	r11
    207a:	af 90       	pop	r10
    207c:	9f 90       	pop	r9
    207e:	8f 90       	pop	r8
    2080:	7f 90       	pop	r7
    2082:	6f 90       	pop	r6
    2084:	5f 90       	pop	r5
    2086:	4f 90       	pop	r4
    2088:	3f 90       	pop	r3
    208a:	2f 90       	pop	r2
    208c:	08 95       	ret
		currentVel = (s32)(Sms.Profile.VelocityDeltaPos * Sms.Control.LoopHz);	//do not requery velocity
		currentPos = (s32)(Sms.Profile.PositionSetpoint);						//and position
	}

	s = ( finalPos >= currentPos ) ? 1 : -1;	//calculate sign
	accel = ( s == 1 ) ? (s32)Sms.Profile.DesiredAcceleration : 
    208e:	80 91 38 01 	lds	r24, 0x0138
    2092:	90 91 39 01 	lds	r25, 0x0139
    2096:	9c 01       	movw	r18, r24
    2098:	40 e0       	ldi	r20, 0x00	; 0
    209a:	50 e0       	ldi	r21, 0x00	; 0
    209c:	2f 87       	std	Y+15, r18	; 0x0f
    209e:	38 8b       	std	Y+16, r19	; 0x10
    20a0:	49 8b       	std	Y+17, r20	; 0x11
    20a2:	5a 8b       	std	Y+18, r21	; 0x12
    20a4:	50 95       	com	r21
    20a6:	40 95       	com	r20
    20a8:	30 95       	com	r19
    20aa:	21 95       	neg	r18
    20ac:	3f 4f       	sbci	r19, 0xFF	; 255
    20ae:	4f 4f       	sbci	r20, 0xFF	; 255
    20b0:	5f 4f       	sbci	r21, 0xFF	; 255
    20b2:	2b 8b       	std	Y+19, r18	; 0x13
    20b4:	3c 8b       	std	Y+20, r19	; 0x14
    20b6:	4d 8b       	std	Y+21, r20	; 0x15
    20b8:	5e 8b       	std	Y+22, r21	; 0x16
							   -((s32)Sms.Profile.DesiredAcceleration);			//get acceleration value
	deccel = -accel ;					
	vel = ( s == 1 ) ? (s32)Sms.Profile.DesiredVelocity : 
    20ba:	80 91 3a 01 	lds	r24, 0x013A
    20be:	90 91 3b 01 	lds	r25, 0x013B
    20c2:	a0 e0       	ldi	r26, 0x00	; 0
    20c4:	b0 e0       	ldi	r27, 0x00	; 0
    20c6:	22 24       	eor	r2, r2
    20c8:	33 24       	eor	r3, r3
    20ca:	21 01       	movw	r4, r2
    20cc:	28 1a       	sub	r2, r24
    20ce:	39 0a       	sbc	r3, r25
    20d0:	4a 0a       	sbc	r4, r26
    20d2:	5b 0a       	sbc	r5, r27
    20d4:	3f ef       	ldi	r19, 0xFF	; 255
    20d6:	39 87       	std	Y+9, r19	; 0x09
    20d8:	8f ef       	ldi	r24, 0xFF	; 255
    20da:	9f ef       	ldi	r25, 0xFF	; 255
    20dc:	af ef       	ldi	r26, 0xFF	; 255
    20de:	bf ef       	ldi	r27, 0xFF	; 255
    20e0:	89 83       	std	Y+1, r24	; 0x01
    20e2:	9a 83       	std	Y+2, r25	; 0x02
    20e4:	ab 83       	std	Y+3, r26	; 0x03
    20e6:	bc 83       	std	Y+4, r27	; 0x04
    20e8:	83 ce       	rjmp	.-762    	; 0x1df0 <zoProfiledMoveAbsolute+0x10e>
		velInt =  (-s) * (s32)sqrt( (double)(accel * ( finalPos - posCalc ) + ( velCalc * velCalc ) / 2 ) );
	}

	if ( (velInt - vel ) * s >= 0 ) //we can do full profile
	{								
		accel = ( (vel - velCalc ) * s >= 0 ) ? accel : -accel;	 //check wether we must initialy accelerate or deccelerate
    20ea:	8b 89       	ldd	r24, Y+19	; 0x13
    20ec:	9c 89       	ldd	r25, Y+20	; 0x14
    20ee:	ad 89       	ldd	r26, Y+21	; 0x15
    20f0:	be 89       	ldd	r27, Y+22	; 0x16
    20f2:	b0 95       	com	r27
    20f4:	a0 95       	com	r26
    20f6:	90 95       	com	r25
    20f8:	81 95       	neg	r24
    20fa:	9f 4f       	sbci	r25, 0xFF	; 255
    20fc:	af 4f       	sbci	r26, 0xFF	; 255
    20fe:	bf 4f       	sbci	r27, 0xFF	; 255
    2100:	8b 8b       	std	Y+19, r24	; 0x13
    2102:	9c 8b       	std	Y+20, r25	; 0x14
    2104:	ad 8b       	std	Y+21, r26	; 0x15
    2106:	be 8b       	std	Y+22, r27	; 0x16
    2108:	e5 ce       	rjmp	.-566    	; 0x1ed4 <zoProfiledMoveAbsolute+0x1f2>
	if(  ( (velCalc -  velInt) * s > 0 ) && (!zeroCross) ) 
	{
		accel = -accel;
		deccel = -deccel;
		velCalc = 0;
		posCalc = currentPos - ( currentVel * currentVel ) / 2 / accel ;		
    210a:	6b 85       	ldd	r22, Y+11	; 0x0b
    210c:	7c 85       	ldd	r23, Y+12	; 0x0c
    210e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2110:	9e 85       	ldd	r25, Y+14	; 0x0e
    2112:	9b 01       	movw	r18, r22
    2114:	ac 01       	movw	r20, r24
    2116:	0e 94 08 25 	call	0x4a10	; 0x4a10 <__mulsi3>
    211a:	22 e0       	ldi	r18, 0x02	; 2
    211c:	30 e0       	ldi	r19, 0x00	; 0
    211e:	40 e0       	ldi	r20, 0x00	; 0
    2120:	50 e0       	ldi	r21, 0x00	; 0
    2122:	0e 94 5d 25 	call	0x4aba	; 0x4aba <__divmodsi4>
    2126:	50 95       	com	r21
    2128:	40 95       	com	r20
    212a:	30 95       	com	r19
    212c:	21 95       	neg	r18
    212e:	3f 4f       	sbci	r19, 0xFF	; 255
    2130:	4f 4f       	sbci	r20, 0xFF	; 255
    2132:	5f 4f       	sbci	r21, 0xFF	; 255
    2134:	ca 01       	movw	r24, r20
    2136:	b9 01       	movw	r22, r18
    2138:	2f 85       	ldd	r18, Y+15	; 0x0f
    213a:	38 89       	ldd	r19, Y+16	; 0x10
    213c:	49 89       	ldd	r20, Y+17	; 0x11
    213e:	5a 89       	ldd	r21, Y+18	; 0x12
    2140:	0e 94 5d 25 	call	0x4aba	; 0x4aba <__divmodsi4>
    2144:	39 01       	movw	r6, r18
    2146:	4a 01       	movw	r8, r20
    2148:	8f 89       	ldd	r24, Y+23	; 0x17
    214a:	98 8d       	ldd	r25, Y+24	; 0x18
    214c:	a9 8d       	ldd	r26, Y+25	; 0x19
    214e:	ba 8d       	ldd	r27, Y+26	; 0x1a
    2150:	68 0e       	add	r6, r24
    2152:	79 1e       	adc	r7, r25
    2154:	8a 1e       	adc	r8, r26
    2156:	9b 1e       	adc	r9, r27
		velInt =  (-s) * (s32)sqrt( (double)(accel * ( finalPos - posCalc ) + ( velCalc * velCalc ) / 2 ) );
    2158:	6b 8d       	ldd	r22, Y+27	; 0x1b
    215a:	7c 8d       	ldd	r23, Y+28	; 0x1c
    215c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    215e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2160:	66 19       	sub	r22, r6
    2162:	77 09       	sbc	r23, r7
    2164:	88 09       	sbc	r24, r8
    2166:	99 09       	sbc	r25, r9
    2168:	2f 85       	ldd	r18, Y+15	; 0x0f
    216a:	38 89       	ldd	r19, Y+16	; 0x10
    216c:	49 89       	ldd	r20, Y+17	; 0x11
    216e:	5a 89       	ldd	r21, Y+18	; 0x12
    2170:	0e 94 08 25 	call	0x4a10	; 0x4a10 <__mulsi3>
    2174:	0e 94 bf 23 	call	0x477e	; 0x477e <__floatsisf>
    2178:	0e 94 b2 24 	call	0x4964	; 0x4964 <sqrt>
    217c:	a9 85       	ldd	r26, Y+9	; 0x09
    217e:	ea 2e       	mov	r14, r26
    2180:	ff 24       	eor	r15, r15
    2182:	e7 fc       	sbrc	r14, 7
    2184:	f0 94       	com	r15
    2186:	f0 94       	com	r15
    2188:	e1 94       	neg	r14
    218a:	f1 08       	sbc	r15, r1
    218c:	f3 94       	inc	r15
    218e:	00 27       	eor	r16, r16
    2190:	f7 fc       	sbrc	r15, 7
    2192:	00 95       	com	r16
    2194:	10 2f       	mov	r17, r16
    2196:	0e 94 8c 23 	call	0x4718	; 0x4718 <__fixsfsi>
    219a:	9b 01       	movw	r18, r22
    219c:	ac 01       	movw	r20, r24
    219e:	c8 01       	movw	r24, r16
    21a0:	b7 01       	movw	r22, r14
    21a2:	0e 94 08 25 	call	0x4a10	; 0x4a10 <__mulsi3>
    21a6:	7b 01       	movw	r14, r22
    21a8:	8c 01       	movw	r16, r24
    21aa:	8f 85       	ldd	r24, Y+15	; 0x0f
    21ac:	98 89       	ldd	r25, Y+16	; 0x10
    21ae:	69 89       	ldd	r22, Y+17	; 0x11
    21b0:	7a 89       	ldd	r23, Y+18	; 0x12
    21b2:	2b 89       	ldd	r18, Y+19	; 0x13
    21b4:	3c 89       	ldd	r19, Y+20	; 0x14
    21b6:	4d 89       	ldd	r20, Y+21	; 0x15
    21b8:	5e 89       	ldd	r21, Y+22	; 0x16
    21ba:	2f 87       	std	Y+15, r18	; 0x0f
    21bc:	38 8b       	std	Y+16, r19	; 0x10
    21be:	49 8b       	std	Y+17, r20	; 0x11
    21c0:	5a 8b       	std	Y+18, r21	; 0x12
    21c2:	ab 01       	movw	r20, r22
    21c4:	da 01       	movw	r26, r20
    21c6:	8b 8b       	std	Y+19, r24	; 0x13
    21c8:	9c 8b       	std	Y+20, r25	; 0x14
    21ca:	ad 8b       	std	Y+21, r26	; 0x15
    21cc:	be 8b       	std	Y+22, r27	; 0x16
    21ce:	aa 24       	eor	r10, r10
    21d0:	bb 24       	eor	r11, r11
    21d2:	65 01       	movw	r12, r10
    21d4:	67 ce       	rjmp	.-818    	; 0x1ea4 <zoProfiledMoveAbsolute+0x1c2>
		accelKnee = ( vel * vel - velCalc * velCalc ) / 2 / accel + posCalc;	
		deccelKnee = finalPos + vel * vel / 2 / deccel;
	}
	else 	//we cannot reach the desired velocity but we can go with desired accel, deccel
	{		//accelKnee = deccelKnee = intersection
		accelKnee = (finalPos + posCalc) / 2 - ( velCalc * velCalc ) / 4 / accel;
    21d6:	c6 01       	movw	r24, r12
    21d8:	b5 01       	movw	r22, r10
    21da:	a6 01       	movw	r20, r12
    21dc:	95 01       	movw	r18, r10
    21de:	0e 94 08 25 	call	0x4a10	; 0x4a10 <__mulsi3>
    21e2:	24 e0       	ldi	r18, 0x04	; 4
    21e4:	30 e0       	ldi	r19, 0x00	; 0
    21e6:	40 e0       	ldi	r20, 0x00	; 0
    21e8:	50 e0       	ldi	r21, 0x00	; 0
    21ea:	0e 94 5d 25 	call	0x4aba	; 0x4aba <__divmodsi4>
    21ee:	50 95       	com	r21
    21f0:	40 95       	com	r20
    21f2:	30 95       	com	r19
    21f4:	21 95       	neg	r18
    21f6:	3f 4f       	sbci	r19, 0xFF	; 255
    21f8:	4f 4f       	sbci	r20, 0xFF	; 255
    21fa:	5f 4f       	sbci	r21, 0xFF	; 255
    21fc:	ca 01       	movw	r24, r20
    21fe:	b9 01       	movw	r22, r18
    2200:	2b 89       	ldd	r18, Y+19	; 0x13
    2202:	3c 89       	ldd	r19, Y+20	; 0x14
    2204:	4d 89       	ldd	r20, Y+21	; 0x15
    2206:	5e 89       	ldd	r21, Y+22	; 0x16
    2208:	0e 94 5d 25 	call	0x4aba	; 0x4aba <__divmodsi4>
    220c:	59 01       	movw	r10, r18
    220e:	6a 01       	movw	r12, r20
    2210:	2b 8d       	ldd	r18, Y+27	; 0x1b
    2212:	3c 8d       	ldd	r19, Y+28	; 0x1c
    2214:	4d 8d       	ldd	r20, Y+29	; 0x1d
    2216:	5e 8d       	ldd	r21, Y+30	; 0x1e
    2218:	62 0e       	add	r6, r18
    221a:	73 1e       	adc	r7, r19
    221c:	84 1e       	adc	r8, r20
    221e:	95 1e       	adc	r9, r21
    2220:	c4 01       	movw	r24, r8
    2222:	b3 01       	movw	r22, r6
    2224:	22 e0       	ldi	r18, 0x02	; 2
    2226:	30 e0       	ldi	r19, 0x00	; 0
    2228:	40 e0       	ldi	r20, 0x00	; 0
    222a:	50 e0       	ldi	r21, 0x00	; 0
    222c:	0e 94 5d 25 	call	0x4aba	; 0x4aba <__divmodsi4>
    2230:	a2 0e       	add	r10, r18
    2232:	b3 1e       	adc	r11, r19
    2234:	c4 1e       	adc	r12, r20
    2236:	d5 1e       	adc	r13, r21
    2238:	17 01       	movw	r2, r14
    223a:	28 01       	movw	r4, r16
    223c:	86 01       	movw	r16, r12
    223e:	75 01       	movw	r14, r10
    2240:	8d ce       	rjmp	.-742    	; 0x1f5c <zoProfiledMoveAbsolute+0x27a>
	}
	else
	{								//else calculate as if we started from zero velocity
		zeroCross = TRUE;
		velCalc = 0;
		posCalc = currentPos - ( currentVel * currentVel ) / 2 / accel ;
    2242:	6b 85       	ldd	r22, Y+11	; 0x0b
    2244:	7c 85       	ldd	r23, Y+12	; 0x0c
    2246:	8d 85       	ldd	r24, Y+13	; 0x0d
    2248:	9e 85       	ldd	r25, Y+14	; 0x0e
    224a:	9b 01       	movw	r18, r22
    224c:	ac 01       	movw	r20, r24
    224e:	0e 94 08 25 	call	0x4a10	; 0x4a10 <__mulsi3>
    2252:	22 e0       	ldi	r18, 0x02	; 2
    2254:	30 e0       	ldi	r19, 0x00	; 0
    2256:	40 e0       	ldi	r20, 0x00	; 0
    2258:	50 e0       	ldi	r21, 0x00	; 0
    225a:	0e 94 5d 25 	call	0x4aba	; 0x4aba <__divmodsi4>
    225e:	50 95       	com	r21
    2260:	40 95       	com	r20
    2262:	30 95       	com	r19
    2264:	21 95       	neg	r18
    2266:	3f 4f       	sbci	r19, 0xFF	; 255
    2268:	4f 4f       	sbci	r20, 0xFF	; 255
    226a:	5f 4f       	sbci	r21, 0xFF	; 255
    226c:	ca 01       	movw	r24, r20
    226e:	b9 01       	movw	r22, r18
    2270:	2b 89       	ldd	r18, Y+19	; 0x13
    2272:	3c 89       	ldd	r19, Y+20	; 0x14
    2274:	4d 89       	ldd	r20, Y+21	; 0x15
    2276:	5e 89       	ldd	r21, Y+22	; 0x16
    2278:	0e 94 5d 25 	call	0x4aba	; 0x4aba <__divmodsi4>
    227c:	39 01       	movw	r6, r18
    227e:	4a 01       	movw	r8, r20
    2280:	2f 89       	ldd	r18, Y+23	; 0x17
    2282:	38 8d       	ldd	r19, Y+24	; 0x18
    2284:	49 8d       	ldd	r20, Y+25	; 0x19
    2286:	5a 8d       	ldd	r21, Y+26	; 0x1a
    2288:	62 0e       	add	r6, r18
    228a:	73 1e       	adc	r7, r19
    228c:	84 1e       	adc	r8, r20
    228e:	95 1e       	adc	r9, r21
    2290:	aa 24       	eor	r10, r10
    2292:	bb 24       	eor	r11, r11
    2294:	65 01       	movw	r12, r10
    2296:	3f ef       	ldi	r19, 0xFF	; 255
    2298:	3a 87       	std	Y+10, r19	; 0x0a
    229a:	bd cd       	rjmp	.-1158   	; 0x1e16 <zoProfiledMoveAbsolute+0x134>
	s08 s = 1;

	enterCritical();
	if(Sms.Control.State == ZO_SMS_CONTROL_POSITION_CONTROL)					
	{
		currentVel = zoEncoderGetVel();
    229c:	0e 94 51 03 	call	0x6a2	; 0x6a2 <zoEncoderGetVel>
    22a0:	9c 01       	movw	r18, r24
    22a2:	44 27       	eor	r20, r20
    22a4:	37 fd       	sbrc	r19, 7
    22a6:	40 95       	com	r20
    22a8:	54 2f       	mov	r21, r20
    22aa:	2b 87       	std	Y+11, r18	; 0x0b
    22ac:	3c 87       	std	Y+12, r19	; 0x0c
    22ae:	4d 87       	std	Y+13, r20	; 0x0d
    22b0:	5e 87       	std	Y+14, r21	; 0x0e
		currentPos = zoEncoderGetPos();
    22b2:	0e 94 36 04 	call	0x86c	; 0x86c <zoEncoderGetPos>
    22b6:	6f 8b       	std	Y+23, r22	; 0x17
    22b8:	78 8f       	std	Y+24, r23	; 0x18
    22ba:	89 8f       	std	Y+25, r24	; 0x19
    22bc:	9a 8f       	std	Y+26, r25	; 0x1a
    22be:	80 91 04 01 	lds	r24, 0x0104
    22c2:	90 91 05 01 	lds	r25, 0x0105
    22c6:	a0 91 06 01 	lds	r26, 0x0106
    22ca:	b0 91 07 01 	lds	r27, 0x0107
    22ce:	8d 83       	std	Y+5, r24	; 0x05
    22d0:	9e 83       	std	Y+6, r25	; 0x06
    22d2:	af 83       	std	Y+7, r26	; 0x07
    22d4:	b8 87       	std	Y+8, r27	; 0x08
    22d6:	57 cd       	rjmp	.-1362   	; 0x1d86 <zoProfiledMoveAbsolute+0xa4>

000022d8 <zoCommandDoMove>:
		packet->byteCount++;
	}
}

/*C8*/	void zoCommandDoMove(ZO_PROTOCOL_PACKET *packet)
{
    22d8:	ef 92       	push	r14
    22da:	ff 92       	push	r15
    22dc:	0f 93       	push	r16
    22de:	1f 93       	push	r17
    22e0:	fc 01       	movw	r30, r24
	enterCritical();
    22e2:	0f b6       	in	r0, 0x3f	; 63
    22e4:	0f 92       	push	r0
    22e6:	f8 94       	cli
	ZO_SMS_SETPOINT_TYPE spType = Sms.BufferdSetPoint.type;
	exitCritical();
    22e8:	0f 90       	pop	r0
    22ea:	0f be       	out	0x3f, r0	; 63

	switch(spType)
    22ec:	80 91 5d 01 	lds	r24, 0x015D
    22f0:	83 30       	cpi	r24, 0x03	; 3
    22f2:	09 f4       	brne	.+2      	; 0x22f6 <zoCommandDoMove+0x1e>
    22f4:	67 c0       	rjmp	.+206    	; 0x23c4 <zoCommandDoMove+0xec>
    22f6:	84 30       	cpi	r24, 0x04	; 4
    22f8:	30 f1       	brcs	.+76     	; 0x2346 <zoCommandDoMove+0x6e>
    22fa:	85 30       	cpi	r24, 0x05	; 5
    22fc:	09 f4       	brne	.+2      	; 0x2300 <zoCommandDoMove+0x28>
    22fe:	4d c0       	rjmp	.+154    	; 0x239a <zoCommandDoMove+0xc2>
    2300:	85 30       	cpi	r24, 0x05	; 5
    2302:	08 f4       	brcc	.+2      	; 0x2306 <zoCommandDoMove+0x2e>
    2304:	41 c0       	rjmp	.+130    	; 0x2388 <zoCommandDoMove+0xb0>
    2306:	86 30       	cpi	r24, 0x06	; 6
    2308:	91 f4       	brne	.+36     	; 0x232e <zoCommandDoMove+0x56>
	case ZO_SMS_SETPOINT_PROFILED_ABSOLUTE_POSITION:
		zoProfiledMoveAbsolute(Sms.BufferdSetPoint.value);
		break;

	case ZO_SMS_SETPOINT_PROFILED_RELATIVE_POSITION:
		zoProfiledMoveAbsolute(Sms.BufferdSetPoint.value + zoEncoderGetPos());
    230a:	e0 90 5e 01 	lds	r14, 0x015E
    230e:	f0 90 5f 01 	lds	r15, 0x015F
    2312:	00 91 60 01 	lds	r16, 0x0160
    2316:	10 91 61 01 	lds	r17, 0x0161
    231a:	0e 94 36 04 	call	0x86c	; 0x86c <zoEncoderGetPos>
    231e:	e6 0e       	add	r14, r22
    2320:	f7 1e       	adc	r15, r23
    2322:	08 1f       	adc	r16, r24
    2324:	19 1f       	adc	r17, r25
    2326:	c8 01       	movw	r24, r16
    2328:	b7 01       	movw	r22, r14
    232a:	0e 94 71 0e 	call	0x1ce2	; 0x1ce2 <zoProfiledMoveAbsolute>
		break;
	}
	
	//indicate execution of buffered setpoint
	enterCritical();
    232e:	0f b6       	in	r0, 0x3f	; 63
    2330:	0f 92       	push	r0
    2332:	f8 94       	cli
	Sms.BufferdSetPoint.type = ZO_SMS_SETPOINT_NONE;
    2334:	10 92 5d 01 	sts	0x015D, r1
	exitCritical();
    2338:	0f 90       	pop	r0
    233a:	0f be       	out	0x3f, r0	; 63
}
    233c:	1f 91       	pop	r17
    233e:	0f 91       	pop	r16
    2340:	ff 90       	pop	r15
    2342:	ef 90       	pop	r14
    2344:	08 95       	ret
{
	enterCritical();
	ZO_SMS_SETPOINT_TYPE spType = Sms.BufferdSetPoint.type;
	exitCritical();

	switch(spType)
    2346:	81 30       	cpi	r24, 0x01	; 1
    2348:	99 f1       	breq	.+102    	; 0x23b0 <zoCommandDoMove+0xd8>
    234a:	82 30       	cpi	r24, 0x02	; 2
    234c:	b8 f3       	brcs	.-18     	; 0x233c <zoCommandDoMove+0x64>
		s16ToStr((s16)Sms.BufferdSetPoint.value,packet->data);
		zoCommandVelocityMove(packet);
		break;

	case ZO_SMS_SETPOINT_ABSOLUTE_POSITION:
		s32ToStr(Sms.BufferdSetPoint.value,packet->data);
    234e:	80 91 5e 01 	lds	r24, 0x015E
    2352:	90 91 5f 01 	lds	r25, 0x015F
    2356:	a0 91 60 01 	lds	r26, 0x0160
    235a:	b0 91 61 01 	lds	r27, 0x0161

inline void s32ToStr(s32 data, u08* str)
{
	S32* num;
	num = (S32*)str;
	num->all = data;
    235e:	84 83       	std	Z+4, r24	; 0x04
    2360:	95 83       	std	Z+5, r25	; 0x05
    2362:	a6 83       	std	Z+6, r26	; 0x06
    2364:	b7 83       	std	Z+7, r27	; 0x07
/*08*/	void zoCommandAbsolutePositionMove(ZO_PROTOCOL_PACKET *packet)
{
	s32 pos;
	pos = strToS32(packet->data);

	enterCritical();
    2366:	0f b6       	in	r0, 0x3f	; 63
    2368:	0f 92       	push	r0
    236a:	f8 94       	cli
	Sms.Control.State = ZO_SMS_CONTROL_POSITION_CONTROL;
    236c:	21 e0       	ldi	r18, 0x01	; 1
    236e:	20 93 03 01 	sts	0x0103, r18
	Sms.Pid.SetPoint = pos;
    2372:	80 93 53 01 	sts	0x0153, r24
    2376:	90 93 54 01 	sts	0x0154, r25
    237a:	a0 93 55 01 	sts	0x0155, r26
    237e:	b0 93 56 01 	sts	0x0156, r27
	exitCritical();
    2382:	0f 90       	pop	r0
    2384:	0f be       	out	0x3f, r0	; 63
    2386:	d3 cf       	rjmp	.-90     	; 0x232e <zoCommandDoMove+0x56>
		s32ToStr(Sms.BufferdSetPoint.value,packet->data);
		zoCommandRelativePositionMove(packet);
		break;

	case ZO_SMS_SETPOINT_PROFILED_VELOCITY:
		s16ToStr(Sms.BufferdSetPoint.value,packet->data);
    2388:	80 91 5e 01 	lds	r24, 0x015E
    238c:	90 91 5f 01 	lds	r25, 0x015F

inline void s16ToStr(s16 data, u08* str)
{
	S16* num;
	num = (S16*)str;
	num->all = data;
    2390:	95 83       	std	Z+5, r25	; 0x05
    2392:	84 83       	std	Z+4, r24	; 0x04
/*0A*/  void zoCommandProfiledVelocityMove(ZO_PROTOCOL_PACKET *packet)
{
	s16 vel;

	vel = strToS16(packet->data);
	zoProfiledVelocity(vel);
    2394:	0e 94 dd 0c 	call	0x19ba	; 0x19ba <zoProfiledVelocity>
    2398:	ca cf       	rjmp	.-108    	; 0x232e <zoCommandDoMove+0x56>
		s16ToStr(Sms.BufferdSetPoint.value,packet->data);
		zoCommandProfiledVelocityMove(packet);
		break;

	case ZO_SMS_SETPOINT_PROFILED_ABSOLUTE_POSITION:
		zoProfiledMoveAbsolute(Sms.BufferdSetPoint.value);
    239a:	60 91 5e 01 	lds	r22, 0x015E
    239e:	70 91 5f 01 	lds	r23, 0x015F
    23a2:	80 91 60 01 	lds	r24, 0x0160
    23a6:	90 91 61 01 	lds	r25, 0x0161
    23aa:	0e 94 71 0e 	call	0x1ce2	; 0x1ce2 <zoProfiledMoveAbsolute>
    23ae:	bf cf       	rjmp	.-130    	; 0x232e <zoCommandDoMove+0x56>
    23b0:	80 91 5e 01 	lds	r24, 0x015E
    23b4:	90 91 5f 01 	lds	r25, 0x015F
    23b8:	95 83       	std	Z+5, r25	; 0x05
    23ba:	84 83       	std	Z+4, r24	; 0x04
		return;
		break;

	case ZO_SMS_SETPOINT_VELOCITY:
		s16ToStr((s16)Sms.BufferdSetPoint.value,packet->data);
		zoCommandVelocityMove(packet);
    23bc:	cf 01       	movw	r24, r30
    23be:	0e 94 37 0e 	call	0x1c6e	; 0x1c6e <zoCommandVelocityMove>
    23c2:	b5 cf       	rjmp	.-150    	; 0x232e <zoCommandDoMove+0x56>
		s32ToStr(Sms.BufferdSetPoint.value,packet->data);
		zoCommandAbsolutePositionMove(packet);
		break;

	case ZO_SMS_SETPOINT_RELATIVE_POSITION:
		s32ToStr(Sms.BufferdSetPoint.value,packet->data);
    23c4:	80 91 5e 01 	lds	r24, 0x015E
    23c8:	90 91 5f 01 	lds	r25, 0x015F
    23cc:	a0 91 60 01 	lds	r26, 0x0160
    23d0:	b0 91 61 01 	lds	r27, 0x0161

inline void s32ToStr(s32 data, u08* str)
{
	S32* num;
	num = (S32*)str;
	num->all = data;
    23d4:	84 83       	std	Z+4, r24	; 0x04
    23d6:	95 83       	std	Z+5, r25	; 0x05
    23d8:	a6 83       	std	Z+6, r26	; 0x06
    23da:	b7 83       	std	Z+7, r27	; 0x07
{
	s32 pos;

	pos = strToS32(packet->data);

	enterCritical();
    23dc:	0f b6       	in	r0, 0x3f	; 63
    23de:	0f 92       	push	r0
    23e0:	f8 94       	cli
	Sms.Control.State = ZO_SMS_CONTROL_POSITION_CONTROL;
    23e2:	21 e0       	ldi	r18, 0x01	; 1
    23e4:	20 93 03 01 	sts	0x0103, r18
	Sms.Pid.SetPoint += pos;
    23e8:	20 91 53 01 	lds	r18, 0x0153
    23ec:	30 91 54 01 	lds	r19, 0x0154
    23f0:	40 91 55 01 	lds	r20, 0x0155
    23f4:	50 91 56 01 	lds	r21, 0x0156
    23f8:	28 0f       	add	r18, r24
    23fa:	39 1f       	adc	r19, r25
    23fc:	4a 1f       	adc	r20, r26
    23fe:	5b 1f       	adc	r21, r27
    2400:	20 93 53 01 	sts	0x0153, r18
    2404:	30 93 54 01 	sts	0x0154, r19
    2408:	40 93 55 01 	sts	0x0155, r20
    240c:	50 93 56 01 	sts	0x0156, r21
	exitCritical();
    2410:	0f 90       	pop	r0
    2412:	0f be       	out	0x3f, r0	; 63
    2414:	8c cf       	rjmp	.-232    	; 0x232e <zoCommandDoMove+0x56>

00002416 <zoCommandProfiledRelativePositionMove>:
	pos = strToS32(packet->data);
	zoProfiledMoveAbsolute(pos);
}

/*0C*/	void zoCommandProfiledRelativePositionMove(ZO_PROTOCOL_PACKET *packet)
{
    2416:	ef 92       	push	r14
    2418:	ff 92       	push	r15
    241a:	0f 93       	push	r16
    241c:	1f 93       	push	r17

inline s32 strToS32(u08* str)
{
	S32 *num;
	num = (S32*)str;
	return num->all;
    241e:	fc 01       	movw	r30, r24
    2420:	e4 80       	ldd	r14, Z+4	; 0x04
    2422:	f5 80       	ldd	r15, Z+5	; 0x05
    2424:	06 81       	ldd	r16, Z+6	; 0x06
    2426:	17 81       	ldd	r17, Z+7	; 0x07
	s32 pos;
	
	pos = strToS32(packet->data) + zoEncoderGetPos();
    2428:	0e 94 36 04 	call	0x86c	; 0x86c <zoEncoderGetPos>
	zoProfiledMoveAbsolute(pos);
    242c:	e6 0e       	add	r14, r22
    242e:	f7 1e       	adc	r15, r23
    2430:	08 1f       	adc	r16, r24
    2432:	19 1f       	adc	r17, r25
    2434:	c8 01       	movw	r24, r16
    2436:	b7 01       	movw	r22, r14
    2438:	0e 94 71 0e 	call	0x1ce2	; 0x1ce2 <zoProfiledMoveAbsolute>
}
    243c:	1f 91       	pop	r17
    243e:	0f 91       	pop	r16
    2440:	ff 90       	pop	r15
    2442:	ef 90       	pop	r14
    2444:	08 95       	ret

00002446 <zoCommandProfiledAbsolutePositionMove>:
/*0B*/  void zoCommandProfiledAbsolutePositionMove(ZO_PROTOCOL_PACKET *packet)
{
	s32 pos;

	pos = strToS32(packet->data);
	zoProfiledMoveAbsolute(pos);
    2446:	fc 01       	movw	r30, r24
    2448:	64 81       	ldd	r22, Z+4	; 0x04
    244a:	75 81       	ldd	r23, Z+5	; 0x05
    244c:	86 81       	ldd	r24, Z+6	; 0x06
    244e:	97 81       	ldd	r25, Z+7	; 0x07
    2450:	0e 94 71 0e 	call	0x1ce2	; 0x1ce2 <zoProfiledMoveAbsolute>
}
    2454:	08 95       	ret

00002456 <zoCommandGetWarning>:

	u16ToStr(zoAdcRead(ZO_ADC_CHANNEL_7),packet->data);
}

/*73*/	void zoCommandGetWarning(ZO_PROTOCOL_PACKET *packet)
{
    2456:	0f 93       	push	r16
    2458:	1f 93       	push	r17
    245a:	cf 93       	push	r28
    245c:	df 93       	push	r29
    245e:	8c 01       	movw	r16, r24
	packet->byteCount = 0;
    2460:	fc 01       	movw	r30, r24
    2462:	13 82       	std	Z+3, r1	; 0x03
    2464:	0f c0       	rjmp	.+30     	; 0x2484 <zoCommandGetWarning+0x2e>
	while(!zoErrorIsEmpty(&zoSmsWarning))
	{
		packet->data[packet->byteCount] = zoErrorGet(&zoSmsWarning);
    2466:	f8 01       	movw	r30, r16
    2468:	83 81       	ldd	r24, Z+3	; 0x03
    246a:	c8 2f       	mov	r28, r24
    246c:	d0 e0       	ldi	r29, 0x00	; 0
    246e:	83 ea       	ldi	r24, 0xA3	; 163
    2470:	91 e0       	ldi	r25, 0x01	; 1
    2472:	0e 94 b5 00 	call	0x16a	; 0x16a <zoErrorGet>
    2476:	c0 0f       	add	r28, r16
    2478:	d1 1f       	adc	r29, r17
    247a:	8c 83       	std	Y+4, r24	; 0x04
		packet->byteCount++;
    247c:	f8 01       	movw	r30, r16
    247e:	83 81       	ldd	r24, Z+3	; 0x03
    2480:	8f 5f       	subi	r24, 0xFF	; 255
    2482:	83 83       	std	Z+3, r24	; 0x03
}

/*73*/	void zoCommandGetWarning(ZO_PROTOCOL_PACKET *packet)
{
	packet->byteCount = 0;
	while(!zoErrorIsEmpty(&zoSmsWarning))
    2484:	83 ea       	ldi	r24, 0xA3	; 163
    2486:	91 e0       	ldi	r25, 0x01	; 1
    2488:	0e 94 ad 00 	call	0x15a	; 0x15a <zoErrorIsEmpty>
    248c:	88 23       	and	r24, r24
    248e:	59 f3       	breq	.-42     	; 0x2466 <zoCommandGetWarning+0x10>
	{
		packet->data[packet->byteCount] = zoErrorGet(&zoSmsWarning);
		packet->byteCount++;
	}
}
    2490:	df 91       	pop	r29
    2492:	cf 91       	pop	r28
    2494:	1f 91       	pop	r17
    2496:	0f 91       	pop	r16
    2498:	08 95       	ret

0000249a <zoCommandGetCurrent>:

	s16ToStr(zoEncoderGetVel(),packet->data);	
}

/*72*/	void zoCommandGetCurrent(ZO_PROTOCOL_PACKET *packet)
{
    249a:	0f 93       	push	r16
    249c:	1f 93       	push	r17
    249e:	8c 01       	movw	r16, r24
	packet->byteCount = 2;
    24a0:	82 e0       	ldi	r24, 0x02	; 2
    24a2:	f8 01       	movw	r30, r16
    24a4:	83 83       	std	Z+3, r24	; 0x03

	u16ToStr(zoAdcRead(ZO_ADC_CHANNEL_7),packet->data);
    24a6:	87 e0       	ldi	r24, 0x07	; 7
    24a8:	0e 94 51 16 	call	0x2ca2	; 0x2ca2 <zoAdcRead>

inline void u16ToStr(u16 data, u08* str)
{
	U16* num;
	num = (U16*)str;
	num->all = data;
    24ac:	f8 01       	movw	r30, r16
    24ae:	95 83       	std	Z+5, r25	; 0x05
    24b0:	84 83       	std	Z+4, r24	; 0x04
}
    24b2:	1f 91       	pop	r17
    24b4:	0f 91       	pop	r16
    24b6:	08 95       	ret

000024b8 <zoCommandGetAnalogIn>:

	packet->data[0] = in;
}

/*6E*/  void zoCommandGetAnalogIn(ZO_PROTOCOL_PACKET *packet)
{
    24b8:	0f 93       	push	r16
    24ba:	1f 93       	push	r17
    24bc:	8c 01       	movw	r16, r24
	packet->byteCount = 8;
    24be:	88 e0       	ldi	r24, 0x08	; 8
    24c0:	f8 01       	movw	r30, r16
    24c2:	83 83       	std	Z+3, r24	; 0x03
	u16ToStr(zoAdcRead(ZO_ADC_CHANNEL_0),packet->data);
    24c4:	80 e0       	ldi	r24, 0x00	; 0
    24c6:	0e 94 51 16 	call	0x2ca2	; 0x2ca2 <zoAdcRead>
    24ca:	f8 01       	movw	r30, r16
    24cc:	95 83       	std	Z+5, r25	; 0x05
    24ce:	84 83       	std	Z+4, r24	; 0x04
	u16ToStr(zoAdcRead(ZO_ADC_CHANNEL_1),&packet->data[2]);
    24d0:	81 e0       	ldi	r24, 0x01	; 1
    24d2:	0e 94 51 16 	call	0x2ca2	; 0x2ca2 <zoAdcRead>
    24d6:	f8 01       	movw	r30, r16
    24d8:	97 83       	std	Z+7, r25	; 0x07
    24da:	86 83       	std	Z+6, r24	; 0x06
	u16ToStr(zoAdcRead(ZO_ADC_CHANNEL_2),&packet->data[4]);
    24dc:	82 e0       	ldi	r24, 0x02	; 2
    24de:	0e 94 51 16 	call	0x2ca2	; 0x2ca2 <zoAdcRead>
    24e2:	f8 01       	movw	r30, r16
    24e4:	91 87       	std	Z+9, r25	; 0x09
    24e6:	80 87       	std	Z+8, r24	; 0x08
	u16ToStr(zoAdcRead(ZO_ADC_CHANNEL_3),&packet->data[6]);
    24e8:	83 e0       	ldi	r24, 0x03	; 3
    24ea:	0e 94 51 16 	call	0x2ca2	; 0x2ca2 <zoAdcRead>
    24ee:	f8 01       	movw	r30, r16
    24f0:	93 87       	std	Z+11, r25	; 0x0b
    24f2:	82 87       	std	Z+10, r24	; 0x0a
}
    24f4:	1f 91       	pop	r17
    24f6:	0f 91       	pop	r16
    24f8:	08 95       	ret

000024fa <zoCommandGetAbsolutePosition>:

	s32ToStr(zoEncoderGetPos(),packet->data);
}

/*70*/	void zoCommandGetAbsolutePosition(ZO_PROTOCOL_PACKET *packet)
{
    24fa:	0f 93       	push	r16
    24fc:	1f 93       	push	r17
    24fe:	8c 01       	movw	r16, r24
	packet->byteCount = 2;
    2500:	82 e0       	ldi	r24, 0x02	; 2
    2502:	f8 01       	movw	r30, r16
    2504:	83 83       	std	Z+3, r24	; 0x03

	u16ToStr(zoEncoderGetPosAbsolute(),packet->data);
    2506:	0e 94 33 04 	call	0x866	; 0x866 <zoEncoderGetPosAbsolute>
    250a:	f8 01       	movw	r30, r16
    250c:	95 83       	std	Z+5, r25	; 0x05
    250e:	84 83       	std	Z+4, r24	; 0x04
}
    2510:	1f 91       	pop	r17
    2512:	0f 91       	pop	r16
    2514:	08 95       	ret

00002516 <zoCommandSetErrorReportingLevel>:
	Sms.Control.State = ZO_SMS_CONTROL_NO_CONTROL;
	exitCritical();
	zoMotorSetState(FALSE);
}
/*1C*/  void zoCommandSetErrorReportingLevel(ZO_PROTOCOL_PACKET *packet)
{
    2516:	cf 93       	push	r28
    2518:	df 93       	push	r29
    251a:	ec 01       	movw	r28, r24
	//only error reporting levels 0 and 1 exist.
	if(packet->data[0]>1)
    251c:	6c 81       	ldd	r22, Y+4	; 0x04
    251e:	62 30       	cpi	r22, 0x02	; 2
    2520:	40 f0       	brcs	.+16     	; 0x2532 <zoCommandSetErrorReportingLevel+0x1c>
	{
		zoErrorPut(&zoCommandsError,ZO_COMMANDS_ERROR_INVALID_ARGUMENT);
    2522:	86 eb       	ldi	r24, 0xB6	; 182
    2524:	91 e0       	ldi	r25, 0x01	; 1
    2526:	63 e0       	ldi	r22, 0x03	; 3
    2528:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <zoErrorPut>
	eeprom_write_byte((u08*)ZO_EEPROM_ADDRESS_ERROR_REPORTING_LVL, packet->data[0]);
	
	enterCritical();
	Sms.Settings.errorReportingLevel = packet->data[0];
	exitCritical();	
}
    252c:	df 91       	pop	r29
    252e:	cf 91       	pop	r28
    2530:	08 95       	ret
	{
		zoErrorPut(&zoCommandsError,ZO_COMMANDS_ERROR_INVALID_ARGUMENT);
		return;
	}
	
	eeprom_write_byte((u08*)ZO_EEPROM_ADDRESS_ERROR_REPORTING_LVL, packet->data[0]);
    2532:	80 ec       	ldi	r24, 0xC0	; 192
    2534:	90 e0       	ldi	r25, 0x00	; 0
    2536:	0e 94 b4 26 	call	0x4d68	; 0x4d68 <__eewr_byte_m328p>
	
	enterCritical();
    253a:	0f b6       	in	r0, 0x3f	; 63
    253c:	0f 92       	push	r0
    253e:	f8 94       	cli
	Sms.Settings.errorReportingLevel = packet->data[0];
    2540:	8c 81       	ldd	r24, Y+4	; 0x04
    2542:	80 93 17 01 	sts	0x0117, r24
	exitCritical();	
    2546:	0f 90       	pop	r0
    2548:	0f be       	out	0x3f, r0	; 63
}
    254a:	df 91       	pop	r29
    254c:	cf 91       	pop	r28
    254e:	08 95       	ret

00002550 <zoCommandSetLocalAcceptanceMask>:
	//only write to eeprom. A restart is required for setting to take effect
	eeprom_write_byte((u08*)ZO_EEPROM_ADDRESS_NODE_ID, packet->data[0]);
}
/*16*/  void zoCommandSetLocalAcceptanceMask(ZO_PROTOCOL_PACKET *packet)
{
	if( (packet->data[0] == 0x00) )
    2550:	fc 01       	movw	r30, r24
    2552:	64 81       	ldd	r22, Z+4	; 0x04
    2554:	66 23       	and	r22, r22
    2556:	29 f0       	breq	.+10     	; 0x2562 <zoCommandSetLocalAcceptanceMask+0x12>
	{
		zoErrorPut(&zoCommandsError,ZO_COMMANDS_ERROR_INVALID_ARGUMENT);
		return;
	}

	eeprom_write_byte((u08*)ZO_EEPROM_ADDRESS_LAM, packet->data[0]);
    2558:	80 eb       	ldi	r24, 0xB0	; 176
    255a:	90 e0       	ldi	r25, 0x00	; 0
    255c:	0e 94 b4 26 	call	0x4d68	; 0x4d68 <__eewr_byte_m328p>
    2560:	08 95       	ret
}
/*16*/  void zoCommandSetLocalAcceptanceMask(ZO_PROTOCOL_PACKET *packet)
{
	if( (packet->data[0] == 0x00) )
	{
		zoErrorPut(&zoCommandsError,ZO_COMMANDS_ERROR_INVALID_ARGUMENT);
    2562:	86 eb       	ldi	r24, 0xB6	; 182
    2564:	91 e0       	ldi	r25, 0x01	; 1
    2566:	63 e0       	ldi	r22, 0x03	; 3
    2568:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <zoErrorPut>
    256c:	08 95       	ret

0000256e <zoCommandSetNodeID>:
}

/*15*/	void zoCommandSetNodeID(ZO_PROTOCOL_PACKET *packet)
{
	//node id of 0x00 is forbidden by the protocol
	if( (packet->data[0] == 0x00) || (packet->data[0] > 0x7F) )
    256e:	fc 01       	movw	r30, r24
    2570:	64 81       	ldd	r22, Z+4	; 0x04
    2572:	16 16       	cp	r1, r22
    2574:	2c f4       	brge	.+10     	; 0x2580 <zoCommandSetNodeID+0x12>
		zoErrorPut(&zoCommandsError,ZO_COMMANDS_ERROR_INVALID_ARGUMENT);
		return;
	}
	
	//only write to eeprom. A restart is required for setting to take effect
	eeprom_write_byte((u08*)ZO_EEPROM_ADDRESS_NODE_ID, packet->data[0]);
    2576:	80 e0       	ldi	r24, 0x00	; 0
    2578:	90 e0       	ldi	r25, 0x00	; 0
    257a:	0e 94 b4 26 	call	0x4d68	; 0x4d68 <__eewr_byte_m328p>
    257e:	08 95       	ret
/*15*/	void zoCommandSetNodeID(ZO_PROTOCOL_PACKET *packet)
{
	//node id of 0x00 is forbidden by the protocol
	if( (packet->data[0] == 0x00) || (packet->data[0] > 0x7F) )
	{
		zoErrorPut(&zoCommandsError,ZO_COMMANDS_ERROR_INVALID_ARGUMENT);
    2580:	86 eb       	ldi	r24, 0xB6	; 182
    2582:	91 e0       	ldi	r25, 0x01	; 1
    2584:	63 e0       	ldi	r22, 0x03	; 3
    2586:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <zoErrorPut>
    258a:	08 95       	ret

0000258c <zoCommandConfigureDigitalIO>:
	Sms.BufferdSetPoint.value = pos;
	exitCritical();
}

/*13*/	void zoCommandConfigureDigitalIO(ZO_PROTOCOL_PACKET *packet)
{
    258c:	ff 92       	push	r15
    258e:	0f 93       	push	r16
    2590:	1f 93       	push	r17
	u08 dir;

	dir = packet->data[0];
    2592:	fc 01       	movw	r30, r24
    2594:	04 81       	ldd	r16, Z+4	; 0x04
	
	eeprom_write_byte((u08*)ZO_EEPROM_ADDRESS_DIGITAL_IO_CONFIG, dir & 0x0F);
    2596:	ff e0       	ldi	r31, 0x0F	; 15
    2598:	ff 2e       	mov	r15, r31
    259a:	f0 22       	and	r15, r16
    259c:	80 e8       	ldi	r24, 0x80	; 128
    259e:	90 e0       	ldi	r25, 0x00	; 0
    25a0:	6f 2d       	mov	r22, r15
    25a2:	0e 94 b4 26 	call	0x4d68	; 0x4d68 <__eewr_byte_m328p>

	enterCritical();
    25a6:	0f b6       	in	r0, 0x3f	; 63
    25a8:	0f 92       	push	r0
    25aa:	f8 94       	cli
	//set digital IO 1 direction -> portD7
	DDRD = (DDRD & (~0x80)) | ( (dir<<7) & 0x80 );
    25ac:	8a b1       	in	r24, 0x0a	; 10
    25ae:	10 e0       	ldi	r17, 0x00	; 0
    25b0:	98 01       	movw	r18, r16
    25b2:	36 95       	lsr	r19
    25b4:	32 2f       	mov	r19, r18
    25b6:	22 27       	eor	r18, r18
    25b8:	37 95       	ror	r19
    25ba:	27 95       	ror	r18
    25bc:	8f 77       	andi	r24, 0x7F	; 127
    25be:	82 2b       	or	r24, r18
    25c0:	8a b9       	out	0x0a, r24	; 10
	//set digital IO 2,3,4 direction -> portB3,4,5 respectively
	DDRB = (DDRB & (~0x38)) | ( (dir<<2) & 0x38 );
    25c2:	84 b1       	in	r24, 0x04	; 4
    25c4:	00 0f       	add	r16, r16
    25c6:	11 1f       	adc	r17, r17
    25c8:	00 0f       	add	r16, r16
    25ca:	11 1f       	adc	r17, r17
    25cc:	08 73       	andi	r16, 0x38	; 56
    25ce:	87 7c       	andi	r24, 0xC7	; 199
    25d0:	08 2b       	or	r16, r24
    25d2:	04 b9       	out	0x04, r16	; 4
	
	Sms.Settings.DigitalIoConfig = dir & 0x0F;
    25d4:	f0 92 09 01 	sts	0x0109, r15
	exitCritical();
    25d8:	0f 90       	pop	r0
    25da:	0f be       	out	0x3f, r0	; 63
}
    25dc:	1f 91       	pop	r17
    25de:	0f 91       	pop	r16
    25e0:	ff 90       	pop	r15
    25e2:	08 95       	ret

000025e4 <zoCommandStop>:
	Sms.Pid.SetPoint = zoEncoderGetPos();
	exitCritical();
}
/*1B*/	void zoCommandStop(ZO_PROTOCOL_PACKET *packet)
{
	enterCritical();
    25e4:	0f b6       	in	r0, 0x3f	; 63
    25e6:	0f 92       	push	r0
    25e8:	f8 94       	cli
	Sms.Control.State = ZO_SMS_CONTROL_NO_CONTROL;
    25ea:	10 92 03 01 	sts	0x0103, r1
	exitCritical();
    25ee:	0f 90       	pop	r0
    25f0:	0f be       	out	0x3f, r0	; 63
	zoMotorSetState(FALSE);
    25f2:	80 e0       	ldi	r24, 0x00	; 0
    25f4:	0e 94 7e 05 	call	0xafc	; 0xafc <zoMotorSetState>
}
    25f8:	08 95       	ret

000025fa <zoCommandStart>:
{
	zoEncoderReset();
}
/*19*/	void zoCommandStart(ZO_PROTOCOL_PACKET *packet)
{
	enterCritical();
    25fa:	0f b6       	in	r0, 0x3f	; 63
    25fc:	0f 92       	push	r0
    25fe:	f8 94       	cli
	Sms.BufferdSetPoint.type = ZO_SMS_SETPOINT_NONE;
    2600:	10 92 5d 01 	sts	0x015D, r1
	zoEncoderReset();
    2604:	0e 94 f9 03 	call	0x7f2	; 0x7f2 <zoEncoderReset>
	Sms.Pid.PrevError = 0;
    2608:	10 92 47 01 	sts	0x0147, r1
    260c:	10 92 48 01 	sts	0x0148, r1
    2610:	10 92 49 01 	sts	0x0149, r1
    2614:	10 92 4a 01 	sts	0x014A, r1
	Sms.Pid.Integral = 0;
    2618:	10 92 4b 01 	sts	0x014B, r1
    261c:	10 92 4c 01 	sts	0x014C, r1
    2620:	10 92 4d 01 	sts	0x014D, r1
    2624:	10 92 4e 01 	sts	0x014E, r1
	Sms.Control.State = ZO_SMS_CONTROL_POSITION_CONTROL;
    2628:	81 e0       	ldi	r24, 0x01	; 1
    262a:	80 93 03 01 	sts	0x0103, r24
	Sms.Pid.SetPoint = 0;
    262e:	10 92 53 01 	sts	0x0153, r1
    2632:	10 92 54 01 	sts	0x0154, r1
    2636:	10 92 55 01 	sts	0x0155, r1
    263a:	10 92 56 01 	sts	0x0156, r1
	zoMotorSetState(TRUE);
    263e:	8f ef       	ldi	r24, 0xFF	; 255
    2640:	0e 94 7e 05 	call	0xafc	; 0xafc <zoMotorSetState>
	exitCritical();
    2644:	0f 90       	pop	r0
    2646:	0f be       	out	0x3f, r0	; 63
}
    2648:	08 95       	ret

0000264a <zoCommandResetPosition>:
	
	eeprom_write_dword((u32*)ZO_EEPROM_ADDRESS_BAUD_UART, baud);
}
/*18*/	void zoCommandResetPosition(ZO_PROTOCOL_PACKET *packet)
{
	zoEncoderReset();
    264a:	0e 94 f9 03 	call	0x7f2	; 0x7f2 <zoEncoderReset>
}
    264e:	08 95       	ret

00002650 <zoCommandSetBaudUart>:
}
/*17*/  void zoCommandSetBaudUart(ZO_PROTOCOL_PACKET *packet)
{
	u32 baud;

	baud = strToS32(packet->data);
    2650:	fc 01       	movw	r30, r24
    2652:	44 81       	ldd	r20, Z+4	; 0x04
    2654:	55 81       	ldd	r21, Z+5	; 0x05
    2656:	66 81       	ldd	r22, Z+6	; 0x06
    2658:	77 81       	ldd	r23, Z+7	; 0x07

	if( ( baud > 115200 ) || (baud == 0) )
    265a:	db 01       	movw	r26, r22
    265c:	ca 01       	movw	r24, r20
    265e:	01 97       	sbiw	r24, 0x01	; 1
    2660:	a1 09       	sbc	r26, r1
    2662:	b1 09       	sbc	r27, r1
    2664:	80 50       	subi	r24, 0x00	; 0
    2666:	92 4c       	sbci	r25, 0xC2	; 194
    2668:	a1 40       	sbci	r26, 0x01	; 1
    266a:	b0 40       	sbci	r27, 0x00	; 0
    266c:	28 f4       	brcc	.+10     	; 0x2678 <zoCommandSetBaudUart+0x28>
	{
		zoErrorPut(&zoCommandsError,ZO_COMMANDS_ERROR_INVALID_ARGUMENT);
		return;
	}
	
	eeprom_write_dword((u32*)ZO_EEPROM_ADDRESS_BAUD_UART, baud);
    266e:	80 ea       	ldi	r24, 0xA0	; 160
    2670:	90 e0       	ldi	r25, 0x00	; 0
    2672:	0e 94 c2 26 	call	0x4d84	; 0x4d84 <__eewr_dword_m328p>
    2676:	08 95       	ret

	baud = strToS32(packet->data);

	if( ( baud > 115200 ) || (baud == 0) )
	{
		zoErrorPut(&zoCommandsError,ZO_COMMANDS_ERROR_INVALID_ARGUMENT);
    2678:	86 eb       	ldi	r24, 0xB6	; 182
    267a:	91 e0       	ldi	r25, 0x01	; 1
    267c:	63 e0       	ldi	r22, 0x03	; 3
    267e:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <zoErrorPut>
    2682:	08 95       	ret

00002684 <zoCommandSetCurrentLimitDuration>:
	Sms.Settings.CurrentLimit = currLim;
	exitCritical();
}

/*06*/	void zoCommandSetCurrentLimitDuration(ZO_PROTOCOL_PACKET *packet)
{
    2684:	0f 93       	push	r16
    2686:	1f 93       	push	r17

inline u16 strToU16(u08* str)
{
	U16 *num;
	num = (U16*)str;
	return num->all;
    2688:	fc 01       	movw	r30, r24
    268a:	04 81       	ldd	r16, Z+4	; 0x04
    268c:	15 81       	ldd	r17, Z+5	; 0x05
	u16 currLimDurMiliSecs;

	currLimDurMiliSecs = strToU16(packet->data);
	eeprom_write_word((u16*)ZO_EEPROM_ADDRESS_CURRENT_LIMIT_DURATION, currLimDurMiliSecs);
    268e:	80 e5       	ldi	r24, 0x50	; 80
    2690:	90 e0       	ldi	r25, 0x00	; 0
    2692:	b8 01       	movw	r22, r16
    2694:	0e 94 ca 26 	call	0x4d94	; 0x4d94 <__eewr_word_m328p>
	
	enterCritical();
    2698:	0f b6       	in	r0, 0x3f	; 63
    269a:	0f 92       	push	r0
    269c:	f8 94       	cli
	Sms.Settings.CurrentLimit = currLimDurMiliSecs;
    269e:	10 93 0b 01 	sts	0x010B, r17
    26a2:	00 93 0a 01 	sts	0x010A, r16
	exitCritical();
    26a6:	0f 90       	pop	r0
    26a8:	0f be       	out	0x3f, r0	; 63
}
    26aa:	1f 91       	pop	r17
    26ac:	0f 91       	pop	r16
    26ae:	08 95       	ret

000026b0 <zoCommandSetCurrentLimit>:
	Sms.Profile.DesiredVelocity = pVel;
	exitCritical();
}

/*05*/	void zoCommandSetCurrentLimit(ZO_PROTOCOL_PACKET *packet)
{
    26b0:	cf 93       	push	r28
    26b2:	df 93       	push	r29
    26b4:	fc 01       	movw	r30, r24
    26b6:	c4 81       	ldd	r28, Z+4	; 0x04
    26b8:	d5 81       	ldd	r29, Z+5	; 0x05
	u16 currLim;

	currLim = strToU16(packet->data);

	//Pointless to allow a current limit of zero
	if(currLim == 0)
    26ba:	20 97       	sbiw	r28, 0x00	; 0
    26bc:	89 f0       	breq	.+34     	; 0x26e0 <zoCommandSetCurrentLimit+0x30>
	{
		zoErrorPut(&zoCommandsError,ZO_COMMANDS_ERROR_INVALID_ARGUMENT);
		return;
	}

	eeprom_write_word((u16*)ZO_EEPROM_ADDRESS_CURRENT_LIMIT, currLim);
    26be:	80 e4       	ldi	r24, 0x40	; 64
    26c0:	90 e0       	ldi	r25, 0x00	; 0
    26c2:	be 01       	movw	r22, r28
    26c4:	0e 94 ca 26 	call	0x4d94	; 0x4d94 <__eewr_word_m328p>
	
	enterCritical();
    26c8:	0f b6       	in	r0, 0x3f	; 63
    26ca:	0f 92       	push	r0
    26cc:	f8 94       	cli
	Sms.Settings.CurrentLimit = currLim;
    26ce:	d0 93 0b 01 	sts	0x010B, r29
    26d2:	c0 93 0a 01 	sts	0x010A, r28
	exitCritical();
    26d6:	0f 90       	pop	r0
    26d8:	0f be       	out	0x3f, r0	; 63
}
    26da:	df 91       	pop	r29
    26dc:	cf 91       	pop	r28
    26de:	08 95       	ret
	currLim = strToU16(packet->data);

	//Pointless to allow a current limit of zero
	if(currLim == 0)
	{
		zoErrorPut(&zoCommandsError,ZO_COMMANDS_ERROR_INVALID_ARGUMENT);
    26e0:	86 eb       	ldi	r24, 0xB6	; 182
    26e2:	91 e0       	ldi	r25, 0x01	; 1
    26e4:	63 e0       	ldi	r22, 0x03	; 3
    26e6:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <zoErrorPut>
	eeprom_write_word((u16*)ZO_EEPROM_ADDRESS_CURRENT_LIMIT, currLim);
	
	enterCritical();
	Sms.Settings.CurrentLimit = currLim;
	exitCritical();
}
    26ea:	df 91       	pop	r29
    26ec:	cf 91       	pop	r28
    26ee:	08 95       	ret

000026f0 <zoCommandSetProfileVelocity>:
	Sms.Profile.DesiredAcceleration = pAccel;
	exitCritical();
}

/*04*/	void zoCommandSetProfileVelocity(ZO_PROTOCOL_PACKET *packet)
{
    26f0:	cf 93       	push	r28
    26f2:	df 93       	push	r29
    26f4:	fc 01       	movw	r30, r24
    26f6:	c4 81       	ldd	r28, Z+4	; 0x04
    26f8:	d5 81       	ldd	r29, Z+5	; 0x05
	u16 pVel;

	pVel = strToU16(packet->data);

	//Pointless to allow a profile velocity of zero
	if(pVel == 0)
    26fa:	20 97       	sbiw	r28, 0x00	; 0
    26fc:	89 f0       	breq	.+34     	; 0x2720 <zoCommandSetProfileVelocity+0x30>
	{
		zoErrorPut(&zoCommandsError,ZO_COMMANDS_ERROR_INVALID_ARGUMENT);
		return;
	}

	eeprom_write_word((u16*)ZO_EEPROM_ADDRESS_PROFILE_VELOCITY, pVel);
    26fe:	80 e7       	ldi	r24, 0x70	; 112
    2700:	90 e0       	ldi	r25, 0x00	; 0
    2702:	be 01       	movw	r22, r28
    2704:	0e 94 ca 26 	call	0x4d94	; 0x4d94 <__eewr_word_m328p>
	
	enterCritical();
    2708:	0f b6       	in	r0, 0x3f	; 63
    270a:	0f 92       	push	r0
    270c:	f8 94       	cli
	Sms.Profile.DesiredVelocity = pVel;
    270e:	d0 93 3b 01 	sts	0x013B, r29
    2712:	c0 93 3a 01 	sts	0x013A, r28
	exitCritical();
    2716:	0f 90       	pop	r0
    2718:	0f be       	out	0x3f, r0	; 63
}
    271a:	df 91       	pop	r29
    271c:	cf 91       	pop	r28
    271e:	08 95       	ret
	pVel = strToU16(packet->data);

	//Pointless to allow a profile velocity of zero
	if(pVel == 0)
	{
		zoErrorPut(&zoCommandsError,ZO_COMMANDS_ERROR_INVALID_ARGUMENT);
    2720:	86 eb       	ldi	r24, 0xB6	; 182
    2722:	91 e0       	ldi	r25, 0x01	; 1
    2724:	63 e0       	ldi	r22, 0x03	; 3
    2726:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <zoErrorPut>
	eeprom_write_word((u16*)ZO_EEPROM_ADDRESS_PROFILE_VELOCITY, pVel);
	
	enterCritical();
	Sms.Profile.DesiredVelocity = pVel;
	exitCritical();
}
    272a:	df 91       	pop	r29
    272c:	cf 91       	pop	r28
    272e:	08 95       	ret

00002730 <zoCommandSetProfileAcceleration>:
	Sms.Pid.GainD = gainD;
	exitCritical();
}

/*03*/	void zoCommandSetProfileAcceleration(ZO_PROTOCOL_PACKET *packet)
{
    2730:	cf 93       	push	r28
    2732:	df 93       	push	r29
    2734:	fc 01       	movw	r30, r24
    2736:	c4 81       	ldd	r28, Z+4	; 0x04
    2738:	d5 81       	ldd	r29, Z+5	; 0x05
	u16 pAccel;

	pAccel = strToU16(packet->data);

	//Pointless to allow a profile acceleration of 0.
	if(pAccel == 0)
    273a:	20 97       	sbiw	r28, 0x00	; 0
    273c:	89 f0       	breq	.+34     	; 0x2760 <zoCommandSetProfileAcceleration+0x30>
	{
		zoErrorPut(&zoCommandsError,ZO_COMMANDS_ERROR_INVALID_ARGUMENT);
		return;
	}

	eeprom_write_word((u16*)ZO_EEPROM_ADDRESS_PROFILE_ACCELERATION, pAccel);
    273e:	80 e6       	ldi	r24, 0x60	; 96
    2740:	90 e0       	ldi	r25, 0x00	; 0
    2742:	be 01       	movw	r22, r28
    2744:	0e 94 ca 26 	call	0x4d94	; 0x4d94 <__eewr_word_m328p>
	
	enterCritical();
    2748:	0f b6       	in	r0, 0x3f	; 63
    274a:	0f 92       	push	r0
    274c:	f8 94       	cli
	Sms.Profile.DesiredAcceleration = pAccel;
    274e:	d0 93 39 01 	sts	0x0139, r29
    2752:	c0 93 38 01 	sts	0x0138, r28
	exitCritical();
    2756:	0f 90       	pop	r0
    2758:	0f be       	out	0x3f, r0	; 63
}
    275a:	df 91       	pop	r29
    275c:	cf 91       	pop	r28
    275e:	08 95       	ret
	pAccel = strToU16(packet->data);

	//Pointless to allow a profile acceleration of 0.
	if(pAccel == 0)
	{
		zoErrorPut(&zoCommandsError,ZO_COMMANDS_ERROR_INVALID_ARGUMENT);
    2760:	86 eb       	ldi	r24, 0xB6	; 182
    2762:	91 e0       	ldi	r25, 0x01	; 1
    2764:	63 e0       	ldi	r22, 0x03	; 3
    2766:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <zoErrorPut>
	eeprom_write_word((u16*)ZO_EEPROM_ADDRESS_PROFILE_ACCELERATION, pAccel);
	
	enterCritical();
	Sms.Profile.DesiredAcceleration = pAccel;
	exitCritical();
}
    276a:	df 91       	pop	r29
    276c:	cf 91       	pop	r28
    276e:	08 95       	ret

00002770 <zoCommandSetGainD>:
	Sms.Pid.GainI = gainI;
	exitCritical();
}

/*02*/	void zoCommandSetGainD(ZO_PROTOCOL_PACKET *packet)
{
    2770:	0f 93       	push	r16
    2772:	1f 93       	push	r17
    2774:	fc 01       	movw	r30, r24
    2776:	04 81       	ldd	r16, Z+4	; 0x04
    2778:	15 81       	ldd	r17, Z+5	; 0x05
	u16 gainD;

	gainD = strToU16(packet->data);
	eeprom_write_word((u16*)ZO_EEPROM_ADDRESS_GAIN_D, gainD);
    277a:	80 e3       	ldi	r24, 0x30	; 48
    277c:	90 e0       	ldi	r25, 0x00	; 0
    277e:	b8 01       	movw	r22, r16
    2780:	0e 94 ca 26 	call	0x4d94	; 0x4d94 <__eewr_word_m328p>
	
	enterCritical();
    2784:	0f b6       	in	r0, 0x3f	; 63
    2786:	0f 92       	push	r0
    2788:	f8 94       	cli
	Sms.Pid.GainD = gainD;
    278a:	10 93 42 01 	sts	0x0142, r17
    278e:	00 93 41 01 	sts	0x0141, r16
	exitCritical();
    2792:	0f 90       	pop	r0
    2794:	0f be       	out	0x3f, r0	; 63
}
    2796:	1f 91       	pop	r17
    2798:	0f 91       	pop	r16
    279a:	08 95       	ret

0000279c <zoCommandSetGainI>:
	Sms.Pid.GainP = gainP;
	exitCritical();	
}

/*01*/	void zoCommandSetGainI(ZO_PROTOCOL_PACKET *packet)
{
    279c:	0f 93       	push	r16
    279e:	1f 93       	push	r17
    27a0:	fc 01       	movw	r30, r24
    27a2:	04 81       	ldd	r16, Z+4	; 0x04
    27a4:	15 81       	ldd	r17, Z+5	; 0x05
	u16 gainI;

	gainI = strToU16(packet->data);
	eeprom_write_word((u16*)ZO_EEPROM_ADDRESS_GAIN_I, gainI);
    27a6:	80 e2       	ldi	r24, 0x20	; 32
    27a8:	90 e0       	ldi	r25, 0x00	; 0
    27aa:	b8 01       	movw	r22, r16
    27ac:	0e 94 ca 26 	call	0x4d94	; 0x4d94 <__eewr_word_m328p>
	
	enterCritical();
    27b0:	0f b6       	in	r0, 0x3f	; 63
    27b2:	0f 92       	push	r0
    27b4:	f8 94       	cli
	Sms.Pid.GainI = gainI;
    27b6:	10 93 40 01 	sts	0x0140, r17
    27ba:	00 93 3f 01 	sts	0x013F, r16
	exitCritical();
    27be:	0f 90       	pop	r0
    27c0:	0f be       	out	0x3f, r0	; 63
}
    27c2:	1f 91       	pop	r17
    27c4:	0f 91       	pop	r16
    27c6:	08 95       	ret

000027c8 <zoCommandSetGainP>:
	}
}

//command function definitions____________________________________________________________
/*00*/	void zoCommandSetGainP(ZO_PROTOCOL_PACKET *packet)
{
    27c8:	0f 93       	push	r16
    27ca:	1f 93       	push	r17
    27cc:	fc 01       	movw	r30, r24
    27ce:	04 81       	ldd	r16, Z+4	; 0x04
    27d0:	15 81       	ldd	r17, Z+5	; 0x05
	u16 gainP;

	gainP = strToU16(packet->data);
	eeprom_write_word((u16*)ZO_EEPROM_ADDRESS_GAIN_P, gainP);
    27d2:	80 e1       	ldi	r24, 0x10	; 16
    27d4:	90 e0       	ldi	r25, 0x00	; 0
    27d6:	b8 01       	movw	r22, r16
    27d8:	0e 94 ca 26 	call	0x4d94	; 0x4d94 <__eewr_word_m328p>
	
	enterCritical();
    27dc:	0f b6       	in	r0, 0x3f	; 63
    27de:	0f 92       	push	r0
    27e0:	f8 94       	cli
	Sms.Pid.GainP = gainP;
    27e2:	10 93 3e 01 	sts	0x013E, r17
    27e6:	00 93 3d 01 	sts	0x013D, r16
	exitCritical();	
    27ea:	0f 90       	pop	r0
    27ec:	0f be       	out	0x3f, r0	; 63
}
    27ee:	1f 91       	pop	r17
    27f0:	0f 91       	pop	r16
    27f2:	08 95       	ret

000027f4 <zoCommandsServiceCommand>:
/*CB*/	zoCommandBrc[ZO_COMMAND_GLOBAL_STOP-ZO_PROTOCOL_BRC_COMMANDS_START]
		= zoCommandStop;
}

bool zoCommandsServiceCommand(ZO_PROTOCOL_PACKET *packet)
{
    27f4:	cf 93       	push	r28
    27f6:	df 93       	push	r29
    27f8:	ec 01       	movw	r28, r24
	if( packet->commandID >= ZO_COMMANDS_BRC_COMMANDS_END )
    27fa:	ea 81       	ldd	r30, Y+2	; 0x02
    27fc:	ec 3c       	cpi	r30, 0xCC	; 204
    27fe:	98 f5       	brcc	.+102    	; 0x2866 <zoCommandsServiceCommand+0x72>
	{
		zoErrorPut(&zoCommandsError,ZO_COMMANDS_ERROR_INVALID_COMMAND_ID);
		return FALSE;
	}
	
	if( packet->commandID >= ZO_PROTOCOL_BRC_COMMANDS_START )
    2800:	e8 3c       	cpi	r30, 0xC8	; 200
    2802:	e8 f0       	brcs	.+58     	; 0x283e <zoCommandsServiceCommand+0x4a>
	{
		//all broadcast commands of the supermodified have bytecount = zero
		if(packet->byteCount != 0)
    2804:	8b 81       	ldd	r24, Y+3	; 0x03
    2806:	88 23       	and	r24, r24
    2808:	09 f0       	breq	.+2      	; 0x280c <zoCommandsServiceCommand+0x18>
    280a:	70 c0       	rjmp	.+224    	; 0x28ec <zoCommandsServiceCommand+0xf8>
			zoErrorPut(&zoCommandsError,ZO_COMMANDS_ERROR_INVALID_BYTECOUNT);

		//check if a command that needs the motor initialized is being called and the 
		//motor is not initialized
		if( !zoMotorGetState() && ( (packet->commandID == ZO_COMMAND_DO_MOVE) || 
    280c:	0e 94 94 05 	call	0xb28	; 0xb28 <zoMotorGetState>
    2810:	88 23       	and	r24, r24
    2812:	91 f1       	breq	.+100    	; 0x2878 <zoCommandsServiceCommand+0x84>
			(packet->commandID == ZO_COMMAND_GLOBAL_HALT) ) )
		{
			zoErrorPut(&zoCommandsError,ZO_COMMANDS_ERROR_INVALID_COMMAND);
    2814:	ea 81       	ldd	r30, Y+2	; 0x02
		}

		//above are warnings so try to execute the command
		zoCommandBrc[packet->commandID - ZO_PROTOCOL_BRC_COMMANDS_START](packet);
    2816:	f0 e0       	ldi	r31, 0x00	; 0
    2818:	ee 0f       	add	r30, r30
    281a:	ff 1f       	adc	r31, r31
    281c:	e6 55       	subi	r30, 0x56	; 86
    281e:	ff 4f       	sbci	r31, 0xFF	; 255
    2820:	01 90       	ld	r0, Z+
    2822:	f0 81       	ld	r31, Z
    2824:	e0 2d       	mov	r30, r0
    2826:	ce 01       	movw	r24, r28
    2828:	09 95       	icall

		if(!zoErrorIsEmpty(&zoCommandsError))
    282a:	86 eb       	ldi	r24, 0xB6	; 182
    282c:	91 e0       	ldi	r25, 0x01	; 1
    282e:	0e 94 ad 00 	call	0x15a	; 0x15a <zoErrorIsEmpty>
    2832:	88 23       	and	r24, r24
    2834:	09 f0       	breq	.+2      	; 0x2838 <zoCommandsServiceCommand+0x44>
    2836:	53 c0       	rjmp	.+166    	; 0x28de <zoCommandsServiceCommand+0xea>
		}		
		
		zoCommandSet[packet->commandID](packet);
		return (zoErrorIsEmpty(&zoCommandsError));
	}
}
    2838:	df 91       	pop	r29
    283a:	cf 91       	pop	r28
    283c:	08 95       	ret
			return FALSE;

		return (zoErrorIsEmpty(&zoCommandsError));
	}
	
	if( packet->commandID >= ZO_COMMANDS_GET_COMMANDS_END)
    283e:	e4 37       	cpi	r30, 0x74	; 116
    2840:	90 f4       	brcc	.+36     	; 0x2866 <zoCommandsServiceCommand+0x72>
	{
		zoErrorPut(&zoCommandsError,ZO_COMMANDS_ERROR_INVALID_COMMAND_ID);
		return FALSE;
	}

	if( packet->commandID >= ZO_PROTOCOL_GET_COMMANDS_START )
    2842:	e4 36       	cpi	r30, 0x64	; 100
    2844:	20 f5       	brcc	.+72     	; 0x288e <zoCommandsServiceCommand+0x9a>
		}

		return (zoErrorIsEmpty(&zoCommandsError));
	}

	if( packet->commandID >= ZO_COMMANDS_SET_COMMANDS_END)
    2846:	ed 31       	cpi	r30, 0x1D	; 29
    2848:	70 f4       	brcc	.+28     	; 0x2866 <zoCommandsServiceCommand+0x72>
	if( packet->commandID >= ZO_PROTOCOL_SET_COMMANDS_START )
	{
		//check received bytecount. In this case it is a serious error because if motor 
		//receives wrong data we might damage something. So if a wrong bytecount is 
		//received do not execute the command.
		if(packet->byteCount != zoCommandsSetByteCount[packet->commandID])
    284a:	f0 e0       	ldi	r31, 0x00	; 0
    284c:	e3 50       	subi	r30, 0x03	; 3
    284e:	fe 4f       	sbci	r31, 0xFE	; 254
    2850:	9b 81       	ldd	r25, Y+3	; 0x03
    2852:	80 81       	ld	r24, Z
    2854:	98 17       	cp	r25, r24
    2856:	71 f1       	breq	.+92     	; 0x28b4 <zoCommandsServiceCommand+0xc0>
		{
			zoErrorPut(&zoCommandsError,ZO_COMMANDS_ERROR_INVALID_SET_BYTECOUNT);
    2858:	86 eb       	ldi	r24, 0xB6	; 182
    285a:	91 e0       	ldi	r25, 0x01	; 1
    285c:	62 e0       	ldi	r22, 0x02	; 2
    285e:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <zoErrorPut>
    2862:	80 e0       	ldi	r24, 0x00	; 0
    2864:	e9 cf       	rjmp	.-46     	; 0x2838 <zoCommandsServiceCommand+0x44>
		return (zoErrorIsEmpty(&zoCommandsError));
	}

	if( packet->commandID >= ZO_COMMANDS_SET_COMMANDS_END)
	{
		zoErrorPut(&zoCommandsError,ZO_COMMANDS_ERROR_INVALID_COMMAND_ID);
    2866:	86 eb       	ldi	r24, 0xB6	; 182
    2868:	91 e0       	ldi	r25, 0x01	; 1
    286a:	61 e0       	ldi	r22, 0x01	; 1
    286c:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <zoErrorPut>
    2870:	80 e0       	ldi	r24, 0x00	; 0
		}		
		
		zoCommandSet[packet->commandID](packet);
		return (zoErrorIsEmpty(&zoCommandsError));
	}
}
    2872:	df 91       	pop	r29
    2874:	cf 91       	pop	r28
    2876:	08 95       	ret
		if(packet->byteCount != 0)
			zoErrorPut(&zoCommandsError,ZO_COMMANDS_ERROR_INVALID_BYTECOUNT);

		//check if a command that needs the motor initialized is being called and the 
		//motor is not initialized
		if( !zoMotorGetState() && ( (packet->commandID == ZO_COMMAND_DO_MOVE) || 
    2878:	ea 81       	ldd	r30, Y+2	; 0x02
    287a:	e8 3c       	cpi	r30, 0xC8	; 200
    287c:	11 f0       	breq	.+4      	; 0x2882 <zoCommandsServiceCommand+0x8e>
    287e:	ea 3c       	cpi	r30, 0xCA	; 202
    2880:	51 f6       	brne	.-108    	; 0x2816 <zoCommandsServiceCommand+0x22>
			(packet->commandID == ZO_COMMAND_GLOBAL_HALT) ) )
		{
			zoErrorPut(&zoCommandsError,ZO_COMMANDS_ERROR_INVALID_COMMAND);
    2882:	86 eb       	ldi	r24, 0xB6	; 182
    2884:	91 e0       	ldi	r25, 0x01	; 1
    2886:	64 e0       	ldi	r22, 0x04	; 4
    2888:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <zoErrorPut>
    288c:	c3 cf       	rjmp	.-122    	; 0x2814 <zoCommandsServiceCommand+0x20>
	}

	if( packet->commandID >= ZO_PROTOCOL_GET_COMMANDS_START )
	{
		//execute the command even with wrong bytecount. Then issue the warning
		zoCommandGet[packet->commandID - ZO_PROTOCOL_GET_COMMANDS_START](packet);
    288e:	f0 e0       	ldi	r31, 0x00	; 0
    2890:	ee 0f       	add	r30, r30
    2892:	ff 1f       	adc	r31, r31
    2894:	ee 5a       	subi	r30, 0xAE	; 174
    2896:	fe 4f       	sbci	r31, 0xFE	; 254
    2898:	01 90       	ld	r0, Z+
    289a:	f0 81       	ld	r31, Z
    289c:	e0 2d       	mov	r30, r0
    289e:	09 95       	icall

		//all get commands should have a bytecount of zero
		if(packet->byteCount != 0)
    28a0:	8b 81       	ldd	r24, Y+3	; 0x03
    28a2:	88 23       	and	r24, r24
    28a4:	e1 f0       	breq	.+56     	; 0x28de <zoCommandsServiceCommand+0xea>
		{
			zoErrorPut(&zoCommandsError,ZO_COMMANDS_ERROR_INVALID_BYTECOUNT);
    28a6:	86 eb       	ldi	r24, 0xB6	; 182
    28a8:	91 e0       	ldi	r25, 0x01	; 1
    28aa:	65 e0       	ldi	r22, 0x05	; 5
    28ac:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <zoErrorPut>
    28b0:	80 e0       	ldi	r24, 0x00	; 0
    28b2:	c2 cf       	rjmp	.-124    	; 0x2838 <zoCommandsServiceCommand+0x44>
			return FALSE;
		}
		
		//check if a command that needs the motor initialized is being called and the 
		//motor is not initialized
		if( !zoMotorGetState() && ( ((packet->commandID >= ZO_COMMAND_VELOCITY_MOVE) && 
    28b4:	0e 94 94 05 	call	0xb28	; 0xb28 <zoMotorGetState>
    28b8:	88 23       	and	r24, r24
    28ba:	29 f5       	brne	.+74     	; 0x2906 <zoCommandsServiceCommand+0x112>
    28bc:	ea 81       	ldd	r30, Y+2	; 0x02
    28be:	8e 2f       	mov	r24, r30
    28c0:	87 50       	subi	r24, 0x07	; 7
    28c2:	86 30       	cpi	r24, 0x06	; 6
    28c4:	c8 f0       	brcs	.+50     	; 0x28f8 <zoCommandsServiceCommand+0x104>
    28c6:	ea 31       	cpi	r30, 0x1A	; 26
    28c8:	b9 f0       	breq	.+46     	; 0x28f8 <zoCommandsServiceCommand+0x104>
		{
			zoErrorPut(&zoCommandsError,ZO_COMMANDS_ERROR_INVALID_COMMAND);
			return FALSE;
		}		
		
		zoCommandSet[packet->commandID](packet);
    28ca:	f0 e0       	ldi	r31, 0x00	; 0
    28cc:	ee 0f       	add	r30, r30
    28ce:	ff 1f       	adc	r31, r31
    28d0:	ed 53       	subi	r30, 0x3D	; 61
    28d2:	fe 4f       	sbci	r31, 0xFE	; 254
    28d4:	01 90       	ld	r0, Z+
    28d6:	f0 81       	ld	r31, Z
    28d8:	e0 2d       	mov	r30, r0
    28da:	ce 01       	movw	r24, r28
    28dc:	09 95       	icall
		return (zoErrorIsEmpty(&zoCommandsError));
    28de:	86 eb       	ldi	r24, 0xB6	; 182
    28e0:	91 e0       	ldi	r25, 0x01	; 1
    28e2:	0e 94 ad 00 	call	0x15a	; 0x15a <zoErrorIsEmpty>
	}
}
    28e6:	df 91       	pop	r29
    28e8:	cf 91       	pop	r28
    28ea:	08 95       	ret
	
	if( packet->commandID >= ZO_PROTOCOL_BRC_COMMANDS_START )
	{
		//all broadcast commands of the supermodified have bytecount = zero
		if(packet->byteCount != 0)
			zoErrorPut(&zoCommandsError,ZO_COMMANDS_ERROR_INVALID_BYTECOUNT);
    28ec:	86 eb       	ldi	r24, 0xB6	; 182
    28ee:	91 e0       	ldi	r25, 0x01	; 1
    28f0:	65 e0       	ldi	r22, 0x05	; 5
    28f2:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <zoErrorPut>
    28f6:	8a cf       	rjmp	.-236    	; 0x280c <zoCommandsServiceCommand+0x18>
		//motor is not initialized
		if( !zoMotorGetState() && ( ((packet->commandID >= ZO_COMMAND_VELOCITY_MOVE) && 
			(packet->commandID <= ZO_COMMAND_PROFILED_RELATIVE_POSITION_MOVE)) || 
			(packet->commandID == ZO_COMMAND_HALT) ) )
		{
			zoErrorPut(&zoCommandsError,ZO_COMMANDS_ERROR_INVALID_COMMAND);
    28f8:	86 eb       	ldi	r24, 0xB6	; 182
    28fa:	91 e0       	ldi	r25, 0x01	; 1
    28fc:	64 e0       	ldi	r22, 0x04	; 4
    28fe:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <zoErrorPut>
    2902:	80 e0       	ldi	r24, 0x00	; 0
    2904:	99 cf       	rjmp	.-206    	; 0x2838 <zoCommandsServiceCommand+0x44>
			return FALSE;
    2906:	ea 81       	ldd	r30, Y+2	; 0x02
    2908:	e0 cf       	rjmp	.-64     	; 0x28ca <zoCommandsServiceCommand+0xd6>

0000290a <zoCommandsInit>:


//utility functions_______________________________________________________________________
void zoCommandsInit(void)
{
		zoErrorInit(&zoCommandsError);
    290a:	86 eb       	ldi	r24, 0xB6	; 182
    290c:	91 e0       	ldi	r25, 0x01	; 1
    290e:	0e 94 53 00 	call	0xa6	; 0xa6 <zoErrorInit>
	
/*00*/	zoCommandSet[ZO_COMMAND_SET_GAIN_P] = zoCommandSetGainP;
    2912:	84 ee       	ldi	r24, 0xE4	; 228
    2914:	93 e1       	ldi	r25, 0x13	; 19
    2916:	90 93 c4 01 	sts	0x01C4, r25
    291a:	80 93 c3 01 	sts	0x01C3, r24
		zoCommandsSetByteCount[ZO_COMMAND_SET_GAIN_P] = 2;
    291e:	22 e0       	ldi	r18, 0x02	; 2
    2920:	20 93 fd 01 	sts	0x01FD, r18
/*01*/	zoCommandSet[ZO_COMMAND_SET_GAIN_I] = zoCommandSetGainI;
    2924:	8e ec       	ldi	r24, 0xCE	; 206
    2926:	93 e1       	ldi	r25, 0x13	; 19
    2928:	90 93 c6 01 	sts	0x01C6, r25
    292c:	80 93 c5 01 	sts	0x01C5, r24
		zoCommandsSetByteCount[ZO_COMMAND_SET_GAIN_I] = 2;
    2930:	20 93 fe 01 	sts	0x01FE, r18
/*02*/	zoCommandSet[ZO_COMMAND_SET_GAIN_D] = zoCommandSetGainD;
    2934:	88 eb       	ldi	r24, 0xB8	; 184
    2936:	93 e1       	ldi	r25, 0x13	; 19
    2938:	90 93 c8 01 	sts	0x01C8, r25
    293c:	80 93 c7 01 	sts	0x01C7, r24
		zoCommandsSetByteCount[ZO_COMMAND_SET_GAIN_D] = 2;		
    2940:	20 93 ff 01 	sts	0x01FF, r18
/*03*/	zoCommandSet[ZO_COMMAND_SET_PROFILE_ACCELERATION] =
    2944:	88 e9       	ldi	r24, 0x98	; 152
    2946:	93 e1       	ldi	r25, 0x13	; 19
    2948:	90 93 ca 01 	sts	0x01CA, r25
    294c:	80 93 c9 01 	sts	0x01C9, r24
		zoCommandSetProfileAcceleration;
		zoCommandsSetByteCount[ZO_COMMAND_SET_PROFILE_ACCELERATION] = 2;		
    2950:	20 93 00 02 	sts	0x0200, r18
/*04*/	zoCommandSet[ZO_COMMAND_SET_PROFILE_VELOCITY] =	zoCommandSetProfileVelocity;
    2954:	88 e7       	ldi	r24, 0x78	; 120
    2956:	93 e1       	ldi	r25, 0x13	; 19
    2958:	90 93 cc 01 	sts	0x01CC, r25
    295c:	80 93 cb 01 	sts	0x01CB, r24
		zoCommandsSetByteCount[ZO_COMMAND_SET_PROFILE_VELOCITY] = 2;		
    2960:	20 93 01 02 	sts	0x0201, r18
/*05*/	zoCommandSet[ZO_COMMAND_SET_CURRENT_LIMIT] = zoCommandSetCurrentLimit;
    2964:	88 e5       	ldi	r24, 0x58	; 88
    2966:	93 e1       	ldi	r25, 0x13	; 19
    2968:	90 93 ce 01 	sts	0x01CE, r25
    296c:	80 93 cd 01 	sts	0x01CD, r24
		zoCommandsSetByteCount[ZO_COMMAND_SET_CURRENT_LIMIT] = 2;		
    2970:	20 93 02 02 	sts	0x0202, r18
/*06*/	zoCommandSet[ZO_COMMAND_SET_CURRENT_LIMIT_DURATION] =
    2974:	82 e4       	ldi	r24, 0x42	; 66
    2976:	93 e1       	ldi	r25, 0x13	; 19
    2978:	90 93 d0 01 	sts	0x01D0, r25
    297c:	80 93 cf 01 	sts	0x01CF, r24
		zoCommandSetCurrentLimitDuration;
		zoCommandsSetByteCount[ZO_COMMAND_SET_CURRENT_LIMIT_DURATION] = 2;				
    2980:	20 93 03 02 	sts	0x0203, r18
/*07*/	zoCommandSet[ZO_COMMAND_VELOCITY_MOVE] = zoCommandVelocityMove;
    2984:	87 e3       	ldi	r24, 0x37	; 55
    2986:	9e e0       	ldi	r25, 0x0E	; 14
    2988:	90 93 d2 01 	sts	0x01D2, r25
    298c:	80 93 d1 01 	sts	0x01D1, r24
		zoCommandsSetByteCount[ZO_COMMAND_VELOCITY_MOVE] = 2;						
    2990:	20 93 04 02 	sts	0x0204, r18
/*08*/	zoCommandSet[ZO_COMMAND_ABSOLUTE_POSITION_MOVE] = zoCommandAbsolutePositionMove;
    2994:	80 e6       	ldi	r24, 0x60	; 96
    2996:	9b e0       	ldi	r25, 0x0B	; 11
    2998:	90 93 d4 01 	sts	0x01D4, r25
    299c:	80 93 d3 01 	sts	0x01D3, r24
		zoCommandsSetByteCount[ZO_COMMAND_ABSOLUTE_POSITION_MOVE] = 4;						
    29a0:	34 e0       	ldi	r19, 0x04	; 4
    29a2:	30 93 05 02 	sts	0x0205, r19
/*09*/	zoCommandSet[ZO_COMMAND_RELATIVE_POSITION_MOVE] = zoCommandRelativePositionMove;
    29a6:	86 e7       	ldi	r24, 0x76	; 118
    29a8:	9b e0       	ldi	r25, 0x0B	; 11
    29aa:	90 93 d6 01 	sts	0x01D6, r25
    29ae:	80 93 d5 01 	sts	0x01D5, r24
		zoCommandsSetByteCount[ZO_COMMAND_RELATIVE_POSITION_MOVE] = 4;						
    29b2:	30 93 06 02 	sts	0x0206, r19
/*0A*/  zoCommandSet[ZO_COMMAND_PROFILED_VELOCITY_MOVE] = zoCommandProfiledVelocityMove;
    29b6:	8e e0       	ldi	r24, 0x0E	; 14
    29b8:	9e e0       	ldi	r25, 0x0E	; 14
    29ba:	90 93 d8 01 	sts	0x01D8, r25
    29be:	80 93 d7 01 	sts	0x01D7, r24
		zoCommandsSetByteCount[ZO_COMMAND_PROFILED_VELOCITY_MOVE] = 2;
    29c2:	20 93 07 02 	sts	0x0207, r18
/*0B*/  zoCommandSet[ZO_COMMAND_PROFILED_ABSOLUTE_POSITION_MOVE] =
    29c6:	83 e2       	ldi	r24, 0x23	; 35
    29c8:	92 e1       	ldi	r25, 0x12	; 18
    29ca:	90 93 da 01 	sts	0x01DA, r25
    29ce:	80 93 d9 01 	sts	0x01D9, r24
		zoCommandProfiledAbsolutePositionMove;
		zoCommandsSetByteCount[ZO_COMMAND_PROFILED_ABSOLUTE_POSITION_MOVE] = 4;
    29d2:	30 93 08 02 	sts	0x0208, r19
/*0C*/	zoCommandSet[ZO_COMMAND_PROFILED_RELATIVE_POSITION_MOVE] =
    29d6:	8b e0       	ldi	r24, 0x0B	; 11
    29d8:	92 e1       	ldi	r25, 0x12	; 18
    29da:	90 93 dc 01 	sts	0x01DC, r25
    29de:	80 93 db 01 	sts	0x01DB, r24
		zoCommandProfiledRelativePositionMove;
		zoCommandsSetByteCount[ZO_COMMAND_PROFILED_RELATIVE_POSITION_MOVE] = 4;
    29e2:	30 93 09 02 	sts	0x0209, r19
/*0D*/	zoCommandSet[ZO_COMMAND_SET_VELOCITY_SETPOINT] = zoCommandSetVelocitySetpoint;
    29e6:	88 e9       	ldi	r24, 0x98	; 152
    29e8:	9b e0       	ldi	r25, 0x0B	; 11
    29ea:	90 93 de 01 	sts	0x01DE, r25
    29ee:	80 93 dd 01 	sts	0x01DD, r24
		zoCommandsSetByteCount[ZO_COMMAND_SET_VELOCITY_SETPOINT] = 2;
    29f2:	20 93 0a 02 	sts	0x020A, r18
/*0E*/	zoCommandSet[ZO_COMMAND_SET_ABSOLUTE_POSITION_SETPOINT] =
    29f6:	80 eb       	ldi	r24, 0xB0	; 176
    29f8:	9b e0       	ldi	r25, 0x0B	; 11
    29fa:	90 93 e0 01 	sts	0x01E0, r25
    29fe:	80 93 df 01 	sts	0x01DF, r24
		zoCommandSetAbsolutePositionSetpoint;
		zoCommandsSetByteCount[ZO_COMMAND_SET_ABSOLUTE_POSITION_SETPOINT] = 4;
    2a02:	30 93 0b 02 	sts	0x020B, r19
/*0F*/	zoCommandSet[ZO_COMMAND_SET_RELATIVE_POSITION_SETPOINT] =
    2a06:	86 ec       	ldi	r24, 0xC6	; 198
    2a08:	9b e0       	ldi	r25, 0x0B	; 11
    2a0a:	90 93 e2 01 	sts	0x01E2, r25
    2a0e:	80 93 e1 01 	sts	0x01E1, r24
		zoCommandSetRelativePositionSetpoint;
		zoCommandsSetByteCount[ZO_COMMAND_SET_RELATIVE_POSITION_SETPOINT] = 4;
    2a12:	30 93 0c 02 	sts	0x020C, r19
/*10*/	zoCommandSet[ZO_COMMAND_SET_PROFILED_VELOCITY_SETPOINT] =
    2a16:	8c ed       	ldi	r24, 0xDC	; 220
    2a18:	9b e0       	ldi	r25, 0x0B	; 11
    2a1a:	90 93 e4 01 	sts	0x01E4, r25
    2a1e:	80 93 e3 01 	sts	0x01E3, r24
		zoCommandSetProfiledVelocitySetpoint;
		zoCommandsSetByteCount[ZO_COMMAND_SET_PROFILED_VELOCITY_SETPOINT] = 2;
    2a22:	20 93 0d 02 	sts	0x020D, r18
/*11*/	zoCommandSet[ZO_COMMAND_SET_PROFILED_ABSOLUTE_POSITION_SETPOINT] =
    2a26:	84 ef       	ldi	r24, 0xF4	; 244
    2a28:	9b e0       	ldi	r25, 0x0B	; 11
    2a2a:	90 93 e6 01 	sts	0x01E6, r25
    2a2e:	80 93 e5 01 	sts	0x01E5, r24
		zoCommandSetProfiledAbsolutePositionSetpoint;
		zoCommandsSetByteCount[ZO_COMMAND_SET_PROFILED_ABSOLUTE_POSITION_SETPOINT] = 4;
    2a32:	30 93 0e 02 	sts	0x020E, r19
/*12*/	zoCommandSet[ZO_COMMAND_SET_PROFILED_RELATIVE_POSITION_SETPOINT] =	
    2a36:	8a e0       	ldi	r24, 0x0A	; 10
    2a38:	9c e0       	ldi	r25, 0x0C	; 12
    2a3a:	90 93 e8 01 	sts	0x01E8, r25
    2a3e:	80 93 e7 01 	sts	0x01E7, r24
		zoCommandSetProfiledRelativePositionSetpoint;
		zoCommandsSetByteCount[ZO_COMMAND_SET_PROFILED_RELATIVE_POSITION_SETPOINT] = 4;
    2a42:	30 93 0f 02 	sts	0x020F, r19
/*13*/	zoCommandSet[ZO_COMMAND_CONFIGURE_DIGITAL_IO] =	zoCommandConfigureDigitalIO;
    2a46:	86 ec       	ldi	r24, 0xC6	; 198
    2a48:	92 e1       	ldi	r25, 0x12	; 18
    2a4a:	90 93 ea 01 	sts	0x01EA, r25
    2a4e:	80 93 e9 01 	sts	0x01E9, r24
		zoCommandsSetByteCount[ZO_COMMAND_CONFIGURE_DIGITAL_IO] = 1;
    2a52:	21 e0       	ldi	r18, 0x01	; 1
    2a54:	20 93 10 02 	sts	0x0210, r18
/*14*/	zoCommandSet[ZO_COMMAND_SET_DIGITAL_OUT] = zoCommandSetDigitalOut;
    2a58:	80 e2       	ldi	r24, 0x20	; 32
    2a5a:	9c e0       	ldi	r25, 0x0C	; 12
    2a5c:	90 93 ec 01 	sts	0x01EC, r25
    2a60:	80 93 eb 01 	sts	0x01EB, r24
		zoCommandsSetByteCount[ZO_COMMAND_SET_DIGITAL_OUT] = 1;
    2a64:	20 93 11 02 	sts	0x0211, r18
/*15*/	zoCommandSet[ZO_COMMAND_SET_NODE_ID] = zoCommandSetNodeID;
    2a68:	87 eb       	ldi	r24, 0xB7	; 183
    2a6a:	92 e1       	ldi	r25, 0x12	; 18
    2a6c:	90 93 ee 01 	sts	0x01EE, r25
    2a70:	80 93 ed 01 	sts	0x01ED, r24
		zoCommandsSetByteCount[ZO_COMMAND_SET_NODE_ID] = 1;
    2a74:	20 93 12 02 	sts	0x0212, r18
/*16*/  zoCommandSet[ZO_COMMAND_SET_LOCAL_ACCEPTANCE_MASK] = 
    2a78:	88 ea       	ldi	r24, 0xA8	; 168
    2a7a:	92 e1       	ldi	r25, 0x12	; 18
    2a7c:	90 93 f0 01 	sts	0x01F0, r25
    2a80:	80 93 ef 01 	sts	0x01EF, r24
		zoCommandSetLocalAcceptanceMask;
		zoCommandsSetByteCount[ZO_COMMAND_SET_LOCAL_ACCEPTANCE_MASK] = 1;
    2a84:	20 93 13 02 	sts	0x0213, r18
/*17*/  zoCommandSet[ZO_COMMAND_SET_BAUD_UART] = zoCommandSetBaudUart;
    2a88:	88 e2       	ldi	r24, 0x28	; 40
    2a8a:	93 e1       	ldi	r25, 0x13	; 19
    2a8c:	90 93 f2 01 	sts	0x01F2, r25
    2a90:	80 93 f1 01 	sts	0x01F1, r24
		zoCommandsSetByteCount[ZO_COMMAND_SET_BAUD_UART] = 4;
    2a94:	30 93 14 02 	sts	0x0214, r19
/*18*/	zoCommandSet[ZO_COMMAND_RESET_POSITION] = zoCommandResetPosition;
    2a98:	85 e2       	ldi	r24, 0x25	; 37
    2a9a:	93 e1       	ldi	r25, 0x13	; 19
    2a9c:	90 93 f4 01 	sts	0x01F4, r25
    2aa0:	80 93 f3 01 	sts	0x01F3, r24
		zoCommandsSetByteCount[ZO_COMMAND_RESET_POSITION] = 0;		
    2aa4:	10 92 15 02 	sts	0x0215, r1
/*19*/	zoCommandSet[ZO_COMMAND_START] = zoCommandStart;
    2aa8:	ed ef       	ldi	r30, 0xFD	; 253
    2aaa:	f2 e1       	ldi	r31, 0x12	; 18
    2aac:	f0 93 f6 01 	sts	0x01F6, r31
    2ab0:	e0 93 f5 01 	sts	0x01F5, r30
		zoCommandsSetByteCount[ZO_COMMAND_START] = 0;		
    2ab4:	10 92 16 02 	sts	0x0216, r1
/*1A*/	zoCommandSet[ZO_COMMAND_HALT] =	zoCommandHalt;
    2ab8:	64 e2       	ldi	r22, 0x24	; 36
    2aba:	7e e0       	ldi	r23, 0x0E	; 14
    2abc:	70 93 f8 01 	sts	0x01F8, r23
    2ac0:	60 93 f7 01 	sts	0x01F7, r22
		zoCommandsSetByteCount[ZO_COMMAND_HALT] = 0;
    2ac4:	10 92 17 02 	sts	0x0217, r1
/*1B*/	zoCommandSet[ZO_COMMAND_STOP] =	zoCommandStop;
    2ac8:	42 ef       	ldi	r20, 0xF2	; 242
    2aca:	52 e1       	ldi	r21, 0x12	; 18
    2acc:	50 93 fa 01 	sts	0x01FA, r21
    2ad0:	40 93 f9 01 	sts	0x01F9, r20
		zoCommandsSetByteCount[ZO_COMMAND_STOP] = 0;
    2ad4:	10 92 18 02 	sts	0x0218, r1
/*1C*/  zoCommandSet[ZO_COMMAND_SET_ERROR_REPORTING_LEVEL] =
    2ad8:	8b e8       	ldi	r24, 0x8B	; 139
    2ada:	92 e1       	ldi	r25, 0x12	; 18
    2adc:	90 93 fc 01 	sts	0x01FC, r25
    2ae0:	80 93 fb 01 	sts	0x01FB, r24
		zoCommandSetErrorReportingLevel;
		zoCommandsSetByteCount[ZO_COMMAND_SET_ERROR_REPORTING_LEVEL] = 1;
    2ae4:	20 93 19 02 	sts	0x0219, r18

/*64*/	zoCommandGet[ZO_COMMAND_GET_GAIN_P-ZO_PROTOCOL_GET_COMMANDS_START] =	
    2ae8:	81 e4       	ldi	r24, 0x41	; 65
    2aea:	9c e0       	ldi	r25, 0x0C	; 12
    2aec:	90 93 1b 02 	sts	0x021B, r25
    2af0:	80 93 1a 02 	sts	0x021A, r24
		zoCommandGetGainP;
/*65*/	zoCommandGet[ZO_COMMAND_GET_GAIN_I-ZO_PROTOCOL_GET_COMMANDS_START] =
    2af4:	80 e5       	ldi	r24, 0x50	; 80
    2af6:	9c e0       	ldi	r25, 0x0C	; 12
    2af8:	90 93 1d 02 	sts	0x021D, r25
    2afc:	80 93 1c 02 	sts	0x021C, r24
		zoCommandGetGainI;
/*66*/	zoCommandGet[ZO_COMMAND_GET_GAIN_D-ZO_PROTOCOL_GET_COMMANDS_START] =	
    2b00:	8f e5       	ldi	r24, 0x5F	; 95
    2b02:	9c e0       	ldi	r25, 0x0C	; 12
    2b04:	90 93 1f 02 	sts	0x021F, r25
    2b08:	80 93 1e 02 	sts	0x021E, r24
		zoCommandGetGainD;
/*67*/	zoCommandGet[ZO_COMMAND_GET_PROFILE_ACCELERATION-ZO_PROTOCOL_GET_COMMANDS_START] =
    2b0c:	8e e6       	ldi	r24, 0x6E	; 110
    2b0e:	9c e0       	ldi	r25, 0x0C	; 12
    2b10:	90 93 21 02 	sts	0x0221, r25
    2b14:	80 93 20 02 	sts	0x0220, r24
		zoCommandGetProfileAcceleration;
/*68*/	zoCommandGet[ZO_COMMAND_GET_PROFILE_VELOCITY-ZO_PROTOCOL_GET_COMMANDS_START] =	
    2b18:	8d e7       	ldi	r24, 0x7D	; 125
    2b1a:	9c e0       	ldi	r25, 0x0C	; 12
    2b1c:	90 93 23 02 	sts	0x0223, r25
    2b20:	80 93 22 02 	sts	0x0222, r24
		zoCommandGetProfileVelocity;
/*69*/	zoCommandGet[ZO_COMMAND_GET_CURRENT_LIMIT-ZO_PROTOCOL_GET_COMMANDS_START] =
    2b24:	8c e8       	ldi	r24, 0x8C	; 140
    2b26:	9c e0       	ldi	r25, 0x0C	; 12
    2b28:	90 93 25 02 	sts	0x0225, r25
    2b2c:	80 93 24 02 	sts	0x0224, r24
		zoCommandGetCurrentLimit;
/*6A*/	zoCommandGet[ZO_COMMAND_GET_CURRENT_LIMIT_DURATION-ZO_PROTOCOL_GET_COMMANDS_START]= 
    2b30:	8b e9       	ldi	r24, 0x9B	; 155
    2b32:	9c e0       	ldi	r25, 0x0C	; 12
    2b34:	90 93 27 02 	sts	0x0227, r25
    2b38:	80 93 26 02 	sts	0x0226, r24
		zoCommandGetCurrentLimitDuration;
/*6B*/	zoCommandGet[ZO_COMMAND_GET_DIO_CONFIGURATION-ZO_PROTOCOL_GET_COMMANDS_START] =	
    2b3c:	8a ea       	ldi	r24, 0xAA	; 170
    2b3e:	9c e0       	ldi	r25, 0x0C	; 12
    2b40:	90 93 29 02 	sts	0x0229, r25
    2b44:	80 93 28 02 	sts	0x0228, r24
		zoCommandGetDigitalIoConfiguration;
/*6C*/	zoCommandGet[ZO_COMMAND_GET_LOCAL_ACCEPTANCE_MASK-ZO_PROTOCOL_GET_COMMANDS_START]= 
    2b48:	81 eb       	ldi	r24, 0xB1	; 177
    2b4a:	9c e0       	ldi	r25, 0x0C	; 12
    2b4c:	90 93 2b 02 	sts	0x022B, r25
    2b50:	80 93 2a 02 	sts	0x022A, r24
		zoCommandGetLocalAcceptanceMask;
/*6D*/	zoCommandGet[ZO_COMMAND_GET_DIGITAL_IN-ZO_PROTOCOL_GET_COMMANDS_START] =	
    2b54:	88 eb       	ldi	r24, 0xB8	; 184
    2b56:	9c e0       	ldi	r25, 0x0C	; 12
    2b58:	90 93 2d 02 	sts	0x022D, r25
    2b5c:	80 93 2c 02 	sts	0x022C, r24
		zoCommandGetDigitalIn;
/*6E*/  zoCommandGet[ZO_COMMAND_GET_ANALOG_IN-ZO_PROTOCOL_GET_COMMANDS_START] =
    2b60:	8c e5       	ldi	r24, 0x5C	; 92
    2b62:	92 e1       	ldi	r25, 0x12	; 18
    2b64:	90 93 2f 02 	sts	0x022F, r25
    2b68:	80 93 2e 02 	sts	0x022E, r24
		zoCommandGetAnalogIn;
/*6F*/  zoCommandGet[ZO_COMMAND_GET_POSITION-ZO_PROTOCOL_GET_COMMANDS_START] =	
    2b6c:	84 e1       	ldi	r24, 0x14	; 20
    2b6e:	9e e0       	ldi	r25, 0x0E	; 14
    2b70:	90 93 31 02 	sts	0x0231, r25
    2b74:	80 93 30 02 	sts	0x0230, r24
		zoCommandGetPosition;
/*70*/	zoCommandGet[ZO_COMMAND_GET_ABSOLUTE_POSITION-ZO_PROTOCOL_GET_COMMANDS_START]=
    2b78:	8d e7       	ldi	r24, 0x7D	; 125
    2b7a:	92 e1       	ldi	r25, 0x12	; 18
    2b7c:	90 93 33 02 	sts	0x0233, r25
    2b80:	80 93 32 02 	sts	0x0232, r24
		zoCommandGetAbsolutePosition;
/*71*/	zoCommandGet[ZO_COMMAND_GET_VELOCITY-ZO_PROTOCOL_GET_COMMANDS_START]=	
    2b84:	8f ec       	ldi	r24, 0xCF	; 207
    2b86:	9c e0       	ldi	r25, 0x0C	; 12
    2b88:	90 93 35 02 	sts	0x0235, r25
    2b8c:	80 93 34 02 	sts	0x0234, r24
		zoCommandGetVelocity;
/*72*/	zoCommandGet[ZO_COMMAND_GET_CURRENT-ZO_PROTOCOL_GET_COMMANDS_START]=	
    2b90:	8d e4       	ldi	r24, 0x4D	; 77
    2b92:	92 e1       	ldi	r25, 0x12	; 18
    2b94:	90 93 37 02 	sts	0x0237, r25
    2b98:	80 93 36 02 	sts	0x0236, r24
		zoCommandGetCurrent;
/*73*/	zoCommandGet[ZO_COMMAND_GET_WARNING-ZO_PROTOCOL_GET_COMMANDS_START]=
    2b9c:	8b e2       	ldi	r24, 0x2B	; 43
    2b9e:	92 e1       	ldi	r25, 0x12	; 18
    2ba0:	90 93 39 02 	sts	0x0239, r25
    2ba4:	80 93 38 02 	sts	0x0238, r24
		zoCommandGetWarning;

/*C8*/	zoCommandBrc[ZO_COMMAND_DO_MOVE-ZO_PROTOCOL_BRC_COMMANDS_START]
    2ba8:	8c e6       	ldi	r24, 0x6C	; 108
    2baa:	91 e1       	ldi	r25, 0x11	; 17
    2bac:	90 93 3b 02 	sts	0x023B, r25
    2bb0:	80 93 3a 02 	sts	0x023A, r24
		= zoCommandDoMove;
/*C9*/	zoCommandBrc[ZO_COMMAND_GLOBAL_START-ZO_PROTOCOL_BRC_COMMANDS_START]
    2bb4:	f0 93 3d 02 	sts	0x023D, r31
    2bb8:	e0 93 3c 02 	sts	0x023C, r30
		= zoCommandStart; 
/*CA*/	zoCommandBrc[ZO_COMMAND_GLOBAL_HALT-ZO_PROTOCOL_BRC_COMMANDS_START]
    2bbc:	70 93 3f 02 	sts	0x023F, r23
    2bc0:	60 93 3e 02 	sts	0x023E, r22
		= zoCommandHalt;
/*CB*/	zoCommandBrc[ZO_COMMAND_GLOBAL_STOP-ZO_PROTOCOL_BRC_COMMANDS_START]
    2bc4:	50 93 41 02 	sts	0x0241, r21
    2bc8:	40 93 40 02 	sts	0x0240, r20
		= zoCommandStop;
}
    2bcc:	08 95       	ret

00002bce <zoAdcInit>:
								FALSE,FALSE,FALSE,FALSE,FALSE};

// initialize a2d converter
void zoAdcInit(void)
{
	DDRC = 0x00;
    2bce:	17 b8       	out	0x07, r1	; 7
	DIDR0 = 0x00;
    2bd0:	10 92 7e 00 	sts	0x007E, r1
	PRR &= ~_BV(PRADC);								// enable ADC power
    2bd4:	e4 e6       	ldi	r30, 0x64	; 100
    2bd6:	f0 e0       	ldi	r31, 0x00	; 0
    2bd8:	80 81       	ld	r24, Z
    2bda:	8e 7f       	andi	r24, 0xFE	; 254
    2bdc:	80 83       	st	Z, r24
	ADCSRA |= _BV(ADEN);							// enable ADC (turn on ADC power)
    2bde:	ea e7       	ldi	r30, 0x7A	; 122
    2be0:	f0 e0       	ldi	r31, 0x00	; 0
    2be2:	80 81       	ld	r24, Z
    2be4:	80 68       	ori	r24, 0x80	; 128
    2be6:	80 83       	st	Z, r24
	ADCSRA |= _BV(ADATE);							// enable auto triggering
    2be8:	80 81       	ld	r24, Z
    2bea:	80 62       	ori	r24, 0x20	; 32
    2bec:	80 83       	st	Z, r24
	sei();											// turn on interrupts (if not already on)
}

inline void zoAdcSetPrescaler(ZO_ADC_PRESCALE prescale)
{
	ADCSRA = (ADCSRA & ~ADC_PRESCALE_MASK)|prescale;
    2bee:	80 81       	ld	r24, Z
    2bf0:	87 60       	ori	r24, 0x07	; 7
    2bf2:	80 83       	st	Z, r24
}

inline void zoAdcSetReference(ZO_ADC_REFERENCE ref)
{
	ADMUX = (ADMUX & ~ADC_REFERENCE_MASK)|ref;
    2bf4:	ec e7       	ldi	r30, 0x7C	; 124
    2bf6:	f0 e0       	ldi	r31, 0x00	; 0
    2bf8:	80 81       	ld	r24, Z
    2bfa:	8f 73       	andi	r24, 0x3F	; 63
    2bfc:	80 64       	ori	r24, 0x40	; 64
    2bfe:	80 83       	st	Z, r24
}

inline void zoAdcSetTrigger(ZO_ADC_TRIGGER trig)
{
	ADCSRB = (ADCSRB & ~ADC_TRIGGER_MASK)|trig;
    2c00:	eb e7       	ldi	r30, 0x7B	; 123
    2c02:	f0 e0       	ldi	r31, 0x00	; 0
    2c04:	80 81       	ld	r24, Z
    2c06:	88 7f       	andi	r24, 0xF8	; 248
    2c08:	80 83       	st	Z, r24
{
	u08 ch;
	
	ch= (u08)channel; 
	
	enterCritical();
    2c0a:	0f b6       	in	r0, 0x3f	; 63
    2c0c:	0f 92       	push	r0
    2c0e:	f8 94       	cli
	AdcChannelOn[ch] = TRUE;
    2c10:	8f ef       	ldi	r24, 0xFF	; 255
    2c12:	80 93 59 02 	sts	0x0259, r24
	exitCritical();
    2c16:	0f 90       	pop	r0
    2c18:	0f be       	out	0x3f, r0	; 63
	ADCSRA |= _BV(ADATE);							// enable auto triggering
	zoAdcSetPrescaler(ZO_ADC_PRESCALE_128);			// set default prescaler
	zoAdcSetReference(ZO_ADC_REFERENCE_AVCC);		// set default reference
	zoAdcSetTrigger(ZO_ADC_TRIGGER_FREE_RUNNING);	// set free running mode
	zoAdcChannelEnable(ZO_ADC_CHANNEL_0);			// enable at least on channel
	ADMUX &= ~_BV(ADLAR);							// set to right-adjusted result
    2c1a:	ec e7       	ldi	r30, 0x7C	; 124
    2c1c:	f0 e0       	ldi	r31, 0x00	; 0
    2c1e:	80 81       	ld	r24, Z
    2c20:	8f 7d       	andi	r24, 0xDF	; 223
    2c22:	80 83       	st	Z, r24
	ADCSRA |= _BV(ADIE);							// enable ADC interrupts
    2c24:	ea e7       	ldi	r30, 0x7A	; 122
    2c26:	f0 e0       	ldi	r31, 0x00	; 0
    2c28:	80 81       	ld	r24, Z
    2c2a:	88 60       	ori	r24, 0x08	; 8
    2c2c:	80 83       	st	Z, r24
	ADCSRA |= _BV(ADSC)|_BV(ADIF);					// start free running conversions
    2c2e:	80 81       	ld	r24, Z
    2c30:	80 65       	ori	r24, 0x50	; 80
    2c32:	80 83       	st	Z, r24
	
	sei();											// turn on interrupts (if not already on)
    2c34:	78 94       	sei
}
    2c36:	08 95       	ret

00002c38 <zoAdcSetPrescaler>:

inline void zoAdcSetPrescaler(ZO_ADC_PRESCALE prescale)
{
	ADCSRA = (ADCSRA & ~ADC_PRESCALE_MASK)|prescale;
    2c38:	ea e7       	ldi	r30, 0x7A	; 122
    2c3a:	f0 e0       	ldi	r31, 0x00	; 0
    2c3c:	90 81       	ld	r25, Z
    2c3e:	98 7f       	andi	r25, 0xF8	; 248
    2c40:	98 2b       	or	r25, r24
    2c42:	90 83       	st	Z, r25
}
    2c44:	08 95       	ret

00002c46 <zoAdcSetReference>:

inline void zoAdcSetReference(ZO_ADC_REFERENCE ref)
{
	ADMUX = (ADMUX & ~ADC_REFERENCE_MASK)|ref;
    2c46:	ec e7       	ldi	r30, 0x7C	; 124
    2c48:	f0 e0       	ldi	r31, 0x00	; 0
    2c4a:	90 81       	ld	r25, Z
    2c4c:	9f 73       	andi	r25, 0x3F	; 63
    2c4e:	98 2b       	or	r25, r24
    2c50:	90 83       	st	Z, r25
}
    2c52:	08 95       	ret

00002c54 <zoAdcSetTrigger>:

inline void zoAdcSetTrigger(ZO_ADC_TRIGGER trig)
{
	ADCSRB = (ADCSRB & ~ADC_TRIGGER_MASK)|trig;
    2c54:	eb e7       	ldi	r30, 0x7B	; 123
    2c56:	f0 e0       	ldi	r31, 0x00	; 0
    2c58:	90 81       	ld	r25, Z
    2c5a:	98 7f       	andi	r25, 0xF8	; 248
    2c5c:	98 2b       	or	r25, r24
    2c5e:	90 83       	st	Z, r25
}
    2c60:	08 95       	ret

00002c62 <zoAdcOff>:

inline void zoAdcOff(void)
{
	ADCSRA &= ~_BV(ADIE);	//disable interrupts
    2c62:	ea e7       	ldi	r30, 0x7A	; 122
    2c64:	f0 e0       	ldi	r31, 0x00	; 0
    2c66:	80 81       	ld	r24, Z
    2c68:	87 7f       	andi	r24, 0xF7	; 247
    2c6a:	80 83       	st	Z, r24
	ADCSRA &= ~_BV(ADEN);	//turn off adc power
    2c6c:	80 81       	ld	r24, Z
    2c6e:	8f 77       	andi	r24, 0x7F	; 127
    2c70:	80 83       	st	Z, r24
}
    2c72:	08 95       	ret

00002c74 <zoAdcChannelEnable>:
{
	u08 ch;
	
	ch= (u08)channel; 
	
	enterCritical();
    2c74:	0f b6       	in	r0, 0x3f	; 63
    2c76:	0f 92       	push	r0
    2c78:	f8 94       	cli
	AdcChannelOn[ch] = TRUE;
    2c7a:	e9 e5       	ldi	r30, 0x59	; 89
    2c7c:	f2 e0       	ldi	r31, 0x02	; 2
    2c7e:	e8 0f       	add	r30, r24
    2c80:	f1 1d       	adc	r31, r1
    2c82:	8f ef       	ldi	r24, 0xFF	; 255
    2c84:	80 83       	st	Z, r24
	exitCritical();
    2c86:	0f 90       	pop	r0
    2c88:	0f be       	out	0x3f, r0	; 63
}
    2c8a:	08 95       	ret

00002c8c <zoAdcChannelDisable>:
{
	u08 ch;
	
	ch= (u08)channel; 
	
	enterCritical();
    2c8c:	0f b6       	in	r0, 0x3f	; 63
    2c8e:	0f 92       	push	r0
    2c90:	f8 94       	cli
	AdcChannelOn[ch] = FALSE;
    2c92:	e9 e5       	ldi	r30, 0x59	; 89
    2c94:	f2 e0       	ldi	r31, 0x02	; 2
    2c96:	e8 0f       	add	r30, r24
    2c98:	f1 1d       	adc	r31, r1
    2c9a:	10 82       	st	Z, r1
	exitCritical();
    2c9c:	0f 90       	pop	r0
    2c9e:	0f be       	out	0x3f, r0	; 63
}
    2ca0:	08 95       	ret

00002ca2 <zoAdcRead>:

u16 zoAdcRead(ZO_ADC_CHANNEL channel)
{
    2ca2:	e8 2f       	mov	r30, r24
	u16 result;
	u08 ch;
	
	ch = (u08)channel;

	enterCritical();
    2ca4:	0f b6       	in	r0, 0x3f	; 63
    2ca6:	0f 92       	push	r0
    2ca8:	f8 94       	cli
	result = AdcResult[ch];
    2caa:	f0 e0       	ldi	r31, 0x00	; 0
    2cac:	ee 0f       	add	r30, r30
    2cae:	ff 1f       	adc	r31, r31
    2cb0:	ed 5b       	subi	r30, 0xBD	; 189
    2cb2:	fd 4f       	sbci	r31, 0xFD	; 253
    2cb4:	20 81       	ld	r18, Z
    2cb6:	31 81       	ldd	r19, Z+1	; 0x01
	exitCritical();
    2cb8:	0f 90       	pop	r0
    2cba:	0f be       	out	0x3f, r0	; 63

	return result;
}
    2cbc:	c9 01       	movw	r24, r18
    2cbe:	08 95       	ret

00002cc0 <__vector_21>:

ISR(ADC_vect)
{
    2cc0:	1f 92       	push	r1
    2cc2:	0f 92       	push	r0
    2cc4:	0f b6       	in	r0, 0x3f	; 63
    2cc6:	0f 92       	push	r0
    2cc8:	11 24       	eor	r1, r1
    2cca:	2f 93       	push	r18
    2ccc:	4f 93       	push	r20
    2cce:	5f 93       	push	r21
    2cd0:	8f 93       	push	r24
    2cd2:	9f 93       	push	r25
    2cd4:	ef 93       	push	r30
    2cd6:	ff 93       	push	r31
	AdcResult[AdcCurrentChannel] = ADCL;			// read in the result first ADCL
    2cd8:	e0 91 42 02 	lds	r30, 0x0242
    2cdc:	f0 e0       	ldi	r31, 0x00	; 0
    2cde:	80 91 78 00 	lds	r24, 0x0078
    2ce2:	90 e0       	ldi	r25, 0x00	; 0
    2ce4:	ee 0f       	add	r30, r30
    2ce6:	ff 1f       	adc	r31, r31
    2ce8:	ed 5b       	subi	r30, 0xBD	; 189
    2cea:	fd 4f       	sbci	r31, 0xFD	; 253
    2cec:	91 83       	std	Z+1, r25	; 0x01
    2cee:	80 83       	st	Z, r24
	AdcResult[AdcCurrentChannel] |= (ADCH<<8);	// then ADCH
    2cf0:	e0 91 42 02 	lds	r30, 0x0242
    2cf4:	f0 e0       	ldi	r31, 0x00	; 0
    2cf6:	ee 0f       	add	r30, r30
    2cf8:	ff 1f       	adc	r31, r31
    2cfa:	ed 5b       	subi	r30, 0xBD	; 189
    2cfc:	fd 4f       	sbci	r31, 0xFD	; 253
    2cfe:	40 81       	ld	r20, Z
    2d00:	51 81       	ldd	r21, Z+1	; 0x01
    2d02:	20 91 79 00 	lds	r18, 0x0079
    2d06:	92 2f       	mov	r25, r18
    2d08:	80 e0       	ldi	r24, 0x00	; 0
    2d0a:	84 2b       	or	r24, r20
    2d0c:	95 2b       	or	r25, r21
    2d0e:	91 83       	std	Z+1, r25	; 0x01
    2d10:	80 83       	st	Z, r24

	//scan next active channel
	do {
		AdcCurrentChannel++;
    2d12:	80 91 42 02 	lds	r24, 0x0242
    2d16:	8f 5f       	subi	r24, 0xFF	; 255
    2d18:	80 93 42 02 	sts	0x0242, r24
		if(AdcCurrentChannel > 10)
    2d1c:	80 91 42 02 	lds	r24, 0x0242
    2d20:	8b 30       	cpi	r24, 0x0B	; 11
    2d22:	10 f0       	brcs	.+4      	; 0x2d28 <__vector_21+0x68>
			AdcCurrentChannel = 0;
    2d24:	10 92 42 02 	sts	0x0242, r1
	}while( !AdcChannelOn[AdcCurrentChannel] );
    2d28:	e0 91 42 02 	lds	r30, 0x0242
    2d2c:	f0 e0       	ldi	r31, 0x00	; 0
    2d2e:	e7 5a       	subi	r30, 0xA7	; 167
    2d30:	fd 4f       	sbci	r31, 0xFD	; 253
    2d32:	80 81       	ld	r24, Z
    2d34:	88 23       	and	r24, r24
    2d36:	69 f3       	breq	.-38     	; 0x2d12 <__vector_21+0x52>

	//configure mux for next conversion
	if(AdcCurrentChannel <= ZO_ADC_CHANNEL_TEMPERATURE)
    2d38:	80 91 42 02 	lds	r24, 0x0242
    2d3c:	89 30       	cpi	r24, 0x09	; 9
    2d3e:	a8 f0       	brcs	.+42     	; 0x2d6a <__vector_21+0xaa>
		ADMUX = (ADMUX & ~ADC_CHANNEL_MASK)|AdcCurrentChannel;	
	else
		ADMUX = (ADMUX & ~ADC_CHANNEL_MASK)|(AdcCurrentChannel+5);	
    2d40:	90 91 7c 00 	lds	r25, 0x007C
    2d44:	80 91 42 02 	lds	r24, 0x0242
    2d48:	8b 5f       	subi	r24, 0xFB	; 251
    2d4a:	90 7f       	andi	r25, 0xF0	; 240
    2d4c:	89 2b       	or	r24, r25
    2d4e:	80 93 7c 00 	sts	0x007C, r24
}
    2d52:	ff 91       	pop	r31
    2d54:	ef 91       	pop	r30
    2d56:	9f 91       	pop	r25
    2d58:	8f 91       	pop	r24
    2d5a:	5f 91       	pop	r21
    2d5c:	4f 91       	pop	r20
    2d5e:	2f 91       	pop	r18
    2d60:	0f 90       	pop	r0
    2d62:	0f be       	out	0x3f, r0	; 63
    2d64:	0f 90       	pop	r0
    2d66:	1f 90       	pop	r1
    2d68:	18 95       	reti
			AdcCurrentChannel = 0;
	}while( !AdcChannelOn[AdcCurrentChannel] );

	//configure mux for next conversion
	if(AdcCurrentChannel <= ZO_ADC_CHANNEL_TEMPERATURE)
		ADMUX = (ADMUX & ~ADC_CHANNEL_MASK)|AdcCurrentChannel;	
    2d6a:	80 91 7c 00 	lds	r24, 0x007C
    2d6e:	90 91 42 02 	lds	r25, 0x0242
    2d72:	80 7f       	andi	r24, 0xF0	; 240
    2d74:	89 2b       	or	r24, r25
    2d76:	80 93 7c 00 	sts	0x007C, r24
    2d7a:	eb cf       	rjmp	.-42     	; 0x2d52 <__vector_21+0x92>

00002d7c <zoSpiInit>:
#include <avr/interrupt.h>

void zoSpiInit(void)
{
	//Configure SPI pins
	DDRB |= _BV(2);		// SS must be output for Master mode to work
    2d7c:	22 9a       	sbi	0x04, 2	; 4
	DDRB |= _BV(3);		// set MOSI as output	
    2d7e:	23 9a       	sbi	0x04, 3	; 4
	DDRB &= ~_BV(4);	// set MISO as input
    2d80:	24 98       	cbi	0x04, 4	; 4
	DDRB |= _BV(5);		// set SCK as output
    2d82:	25 9a       	sbi	0x04, 5	; 4
	PORTB |= _BV(5);	// set SCK high
    2d84:	2d 9a       	sbi	0x05, 5	; 5
	PORTB |= _BV(2);	//set SS high
    2d86:	2a 9a       	sbi	0x05, 2	; 5

	//Configure SPI functionality
	SPCR = 0x00;
    2d88:	1c bc       	out	0x2c, r1	; 44
	SPCR |= _BV(MSTR);	//configure as master
    2d8a:	8c b5       	in	r24, 0x2c	; 44
    2d8c:	80 61       	ori	r24, 0x10	; 16
    2d8e:	8c bd       	out	0x2c, r24	; 44
	SPCR |= _BV(SPR1);	//SPI clock = F_CPU/32
    2d90:	8c b5       	in	r24, 0x2c	; 44
    2d92:	82 60       	ori	r24, 0x02	; 2
    2d94:	8c bd       	out	0x2c, r24	; 44
	SPCR |= _BV(CPHA);
    2d96:	8c b5       	in	r24, 0x2c	; 44
    2d98:	84 60       	ori	r24, 0x04	; 4
    2d9a:	8c bd       	out	0x2c, r24	; 44
	SPSR |= _BV(SPI2X);
    2d9c:	8d b5       	in	r24, 0x2d	; 45
    2d9e:	81 60       	ori	r24, 0x01	; 1
    2da0:	8d bd       	out	0x2d, r24	; 45
	SPCR |= _BV(SPE);	//enable SPI
    2da2:	8c b5       	in	r24, 0x2c	; 44
    2da4:	80 64       	ori	r24, 0x40	; 64
    2da6:	8c bd       	out	0x2c, r24	; 44
}
    2da8:	08 95       	ret

00002daa <zoSpiTransferByte>:

u08 zoSpiTransferByte(u08 byte)
{
	SPDR = byte;
    2daa:	8e bd       	out	0x2e, r24	; 46
	while(!(SPSR & _BV(SPIF)));
    2dac:	0d b4       	in	r0, 0x2d	; 45
    2dae:	07 fe       	sbrs	r0, 7
    2db0:	fd cf       	rjmp	.-6      	; 0x2dac <zoSpiTransferByte+0x2>
	return SPDR;
    2db2:	8e b5       	in	r24, 0x2e	; 46
    2db4:	08 95       	ret

00002db6 <zoI2cSetBitrate>:
	// enable interrupts
	sei();
}

bool zoI2cSetBitrate(u16 bitrateKHz)
{
    2db6:	bc 01       	movw	r22, r24
	u08 bitrate_div;
	
	if( (bitrateKHz > 400)||(bitrateKHz==0) )
    2db8:	01 97       	sbiw	r24, 0x01	; 1
    2dba:	80 59       	subi	r24, 0x90	; 144
    2dbc:	91 40       	sbci	r25, 0x01	; 1
    2dbe:	10 f0       	brcs	.+4      	; 0x2dc4 <zoI2cSetBitrate+0xe>
    2dc0:	80 e0       	ldi	r24, 0x00	; 0
    2dc2:	08 95       	ret
		return FALSE;
	
	// calculate bitrate division
	bitrate_div = ((F_CPU/1000l)/bitrateKHz);
    2dc4:	80 e2       	ldi	r24, 0x20	; 32
    2dc6:	9e e4       	ldi	r25, 0x4E	; 78
    2dc8:	0e 94 27 25 	call	0x4a4e	; 0x4a4e <__udivmodhi4>
	if(bitrate_div >= 16)
    2dcc:	60 31       	cpi	r22, 0x10	; 16
    2dce:	30 f0       	brcs	.+12     	; 0x2ddc <zoI2cSetBitrate+0x26>
		bitrate_div = (bitrate_div-16)/2;
    2dd0:	86 2f       	mov	r24, r22
    2dd2:	90 e0       	ldi	r25, 0x00	; 0
    2dd4:	40 97       	sbiw	r24, 0x10	; 16
    2dd6:	95 95       	asr	r25
    2dd8:	87 95       	ror	r24
    2dda:	68 2f       	mov	r22, r24
	TWBR = bitrate_div;
    2ddc:	60 93 b8 00 	sts	0x00B8, r22
    2de0:	8f ef       	ldi	r24, 0xFF	; 255
	
	return TRUE;
}
    2de2:	08 95       	ret

00002de4 <zoI2cSetLocalDeviceAddr>:

inline bool zoI2cSetLocalDeviceAddr(u08 deviceAddr, u08 genCallEn)
{
	if((deviceAddr>0x7F)||(deviceAddr==0))
    2de4:	18 16       	cp	r1, r24
    2de6:	14 f0       	brlt	.+4      	; 0x2dec <zoI2cSetLocalDeviceAddr+0x8>
    2de8:	80 e0       	ldi	r24, 0x00	; 0
    2dea:	08 95       	ret
		return FALSE;
	
	TWAR = ((deviceAddr<<1) | (genCallEn?1:0));
    2dec:	90 e0       	ldi	r25, 0x00	; 0
    2dee:	88 0f       	add	r24, r24
    2df0:	99 1f       	adc	r25, r25
    2df2:	20 e0       	ldi	r18, 0x00	; 0
    2df4:	66 23       	and	r22, r22
    2df6:	29 f4       	brne	.+10     	; 0x2e02 <zoI2cSetLocalDeviceAddr+0x1e>
    2df8:	28 2b       	or	r18, r24
    2dfa:	20 93 ba 00 	sts	0x00BA, r18
    2dfe:	8f ef       	ldi	r24, 0xFF	; 255
	return TRUE;
}
    2e00:	08 95       	ret
inline bool zoI2cSetLocalDeviceAddr(u08 deviceAddr, u08 genCallEn)
{
	if((deviceAddr>0x7F)||(deviceAddr==0))
		return FALSE;
	
	TWAR = ((deviceAddr<<1) | (genCallEn?1:0));
    2e02:	21 e0       	ldi	r18, 0x01	; 1
    2e04:	f9 cf       	rjmp	.-14     	; 0x2df8 <zoI2cSetLocalDeviceAddr+0x14>

00002e06 <zoI2cSetWaitOnBusReadyTimeOut>:
	return TRUE;
}

inline void zoI2cSetWaitOnBusReadyTimeOut(u16 miliseconds)
{
	BusReadyTimeOut = miliseconds;
    2e06:	90 93 65 01 	sts	0x0165, r25
    2e0a:	80 93 64 01 	sts	0x0164, r24
}
    2e0e:	08 95       	ret

00002e10 <zoI2cSetWaitOnTransmitTimeOut>:

inline void zoI2cSetWaitOnTransmitTimeOut(u16 miliseconds)
{
	TransmitTimeOut = miliseconds;
    2e10:	90 93 63 01 	sts	0x0163, r25
    2e14:	80 93 62 01 	sts	0x0162, r24
}
    2e18:	08 95       	ret

00002e1a <zoI2cSetWaitOnReceiveTimeOut>:

inline void zoI2cSetWaitOnReceiveTimeOut(u16 miliseconds)
{
	ReceiveTimeOut = miliseconds;
    2e1a:	90 93 67 01 	sts	0x0167, r25
    2e1e:	80 93 66 01 	sts	0x0166, r24
}
    2e22:	08 95       	ret

00002e24 <zoI2cSetSlaveReceiveHandler>:

inline void zoI2cSetSlaveReceiveHandler(void (*i2cSlaveRx_func)(u08 receiveDataLength, u08* receiveData))
{
	zoI2cSlaveReceive = i2cSlaveRx_func;
    2e24:	90 93 b8 02 	sts	0x02B8, r25
    2e28:	80 93 b7 02 	sts	0x02B7, r24
}
    2e2c:	08 95       	ret

00002e2e <zoI2cSetSlaveTransmitHandler>:

inline void zoI2cSetSlaveTransmitHandler(u08 (*i2cSlaveTx_func)(u08 transmitDataLengthMax, u08* transmitData))
{
	zoI2cSlaveTransmit = i2cSlaveTx_func;
    2e2e:	90 93 ba 02 	sts	0x02BA, r25
    2e32:	80 93 b9 02 	sts	0x02B9, r24
}
    2e36:	08 95       	ret

00002e38 <zoI2cSendStart>:

inline void zoI2cSendStart(void)
{
	// send start condition
	TWCR = (TWCR & TWCR_CMD_MASK)|_BV(TWINT)|_BV(TWSTA);
    2e38:	ec eb       	ldi	r30, 0xBC	; 188
    2e3a:	f0 e0       	ldi	r31, 0x00	; 0
    2e3c:	80 81       	ld	r24, Z
    2e3e:	8f 70       	andi	r24, 0x0F	; 15
    2e40:	80 6a       	ori	r24, 0xA0	; 160
    2e42:	80 83       	st	Z, r24
}
    2e44:	08 95       	ret

00002e46 <zoI2cSendStop>:

inline void zoI2cSendStop(void)
{
	// transmit stop condition
	// leave with TWEA on for slave receiving
	TWCR = ( TWCR & TWCR_CMD_MASK ) | _BV(TWINT)|_BV(TWEA)|_BV(TWSTO);
    2e46:	ec eb       	ldi	r30, 0xBC	; 188
    2e48:	f0 e0       	ldi	r31, 0x00	; 0
    2e4a:	80 81       	ld	r24, Z
    2e4c:	8f 70       	andi	r24, 0x0F	; 15
    2e4e:	80 6d       	ori	r24, 0xD0	; 208
    2e50:	80 83       	st	Z, r24
}
    2e52:	08 95       	ret

00002e54 <zoI2cWaitForComplete>:

inline void zoI2cWaitForComplete(void)
{
	// wait for i2c interface to complete operation
	while( !(TWCR & _BV(TWINT)) );
    2e54:	80 91 bc 00 	lds	r24, 0x00BC
    2e58:	87 ff       	sbrs	r24, 7
    2e5a:	fc cf       	rjmp	.-8      	; 0x2e54 <zoI2cWaitForComplete>
}
    2e5c:	08 95       	ret

00002e5e <zoI2cSendByte>:

inline void zoI2cSendByte(u08 data)
{
	TWDR = data;
    2e5e:	80 93 bb 00 	sts	0x00BB, r24
	TWCR = (TWCR & TWCR_CMD_MASK)|_BV(TWINT);	//send
    2e62:	ec eb       	ldi	r30, 0xBC	; 188
    2e64:	f0 e0       	ldi	r31, 0x00	; 0
    2e66:	80 81       	ld	r24, Z
    2e68:	8f 70       	andi	r24, 0x0F	; 15
    2e6a:	80 68       	ori	r24, 0x80	; 128
    2e6c:	80 83       	st	Z, r24
}
    2e6e:	08 95       	ret

00002e70 <zoI2cAcknowledgeRx>:

inline void zoI2cAcknowledgeRx(bool acknowledge)
{
	if( acknowledge )
    2e70:	88 23       	and	r24, r24
    2e72:	39 f4       	brne	.+14     	; 0x2e82 <zoI2cAcknowledgeRx+0x12>
		TWCR = (TWCR & TWCR_CMD_MASK)|_BV(TWINT)|_BV(TWEA);
	else
		TWCR = (TWCR & TWCR_CMD_MASK)|_BV(TWINT);
    2e74:	80 91 bc 00 	lds	r24, 0x00BC
    2e78:	8f 70       	andi	r24, 0x0F	; 15
    2e7a:	80 68       	ori	r24, 0x80	; 128
    2e7c:	80 93 bc 00 	sts	0x00BC, r24
    2e80:	08 95       	ret
}

inline void zoI2cAcknowledgeRx(bool acknowledge)
{
	if( acknowledge )
		TWCR = (TWCR & TWCR_CMD_MASK)|_BV(TWINT)|_BV(TWEA);
    2e82:	80 91 bc 00 	lds	r24, 0x00BC
    2e86:	8f 70       	andi	r24, 0x0F	; 15
    2e88:	80 6c       	ori	r24, 0xC0	; 192
    2e8a:	80 93 bc 00 	sts	0x00BC, r24
    2e8e:	08 95       	ret

00002e90 <__vector_24>:


//! I2C (TWI) interrupt service routine
//SIGNAL(SIG_2WIRE_SERIAL)
ISR(TWI_vect)
{
    2e90:	1f 92       	push	r1
    2e92:	0f 92       	push	r0
    2e94:	0f b6       	in	r0, 0x3f	; 63
    2e96:	0f 92       	push	r0
    2e98:	11 24       	eor	r1, r1
    2e9a:	2f 93       	push	r18
    2e9c:	3f 93       	push	r19
    2e9e:	4f 93       	push	r20
    2ea0:	5f 93       	push	r21
    2ea2:	6f 93       	push	r22
    2ea4:	7f 93       	push	r23
    2ea6:	8f 93       	push	r24
    2ea8:	9f 93       	push	r25
    2eaa:	af 93       	push	r26
    2eac:	bf 93       	push	r27
    2eae:	ef 93       	push	r30
    2eb0:	ff 93       	push	r31
	// read status bits	and shift right by 3. Execute corresponding functor
	zoI2cFunctor[( TWSR >> 3 )]();
    2eb2:	e0 91 b9 00 	lds	r30, 0x00B9
    2eb6:	e6 95       	lsr	r30
    2eb8:	e6 95       	lsr	r30
    2eba:	e6 95       	lsr	r30
    2ebc:	f0 e0       	ldi	r31, 0x00	; 0
    2ebe:	ee 0f       	add	r30, r30
    2ec0:	ff 1f       	adc	r31, r31
    2ec2:	e5 54       	subi	r30, 0x45	; 69
    2ec4:	fd 4f       	sbci	r31, 0xFD	; 253
    2ec6:	01 90       	ld	r0, Z+
    2ec8:	f0 81       	ld	r31, Z
    2eca:	e0 2d       	mov	r30, r0
    2ecc:	09 95       	icall
}
    2ece:	ff 91       	pop	r31
    2ed0:	ef 91       	pop	r30
    2ed2:	bf 91       	pop	r27
    2ed4:	af 91       	pop	r26
    2ed6:	9f 91       	pop	r25
    2ed8:	8f 91       	pop	r24
    2eda:	7f 91       	pop	r23
    2edc:	6f 91       	pop	r22
    2ede:	5f 91       	pop	r21
    2ee0:	4f 91       	pop	r20
    2ee2:	3f 91       	pop	r19
    2ee4:	2f 91       	pop	r18
    2ee6:	0f 90       	pop	r0
    2ee8:	0f be       	out	0x3f, r0	; 63
    2eea:	0f 90       	pop	r0
    2eec:	1f 90       	pop	r1
    2eee:	18 95       	reti

00002ef0 <zoI2cFunctorStart>:

// 0x01, 0x02 : Start or repeated start
void zoI2cFunctorStart(void)		
{
	// send device address
	zoI2cSendByte(I2cDeviceAddrRW);	
    2ef0:	80 91 72 02 	lds	r24, 0x0272
	while( !(TWCR & _BV(TWINT)) );
}

inline void zoI2cSendByte(u08 data)
{
	TWDR = data;
    2ef4:	80 93 bb 00 	sts	0x00BB, r24
	TWCR = (TWCR & TWCR_CMD_MASK)|_BV(TWINT);	//send
    2ef8:	ec eb       	ldi	r30, 0xBC	; 188
    2efa:	f0 e0       	ldi	r31, 0x00	; 0
    2efc:	80 81       	ld	r24, Z
    2efe:	8f 70       	andi	r24, 0x0F	; 15
    2f00:	80 68       	ori	r24, 0x80	; 128
    2f02:	80 83       	st	Z, r24
// 0x01, 0x02 : Start or repeated start
void zoI2cFunctorStart(void)		
{
	// send device address
	zoI2cSendByte(I2cDeviceAddrRW);	
}
    2f04:	08 95       	ret

00002f06 <zoI2cFunctorMtAck>:

//0x03: Slave address acknowledged, 0x05: Data acknowledged 
void zoI2cFunctorMtAck(void)
{
	if(I2cSendDataIndex < I2cSendDataLength)
    2f06:	90 91 93 02 	lds	r25, 0x0293
    2f0a:	80 91 94 02 	lds	r24, 0x0294
    2f0e:	98 17       	cp	r25, r24
    2f10:	48 f0       	brcs	.+18     	; 0x2f24 <zoI2cFunctorMtAck+0x1e>

inline void zoI2cSendStop(void)
{
	// transmit stop condition
	// leave with TWEA on for slave receiving
	TWCR = ( TWCR & TWCR_CMD_MASK ) | _BV(TWINT)|_BV(TWEA)|_BV(TWSTO);
    2f12:	80 91 bc 00 	lds	r24, 0x00BC
    2f16:	8f 70       	andi	r24, 0x0F	; 15
    2f18:	80 6d       	ori	r24, 0xD0	; 208
    2f1a:	80 93 bc 00 	sts	0x00BC, r24
	if(I2cSendDataIndex < I2cSendDataLength)
		zoI2cSendByte( I2cSendData[I2cSendDataIndex++] );
	else
	{
		zoI2cSendStop();			// transmit stop condition, enable SLA ACK
		I2cState = I2C_IDLE;		// set state
    2f1e:	10 92 71 02 	sts	0x0271, r1
    2f22:	08 95       	ret

//0x03: Slave address acknowledged, 0x05: Data acknowledged 
void zoI2cFunctorMtAck(void)
{
	if(I2cSendDataIndex < I2cSendDataLength)
		zoI2cSendByte( I2cSendData[I2cSendDataIndex++] );
    2f24:	e9 2f       	mov	r30, r25
    2f26:	f0 e0       	ldi	r31, 0x00	; 0
    2f28:	ed 58       	subi	r30, 0x8D	; 141
    2f2a:	fd 4f       	sbci	r31, 0xFD	; 253
    2f2c:	80 81       	ld	r24, Z
    2f2e:	9f 5f       	subi	r25, 0xFF	; 255
    2f30:	90 93 93 02 	sts	0x0293, r25
	while( !(TWCR & _BV(TWINT)) );
}

inline void zoI2cSendByte(u08 data)
{
	TWDR = data;
    2f34:	80 93 bb 00 	sts	0x00BB, r24
	TWCR = (TWCR & TWCR_CMD_MASK)|_BV(TWINT);	//send
    2f38:	80 91 bc 00 	lds	r24, 0x00BC
    2f3c:	8f 70       	andi	r24, 0x0F	; 15
    2f3e:	80 68       	ori	r24, 0x80	; 128
    2f40:	80 93 bc 00 	sts	0x00BC, r24
    2f44:	08 95       	ret

00002f46 <zoI2cFunctorMrDataNAck>:
}

// 0x0B: Data received, NACK reply issued
void zoI2cFunctorMrDataNAck(void)
{
	I2cReceiveData[I2cReceiveDataIndex++] = TWDR;
    2f46:	80 91 b5 02 	lds	r24, 0x02B5
    2f4a:	90 91 bb 00 	lds	r25, 0x00BB
    2f4e:	e5 e9       	ldi	r30, 0x95	; 149
    2f50:	f2 e0       	ldi	r31, 0x02	; 2
    2f52:	e8 0f       	add	r30, r24
    2f54:	f1 1d       	adc	r31, r1
    2f56:	90 83       	st	Z, r25
    2f58:	8f 5f       	subi	r24, 0xFF	; 255
    2f5a:	80 93 b5 02 	sts	0x02B5, r24

inline void zoI2cSendStop(void)
{
	// transmit stop condition
	// leave with TWEA on for slave receiving
	TWCR = ( TWCR & TWCR_CMD_MASK ) | _BV(TWINT)|_BV(TWEA)|_BV(TWSTO);
    2f5e:	ec eb       	ldi	r30, 0xBC	; 188
    2f60:	f0 e0       	ldi	r31, 0x00	; 0
    2f62:	80 81       	ld	r24, Z
    2f64:	8f 70       	andi	r24, 0x0F	; 15
    2f66:	80 6d       	ori	r24, 0xD0	; 208
    2f68:	80 83       	st	Z, r24
// 0x0B: Data received, NACK reply issued
void zoI2cFunctorMrDataNAck(void)
{
	I2cReceiveData[I2cReceiveDataIndex++] = TWDR;
	zoI2cSendStop();
	I2cState = I2C_IDLE;
    2f6a:	10 92 71 02 	sts	0x0271, r1
}
    2f6e:	08 95       	ret

00002f70 <zoI2cFunctorSrAck>:
// 0x0E, 0x0F: GCA+W has been received, ACK has been returned
void zoI2cFunctorSrAck(void)
{
	// we are being addressed as slave for writing (data will be received from master)
	// set state
	I2cState = I2C_SLAVE_RX;
    2f70:	85 e0       	ldi	r24, 0x05	; 5
    2f72:	80 93 71 02 	sts	0x0271, r24
	// prepare buffer
	I2cReceiveDataIndex = 0;
    2f76:	10 92 b5 02 	sts	0x02B5, r1
	// receive data byte and return ACK
	TWCR = (TWCR&TWCR_CMD_MASK)|_BV(TWINT)|_BV(TWEA);
    2f7a:	ec eb       	ldi	r30, 0xBC	; 188
    2f7c:	f0 e0       	ldi	r31, 0x00	; 0
    2f7e:	80 81       	ld	r24, Z
    2f80:	8f 70       	andi	r24, 0x0F	; 15
    2f82:	80 6c       	ori	r24, 0xC0	; 192
    2f84:	80 83       	st	Z, r24
}
    2f86:	08 95       	ret

00002f88 <zoI2cFunctorStop>:

//0x14: STOP or REPEATED START has been received while addressed as slave
void zoI2cFunctorStop(void)
{
	// switch to SR mode with SLA ACK
	TWCR = (TWCR&TWCR_CMD_MASK)|_BV(TWINT)|_BV(TWEA);
    2f88:	80 91 bc 00 	lds	r24, 0x00BC
    2f8c:	8f 70       	andi	r24, 0x0F	; 15
    2f8e:	80 6c       	ori	r24, 0xC0	; 192
    2f90:	80 93 bc 00 	sts	0x00BC, r24
	// i2c receive is complete, call i2cSlaveReceive
	if(zoI2cSlaveReceive) zoI2cSlaveReceive(I2cReceiveDataIndex, I2cReceiveData);
    2f94:	e0 91 b7 02 	lds	r30, 0x02B7
    2f98:	f0 91 b8 02 	lds	r31, 0x02B8
    2f9c:	30 97       	sbiw	r30, 0x00	; 0
    2f9e:	29 f0       	breq	.+10     	; 0x2faa <zoI2cFunctorStop+0x22>
    2fa0:	80 91 b5 02 	lds	r24, 0x02B5
    2fa4:	65 e9       	ldi	r22, 0x95	; 149
    2fa6:	72 e0       	ldi	r23, 0x02	; 2
    2fa8:	09 95       	icall
	// set state
	I2cState = I2C_IDLE;
    2faa:	10 92 71 02 	sts	0x0271, r1
}
    2fae:	08 95       	ret

00002fb0 <zoI2cFunctorStAck>:
//0x16: GCA+R has been received, ACK has been returned 
void zoI2cFunctorStAck(void)
{
	// we are being addressed as slave for reading (data must be transmitted back to master)
	// set state
	I2cState = I2C_SLAVE_TX;
    2fb0:	84 e0       	ldi	r24, 0x04	; 4
    2fb2:	80 93 71 02 	sts	0x0271, r24
	// request data from application
	if(zoI2cSlaveTransmit) I2cSendDataLength = zoI2cSlaveTransmit(ZO_I2C_BUFFER_SIZE, I2cSendData);
    2fb6:	e0 91 b9 02 	lds	r30, 0x02B9
    2fba:	f0 91 ba 02 	lds	r31, 0x02BA
    2fbe:	30 97       	sbiw	r30, 0x00	; 0
    2fc0:	31 f0       	breq	.+12     	; 0x2fce <zoI2cFunctorStAck+0x1e>
    2fc2:	80 e2       	ldi	r24, 0x20	; 32
    2fc4:	63 e7       	ldi	r22, 0x73	; 115
    2fc6:	72 e0       	ldi	r23, 0x02	; 2
    2fc8:	09 95       	icall
    2fca:	80 93 94 02 	sts	0x0294, r24
	// reset data index
	I2cSendDataIndex = 0;
	// transmit data byte
	TWDR = I2cSendData[I2cSendDataIndex++];
    2fce:	80 91 73 02 	lds	r24, 0x0273
    2fd2:	80 93 bb 00 	sts	0x00BB, r24
    2fd6:	81 e0       	ldi	r24, 0x01	; 1
    2fd8:	80 93 93 02 	sts	0x0293, r24
	if(I2cSendDataIndex < I2cSendDataLength)
    2fdc:	80 91 94 02 	lds	r24, 0x0294
    2fe0:	82 30       	cpi	r24, 0x02	; 2
    2fe2:	38 f4       	brcc	.+14     	; 0x2ff2 <zoI2cFunctorStAck+0x42>
		// expect ACK to data byte
		TWCR = (TWCR&TWCR_CMD_MASK)|_BV(TWINT)|_BV(TWEA);
	else
		// expect NACK to data byte
		TWCR = (TWCR&TWCR_CMD_MASK)|_BV(TWINT);
    2fe4:	80 91 bc 00 	lds	r24, 0x00BC
    2fe8:	8f 70       	andi	r24, 0x0F	; 15
    2fea:	80 68       	ori	r24, 0x80	; 128
    2fec:	80 93 bc 00 	sts	0x00BC, r24
    2ff0:	08 95       	ret
	I2cSendDataIndex = 0;
	// transmit data byte
	TWDR = I2cSendData[I2cSendDataIndex++];
	if(I2cSendDataIndex < I2cSendDataLength)
		// expect ACK to data byte
		TWCR = (TWCR&TWCR_CMD_MASK)|_BV(TWINT)|_BV(TWEA);
    2ff2:	80 91 bc 00 	lds	r24, 0x00BC
    2ff6:	8f 70       	andi	r24, 0x0F	; 15
    2ff8:	80 6c       	ori	r24, 0xC0	; 192
    2ffa:	80 93 bc 00 	sts	0x00BC, r24
    2ffe:	08 95       	ret

00003000 <zoI2cFunctorStDataAck>:

//0x17: data byte has been transmitted, ACK has been received
void zoI2cFunctorStDataAck(void)
{
	// transmit data byte
	TWDR = I2cSendData[I2cSendDataIndex++];
    3000:	90 91 93 02 	lds	r25, 0x0293
    3004:	e9 2f       	mov	r30, r25
    3006:	f0 e0       	ldi	r31, 0x00	; 0
    3008:	ed 58       	subi	r30, 0x8D	; 141
    300a:	fd 4f       	sbci	r31, 0xFD	; 253
    300c:	80 81       	ld	r24, Z
    300e:	80 93 bb 00 	sts	0x00BB, r24
    3012:	9f 5f       	subi	r25, 0xFF	; 255
    3014:	90 93 93 02 	sts	0x0293, r25
	if(I2cSendDataIndex < I2cSendDataLength)
    3018:	80 91 94 02 	lds	r24, 0x0294
    301c:	98 17       	cp	r25, r24
    301e:	38 f0       	brcs	.+14     	; 0x302e <zoI2cFunctorStDataAck+0x2e>
		// expect ACK to data byte
		TWCR = (TWCR&TWCR_CMD_MASK)|_BV(TWINT)|_BV(TWEA);
	else
		// expect NACK to data byte
		TWCR = (TWCR&TWCR_CMD_MASK)|_BV(TWINT);
    3020:	80 91 bc 00 	lds	r24, 0x00BC
    3024:	8f 70       	andi	r24, 0x0F	; 15
    3026:	80 68       	ori	r24, 0x80	; 128
    3028:	80 93 bc 00 	sts	0x00BC, r24
    302c:	08 95       	ret
{
	// transmit data byte
	TWDR = I2cSendData[I2cSendDataIndex++];
	if(I2cSendDataIndex < I2cSendDataLength)
		// expect ACK to data byte
		TWCR = (TWCR&TWCR_CMD_MASK)|_BV(TWINT)|_BV(TWEA);
    302e:	80 91 bc 00 	lds	r24, 0x00BC
    3032:	8f 70       	andi	r24, 0x0F	; 15
    3034:	80 6c       	ori	r24, 0xC0	; 192
    3036:	80 93 bc 00 	sts	0x00BC, r24
    303a:	08 95       	ret

0000303c <zoI2cFunctorStDataNAck>:

// 0x18, 0x19: data byte has been transmitted, NACK has been received 
void zoI2cFunctorStDataNAck(void)
{
	// switch to open slave
	TWCR = (TWCR&TWCR_CMD_MASK)|_BV(TWINT)|_BV(TWEA);
    303c:	ec eb       	ldi	r30, 0xBC	; 188
    303e:	f0 e0       	ldi	r31, 0x00	; 0
    3040:	80 81       	ld	r24, Z
    3042:	8f 70       	andi	r24, 0x0F	; 15
    3044:	80 6c       	ori	r24, 0xC0	; 192
    3046:	80 83       	st	Z, r24
	// set state
	I2cState = I2C_IDLE;
    3048:	10 92 71 02 	sts	0x0271, r1
}
    304c:	08 95       	ret

0000304e <zoI2cFunctorNull>:
{
	zoErrorPut(&zoI2cError,ZO_I2C_ERROR_INDETERMINATE);
}

//Null functor: all other indexes
void zoI2cFunctorNull(void) {}
    304e:	08 95       	ret

00003050 <zoI2cFunctorInit>:

void zoI2cFunctorInit(void)
{
	zoI2cFunctor[TW_BUS_ERROR]				= zoI2cFunctorBusError;
    3050:	8d ee       	ldi	r24, 0xED	; 237
    3052:	98 e1       	ldi	r25, 0x18	; 24
    3054:	90 93 bc 02 	sts	0x02BC, r25
    3058:	80 93 bb 02 	sts	0x02BB, r24
	zoI2cFunctor[TW_START]					= zoI2cFunctorStart;
    305c:	88 e7       	ldi	r24, 0x78	; 120
    305e:	97 e1       	ldi	r25, 0x17	; 23
    3060:	90 93 be 02 	sts	0x02BE, r25
    3064:	80 93 bd 02 	sts	0x02BD, r24
	zoI2cFunctor[TW_REP_START]				= zoI2cFunctorStart;
    3068:	90 93 c0 02 	sts	0x02C0, r25
    306c:	80 93 bf 02 	sts	0x02BF, r24
	zoI2cFunctor[TW_MT_SLA_ACK]				= zoI2cFunctorMtAck;
    3070:	83 e8       	ldi	r24, 0x83	; 131
    3072:	97 e1       	ldi	r25, 0x17	; 23
    3074:	90 93 c2 02 	sts	0x02C2, r25
    3078:	80 93 c1 02 	sts	0x02C1, r24
	zoI2cFunctor[TW_MT_SLA_NACK]			= zoI2cFunctorMasterNAck;
    307c:	2f ed       	ldi	r18, 0xDF	; 223
    307e:	38 e1       	ldi	r19, 0x18	; 24
    3080:	30 93 c4 02 	sts	0x02C4, r19
    3084:	20 93 c3 02 	sts	0x02C3, r18
	zoI2cFunctor[TW_MT_DATA_ACK]			= zoI2cFunctorMtAck;
    3088:	90 93 c6 02 	sts	0x02C6, r25
    308c:	80 93 c5 02 	sts	0x02C5, r24
	zoI2cFunctor[TW_MT_DATA_NACK]			= zoI2cFunctorMasterNAck;
    3090:	30 93 c8 02 	sts	0x02C8, r19
    3094:	20 93 c7 02 	sts	0x02C7, r18
	zoI2cFunctor[TW_MT_ARB_LOST]			= zoI2cFunctorArbitrationLost;
    3098:	81 ed       	ldi	r24, 0xD1	; 209
    309a:	98 e1       	ldi	r25, 0x18	; 24
    309c:	90 93 ca 02 	sts	0x02CA, r25
    30a0:	80 93 c9 02 	sts	0x02C9, r24
	zoI2cFunctor[TW_MR_SLA_ACK]				= zoI2cFunctorMrSlaveAck;
    30a4:	84 eb       	ldi	r24, 0xB4	; 180
    30a6:	99 e1       	ldi	r25, 0x19	; 25
    30a8:	90 93 cc 02 	sts	0x02CC, r25
    30ac:	80 93 cb 02 	sts	0x02CB, r24
	zoI2cFunctor[TW_MR_SLA_NACK]			= zoI2cFunctorMasterNAck;
    30b0:	30 93 ce 02 	sts	0x02CE, r19
    30b4:	20 93 cd 02 	sts	0x02CD, r18
	zoI2cFunctor[TW_MR_DATA_ACK]			= zoI2cFunctorMrDataAck;
    30b8:	88 ee       	ldi	r24, 0xE8	; 232
    30ba:	99 e1       	ldi	r25, 0x19	; 25
    30bc:	90 93 d0 02 	sts	0x02D0, r25
    30c0:	80 93 cf 02 	sts	0x02CF, r24
	zoI2cFunctor[TW_MR_DATA_NACK]			= zoI2cFunctorMrDataNAck;
    30c4:	83 ea       	ldi	r24, 0xA3	; 163
    30c6:	97 e1       	ldi	r25, 0x17	; 23
    30c8:	90 93 d2 02 	sts	0x02D2, r25
    30cc:	80 93 d1 02 	sts	0x02D1, r24
	zoI2cFunctor[TW_SR_SLA_ACK]				= zoI2cFunctorSrAck;
    30d0:	88 eb       	ldi	r24, 0xB8	; 184
    30d2:	97 e1       	ldi	r25, 0x17	; 23
    30d4:	90 93 d4 02 	sts	0x02D4, r25
    30d8:	80 93 d3 02 	sts	0x02D3, r24
	zoI2cFunctor[TW_SR_ARB_LOST_SLA_ACK]	= zoI2cFunctorSrAck;
    30dc:	90 93 d6 02 	sts	0x02D6, r25
    30e0:	80 93 d5 02 	sts	0x02D5, r24
	zoI2cFunctor[TW_SR_GCALL_ACK]			= zoI2cFunctorSrAck;
    30e4:	90 93 d8 02 	sts	0x02D8, r25
    30e8:	80 93 d7 02 	sts	0x02D7, r24
	zoI2cFunctor[TW_SR_ARB_LOST_GCALL_ACK]	= zoI2cFunctorSrAck;
    30ec:	90 93 da 02 	sts	0x02DA, r25
    30f0:	80 93 d9 02 	sts	0x02D9, r24
	zoI2cFunctor[TW_SR_DATA_ACK]			= zoI2cFunctorSrDataAck;
    30f4:	2c ec       	ldi	r18, 0xCC	; 204
    30f6:	39 e1       	ldi	r19, 0x19	; 25
    30f8:	30 93 dc 02 	sts	0x02DC, r19
    30fc:	20 93 db 02 	sts	0x02DB, r18
	zoI2cFunctor[TW_SR_DATA_NACK]			= zoI2cFunctorSrDataNack;
    3100:	8d ea       	ldi	r24, 0xAD	; 173
    3102:	99 e1       	ldi	r25, 0x19	; 25
    3104:	90 93 de 02 	sts	0x02DE, r25
    3108:	80 93 dd 02 	sts	0x02DD, r24
	zoI2cFunctor[TW_SR_GCALL_DATA_ACK]		= zoI2cFunctorSrDataAck;
    310c:	30 93 e0 02 	sts	0x02E0, r19
    3110:	20 93 df 02 	sts	0x02DF, r18
	zoI2cFunctor[TW_SR_GCALL_DATA_NACK]		= zoI2cFunctorSrDataNack;
    3114:	90 93 e2 02 	sts	0x02E2, r25
    3118:	80 93 e1 02 	sts	0x02E1, r24
	zoI2cFunctor[TW_SR_STOP]				= zoI2cFunctorStop;
    311c:	84 ec       	ldi	r24, 0xC4	; 196
    311e:	97 e1       	ldi	r25, 0x17	; 23
    3120:	90 93 e4 02 	sts	0x02E4, r25
    3124:	80 93 e3 02 	sts	0x02E3, r24
	zoI2cFunctor[TW_ST_SLA_ACK]				= zoI2cFunctorStAck;
    3128:	88 ed       	ldi	r24, 0xD8	; 216
    312a:	97 e1       	ldi	r25, 0x17	; 23
    312c:	90 93 e6 02 	sts	0x02E6, r25
    3130:	80 93 e5 02 	sts	0x02E5, r24
	zoI2cFunctor[TW_ST_ARB_LOST_SLA_ACK]	= zoI2cFunctorStAck;
    3134:	90 93 e8 02 	sts	0x02E8, r25
    3138:	80 93 e7 02 	sts	0x02E7, r24
	zoI2cFunctor[TW_ST_DATA_ACK]			= zoI2cFunctorStDataAck;
    313c:	80 e0       	ldi	r24, 0x00	; 0
    313e:	98 e1       	ldi	r25, 0x18	; 24
    3140:	90 93 ea 02 	sts	0x02EA, r25
    3144:	80 93 e9 02 	sts	0x02E9, r24
	zoI2cFunctor[TW_ST_DATA_NACK]			= zoI2cFunctorStDataNAck;
    3148:	8e e1       	ldi	r24, 0x1E	; 30
    314a:	98 e1       	ldi	r25, 0x18	; 24
    314c:	90 93 ec 02 	sts	0x02EC, r25
    3150:	80 93 eb 02 	sts	0x02EB, r24
	zoI2cFunctor[TW_ST_LAST_DATA]			= zoI2cFunctorStDataNAck;
    3154:	90 93 ee 02 	sts	0x02EE, r25
    3158:	80 93 ed 02 	sts	0x02ED, r24
	zoI2cFunctor[0x1A]						= zoI2cFunctorNull;
    315c:	87 e2       	ldi	r24, 0x27	; 39
    315e:	98 e1       	ldi	r25, 0x18	; 24
    3160:	90 93 f0 02 	sts	0x02F0, r25
    3164:	80 93 ef 02 	sts	0x02EF, r24
	zoI2cFunctor[0x1B]						= zoI2cFunctorNull;
    3168:	90 93 f2 02 	sts	0x02F2, r25
    316c:	80 93 f1 02 	sts	0x02F1, r24
	zoI2cFunctor[0x1C]						= zoI2cFunctorNull;
    3170:	90 93 f4 02 	sts	0x02F4, r25
    3174:	80 93 f3 02 	sts	0x02F3, r24
	zoI2cFunctor[0x1D]						= zoI2cFunctorNull;
    3178:	90 93 f6 02 	sts	0x02F6, r25
    317c:	80 93 f5 02 	sts	0x02F5, r24
	zoI2cFunctor[0x1E]						= zoI2cFunctorNull;
    3180:	90 93 f8 02 	sts	0x02F8, r25
    3184:	80 93 f7 02 	sts	0x02F7, r24
	zoI2cFunctor[TW_NO_INFO]				= zoI2cFunctorNoInfo;
    3188:	8b ec       	ldi	r24, 0xCB	; 203
    318a:	98 e1       	ldi	r25, 0x18	; 24
    318c:	90 93 fa 02 	sts	0x02FA, r25
    3190:	80 93 f9 02 	sts	0x02F9, r24
}
    3194:	08 95       	ret

00003196 <zoI2cFunctorNoInfo>:
}

//0x1F: No relevant state information
void zoI2cFunctorNoInfo(void)
{
	zoErrorPut(&zoI2cError,ZO_I2C_ERROR_INDETERMINATE);
    3196:	84 e6       	ldi	r24, 0x64	; 100
    3198:	92 e0       	ldi	r25, 0x02	; 2
    319a:	64 e0       	ldi	r22, 0x04	; 4
    319c:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <zoErrorPut>
}
    31a0:	08 95       	ret

000031a2 <zoI2cFunctorArbitrationLost>:

//0x07: Bus arbitration lost
void zoI2cFunctorArbitrationLost(void)
{
	// release bus
	TWCR = (TWCR&TWCR_CMD_MASK)|_BV(TWINT);
    31a2:	ec eb       	ldi	r30, 0xBC	; 188
    31a4:	f0 e0       	ldi	r31, 0x00	; 0
    31a6:	80 81       	ld	r24, Z
    31a8:	8f 70       	andi	r24, 0x0F	; 15
    31aa:	80 68       	ori	r24, 0x80	; 128
    31ac:	80 83       	st	Z, r24
	// set state
	zoErrorPut(&zoI2cError,ZO_I2C_ERROR_ARBITRATION_LOST);
    31ae:	84 e6       	ldi	r24, 0x64	; 100
    31b0:	92 e0       	ldi	r25, 0x02	; 2
    31b2:	63 e0       	ldi	r22, 0x03	; 3
    31b4:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <zoErrorPut>
	I2cState = I2C_IDLE;
    31b8:	10 92 71 02 	sts	0x0271, r1
}
    31bc:	08 95       	ret

000031be <zoI2cFunctorMasterNAck>:

inline void zoI2cSendStop(void)
{
	// transmit stop condition
	// leave with TWEA on for slave receiving
	TWCR = ( TWCR & TWCR_CMD_MASK ) | _BV(TWINT)|_BV(TWEA)|_BV(TWSTO);
    31be:	ec eb       	ldi	r30, 0xBC	; 188
    31c0:	f0 e0       	ldi	r31, 0x00	; 0
    31c2:	80 81       	ld	r24, Z
    31c4:	8f 70       	andi	r24, 0x0F	; 15
    31c6:	80 6d       	ori	r24, 0xD0	; 208
    31c8:	80 83       	st	Z, r24

// 0x09, 0x04: Slave address not acknowledged, 0x06: Data not acknowledged
void zoI2cFunctorMasterNAck(void)
{
	zoI2cSendStop();
	zoErrorPut(&zoI2cError,ZO_I2C_ERROR_NODEV);
    31ca:	84 e6       	ldi	r24, 0x64	; 100
    31cc:	92 e0       	ldi	r25, 0x02	; 2
    31ce:	61 e0       	ldi	r22, 0x01	; 1
    31d0:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <zoErrorPut>
	I2cState = I2C_IDLE;
    31d4:	10 92 71 02 	sts	0x0271, r1
}
    31d8:	08 95       	ret

000031da <zoI2cFunctorBusError>:

// 0x00: Bus error due to illegal start or stop condition
void zoI2cFunctorBusError(void)
{
	// reset internal hardware and release bus
	TWCR =  ( TWCR & TWCR_CMD_MASK )|_BV(TWINT)|_BV(TWSTO)|_BV(TWEA);
    31da:	ec eb       	ldi	r30, 0xBC	; 188
    31dc:	f0 e0       	ldi	r31, 0x00	; 0
    31de:	80 81       	ld	r24, Z
    31e0:	8f 70       	andi	r24, 0x0F	; 15
    31e2:	80 6d       	ori	r24, 0xD0	; 208
    31e4:	80 83       	st	Z, r24
	// set state
	zoErrorPut(&zoI2cError,ZO_I2C_ERROR_BUS_ERROR);
    31e6:	84 e6       	ldi	r24, 0x64	; 100
    31e8:	92 e0       	ldi	r25, 0x02	; 2
    31ea:	62 e0       	ldi	r22, 0x02	; 2
    31ec:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <zoErrorPut>
	I2cState = I2C_IDLE;
    31f0:	10 92 71 02 	sts	0x0271, r1
	
}
    31f4:	08 95       	ret

000031f6 <zoI2cMasterSend>:
		TWCR = (TWCR & TWCR_CMD_MASK)|_BV(TWINT);
}

#if ZO_I2C_ENABLE_MASTER_TRANSMIT == 1
bool zoI2cMasterSend(u08 deviceAddr, u08 length, u08 *data)
{
    31f6:	cf 92       	push	r12
    31f8:	df 92       	push	r13
    31fa:	ef 92       	push	r14
    31fc:	ff 92       	push	r15
    31fe:	0f 93       	push	r16
    3200:	1f 93       	push	r17
    3202:	df 93       	push	r29
    3204:	cf 93       	push	r28
    3206:	00 d0       	rcall	.+0      	; 0x3208 <zoI2cMasterSend+0x12>
    3208:	cd b7       	in	r28, 0x3d	; 61
    320a:	de b7       	in	r29, 0x3e	; 62
    320c:	d8 2e       	mov	r13, r24
    320e:	f6 2e       	mov	r15, r22
    3210:	e4 2e       	mov	r14, r20
    3212:	c5 2e       	mov	r12, r21
	u08 i;
	u16 timer;
	// wait for interface to be ready
	
	zoSystemTimerTimeOutInit(&timer);
    3214:	8e 01       	movw	r16, r28
    3216:	0f 5f       	subi	r16, 0xFF	; 255
    3218:	1f 4f       	sbci	r17, 0xFF	; 255
    321a:	c8 01       	movw	r24, r16
    321c:	0e 94 42 01 	call	0x284	; 0x284 <zoSystemTimerTimeOutInit>
	while(I2cState)
    3220:	80 91 71 02 	lds	r24, 0x0271
    3224:	88 23       	and	r24, r24
    3226:	d1 f0       	breq	.+52     	; 0x325c <zoI2cMasterSend+0x66>
	{
		if(zoSystemTimerTimeOutExpired(&timer,BusReadyTimeOut))
    3228:	60 91 64 01 	lds	r22, 0x0164
    322c:	70 91 65 01 	lds	r23, 0x0165
    3230:	c8 01       	movw	r24, r16
    3232:	0e 94 78 01 	call	0x2f0	; 0x2f0 <zoSystemTimerTimeOutExpired>
    3236:	88 23       	and	r24, r24
    3238:	99 f3       	breq	.-26     	; 0x3220 <zoI2cMasterSend+0x2a>
		{
			zoErrorPut(&zoI2cError,ZO_I2C_ERROR_WAIT_ON_BUS_READY_TIMEOUT);
    323a:	84 e6       	ldi	r24, 0x64	; 100
    323c:	92 e0       	ldi	r25, 0x02	; 2
    323e:	65 e0       	ldi	r22, 0x05	; 5
    3240:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <zoErrorPut>
    3244:	80 e0       	ldi	r24, 0x00	; 0
	I2cSendDataLength = length;
	// send start condition
	zoI2cSendStart();

	return TRUE;
}
    3246:	0f 90       	pop	r0
    3248:	0f 90       	pop	r0
    324a:	cf 91       	pop	r28
    324c:	df 91       	pop	r29
    324e:	1f 91       	pop	r17
    3250:	0f 91       	pop	r16
    3252:	ff 90       	pop	r15
    3254:	ef 90       	pop	r14
    3256:	df 90       	pop	r13
    3258:	cf 90       	pop	r12
    325a:	08 95       	ret
			return FALSE;
		}
	}

	// set state
	I2cState = I2C_MASTER_TX;
    325c:	82 e0       	ldi	r24, 0x02	; 2
    325e:	80 93 71 02 	sts	0x0271, r24
	// save data
	I2cDeviceAddrRW = ((deviceAddr<<1) & 0xFE);	// RW cleared: write operation
    3262:	8d 2d       	mov	r24, r13
    3264:	90 e0       	ldi	r25, 0x00	; 0
    3266:	88 0f       	add	r24, r24
    3268:	99 1f       	adc	r25, r25
    326a:	80 93 72 02 	sts	0x0272, r24
	for(i=0; i<length; i++)
    326e:	ff 20       	and	r15, r15
    3270:	61 f0       	breq	.+24     	; 0x328a <zoI2cMasterSend+0x94>
    3272:	a3 e7       	ldi	r26, 0x73	; 115
    3274:	b2 e0       	ldi	r27, 0x02	; 2
    3276:	8e 2d       	mov	r24, r14
    3278:	9c 2d       	mov	r25, r12
    327a:	9c 01       	movw	r18, r24
    327c:	f9 01       	movw	r30, r18
		I2cSendData[i] = *data++;
    327e:	81 91       	ld	r24, Z+
    3280:	8d 93       	st	X+, r24

	// set state
	I2cState = I2C_MASTER_TX;
	// save data
	I2cDeviceAddrRW = ((deviceAddr<<1) & 0xFE);	// RW cleared: write operation
	for(i=0; i<length; i++)
    3282:	8e 2f       	mov	r24, r30
    3284:	8e 19       	sub	r24, r14
    3286:	8f 15       	cp	r24, r15
    3288:	d0 f3       	brcs	.-12     	; 0x327e <zoI2cMasterSend+0x88>
		I2cSendData[i] = *data++;
	I2cSendDataIndex = 0;
    328a:	10 92 93 02 	sts	0x0293, r1
	I2cSendDataLength = length;
    328e:	f0 92 94 02 	sts	0x0294, r15
}

inline void zoI2cSendStart(void)
{
	// send start condition
	TWCR = (TWCR & TWCR_CMD_MASK)|_BV(TWINT)|_BV(TWSTA);
    3292:	80 91 bc 00 	lds	r24, 0x00BC
    3296:	8f 70       	andi	r24, 0x0F	; 15
    3298:	80 6a       	ori	r24, 0xA0	; 160
    329a:	80 93 bc 00 	sts	0x00BC, r24
    329e:	8f ef       	ldi	r24, 0xFF	; 255
    32a0:	d2 cf       	rjmp	.-92     	; 0x3246 <zoI2cMasterSend+0x50>

000032a2 <zoI2cMasterSendBlocking>:

	return TRUE;
}

bool zoI2cMasterSendBlocking(u08 deviceAddr, u08 length, u08 *data)
{
    32a2:	0f 93       	push	r16
    32a4:	1f 93       	push	r17
    32a6:	df 93       	push	r29
    32a8:	cf 93       	push	r28
    32aa:	00 d0       	rcall	.+0      	; 0x32ac <zoI2cMasterSendBlocking+0xa>
    32ac:	cd b7       	in	r28, 0x3d	; 61
    32ae:	de b7       	in	r29, 0x3e	; 62
	u16 timer;

	if( !zoI2cMasterSend(deviceAddr,length,data) )
    32b0:	0e 94 fb 18 	call	0x31f6	; 0x31f6 <zoI2cMasterSend>
    32b4:	88 23       	and	r24, r24
    32b6:	39 f4       	brne	.+14     	; 0x32c6 <zoI2cMasterSendBlocking+0x24>
			return FALSE;
		}
	}

	return(zoErrorIsEmpty(&zoI2cError));
}
    32b8:	0f 90       	pop	r0
    32ba:	0f 90       	pop	r0
    32bc:	cf 91       	pop	r28
    32be:	df 91       	pop	r29
    32c0:	1f 91       	pop	r17
    32c2:	0f 91       	pop	r16
    32c4:	08 95       	ret

	if( !zoI2cMasterSend(deviceAddr,length,data) )
		return FALSE;
		
	//wait on transmission of data
	zoSystemTimerTimeOutInit(&timer);
    32c6:	8e 01       	movw	r16, r28
    32c8:	0f 5f       	subi	r16, 0xFF	; 255
    32ca:	1f 4f       	sbci	r17, 0xFF	; 255
    32cc:	c8 01       	movw	r24, r16
    32ce:	0e 94 42 01 	call	0x284	; 0x284 <zoSystemTimerTimeOutInit>
	while(I2cState != I2C_IDLE)
    32d2:	80 91 71 02 	lds	r24, 0x0271
    32d6:	88 23       	and	r24, r24
    32d8:	b1 f0       	breq	.+44     	; 0x3306 <zoI2cMasterSendBlocking+0x64>
	{
		if(zoSystemTimerTimeOutExpired(&timer,TransmitTimeOut))
    32da:	60 91 62 01 	lds	r22, 0x0162
    32de:	70 91 63 01 	lds	r23, 0x0163
    32e2:	c8 01       	movw	r24, r16
    32e4:	0e 94 78 01 	call	0x2f0	; 0x2f0 <zoSystemTimerTimeOutExpired>
    32e8:	88 23       	and	r24, r24
    32ea:	99 f3       	breq	.-26     	; 0x32d2 <zoI2cMasterSendBlocking+0x30>
		{
			zoErrorPut(&zoI2cError,ZO_I2C_ERROR_WAIT_ON_TRANSMIT_TIMEOUT);
    32ec:	84 e6       	ldi	r24, 0x64	; 100
    32ee:	92 e0       	ldi	r25, 0x02	; 2
    32f0:	66 e0       	ldi	r22, 0x06	; 6
    32f2:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <zoErrorPut>
    32f6:	80 e0       	ldi	r24, 0x00	; 0
			return FALSE;
		}
	}

	return(zoErrorIsEmpty(&zoI2cError));
}
    32f8:	0f 90       	pop	r0
    32fa:	0f 90       	pop	r0
    32fc:	cf 91       	pop	r28
    32fe:	df 91       	pop	r29
    3300:	1f 91       	pop	r17
    3302:	0f 91       	pop	r16
    3304:	08 95       	ret
			zoErrorPut(&zoI2cError,ZO_I2C_ERROR_WAIT_ON_TRANSMIT_TIMEOUT);
			return FALSE;
		}
	}

	return(zoErrorIsEmpty(&zoI2cError));
    3306:	84 e6       	ldi	r24, 0x64	; 100
    3308:	92 e0       	ldi	r25, 0x02	; 2
    330a:	0e 94 ad 00 	call	0x15a	; 0x15a <zoErrorIsEmpty>
    330e:	d4 cf       	rjmp	.-88     	; 0x32b8 <zoI2cMasterSendBlocking+0x16>

00003310 <zoI2cInit>:
// functions
void zoI2cInit(void)
{
	// set pull-up resistors on I2C bus pins
	// TODO: should #ifdef these to support other processors
	PORTC |= _BV(4);	// i2c SCL on ATmega8,48,88,168
    3310:	44 9a       	sbi	0x08, 4	; 8
	PORTC |= _BV(5);	// i2c SDA on ATmega8,48,88,168
    3312:	45 9a       	sbi	0x08, 5	; 8

	// clear SlaveReceive and SlaveTransmit handler to null
	zoI2cSlaveReceive = 0;
    3314:	10 92 b8 02 	sts	0x02B8, r1
    3318:	10 92 b7 02 	sts	0x02B7, r1
	zoI2cSlaveTransmit = 0;
    331c:	10 92 ba 02 	sts	0x02BA, r1
    3320:	10 92 b9 02 	sts	0x02B9, r1

	//initialize functors for isr
	zoI2cFunctorInit();
    3324:	0e 94 28 18 	call	0x3050	; 0x3050 <zoI2cFunctorInit>
	
	//initialize error buffer
	zoErrorInit(&zoI2cError);
    3328:	84 e6       	ldi	r24, 0x64	; 100
    332a:	92 e0       	ldi	r25, 0x02	; 2
    332c:	0e 94 53 00 	call	0xa6	; 0xa6 <zoErrorInit>

	//initialize system timer
	zoSystemTimerInit();
    3330:	0e 94 10 01 	call	0x220	; 0x220 <zoSystemTimerInit>
		
	// set i2c bit rate to 100KHz
	zoI2cSetBitrate(ZO_I2C_DEFAULT_BITRATE_KHZ);
    3334:	84 e6       	ldi	r24, 0x64	; 100
    3336:	90 e0       	ldi	r25, 0x00	; 0
    3338:	0e 94 db 16 	call	0x2db6	; 0x2db6 <zoI2cSetBitrate>
	// enable TWI (two-wire interface)
	TWCR |= _BV(TWEN);
    333c:	ec eb       	ldi	r30, 0xBC	; 188
    333e:	f0 e0       	ldi	r31, 0x00	; 0
    3340:	80 81       	ld	r24, Z
    3342:	84 60       	ori	r24, 0x04	; 4
    3344:	80 83       	st	Z, r24
	// set state
	I2cState = I2C_IDLE;
    3346:	10 92 71 02 	sts	0x0271, r1
	// enable TWI interrupt and slave address ACK
	TWCR |= _BV(TWIE);
    334a:	80 81       	ld	r24, Z
    334c:	81 60       	ori	r24, 0x01	; 1
    334e:	80 83       	st	Z, r24
	TWCR |= _BV(TWEA);
    3350:	80 81       	ld	r24, Z
    3352:	80 64       	ori	r24, 0x40	; 64
    3354:	80 83       	st	Z, r24
	
	//outb(TWCR, (inb(TWCR)&TWCR_CMD_MASK)|BV(TWINT)|BV(TWEA));
	// enable interrupts
	sei();
    3356:	78 94       	sei
}
    3358:	08 95       	ret

0000335a <zoI2cFunctorSrDataNack>:
inline void zoI2cAcknowledgeRx(bool acknowledge)
{
	if( acknowledge )
		TWCR = (TWCR & TWCR_CMD_MASK)|_BV(TWINT)|_BV(TWEA);
	else
		TWCR = (TWCR & TWCR_CMD_MASK)|_BV(TWINT);
    335a:	ec eb       	ldi	r30, 0xBC	; 188
    335c:	f0 e0       	ldi	r31, 0x00	; 0
    335e:	80 81       	ld	r24, Z
    3360:	8f 70       	andi	r24, 0x0F	; 15
    3362:	80 68       	ori	r24, 0x80	; 128
    3364:	80 83       	st	Z, r24
//0x11, 0x13: data byte has been received, NACK has been returned 
void zoI2cFunctorSrDataNack(void)
{
	// receive data byte and return NACK
	zoI2cAcknowledgeRx(FALSE);
}
    3366:	08 95       	ret

00003368 <zoI2cFunctorMrSlaveAck>:
}

//0x08: Slave address acknowledged
void zoI2cFunctorMrSlaveAck(void)
{
	if(I2cReceiveDataIndex < (I2cReceiveDataLength-1))
    3368:	20 91 b5 02 	lds	r18, 0x02B5
    336c:	30 e0       	ldi	r19, 0x00	; 0
    336e:	80 91 b6 02 	lds	r24, 0x02B6
    3372:	90 e0       	ldi	r25, 0x00	; 0
    3374:	01 97       	sbiw	r24, 0x01	; 1
    3376:	28 17       	cp	r18, r24
    3378:	39 07       	cpc	r19, r25
    337a:	3c f0       	brlt	.+14     	; 0x338a <zoI2cFunctorMrSlaveAck+0x22>
inline void zoI2cAcknowledgeRx(bool acknowledge)
{
	if( acknowledge )
		TWCR = (TWCR & TWCR_CMD_MASK)|_BV(TWINT)|_BV(TWEA);
	else
		TWCR = (TWCR & TWCR_CMD_MASK)|_BV(TWINT);
    337c:	80 91 bc 00 	lds	r24, 0x00BC
    3380:	8f 70       	andi	r24, 0x0F	; 15
    3382:	80 68       	ori	r24, 0x80	; 128
    3384:	80 93 bc 00 	sts	0x00BC, r24
    3388:	08 95       	ret
}

inline void zoI2cAcknowledgeRx(bool acknowledge)
{
	if( acknowledge )
		TWCR = (TWCR & TWCR_CMD_MASK)|_BV(TWINT)|_BV(TWEA);
    338a:	80 91 bc 00 	lds	r24, 0x00BC
    338e:	8f 70       	andi	r24, 0x0F	; 15
    3390:	80 6c       	ori	r24, 0xC0	; 192
    3392:	80 93 bc 00 	sts	0x00BC, r24
    3396:	08 95       	ret

00003398 <zoI2cFunctorSrDataAck>:

// 0x10, 0x12: data byte has been received, ACK has been returned 
void zoI2cFunctorSrDataAck(void)
{
	// get previously received data byte
	I2cReceiveData[I2cReceiveDataIndex++] = TWDR;
    3398:	80 91 b5 02 	lds	r24, 0x02B5
    339c:	90 91 bb 00 	lds	r25, 0x00BB
    33a0:	e8 2f       	mov	r30, r24
    33a2:	f0 e0       	ldi	r31, 0x00	; 0
    33a4:	eb 56       	subi	r30, 0x6B	; 107
    33a6:	fd 4f       	sbci	r31, 0xFD	; 253
    33a8:	90 83       	st	Z, r25
    33aa:	8f 5f       	subi	r24, 0xFF	; 255
    33ac:	80 93 b5 02 	sts	0x02B5, r24
	// check receive buffer status
	if(I2cReceiveDataIndex < ZO_I2C_BUFFER_SIZE)
    33b0:	80 32       	cpi	r24, 0x20	; 32
    33b2:	38 f0       	brcs	.+14     	; 0x33c2 <zoI2cFunctorSrDataAck+0x2a>
inline void zoI2cAcknowledgeRx(bool acknowledge)
{
	if( acknowledge )
		TWCR = (TWCR & TWCR_CMD_MASK)|_BV(TWINT)|_BV(TWEA);
	else
		TWCR = (TWCR & TWCR_CMD_MASK)|_BV(TWINT);
    33b4:	80 91 bc 00 	lds	r24, 0x00BC
    33b8:	8f 70       	andi	r24, 0x0F	; 15
    33ba:	80 68       	ori	r24, 0x80	; 128
    33bc:	80 93 bc 00 	sts	0x00BC, r24
    33c0:	08 95       	ret
}

inline void zoI2cAcknowledgeRx(bool acknowledge)
{
	if( acknowledge )
		TWCR = (TWCR & TWCR_CMD_MASK)|_BV(TWINT)|_BV(TWEA);
    33c2:	80 91 bc 00 	lds	r24, 0x00BC
    33c6:	8f 70       	andi	r24, 0x0F	; 15
    33c8:	80 6c       	ori	r24, 0xC0	; 192
    33ca:	80 93 bc 00 	sts	0x00BC, r24
    33ce:	08 95       	ret

000033d0 <zoI2cFunctorMrDataAck>:

//0x0A: Data acknowledged
void zoI2cFunctorMrDataAck(void)
{
	// store received data byte
	I2cReceiveData[I2cReceiveDataIndex++] = TWDR;
    33d0:	20 91 b5 02 	lds	r18, 0x02B5
    33d4:	80 91 bb 00 	lds	r24, 0x00BB
    33d8:	e2 2f       	mov	r30, r18
    33da:	f0 e0       	ldi	r31, 0x00	; 0
    33dc:	eb 56       	subi	r30, 0x6B	; 107
    33de:	fd 4f       	sbci	r31, 0xFD	; 253
    33e0:	80 83       	st	Z, r24
    33e2:	2f 5f       	subi	r18, 0xFF	; 255
    33e4:	20 93 b5 02 	sts	0x02B5, r18

	if(I2cReceiveDataIndex < (I2cReceiveDataLength-1))
    33e8:	30 e0       	ldi	r19, 0x00	; 0
    33ea:	80 91 b6 02 	lds	r24, 0x02B6
    33ee:	90 e0       	ldi	r25, 0x00	; 0
    33f0:	01 97       	sbiw	r24, 0x01	; 1
    33f2:	28 17       	cp	r18, r24
    33f4:	39 07       	cpc	r19, r25
    33f6:	3c f0       	brlt	.+14     	; 0x3406 <zoI2cFunctorMrDataAck+0x36>
inline void zoI2cAcknowledgeRx(bool acknowledge)
{
	if( acknowledge )
		TWCR = (TWCR & TWCR_CMD_MASK)|_BV(TWINT)|_BV(TWEA);
	else
		TWCR = (TWCR & TWCR_CMD_MASK)|_BV(TWINT);
    33f8:	80 91 bc 00 	lds	r24, 0x00BC
    33fc:	8f 70       	andi	r24, 0x0F	; 15
    33fe:	80 68       	ori	r24, 0x80	; 128
    3400:	80 93 bc 00 	sts	0x00BC, r24
    3404:	08 95       	ret
}

inline void zoI2cAcknowledgeRx(bool acknowledge)
{
	if( acknowledge )
		TWCR = (TWCR & TWCR_CMD_MASK)|_BV(TWINT)|_BV(TWEA);
    3406:	80 91 bc 00 	lds	r24, 0x00BC
    340a:	8f 70       	andi	r24, 0x0F	; 15
    340c:	80 6c       	ori	r24, 0xC0	; 192
    340e:	80 93 bc 00 	sts	0x00BC, r24
    3412:	08 95       	ret

00003414 <zoProtocolI2cSetLAM>:
	zoRxPacketReceived = TRUE;
}

inline void zoProtocolI2cSetLAM(u08 localAcceptanceMask)
{
	TWAMR = (~localAcceptanceMask)<<1;
    3414:	80 95       	com	r24
    3416:	88 0f       	add	r24, r24
    3418:	80 93 bd 00 	sts	0x00BD, r24
}
    341c:	08 95       	ret

0000341e <zoProtocolI2cSetBitrate>:

inline bool zoProtocolI2cSetBitrate(u32 bitsPerSecond)
{
	return (zoI2cSetBitrate(bitsPerSecond/1000));
    341e:	28 ee       	ldi	r18, 0xE8	; 232
    3420:	33 e0       	ldi	r19, 0x03	; 3
    3422:	40 e0       	ldi	r20, 0x00	; 0
    3424:	50 e0       	ldi	r21, 0x00	; 0
    3426:	0e 94 3b 25 	call	0x4a76	; 0x4a76 <__udivmodsi4>
    342a:	da 01       	movw	r26, r20
    342c:	c9 01       	movw	r24, r18
    342e:	0e 94 db 16 	call	0x2db6	; 0x2db6 <zoI2cSetBitrate>
}
    3432:	08 95       	ret

00003434 <zoProtocolI2cGetPacket>:
									  (packet->byteCount + 5),
									  str));
}

bool zoProtocolI2cGetPacket(ZO_PROTOCOL_PACKET* packet)
{
    3434:	cf 93       	push	r28
    3436:	df 93       	push	r29
    3438:	ec 01       	movw	r28, r24
	u08 i;

	if( !zoErrorIsEmpty(zoProtocolI2cError) )
    343a:	80 91 68 01 	lds	r24, 0x0168
    343e:	90 91 69 01 	lds	r25, 0x0169
    3442:	0e 94 ad 00 	call	0x15a	; 0x15a <zoErrorIsEmpty>
    3446:	88 23       	and	r24, r24
    3448:	21 f0       	breq	.+8      	; 0x3452 <zoProtocolI2cGetPacket+0x1e>
		return FALSE;

	if( zoRxPacketReceived )
    344a:	80 91 fb 02 	lds	r24, 0x02FB
    344e:	88 23       	and	r24, r24
    3450:	21 f4       	brne	.+8      	; 0x345a <zoProtocolI2cGetPacket+0x26>
			packet->data[i] = RxPacket.data[i];
		
		//indicate received packet was used
		zoRxPacketReceived = FALSE;
		exitCritical();
		return TRUE;
    3452:	80 e0       	ldi	r24, 0x00	; 0
	}
	else
		return FALSE;
}
    3454:	df 91       	pop	r29
    3456:	cf 91       	pop	r28
    3458:	08 95       	ret
	if( !zoErrorIsEmpty(zoProtocolI2cError) )
		return FALSE;

	if( zoRxPacketReceived )
	{
		enterCritical();
    345a:	0f b6       	in	r0, 0x3f	; 63
    345c:	0f 92       	push	r0
    345e:	f8 94       	cli
		//copy buffered packet
		packet->AddressedNodeID = RxPacket.AddressedNodeID;		
    3460:	80 91 fc 02 	lds	r24, 0x02FC
    3464:	88 83       	st	Y, r24
		packet->OwnNodeID = RxPacket.OwnNodeID;
    3466:	80 91 fd 02 	lds	r24, 0x02FD
    346a:	89 83       	std	Y+1, r24	; 0x01
		packet->commandID = RxPacket.commandID;
    346c:	80 91 fe 02 	lds	r24, 0x02FE
    3470:	8a 83       	std	Y+2, r24	; 0x02
		packet->byteCount = RxPacket.byteCount;
    3472:	20 91 ff 02 	lds	r18, 0x02FF
    3476:	2b 83       	std	Y+3, r18	; 0x03
		packet->lrc = RxPacket.lrc;
    3478:	80 91 10 03 	lds	r24, 0x0310
    347c:	8c 8b       	std	Y+20, r24	; 0x14
		
		for(i=0;i<packet->byteCount;i++)
    347e:	22 23       	and	r18, r18
    3480:	71 f0       	breq	.+28     	; 0x349e <zoProtocolI2cGetPacket+0x6a>
    3482:	90 e0       	ldi	r25, 0x00	; 0
			packet->data[i] = RxPacket.data[i];
    3484:	e9 2f       	mov	r30, r25
    3486:	f0 e0       	ldi	r31, 0x00	; 0
    3488:	df 01       	movw	r26, r30
    348a:	a4 50       	subi	r26, 0x04	; 4
    348c:	bd 4f       	sbci	r27, 0xFD	; 253
    348e:	14 96       	adiw	r26, 0x04	; 4
    3490:	8c 91       	ld	r24, X
    3492:	ec 0f       	add	r30, r28
    3494:	fd 1f       	adc	r31, r29
    3496:	84 83       	std	Z+4, r24	; 0x04
		packet->OwnNodeID = RxPacket.OwnNodeID;
		packet->commandID = RxPacket.commandID;
		packet->byteCount = RxPacket.byteCount;
		packet->lrc = RxPacket.lrc;
		
		for(i=0;i<packet->byteCount;i++)
    3498:	9f 5f       	subi	r25, 0xFF	; 255
    349a:	92 17       	cp	r25, r18
    349c:	98 f3       	brcs	.-26     	; 0x3484 <zoProtocolI2cGetPacket+0x50>
			packet->data[i] = RxPacket.data[i];
		
		//indicate received packet was used
		zoRxPacketReceived = FALSE;
    349e:	10 92 fb 02 	sts	0x02FB, r1
		exitCritical();
    34a2:	0f 90       	pop	r0
    34a4:	0f be       	out	0x3f, r0	; 63
    34a6:	8f ef       	ldi	r24, 0xFF	; 255
    34a8:	d5 cf       	rjmp	.-86     	; 0x3454 <zoProtocolI2cGetPacket+0x20>

000034aa <zoProtocolI2cPutPacket>:
	//assign slave receive handler
	zoI2cSetSlaveReceiveHandler(i2cSlaveRx);
}

bool zoProtocolI2cPutPacket(const ZO_PROTOCOL_PACKET* packet)
{
    34aa:	df 93       	push	r29
    34ac:	cf 93       	push	r28
    34ae:	cd b7       	in	r28, 0x3d	; 61
    34b0:	de b7       	in	r29, 0x3e	; 62
    34b2:	65 97       	sbiw	r28, 0x15	; 21
    34b4:	0f b6       	in	r0, 0x3f	; 63
    34b6:	f8 94       	cli
    34b8:	de bf       	out	0x3e, r29	; 62
    34ba:	0f be       	out	0x3f, r0	; 63
    34bc:	cd bf       	out	0x3d, r28	; 61
    34be:	9c 01       	movw	r18, r24
	u08 str[ZO_PROTOCOL_PACKET_SIZE];
	u08 i;

	str[0] = packet->AddressedNodeID;
    34c0:	fc 01       	movw	r30, r24
    34c2:	80 81       	ld	r24, Z
    34c4:	89 83       	std	Y+1, r24	; 0x01
	str[1] = packet->OwnNodeID;
    34c6:	81 81       	ldd	r24, Z+1	; 0x01
    34c8:	8a 83       	std	Y+2, r24	; 0x02
	str[2] = packet->commandID;
    34ca:	82 81       	ldd	r24, Z+2	; 0x02
    34cc:	8b 83       	std	Y+3, r24	; 0x03
	str[3] = packet->byteCount;
    34ce:	83 81       	ldd	r24, Z+3	; 0x03
    34d0:	8c 83       	std	Y+4, r24	; 0x04
	
	for( i=0; i< packet->byteCount; i++ )
    34d2:	88 23       	and	r24, r24
    34d4:	51 f1       	breq	.+84     	; 0x352a <zoProtocolI2cPutPacket+0x80>
    34d6:	90 e0       	ldi	r25, 0x00	; 0
    34d8:	ae 01       	movw	r20, r28
    34da:	4b 5f       	subi	r20, 0xFB	; 251
    34dc:	5f 4f       	sbci	r21, 0xFF	; 255
		str[4+i] = packet->data[i];
    34de:	e9 2f       	mov	r30, r25
    34e0:	f0 e0       	ldi	r31, 0x00	; 0
    34e2:	da 01       	movw	r26, r20
    34e4:	ae 0f       	add	r26, r30
    34e6:	bf 1f       	adc	r27, r31
    34e8:	e2 0f       	add	r30, r18
    34ea:	f3 1f       	adc	r31, r19
    34ec:	84 81       	ldd	r24, Z+4	; 0x04
    34ee:	8c 93       	st	X, r24
	str[0] = packet->AddressedNodeID;
	str[1] = packet->OwnNodeID;
	str[2] = packet->commandID;
	str[3] = packet->byteCount;
	
	for( i=0; i< packet->byteCount; i++ )
    34f0:	9f 5f       	subi	r25, 0xFF	; 255
    34f2:	f9 01       	movw	r30, r18
    34f4:	83 81       	ldd	r24, Z+3	; 0x03
    34f6:	98 17       	cp	r25, r24
    34f8:	90 f3       	brcs	.-28     	; 0x34de <zoProtocolI2cPutPacket+0x34>
		str[4+i] = packet->data[i];

	str[(packet->byteCount + 4)] = packet->lrc;
    34fa:	48 0f       	add	r20, r24
    34fc:	51 1d       	adc	r21, r1
    34fe:	f9 01       	movw	r30, r18
    3500:	84 89       	ldd	r24, Z+20	; 0x14
    3502:	fa 01       	movw	r30, r20
    3504:	80 83       	st	Z, r24
	
	return ( zoI2cMasterSendBlocking(packet->AddressedNodeID,
    3506:	f9 01       	movw	r30, r18
    3508:	63 81       	ldd	r22, Z+3	; 0x03
    350a:	6b 5f       	subi	r22, 0xFB	; 251
    350c:	80 81       	ld	r24, Z
    350e:	ae 01       	movw	r20, r28
    3510:	4f 5f       	subi	r20, 0xFF	; 255
    3512:	5f 4f       	sbci	r21, 0xFF	; 255
    3514:	0e 94 51 19 	call	0x32a2	; 0x32a2 <zoI2cMasterSendBlocking>
									  (packet->byteCount + 5),
									  str));
}
    3518:	65 96       	adiw	r28, 0x15	; 21
    351a:	0f b6       	in	r0, 0x3f	; 63
    351c:	f8 94       	cli
    351e:	de bf       	out	0x3e, r29	; 62
    3520:	0f be       	out	0x3f, r0	; 63
    3522:	cd bf       	out	0x3d, r28	; 61
    3524:	cf 91       	pop	r28
    3526:	df 91       	pop	r29
    3528:	08 95       	ret
    352a:	ae 01       	movw	r20, r28
    352c:	4b 5f       	subi	r20, 0xFB	; 251
    352e:	5f 4f       	sbci	r21, 0xFF	; 255
    3530:	e4 cf       	rjmp	.-56     	; 0x34fa <zoProtocolI2cPutPacket+0x50>

00003532 <zoProtocolI2cInit>:
ZO_ERROR *zoProtocolI2cError = &zoI2cError;

//ZO_ERROR zoProtocolI2cError = ZO_ERROR_DEFAULTS;

void zoProtocolI2cInit(u08 ownNodeID, u16 kBps)
{
    3532:	ff 92       	push	r15
    3534:	0f 93       	push	r16
    3536:	1f 93       	push	r17
    3538:	f8 2e       	mov	r15, r24
    353a:	8b 01       	movw	r16, r22
	//initialize with default baud rate of 100KHz
	zoI2cInit();
    353c:	0e 94 88 19 	call	0x3310	; 0x3310 <zoI2cInit>
	zoI2cSetLocalDeviceAddr(ownNodeID,1);
    3540:	8f 2d       	mov	r24, r15
    3542:	61 e0       	ldi	r22, 0x01	; 1
    3544:	0e 94 f2 16 	call	0x2de4	; 0x2de4 <zoI2cSetLocalDeviceAddr>
	zoI2cSetBitrate(kBps);
    3548:	c8 01       	movw	r24, r16
    354a:	0e 94 db 16 	call	0x2db6	; 0x2db6 <zoI2cSetBitrate>
	//assign slave receive handler
	zoI2cSetSlaveReceiveHandler(i2cSlaveRx);
    354e:	8f ea       	ldi	r24, 0xAF	; 175
    3550:	9a e1       	ldi	r25, 0x1A	; 26
    3552:	0e 94 12 17 	call	0x2e24	; 0x2e24 <zoI2cSetSlaveReceiveHandler>
}
    3556:	1f 91       	pop	r17
    3558:	0f 91       	pop	r16
    355a:	ff 90       	pop	r15
    355c:	08 95       	ret

0000355e <i2cSlaveRx>:
	else
		return FALSE;
}

void i2cSlaveRx(u08 rxLength,u08* rxData)
{
    355e:	1f 93       	push	r17
    3560:	cf 93       	push	r28
    3562:	df 93       	push	r29
    3564:	18 2f       	mov	r17, r24
    3566:	eb 01       	movw	r28, r22
	u08 i;
	
	if(zoRxPacketReceived == TRUE)
    3568:	80 91 fb 02 	lds	r24, 0x02FB
    356c:	8f 3f       	cpi	r24, 0xFF	; 255
    356e:	09 f4       	brne	.+2      	; 0x3572 <i2cSlaveRx+0x14>
    3570:	46 c0       	rjmp	.+140    	; 0x35fe <i2cSlaveRx+0xa0>
		zoErrorPutIsr(zoProtocolI2cError,ZO_PROTOCOL_I2C_ERROR_RX_PACKET_OVERWRITTEN);

	RxPacket.AddressedNodeID = *rxData++;
    3572:	fe 01       	movw	r30, r28
    3574:	81 91       	ld	r24, Z+
    3576:	80 93 fc 02 	sts	0x02FC, r24
	RxPacket.OwnNodeID = *rxData++;
    357a:	89 81       	ldd	r24, Y+1	; 0x01
    357c:	80 93 fd 02 	sts	0x02FD, r24
    3580:	df 01       	movw	r26, r30
    3582:	11 96       	adiw	r26, 0x01	; 1
	RxPacket.commandID = *rxData++;
    3584:	81 81       	ldd	r24, Z+1	; 0x01
    3586:	80 93 fe 02 	sts	0x02FE, r24
    358a:	ad 01       	movw	r20, r26
    358c:	4f 5f       	subi	r20, 0xFF	; 255
    358e:	5f 4f       	sbci	r21, 0xFF	; 255
	RxPacket.byteCount = *rxData++;
    3590:	11 96       	adiw	r26, 0x01	; 1
    3592:	8c 91       	ld	r24, X
    3594:	80 93 ff 02 	sts	0x02FF, r24
	
	if( (RxPacket.byteCount + ZO_PROTOCOL_INFO_SIZE) != rxLength)
    3598:	80 91 ff 02 	lds	r24, 0x02FF
    359c:	90 e0       	ldi	r25, 0x00	; 0
    359e:	05 96       	adiw	r24, 0x05	; 5
    35a0:	21 2f       	mov	r18, r17
    35a2:	30 e0       	ldi	r19, 0x00	; 0
    35a4:	82 17       	cp	r24, r18
    35a6:	93 07       	cpc	r25, r19
    35a8:	e1 f4       	brne	.+56     	; 0x35e2 <i2cSlaveRx+0x84>
		zoErrorPutIsr(zoProtocolI2cError,ZO_PROTOCOL_I2C_ERROR_RX_PACKET_OVERWRITTEN);

	RxPacket.AddressedNodeID = *rxData++;
	RxPacket.OwnNodeID = *rxData++;
	RxPacket.commandID = *rxData++;
	RxPacket.byteCount = *rxData++;
    35aa:	da 01       	movw	r26, r20
    35ac:	11 96       	adiw	r26, 0x01	; 1
		zoErrorPutIsr(zoProtocolI2cError,ZO_PROTOCOL_I2C_ERROR_INVALID_RX_BYTECOUNT);
		zoRxPacketReceived = TRUE;
		return;
	}

	for( i=0; i < RxPacket.byteCount ; i++ )
    35ae:	80 91 ff 02 	lds	r24, 0x02FF
    35b2:	88 23       	and	r24, r24
    35b4:	61 f0       	breq	.+24     	; 0x35ce <i2cSlaveRx+0x70>
	
	if( (RxPacket.byteCount + ZO_PROTOCOL_INFO_SIZE) != rxLength)
	{
		zoErrorPutIsr(zoProtocolI2cError,ZO_PROTOCOL_I2C_ERROR_INVALID_RX_BYTECOUNT);
		zoRxPacketReceived = TRUE;
		return;
    35b6:	90 e0       	ldi	r25, 0x00	; 0
	}

	for( i=0; i < RxPacket.byteCount ; i++ )
		RxPacket.data[i] = *rxData++;
    35b8:	e9 2f       	mov	r30, r25
    35ba:	f0 e0       	ldi	r31, 0x00	; 0
    35bc:	8d 91       	ld	r24, X+
    35be:	e4 50       	subi	r30, 0x04	; 4
    35c0:	fd 4f       	sbci	r31, 0xFD	; 253
    35c2:	84 83       	std	Z+4, r24	; 0x04
		zoErrorPutIsr(zoProtocolI2cError,ZO_PROTOCOL_I2C_ERROR_INVALID_RX_BYTECOUNT);
		zoRxPacketReceived = TRUE;
		return;
	}

	for( i=0; i < RxPacket.byteCount ; i++ )
    35c4:	9f 5f       	subi	r25, 0xFF	; 255
    35c6:	80 91 ff 02 	lds	r24, 0x02FF
    35ca:	98 17       	cp	r25, r24
    35cc:	a8 f3       	brcs	.-22     	; 0x35b8 <i2cSlaveRx+0x5a>
		RxPacket.data[i] = *rxData++;

	RxPacket.lrc = *rxData;
    35ce:	8c 91       	ld	r24, X
    35d0:	80 93 10 03 	sts	0x0310, r24

	//indicate we received a packet
	zoRxPacketReceived = TRUE;
    35d4:	8f ef       	ldi	r24, 0xFF	; 255
    35d6:	80 93 fb 02 	sts	0x02FB, r24
}
    35da:	df 91       	pop	r29
    35dc:	cf 91       	pop	r28
    35de:	1f 91       	pop	r17
    35e0:	08 95       	ret
	RxPacket.commandID = *rxData++;
	RxPacket.byteCount = *rxData++;
	
	if( (RxPacket.byteCount + ZO_PROTOCOL_INFO_SIZE) != rxLength)
	{
		zoErrorPutIsr(zoProtocolI2cError,ZO_PROTOCOL_I2C_ERROR_INVALID_RX_BYTECOUNT);
    35e2:	80 91 68 01 	lds	r24, 0x0168
    35e6:	90 91 69 01 	lds	r25, 0x0169
    35ea:	62 e1       	ldi	r22, 0x12	; 18
    35ec:	0e 94 86 00 	call	0x10c	; 0x10c <zoErrorPutIsr>
		zoRxPacketReceived = TRUE;
    35f0:	8f ef       	ldi	r24, 0xFF	; 255
    35f2:	80 93 fb 02 	sts	0x02FB, r24

	RxPacket.lrc = *rxData;

	//indicate we received a packet
	zoRxPacketReceived = TRUE;
}
    35f6:	df 91       	pop	r29
    35f8:	cf 91       	pop	r28
    35fa:	1f 91       	pop	r17
    35fc:	08 95       	ret
void i2cSlaveRx(u08 rxLength,u08* rxData)
{
	u08 i;
	
	if(zoRxPacketReceived == TRUE)
		zoErrorPutIsr(zoProtocolI2cError,ZO_PROTOCOL_I2C_ERROR_RX_PACKET_OVERWRITTEN);
    35fe:	80 91 68 01 	lds	r24, 0x0168
    3602:	90 91 69 01 	lds	r25, 0x0169
    3606:	61 e1       	ldi	r22, 0x11	; 17
    3608:	0e 94 86 00 	call	0x10c	; 0x10c <zoErrorPutIsr>
    360c:	b2 cf       	rjmp	.-156    	; 0x3572 <i2cSlaveRx+0x14>

0000360e <zoUartSetBaud>:

   return TRUE;
}

bool zoUartSetBaud(u32 baudRate)
{
    360e:	9b 01       	movw	r18, r22
    3610:	ac 01       	movw	r20, r24
	u32 ubrrReg = 0;

	//configure baud rate
	ubrrReg = (F_CPU/baudRate/8 - 1);
    3612:	60 ea       	ldi	r22, 0xA0	; 160
    3614:	75 e2       	ldi	r23, 0x25	; 37
    3616:	86 e2       	ldi	r24, 0x26	; 38
    3618:	90 e0       	ldi	r25, 0x00	; 0
    361a:	0e 94 3b 25 	call	0x4a76	; 0x4a76 <__udivmodsi4>
    361e:	21 50       	subi	r18, 0x01	; 1
    3620:	30 40       	sbci	r19, 0x00	; 0
    3622:	40 40       	sbci	r20, 0x00	; 0
    3624:	50 40       	sbci	r21, 0x00	; 0
	if( ( ubrrReg > 65535) || ( ubrrReg < 1 ) )
    3626:	da 01       	movw	r26, r20
    3628:	c9 01       	movw	r24, r18
    362a:	01 97       	sbiw	r24, 0x01	; 1
    362c:	a1 09       	sbc	r26, r1
    362e:	b1 09       	sbc	r27, r1
    3630:	8f 5f       	subi	r24, 0xFF	; 255
    3632:	9f 4f       	sbci	r25, 0xFF	; 255
    3634:	a0 40       	sbci	r26, 0x00	; 0
    3636:	b0 40       	sbci	r27, 0x00	; 0
    3638:	10 f0       	brcs	.+4      	; 0x363e <zoUartSetBaud+0x30>
    363a:	80 e0       	ldi	r24, 0x00	; 0
    363c:	08 95       	ret
		return FALSE;

	UBRR0H = (u08)((ubrrReg >> 8) & 0x00FF);		//baud rate divisor high byte
    363e:	bb 27       	eor	r27, r27
    3640:	a5 2f       	mov	r26, r21
    3642:	94 2f       	mov	r25, r20
    3644:	83 2f       	mov	r24, r19
    3646:	80 93 c5 00 	sts	0x00C5, r24
	UBRR0L = (u08)(ubrrReg & 0x00FF);				//baud rate divisor low byte
    364a:	20 93 c4 00 	sts	0x00C4, r18
    364e:	8f ef       	ldi	r24, 0xFF	; 255

	return TRUE;
}
    3650:	08 95       	ret

00003652 <zoUartSetDataBits>:

inline void zoUartSetDataBits(ZO_UART_DATA_BITS dataBits)
{
	UCSR0C = (UCSR0C & ~DATA_BITS_MASK_UCSR0C) | (dataBits & DATA_BITS_MASK_UCSR0C);
    3652:	e2 ec       	ldi	r30, 0xC2	; 194
    3654:	f0 e0       	ldi	r31, 0x00	; 0
    3656:	90 81       	ld	r25, Z
    3658:	28 2f       	mov	r18, r24
    365a:	26 70       	andi	r18, 0x06	; 6
    365c:	99 7f       	andi	r25, 0xF9	; 249
    365e:	29 2b       	or	r18, r25
    3660:	20 83       	st	Z, r18
	UCSR0B = (UCSR0B & ~DATA_BITS_MASK_UCSR0B) | ((dataBits>>1) & DATA_BITS_MASK_UCSR0B);
    3662:	e1 ec       	ldi	r30, 0xC1	; 193
    3664:	f0 e0       	ldi	r31, 0x00	; 0
    3666:	90 81       	ld	r25, Z
    3668:	86 95       	lsr	r24
    366a:	84 70       	andi	r24, 0x04	; 4
    366c:	9b 7f       	andi	r25, 0xFB	; 251
    366e:	98 2b       	or	r25, r24
    3670:	90 83       	st	Z, r25
}
    3672:	08 95       	ret

00003674 <zoUartSetParity>:

inline void zoUartSetParity(ZO_UART_PARITY parity)
{
	UCSR0C = (UCSR0C & ~PARITY_BITS_MASK)|parity;
    3674:	e2 ec       	ldi	r30, 0xC2	; 194
    3676:	f0 e0       	ldi	r31, 0x00	; 0
    3678:	90 81       	ld	r25, Z
    367a:	9f 7c       	andi	r25, 0xCF	; 207
    367c:	98 2b       	or	r25, r24
    367e:	90 83       	st	Z, r25
}
    3680:	08 95       	ret

00003682 <zoUartSetStopBits>:

inline void zoUartSetStopBits(ZO_UART_STOP_BITS stopBits)
{
	UCSR0C = (UCSR0C & ~STOP_BITS_MASK)|stopBits;
    3682:	e2 ec       	ldi	r30, 0xC2	; 194
    3684:	f0 e0       	ldi	r31, 0x00	; 0
    3686:	90 81       	ld	r25, Z
    3688:	9f 77       	andi	r25, 0x7F	; 127
    368a:	98 2b       	or	r25, r24
    368c:	90 83       	st	Z, r25
}
    368e:	08 95       	ret

00003690 <zoUartInitRs485>:

void zoUartInitRs485(volatile u08 *port, u08 pinConnectedToReDe)
{
    3690:	dc 01       	movw	r26, r24
	Rs485Used = TRUE;
    3692:	8f ef       	ldi	r24, 0xFF	; 255
    3694:	80 93 26 03 	sts	0x0326, r24
	Rs485ReDePort = port;
    3698:	b0 93 30 03 	sts	0x0330, r27
    369c:	a0 93 2f 03 	sts	0x032F, r26
	Rs485ReDePin = pinConnectedToReDe;
    36a0:	60 93 31 03 	sts	0x0331, r22

	*(port-1) |= _BV(pinConnectedToReDe);	//configure DDR register
    36a4:	fd 01       	movw	r30, r26
    36a6:	22 91       	ld	r18, -Z
    36a8:	81 e0       	ldi	r24, 0x01	; 1
    36aa:	90 e0       	ldi	r25, 0x00	; 0
    36ac:	02 c0       	rjmp	.+4      	; 0x36b2 <zoUartInitRs485+0x22>
    36ae:	88 0f       	add	r24, r24
    36b0:	99 1f       	adc	r25, r25
    36b2:	6a 95       	dec	r22
    36b4:	e2 f7       	brpl	.-8      	; 0x36ae <zoUartInitRs485+0x1e>
    36b6:	28 2b       	or	r18, r24
    36b8:	20 83       	st	Z, r18
	*port &= ~_BV(pinConnectedToReDe);		//configure PORT register 
    36ba:	2c 91       	ld	r18, X
    36bc:	80 95       	com	r24
    36be:	82 23       	and	r24, r18
    36c0:	8c 93       	st	X, r24
											//reset reDePin -> receive mode
	UCSR0B |= _BV(TXCIE0);					// Enable Transmit Complete Interrupt
    36c2:	e1 ec       	ldi	r30, 0xC1	; 193
    36c4:	f0 e0       	ldi	r31, 0x00	; 0
    36c6:	80 81       	ld	r24, Z
    36c8:	80 64       	ori	r24, 0x40	; 64
    36ca:	80 83       	st	Z, r24
}
    36cc:	08 95       	ret

000036ce <zoUartSetTransmitTimeOut>:
	}
}

inline void zoUartSetTransmitTimeOut(u16 miliseconds)
{
	TransmitTimeOut = miliseconds;
    36ce:	90 93 6b 01 	sts	0x016B, r25
    36d2:	80 93 6a 01 	sts	0x016A, r24
}
    36d6:	08 95       	ret

000036d8 <__vector_20>:
	else
        UCSR0B &= ~_BV(UDRIE0);			// Buffer empty, Disable Tx interrupts
}

ISR(USART_TX_vect)
{
    36d8:	1f 92       	push	r1
    36da:	0f 92       	push	r0
    36dc:	0f b6       	in	r0, 0x3f	; 63
    36de:	0f 92       	push	r0
    36e0:	11 24       	eor	r1, r1
    36e2:	2f 93       	push	r18
    36e4:	3f 93       	push	r19
    36e6:	8f 93       	push	r24
    36e8:	9f 93       	push	r25
    36ea:	ef 93       	push	r30
    36ec:	ff 93       	push	r31
	*Rs485ReDePort &= ~_BV(Rs485ReDePin);	// Clear RS485 Pin for receive mode
    36ee:	e0 91 2f 03 	lds	r30, 0x032F
    36f2:	f0 91 30 03 	lds	r31, 0x0330
    36f6:	30 81       	ld	r19, Z
    36f8:	20 91 31 03 	lds	r18, 0x0331
    36fc:	81 e0       	ldi	r24, 0x01	; 1
    36fe:	90 e0       	ldi	r25, 0x00	; 0
    3700:	02 c0       	rjmp	.+4      	; 0x3706 <__vector_20+0x2e>
    3702:	88 0f       	add	r24, r24
    3704:	99 1f       	adc	r25, r25
    3706:	2a 95       	dec	r18
    3708:	e2 f7       	brpl	.-8      	; 0x3702 <__vector_20+0x2a>
    370a:	80 95       	com	r24
    370c:	83 23       	and	r24, r19
    370e:	80 83       	st	Z, r24
	//UCSR0B &=~ _BV(TXCIE0);					// Disable trasnmit complete interrupt
    3710:	ff 91       	pop	r31
    3712:	ef 91       	pop	r30
    3714:	9f 91       	pop	r25
    3716:	8f 91       	pop	r24
    3718:	3f 91       	pop	r19
    371a:	2f 91       	pop	r18
    371c:	0f 90       	pop	r0
    371e:	0f be       	out	0x3f, r0	; 63
    3720:	0f 90       	pop	r0
    3722:	1f 90       	pop	r1
    3724:	18 95       	reti

00003726 <zoUartRxBufferIsEmpty>:
	return zoBufferIsFull(&TxBuffer);
}

inline bool zoUartRxBufferIsEmpty(void)
{
	return zoBufferIsEmpty(&RxBuffer);
    3726:	87 e2       	ldi	r24, 0x27	; 39
    3728:	93 e0       	ldi	r25, 0x03	; 3
    372a:	0e 94 2e 1e 	call	0x3c5c	; 0x3c5c <zoBufferIsEmpty>
}
    372e:	08 95       	ret

00003730 <__vector_19>:
	else
		zoErrorPutIsr(&zoUartError,ZO_UART_ERROR_RX_BUFFER_OVERFLOW);
}

ISR(USART_UDRE_vect)
{
    3730:	1f 92       	push	r1
    3732:	0f 92       	push	r0
    3734:	0f b6       	in	r0, 0x3f	; 63
    3736:	0f 92       	push	r0
    3738:	11 24       	eor	r1, r1
    373a:	2f 93       	push	r18
    373c:	3f 93       	push	r19
    373e:	4f 93       	push	r20
    3740:	5f 93       	push	r21
    3742:	6f 93       	push	r22
    3744:	7f 93       	push	r23
    3746:	8f 93       	push	r24
    3748:	9f 93       	push	r25
    374a:	af 93       	push	r26
    374c:	bf 93       	push	r27
    374e:	ef 93       	push	r30
    3750:	ff 93       	push	r31
	if(!zoBufferIsEmpty(&TxBuffer))
    3752:	8e e1       	ldi	r24, 0x1E	; 30
    3754:	93 e0       	ldi	r25, 0x03	; 3
    3756:	0e 94 2e 1e 	call	0x3c5c	; 0x3c5c <zoBufferIsEmpty>
    375a:	88 23       	and	r24, r24
    375c:	59 f5       	brne	.+86     	; 0x37b4 <__vector_19+0x84>
	{
		if(Rs485Used)
    375e:	80 91 26 03 	lds	r24, 0x0326
    3762:	88 23       	and	r24, r24
    3764:	81 f0       	breq	.+32     	; 0x3786 <__vector_19+0x56>
			*Rs485ReDePort |= _BV(Rs485ReDePin);
    3766:	e0 91 2f 03 	lds	r30, 0x032F
    376a:	f0 91 30 03 	lds	r31, 0x0330
    376e:	20 81       	ld	r18, Z
    3770:	30 91 31 03 	lds	r19, 0x0331
    3774:	81 e0       	ldi	r24, 0x01	; 1
    3776:	90 e0       	ldi	r25, 0x00	; 0
    3778:	02 c0       	rjmp	.+4      	; 0x377e <__vector_19+0x4e>
    377a:	88 0f       	add	r24, r24
    377c:	99 1f       	adc	r25, r25
    377e:	3a 95       	dec	r19
    3780:	e2 f7       	brpl	.-8      	; 0x377a <__vector_19+0x4a>
    3782:	28 2b       	or	r18, r24
    3784:	20 83       	st	Z, r18

		UDR0 = zoBufferGetIsr(&TxBuffer);
    3786:	8e e1       	ldi	r24, 0x1E	; 30
    3788:	93 e0       	ldi	r25, 0x03	; 3
    378a:	0e 94 4f 1e 	call	0x3c9e	; 0x3c9e <zoBufferGetIsr>
    378e:	80 93 c6 00 	sts	0x00C6, r24
	}
	else
        UCSR0B &= ~_BV(UDRIE0);			// Buffer empty, Disable Tx interrupts
}
    3792:	ff 91       	pop	r31
    3794:	ef 91       	pop	r30
    3796:	bf 91       	pop	r27
    3798:	af 91       	pop	r26
    379a:	9f 91       	pop	r25
    379c:	8f 91       	pop	r24
    379e:	7f 91       	pop	r23
    37a0:	6f 91       	pop	r22
    37a2:	5f 91       	pop	r21
    37a4:	4f 91       	pop	r20
    37a6:	3f 91       	pop	r19
    37a8:	2f 91       	pop	r18
    37aa:	0f 90       	pop	r0
    37ac:	0f be       	out	0x3f, r0	; 63
    37ae:	0f 90       	pop	r0
    37b0:	1f 90       	pop	r1
    37b2:	18 95       	reti
			*Rs485ReDePort |= _BV(Rs485ReDePin);

		UDR0 = zoBufferGetIsr(&TxBuffer);
	}
	else
        UCSR0B &= ~_BV(UDRIE0);			// Buffer empty, Disable Tx interrupts
    37b4:	80 91 c1 00 	lds	r24, 0x00C1
    37b8:	8f 7d       	andi	r24, 0xDF	; 223
    37ba:	80 93 c1 00 	sts	0x00C1, r24
    37be:	e9 cf       	rjmp	.-46     	; 0x3792 <__vector_19+0x62>

000037c0 <zoUartTxBufferIsFull>:
	TransmitTimeOut = miliseconds;
}

inline bool zoUartTxBufferIsFull(void)
{
	return zoBufferIsFull(&TxBuffer);
    37c0:	8e e1       	ldi	r24, 0x1E	; 30
    37c2:	93 e0       	ldi	r25, 0x03	; 3
    37c4:	0e 94 36 1e 	call	0x3c6c	; 0x3c6c <zoBufferIsFull>
}
    37c8:	08 95       	ret

000037ca <__vector_18>:
	}
	return TRUE;
}

ISR(USART_RX_vect)
{
    37ca:	1f 92       	push	r1
    37cc:	0f 92       	push	r0
    37ce:	0f b6       	in	r0, 0x3f	; 63
    37d0:	0f 92       	push	r0
    37d2:	11 24       	eor	r1, r1
    37d4:	1f 93       	push	r17
    37d6:	2f 93       	push	r18
    37d8:	3f 93       	push	r19
    37da:	4f 93       	push	r20
    37dc:	5f 93       	push	r21
    37de:	6f 93       	push	r22
    37e0:	7f 93       	push	r23
    37e2:	8f 93       	push	r24
    37e4:	9f 93       	push	r25
    37e6:	af 93       	push	r26
    37e8:	bf 93       	push	r27
    37ea:	ef 93       	push	r30
    37ec:	ff 93       	push	r31
    u08   c;

	if ((UCSR0A & _BV(FE0)) != 0x00)					//is there a frame error?
    37ee:	80 91 c0 00 	lds	r24, 0x00C0
    37f2:	84 fd       	sbrc	r24, 4
    37f4:	39 c0       	rjmp	.+114    	; 0x3868 <__vector_18+0x9e>
		zoErrorPutIsr(&zoUartError,ZO_UART_ERROR_RX_FRAME_ERROR);	//Yes->indicate it.

	if ((UCSR0A & _BV(UPE0)) != 0x00)					//is there a parity error?
    37f6:	80 91 c0 00 	lds	r24, 0x00C0
    37fa:	82 fd       	sbrc	r24, 2
    37fc:	2f c0       	rjmp	.+94     	; 0x385c <__vector_18+0x92>
		zoErrorPutIsr(&zoUartError,ZO_UART_ERROR_RX_PARITY_ERROR);	//Yes->indicate it.

	if ( (UCSR0A & _BV(DOR0)) != 0x00 )					//Is there data overrun?
    37fe:	80 91 c0 00 	lds	r24, 0x00C0
    3802:	83 fd       	sbrc	r24, 3
    3804:	25 c0       	rjmp	.+74     	; 0x3850 <__vector_18+0x86>
		zoErrorPutIsr(&zoUartError,ZO_UART_ERROR_RX_DATA_OVERRUN);	//Yes->indicate it.
														 
	//Above three bits are cleared automatically when UDR0 is read.												//
	c  = UDR0;											
    3806:	10 91 c6 00 	lds	r17, 0x00C6

    if( !zoBufferIsFull(&RxBuffer) )
    380a:	87 e2       	ldi	r24, 0x27	; 39
    380c:	93 e0       	ldi	r25, 0x03	; 3
    380e:	0e 94 36 1e 	call	0x3c6c	; 0x3c6c <zoBufferIsFull>
    3812:	88 23       	and	r24, r24
    3814:	b9 f0       	breq	.+46     	; 0x3844 <__vector_18+0x7a>
		zoBufferPutIsr(&RxBuffer,c);
	else
		zoErrorPutIsr(&zoUartError,ZO_UART_ERROR_RX_BUFFER_OVERFLOW);
    3816:	81 e1       	ldi	r24, 0x11	; 17
    3818:	93 e0       	ldi	r25, 0x03	; 3
    381a:	65 e0       	ldi	r22, 0x05	; 5
    381c:	0e 94 86 00 	call	0x10c	; 0x10c <zoErrorPutIsr>
}
    3820:	ff 91       	pop	r31
    3822:	ef 91       	pop	r30
    3824:	bf 91       	pop	r27
    3826:	af 91       	pop	r26
    3828:	9f 91       	pop	r25
    382a:	8f 91       	pop	r24
    382c:	7f 91       	pop	r23
    382e:	6f 91       	pop	r22
    3830:	5f 91       	pop	r21
    3832:	4f 91       	pop	r20
    3834:	3f 91       	pop	r19
    3836:	2f 91       	pop	r18
    3838:	1f 91       	pop	r17
    383a:	0f 90       	pop	r0
    383c:	0f be       	out	0x3f, r0	; 63
    383e:	0f 90       	pop	r0
    3840:	1f 90       	pop	r1
    3842:	18 95       	reti
														 
	//Above three bits are cleared automatically when UDR0 is read.												//
	c  = UDR0;											

    if( !zoBufferIsFull(&RxBuffer) )
		zoBufferPutIsr(&RxBuffer,c);
    3844:	87 e2       	ldi	r24, 0x27	; 39
    3846:	93 e0       	ldi	r25, 0x03	; 3
    3848:	61 2f       	mov	r22, r17
    384a:	0e 94 7a 1e 	call	0x3cf4	; 0x3cf4 <zoBufferPutIsr>
    384e:	e8 cf       	rjmp	.-48     	; 0x3820 <__vector_18+0x56>

	if ((UCSR0A & _BV(UPE0)) != 0x00)					//is there a parity error?
		zoErrorPutIsr(&zoUartError,ZO_UART_ERROR_RX_PARITY_ERROR);	//Yes->indicate it.

	if ( (UCSR0A & _BV(DOR0)) != 0x00 )					//Is there data overrun?
		zoErrorPutIsr(&zoUartError,ZO_UART_ERROR_RX_DATA_OVERRUN);	//Yes->indicate it.
    3850:	81 e1       	ldi	r24, 0x11	; 17
    3852:	93 e0       	ldi	r25, 0x03	; 3
    3854:	66 e0       	ldi	r22, 0x06	; 6
    3856:	0e 94 86 00 	call	0x10c	; 0x10c <zoErrorPutIsr>
    385a:	d5 cf       	rjmp	.-86     	; 0x3806 <__vector_18+0x3c>

	if ((UCSR0A & _BV(FE0)) != 0x00)					//is there a frame error?
		zoErrorPutIsr(&zoUartError,ZO_UART_ERROR_RX_FRAME_ERROR);	//Yes->indicate it.

	if ((UCSR0A & _BV(UPE0)) != 0x00)					//is there a parity error?
		zoErrorPutIsr(&zoUartError,ZO_UART_ERROR_RX_PARITY_ERROR);	//Yes->indicate it.
    385c:	81 e1       	ldi	r24, 0x11	; 17
    385e:	93 e0       	ldi	r25, 0x03	; 3
    3860:	64 e0       	ldi	r22, 0x04	; 4
    3862:	0e 94 86 00 	call	0x10c	; 0x10c <zoErrorPutIsr>
    3866:	cb cf       	rjmp	.-106    	; 0x37fe <__vector_18+0x34>
ISR(USART_RX_vect)
{
    u08   c;

	if ((UCSR0A & _BV(FE0)) != 0x00)					//is there a frame error?
		zoErrorPutIsr(&zoUartError,ZO_UART_ERROR_RX_FRAME_ERROR);	//Yes->indicate it.
    3868:	81 e1       	ldi	r24, 0x11	; 17
    386a:	93 e0       	ldi	r25, 0x03	; 3
    386c:	63 e0       	ldi	r22, 0x03	; 3
    386e:	0e 94 86 00 	call	0x10c	; 0x10c <zoErrorPutIsr>
    3872:	c1 cf       	rjmp	.-126    	; 0x37f6 <__vector_18+0x2c>

00003874 <zoUartGetChar>:

	return TRUE;
}

bool zoUartGetChar(u08* byte)
{
    3874:	cf 93       	push	r28
    3876:	df 93       	push	r29
    3878:	ec 01       	movw	r28, r24
	if(!zoErrorIsEmpty(&zoUartError))		//check if receive ISR got some error
    387a:	81 e1       	ldi	r24, 0x11	; 17
    387c:	93 e0       	ldi	r25, 0x03	; 3
    387e:	0e 94 ad 00 	call	0x15a	; 0x15a <zoErrorIsEmpty>
    3882:	88 23       	and	r24, r24
    3884:	21 f4       	brne	.+8      	; 0x388e <zoUartGetChar+0x1a>
        return FALSE;
    }

	*byte = zoBufferGet(&RxBuffer);

	return TRUE;
    3886:	80 e0       	ldi	r24, 0x00	; 0
}
    3888:	df 91       	pop	r29
    388a:	cf 91       	pop	r28
    388c:	08 95       	ret
	return zoBufferIsFull(&TxBuffer);
}

inline bool zoUartRxBufferIsEmpty(void)
{
	return zoBufferIsEmpty(&RxBuffer);
    388e:	87 e2       	ldi	r24, 0x27	; 39
    3890:	93 e0       	ldi	r25, 0x03	; 3
    3892:	0e 94 2e 1e 	call	0x3c5c	; 0x3c5c <zoBufferIsEmpty>
bool zoUartGetChar(u08* byte)
{
	if(!zoErrorIsEmpty(&zoUartError))		//check if receive ISR got some error
		return FALSE;

    if( zoUartRxBufferIsEmpty() )
    3896:	88 23       	and	r24, r24
    3898:	b1 f7       	brne	.-20     	; 0x3886 <zoUartGetChar+0x12>
	{
        //zoErrorPut(&zoUartError,ZO_UART_ERROR_RX_BUFFER_EMPTY);
        return FALSE;
    }

	*byte = zoBufferGet(&RxBuffer);
    389a:	87 e2       	ldi	r24, 0x27	; 39
    389c:	93 e0       	ldi	r25, 0x03	; 3
    389e:	0e 94 3a 1f 	call	0x3e74	; 0x3e74 <zoBufferGet>
    38a2:	88 83       	st	Y, r24
    38a4:	8f ef       	ldi	r24, 0xFF	; 255
    38a6:	f0 cf       	rjmp	.-32     	; 0x3888 <zoUartGetChar+0x14>

000038a8 <zoUartPutChar>:

	zoBufferFlush(&RxBuffer);
}

bool zoUartPutChar(const u08 c)
{
    38a8:	ff 92       	push	r15
    38aa:	0f 93       	push	r16
    38ac:	1f 93       	push	r17
    38ae:	df 93       	push	r29
    38b0:	cf 93       	push	r28
    38b2:	00 d0       	rcall	.+0      	; 0x38b4 <zoUartPutChar+0xc>
    38b4:	cd b7       	in	r28, 0x3d	; 61
    38b6:	de b7       	in	r29, 0x3e	; 62
    38b8:	f8 2e       	mov	r15, r24
	u16 timer;
	
	//wait with timeout for a space in the transmit buffer
	zoSystemTimerTimeOutInit(&timer);
    38ba:	8e 01       	movw	r16, r28
    38bc:	0f 5f       	subi	r16, 0xFF	; 255
    38be:	1f 4f       	sbci	r17, 0xFF	; 255
    38c0:	c8 01       	movw	r24, r16
    38c2:	0e 94 42 01 	call	0x284	; 0x284 <zoSystemTimerTimeOutInit>
    while(zoBufferIsFull(&TxBuffer))
    38c6:	8e e1       	ldi	r24, 0x1E	; 30
    38c8:	93 e0       	ldi	r25, 0x03	; 3
    38ca:	0e 94 36 1e 	call	0x3c6c	; 0x3c6c <zoBufferIsFull>
    38ce:	88 23       	and	r24, r24
    38d0:	b9 f0       	breq	.+46     	; 0x3900 <zoUartPutChar+0x58>
	{
		if(zoSystemTimerTimeOutExpired(&timer,TransmitTimeOut))
    38d2:	60 91 6a 01 	lds	r22, 0x016A
    38d6:	70 91 6b 01 	lds	r23, 0x016B
    38da:	c8 01       	movw	r24, r16
    38dc:	0e 94 78 01 	call	0x2f0	; 0x2f0 <zoSystemTimerTimeOutExpired>
    38e0:	88 23       	and	r24, r24
    38e2:	89 f3       	breq	.-30     	; 0x38c6 <zoUartPutChar+0x1e>
		{
			zoErrorPut(&zoUartError,ZO_UART_ERROR_TX_TIMEOUT);
    38e4:	81 e1       	ldi	r24, 0x11	; 17
    38e6:	93 e0       	ldi	r25, 0x03	; 3
    38e8:	67 e0       	ldi	r22, 0x07	; 7
    38ea:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <zoErrorPut>
    38ee:	80 e0       	ldi	r24, 0x00	; 0

	if(TxBuffer.ctr == 1)						// See if this is the first character
		UCSR0B |= _BV(UDRIE0);					// Yes, Enable Tx interrupts

	return TRUE;
}
    38f0:	0f 90       	pop	r0
    38f2:	0f 90       	pop	r0
    38f4:	cf 91       	pop	r28
    38f6:	df 91       	pop	r29
    38f8:	1f 91       	pop	r17
    38fa:	0f 91       	pop	r16
    38fc:	ff 90       	pop	r15
    38fe:	08 95       	ret
			zoErrorPut(&zoUartError,ZO_UART_ERROR_TX_TIMEOUT);
			return FALSE;
		}
	}
	
	zoBufferPut(&TxBuffer,c);
    3900:	8e e1       	ldi	r24, 0x1E	; 30
    3902:	93 e0       	ldi	r25, 0x03	; 3
    3904:	6f 2d       	mov	r22, r15
    3906:	0e 94 0a 1f 	call	0x3e14	; 0x3e14 <zoBufferPut>

	if(TxBuffer.ctr == 1)						// See if this is the first character
    390a:	80 91 1f 03 	lds	r24, 0x031F
    390e:	81 30       	cpi	r24, 0x01	; 1
    3910:	49 f0       	breq	.+18     	; 0x3924 <zoUartPutChar+0x7c>
		UCSR0B |= _BV(UDRIE0);					// Yes, Enable Tx interrupts
    3912:	8f ef       	ldi	r24, 0xFF	; 255

	return TRUE;
}
    3914:	0f 90       	pop	r0
    3916:	0f 90       	pop	r0
    3918:	cf 91       	pop	r28
    391a:	df 91       	pop	r29
    391c:	1f 91       	pop	r17
    391e:	0f 91       	pop	r16
    3920:	ff 90       	pop	r15
    3922:	08 95       	ret
	}
	
	zoBufferPut(&TxBuffer,c);

	if(TxBuffer.ctr == 1)						// See if this is the first character
		UCSR0B |= _BV(UDRIE0);					// Yes, Enable Tx interrupts
    3924:	80 91 c1 00 	lds	r24, 0x00C1
    3928:	80 62       	ori	r24, 0x20	; 32
    392a:	80 93 c1 00 	sts	0x00C1, r24
    392e:	8f ef       	ldi	r24, 0xFF	; 255
    3930:	f1 cf       	rjmp	.-30     	; 0x3914 <zoUartPutChar+0x6c>

00003932 <zoUartPutData>:
	}
	return TRUE;
}

bool zoUartPutData(const u08* buffer, u08 length)
{
    3932:	0f 93       	push	r16
    3934:	1f 93       	push	r17
    3936:	cf 93       	push	r28
    3938:	df 93       	push	r29
    393a:	08 2f       	mov	r16, r24
    393c:	16 2f       	mov	r17, r22
	u08 i;

	for(i=0;i<length;i++)
    393e:	66 23       	and	r22, r22
    3940:	91 f0       	breq	.+36     	; 0x3966 <zoUartPutData+0x34>
    3942:	9c 01       	movw	r18, r24
    3944:	e9 01       	movw	r28, r18
    3946:	05 c0       	rjmp	.+10     	; 0x3952 <zoUartPutData+0x20>
	{
		if(!zoUartPutChar(buffer[i]))
    3948:	21 96       	adiw	r28, 0x01	; 1

bool zoUartPutData(const u08* buffer, u08 length)
{
	u08 i;

	for(i=0;i<length;i++)
    394a:	9e 01       	movw	r18, r28
    394c:	20 1b       	sub	r18, r16
    394e:	21 17       	cp	r18, r17
    3950:	50 f4       	brcc	.+20     	; 0x3966 <zoUartPutData+0x34>
	{
		if(!zoUartPutChar(buffer[i]))
    3952:	88 81       	ld	r24, Y
    3954:	0e 94 54 1c 	call	0x38a8	; 0x38a8 <zoUartPutChar>
    3958:	88 23       	and	r24, r24
    395a:	b1 f7       	brne	.-20     	; 0x3948 <zoUartPutData+0x16>
			return FALSE;
	}
	return TRUE;
}
    395c:	df 91       	pop	r29
    395e:	cf 91       	pop	r28
    3960:	1f 91       	pop	r17
    3962:	0f 91       	pop	r16
    3964:	08 95       	ret

bool zoUartPutData(const u08* buffer, u08 length)
{
	u08 i;

	for(i=0;i<length;i++)
    3966:	8f ef       	ldi	r24, 0xFF	; 255
	{
		if(!zoUartPutChar(buffer[i]))
			return FALSE;
	}
	return TRUE;
}
    3968:	df 91       	pop	r29
    396a:	cf 91       	pop	r28
    396c:	1f 91       	pop	r17
    396e:	0f 91       	pop	r16
    3970:	08 95       	ret

00003972 <zoUartPutString>:

	return TRUE;
}

bool zoUartPutString(const u08* buffer)
{
    3972:	cf 93       	push	r28
    3974:	df 93       	push	r29
    3976:	ec 01       	movw	r28, r24
    3978:	01 c0       	rjmp	.+2      	; 0x397c <zoUartPutString+0xa>
	while(*buffer != '\0')
	{
		if(!zoUartPutChar(*buffer++))
    397a:	21 96       	adiw	r28, 0x01	; 1
	return TRUE;
}

bool zoUartPutString(const u08* buffer)
{
	while(*buffer != '\0')
    397c:	88 81       	ld	r24, Y
    397e:	88 23       	and	r24, r24
    3980:	39 f0       	breq	.+14     	; 0x3990 <zoUartPutString+0x1e>
	{
		if(!zoUartPutChar(*buffer++))
    3982:	0e 94 54 1c 	call	0x38a8	; 0x38a8 <zoUartPutChar>
    3986:	88 23       	and	r24, r24
    3988:	c1 f7       	brne	.-16     	; 0x397a <zoUartPutString+0x8>
			return FALSE;
	}
	return TRUE;
}
    398a:	df 91       	pop	r29
    398c:	cf 91       	pop	r28
    398e:	08 95       	ret
	return TRUE;
}

bool zoUartPutString(const u08* buffer)
{
	while(*buffer != '\0')
    3990:	8f ef       	ldi	r24, 0xFF	; 255
	{
		if(!zoUartPutChar(*buffer++))
			return FALSE;
	}
	return TRUE;
}
    3992:	df 91       	pop	r29
    3994:	cf 91       	pop	r28
    3996:	08 95       	ret

00003998 <zoUartRxFlush>:

void zoUartRxFlush(void)
{
	u08  dummy;

    while (bit_is_set(UCSR0A, RXC0))
    3998:	80 91 c0 00 	lds	r24, 0x00C0
    399c:	87 ff       	sbrs	r24, 7
    399e:	06 c0       	rjmp	.+12     	; 0x39ac <zoUartRxFlush+0x14>
         dummy = UDR0;
    39a0:	80 91 c6 00 	lds	r24, 0x00C6

void zoUartRxFlush(void)
{
	u08  dummy;

    while (bit_is_set(UCSR0A, RXC0))
    39a4:	80 91 c0 00 	lds	r24, 0x00C0
    39a8:	87 fd       	sbrc	r24, 7
    39aa:	fa cf       	rjmp	.-12     	; 0x39a0 <zoUartRxFlush+0x8>
         dummy = UDR0;

	zoBufferFlush(&RxBuffer);
    39ac:	87 e2       	ldi	r24, 0x27	; 39
    39ae:	93 e0       	ldi	r25, 0x03	; 3
    39b0:	0e 94 3f 1e 	call	0x3c7e	; 0x3c7e <zoBufferFlush>
}
    39b4:	08 95       	ret

000039b6 <zoUartSetBuffersSize>:
											//reset reDePin -> receive mode
	UCSR0B |= _BV(TXCIE0);					// Enable Transmit Complete Interrupt
}

inline bool zoUartSetBuffersSize(u08 size)
{
    39b6:	1f 93       	push	r17
    39b8:	18 2f       	mov	r17, r24
	if ( zoBufferInit(&RxBuffer,size) && zoBufferInit(&TxBuffer,size) )
    39ba:	87 e2       	ldi	r24, 0x27	; 39
    39bc:	93 e0       	ldi	r25, 0x03	; 3
    39be:	61 2f       	mov	r22, r17
    39c0:	0e 94 e2 1e 	call	0x3dc4	; 0x3dc4 <zoBufferInit>
    39c4:	88 23       	and	r24, r24
    39c6:	41 f4       	brne	.+16     	; 0x39d8 <zoUartSetBuffersSize+0x22>
		return TRUE;
	else
	{
		zoErrorPut(&zoUartError,ZO_UART_ERROR_MEMORY_ALLOCATION_ERROR);
    39c8:	81 e1       	ldi	r24, 0x11	; 17
    39ca:	93 e0       	ldi	r25, 0x03	; 3
    39cc:	61 e0       	ldi	r22, 0x01	; 1
    39ce:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <zoErrorPut>
    39d2:	80 e0       	ldi	r24, 0x00	; 0
		return FALSE;
	}
}
    39d4:	1f 91       	pop	r17
    39d6:	08 95       	ret
	UCSR0B |= _BV(TXCIE0);					// Enable Transmit Complete Interrupt
}

inline bool zoUartSetBuffersSize(u08 size)
{
	if ( zoBufferInit(&RxBuffer,size) && zoBufferInit(&TxBuffer,size) )
    39d8:	8e e1       	ldi	r24, 0x1E	; 30
    39da:	93 e0       	ldi	r25, 0x03	; 3
    39dc:	61 2f       	mov	r22, r17
    39de:	0e 94 e2 1e 	call	0x3dc4	; 0x3dc4 <zoBufferInit>
    39e2:	88 23       	and	r24, r24
    39e4:	89 f3       	breq	.-30     	; 0x39c8 <zoUartSetBuffersSize+0x12>
    39e6:	8f ef       	ldi	r24, 0xFF	; 255
    39e8:	f5 cf       	rjmp	.-22     	; 0x39d4 <zoUartSetBuffersSize+0x1e>

000039ea <zoUartInit>:
ZO_ERROR zoUartError = ZO_ERROR_DEFAULTS;

//Implementation__________________________________________________________________________
bool zoUartInit(void)
{
	UCSR0C = 0;
    39ea:	10 92 c2 00 	sts	0x00C2, r1
	UCSR0B |= _BV(TXCIE0);					// Enable Transmit Complete Interrupt
}

inline bool zoUartSetBuffersSize(u08 size)
{
	if ( zoBufferInit(&RxBuffer,size) && zoBufferInit(&TxBuffer,size) )
    39ee:	87 e2       	ldi	r24, 0x27	; 39
    39f0:	93 e0       	ldi	r25, 0x03	; 3
    39f2:	60 e2       	ldi	r22, 0x20	; 32
    39f4:	0e 94 e2 1e 	call	0x3dc4	; 0x3dc4 <zoBufferInit>
    39f8:	88 23       	and	r24, r24
    39fa:	39 f4       	brne	.+14     	; 0x3a0a <zoUartInit+0x20>
		return TRUE;
	else
	{
		zoErrorPut(&zoUartError,ZO_UART_ERROR_MEMORY_ALLOCATION_ERROR);
    39fc:	81 e1       	ldi	r24, 0x11	; 17
    39fe:	93 e0       	ldi	r25, 0x03	; 3
    3a00:	61 e0       	ldi	r22, 0x01	; 1
    3a02:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <zoErrorPut>
    3a06:	80 e0       	ldi	r24, 0x00	; 0
    3a08:	08 95       	ret
	UCSR0B |= _BV(TXCIE0);					// Enable Transmit Complete Interrupt
}

inline bool zoUartSetBuffersSize(u08 size)
{
	if ( zoBufferInit(&RxBuffer,size) && zoBufferInit(&TxBuffer,size) )
    3a0a:	8e e1       	ldi	r24, 0x1E	; 30
    3a0c:	93 e0       	ldi	r25, 0x03	; 3
    3a0e:	60 e2       	ldi	r22, 0x20	; 32
    3a10:	0e 94 e2 1e 	call	0x3dc4	; 0x3dc4 <zoBufferInit>
    3a14:	88 23       	and	r24, r24
    3a16:	91 f3       	breq	.-28     	; 0x39fc <zoUartInit+0x12>
	UCSR0C = 0;

	if(!zoUartSetBuffersSize(ZO_UART_DEFAULT_BUFFER_SIZE))	//initialize buffers
		return FALSE;

	zoErrorInit(&zoUartError);								//initialize the error storage
    3a18:	81 e1       	ldi	r24, 0x11	; 17
    3a1a:	93 e0       	ldi	r25, 0x03	; 3
    3a1c:	0e 94 53 00 	call	0xa6	; 0xa6 <zoErrorInit>
	zoSystemTimerInit();
    3a20:	0e 94 10 01 	call	0x220	; 0x220 <zoSystemTimerInit>

   //general settings
	UCSR0A |= _BV(U2X0);									//double speed mode
    3a24:	80 91 c0 00 	lds	r24, 0x00C0
    3a28:	82 60       	ori	r24, 0x02	; 2
    3a2a:	80 93 c0 00 	sts	0x00C0, r24
	UCSR0A &= ~_BV(MPCM0);									//no multiprocessor
    3a2e:	80 91 c0 00 	lds	r24, 0x00C0
    3a32:	8e 7f       	andi	r24, 0xFE	; 254
    3a34:	80 93 c0 00 	sts	0x00C0, r24
	UCSR0C &= ~(_BV(UMSEL01)|_BV(UMSEL00));					//asynchronous USART mode
    3a38:	80 91 c2 00 	lds	r24, 0x00C2
    3a3c:	8f 73       	andi	r24, 0x3F	; 63
    3a3e:	80 93 c2 00 	sts	0x00C2, r24

	zoUartSetBaud(ZO_UART_DEFAULT_BAUD_RATE);
    3a42:	60 e0       	ldi	r22, 0x00	; 0
    3a44:	72 ec       	ldi	r23, 0xC2	; 194
    3a46:	81 e0       	ldi	r24, 0x01	; 1
    3a48:	90 e0       	ldi	r25, 0x00	; 0
    3a4a:	0e 94 07 1b 	call	0x360e	; 0x360e <zoUartSetBaud>
	zoUartSetDataBits(ZO_UART_DEFAULT_DATA_BITS);
    3a4e:	86 e0       	ldi	r24, 0x06	; 6
    3a50:	0e 94 29 1b 	call	0x3652	; 0x3652 <zoUartSetDataBits>
	UCSR0B = (UCSR0B & ~DATA_BITS_MASK_UCSR0B) | ((dataBits>>1) & DATA_BITS_MASK_UCSR0B);
}

inline void zoUartSetParity(ZO_UART_PARITY parity)
{
	UCSR0C = (UCSR0C & ~PARITY_BITS_MASK)|parity;
    3a54:	80 91 c2 00 	lds	r24, 0x00C2
    3a58:	8f 7c       	andi	r24, 0xCF	; 207
    3a5a:	80 93 c2 00 	sts	0x00C2, r24
}

inline void zoUartSetStopBits(ZO_UART_STOP_BITS stopBits)
{
	UCSR0C = (UCSR0C & ~STOP_BITS_MASK)|stopBits;
    3a5e:	80 91 c2 00 	lds	r24, 0x00C2
    3a62:	8f 77       	andi	r24, 0x7F	; 127
    3a64:	80 93 c2 00 	sts	0x00C2, r24
	zoUartSetBaud(ZO_UART_DEFAULT_BAUD_RATE);
	zoUartSetDataBits(ZO_UART_DEFAULT_DATA_BITS);
	zoUartSetParity(ZO_UART_DEFAULT_PARITY);
	zoUartSetStopBits(ZO_UART_DEFAULT_STOP_BITS);

	UCSR0B |= _BV(TXEN0) | _BV(RXEN0) | _BV(RXCIE0) ;	//enable transmit,receive and receive interrupt
    3a68:	80 91 c1 00 	lds	r24, 0x00C1
    3a6c:	88 69       	ori	r24, 0x98	; 152
    3a6e:	80 93 c1 00 	sts	0x00C1, r24
	zoUartRxFlush();
    3a72:	0e 94 cc 1c 	call	0x3998	; 0x3998 <zoUartRxFlush>

	sei();
    3a76:	78 94       	sei
    3a78:	8f ef       	ldi	r24, 0xFF	; 255

   return TRUE;
}
    3a7a:	08 95       	ret

00003a7c <zoProtocolUartSetLAM>:
	return IsWholePacket;
}

inline void zoProtocolUartSetLAM(u08 localAcceptanceMask)
{
	zoProtocolUartLAM = localAcceptanceMask;
    3a7c:	80 93 6e 01 	sts	0x016E, r24
}
    3a80:	08 95       	ret

00003a82 <zoProtocolUartSetBitrate>:

inline bool zoProtocolUartSetBitrate(u32 bitsPerSecond)
{
	return zoUartSetBaud(bitsPerSecond);
    3a82:	0e 94 07 1b 	call	0x360e	; 0x360e <zoUartSetBaud>
}
    3a86:	08 95       	ret

00003a88 <zoProtocolUartGetPacket>:
	
	return TRUE;
}

bool zoProtocolUartGetPacket(ZO_PROTOCOL_PACKET* packet)
{
    3a88:	0f 93       	push	r16
    3a8a:	1f 93       	push	r17
    3a8c:	df 93       	push	r29
    3a8e:	cf 93       	push	r28
    3a90:	0f 92       	push	r0
    3a92:	cd b7       	in	r28, 0x3d	; 61
    3a94:	de b7       	in	r29, 0x3e	; 62
    3a96:	8c 01       	movw	r16, r24
	
	//TODO:put a timeout on reception for a whole packet
	//so the decoder can escape from a tottaly wrong packet:
	//eg when half a packet is received because of some unknown interruption of reception

	if( !zoUartGetChar(&c) )
    3a98:	ce 01       	movw	r24, r28
    3a9a:	01 96       	adiw	r24, 0x01	; 1
    3a9c:	0e 94 3a 1c 	call	0x3874	; 0x3874 <zoUartGetChar>
    3aa0:	88 23       	and	r24, r24
    3aa2:	09 f1       	breq	.+66     	; 0x3ae6 <zoProtocolUartGetPacket+0x5e>
		return FALSE;

	switch(DecoderState) 
    3aa4:	80 91 32 03 	lds	r24, 0x0332
    3aa8:	83 30       	cpi	r24, 0x03	; 3
    3aaa:	c9 f1       	breq	.+114    	; 0x3b1e <zoProtocolUartGetPacket+0x96>
    3aac:	84 30       	cpi	r24, 0x04	; 4
    3aae:	10 f1       	brcs	.+68     	; 0x3af4 <zoProtocolUartGetPacket+0x6c>
    3ab0:	85 30       	cpi	r24, 0x05	; 5
    3ab2:	09 f4       	brne	.+2      	; 0x3ab6 <zoProtocolUartGetPacket+0x2e>
    3ab4:	5e c0       	rjmp	.+188    	; 0x3b72 <zoProtocolUartGetPacket+0xea>
    3ab6:	85 30       	cpi	r24, 0x05	; 5
    3ab8:	d0 f5       	brcc	.+116    	; 0x3b2e <zoProtocolUartGetPacket+0xa6>
		packet->OwnNodeID = c;
		DecoderState = WAIT_ON_COMMAND_ID;
		break;

	case WAIT_ON_COMMAND_ID:
		packet->commandID = c;
    3aba:	89 81       	ldd	r24, Y+1	; 0x01
    3abc:	d8 01       	movw	r26, r16
    3abe:	12 96       	adiw	r26, 0x02	; 2
    3ac0:	8c 93       	st	X, r24
		DecoderState = WAIT_ON_BYTECOUNT;
    3ac2:	85 e0       	ldi	r24, 0x05	; 5
    3ac4:	80 93 32 03 	sts	0x0332, r24
    3ac8:	80 e0       	ldi	r24, 0x00	; 0
		IsWholePacket = TRUE;
		break;
	}

	return IsWholePacket;
}
    3aca:	0f 90       	pop	r0
    3acc:	cf 91       	pop	r28
    3ace:	df 91       	pop	r29
    3ad0:	1f 91       	pop	r17
    3ad2:	0f 91       	pop	r16
    3ad4:	08 95       	ret
		return FALSE;

	switch(DecoderState) 
	{
	case WAIT_ON_HEADER_0:
		DecoderState = (c==ZO_PROTOCOL_HEADER_0)?WAIT_ON_HEADER_1:WAIT_ON_HEADER_0;
    3ad6:	10 92 32 03 	sts	0x0332, r1
    3ada:	89 81       	ldd	r24, Y+1	; 0x01
    3adc:	85 35       	cpi	r24, 0x55	; 85
    3ade:	19 f4       	brne	.+6      	; 0x3ae6 <zoProtocolUartGetPacket+0x5e>
    3ae0:	81 e0       	ldi	r24, 0x01	; 1
    3ae2:	80 93 32 03 	sts	0x0332, r24
			DecoderState =	WAIT_ON_LRC;
		break;

	case WAIT_ON_LRC:
		packet->lrc = c;
		DecoderState = WAIT_ON_HEADER_0; 
    3ae6:	80 e0       	ldi	r24, 0x00	; 0
		IsWholePacket = TRUE;
		break;
	}

	return IsWholePacket;
}
    3ae8:	0f 90       	pop	r0
    3aea:	cf 91       	pop	r28
    3aec:	df 91       	pop	r29
    3aee:	1f 91       	pop	r17
    3af0:	0f 91       	pop	r16
    3af2:	08 95       	ret
	//eg when half a packet is received because of some unknown interruption of reception

	if( !zoUartGetChar(&c) )
		return FALSE;

	switch(DecoderState) 
    3af4:	81 30       	cpi	r24, 0x01	; 1
    3af6:	09 f4       	brne	.+2      	; 0x3afa <zoProtocolUartGetPacket+0x72>
    3af8:	48 c0       	rjmp	.+144    	; 0x3b8a <zoProtocolUartGetPacket+0x102>
    3afa:	82 30       	cpi	r24, 0x02	; 2
    3afc:	60 f3       	brcs	.-40     	; 0x3ad6 <zoProtocolUartGetPacket+0x4e>
	case WAIT_ON_HEADER_1:
		DecoderState = (c==ZO_PROTOCOL_HEADER_1)?WAIT_ON_ADDRESSED_NODE_ID:WAIT_ON_HEADER_0;
		break;

	case WAIT_ON_ADDRESSED_NODE_ID:
		if( ( (c & zoProtocolUartLAM) == (OwnNodeID & zoProtocolUartLAM ) ) ||
    3afe:	29 81       	ldd	r18, Y+1	; 0x01
    3b00:	80 91 33 03 	lds	r24, 0x0333
    3b04:	82 27       	eor	r24, r18
    3b06:	90 91 6e 01 	lds	r25, 0x016E
    3b0a:	89 23       	and	r24, r25
    3b0c:	09 f4       	brne	.+2      	; 0x3b10 <zoProtocolUartGetPacket+0x88>
    3b0e:	42 c0       	rjmp	.+132    	; 0x3b94 <zoProtocolUartGetPacket+0x10c>
    3b10:	22 23       	and	r18, r18
    3b12:	09 f4       	brne	.+2      	; 0x3b16 <zoProtocolUartGetPacket+0x8e>
    3b14:	3f c0       	rjmp	.+126    	; 0x3b94 <zoProtocolUartGetPacket+0x10c>
		{
			DecoderState = WAIT_ON_OWN_NODE_ID;
			packet->AddressedNodeID = c;
		}
		else
			DecoderState = WAIT_ON_HEADER_0;
    3b16:	10 92 32 03 	sts	0x0332, r1
    3b1a:	80 e0       	ldi	r24, 0x00	; 0
    3b1c:	e5 cf       	rjmp	.-54     	; 0x3ae8 <zoProtocolUartGetPacket+0x60>
		break;

	case WAIT_ON_OWN_NODE_ID:
		packet->OwnNodeID = c;
    3b1e:	89 81       	ldd	r24, Y+1	; 0x01
    3b20:	f8 01       	movw	r30, r16
    3b22:	81 83       	std	Z+1, r24	; 0x01
		DecoderState = WAIT_ON_COMMAND_ID;
    3b24:	84 e0       	ldi	r24, 0x04	; 4
    3b26:	80 93 32 03 	sts	0x0332, r24
    3b2a:	80 e0       	ldi	r24, 0x00	; 0
    3b2c:	dd cf       	rjmp	.-70     	; 0x3ae8 <zoProtocolUartGetPacket+0x60>
	//eg when half a packet is received because of some unknown interruption of reception

	if( !zoUartGetChar(&c) )
		return FALSE;

	switch(DecoderState) 
    3b2e:	86 30       	cpi	r24, 0x06	; 6
    3b30:	49 f0       	breq	.+18     	; 0x3b44 <zoProtocolUartGetPacket+0xbc>
    3b32:	87 30       	cpi	r24, 0x07	; 7
    3b34:	c1 f6       	brne	.-80     	; 0x3ae6 <zoProtocolUartGetPacket+0x5e>
		if(byteCount == 0)
			DecoderState =	WAIT_ON_LRC;
		break;

	case WAIT_ON_LRC:
		packet->lrc = c;
    3b36:	89 81       	ldd	r24, Y+1	; 0x01
    3b38:	f8 01       	movw	r30, r16
    3b3a:	84 8b       	std	Z+20, r24	; 0x14
		DecoderState = WAIT_ON_HEADER_0; 
    3b3c:	10 92 32 03 	sts	0x0332, r1
    3b40:	8f ef       	ldi	r24, 0xFF	; 255
    3b42:	d2 cf       	rjmp	.-92     	; 0x3ae8 <zoProtocolUartGetPacket+0x60>
		else
			DecoderState = WAIT_ON_LRC;
		break;

	case WAIT_ON_DATA:
		packet->data[packet->byteCount - byteCount--] = c;
    3b44:	80 91 34 03 	lds	r24, 0x0334
    3b48:	d8 01       	movw	r26, r16
    3b4a:	13 96       	adiw	r26, 0x03	; 3
    3b4c:	ec 91       	ld	r30, X
    3b4e:	f0 e0       	ldi	r31, 0x00	; 0
    3b50:	e8 1b       	sub	r30, r24
    3b52:	f1 09       	sbc	r31, r1
    3b54:	e0 0f       	add	r30, r16
    3b56:	f1 1f       	adc	r31, r17
    3b58:	99 81       	ldd	r25, Y+1	; 0x01
    3b5a:	94 83       	std	Z+4, r25	; 0x04
    3b5c:	81 50       	subi	r24, 0x01	; 1
    3b5e:	80 93 34 03 	sts	0x0334, r24
		if(byteCount == 0)
    3b62:	88 23       	and	r24, r24
    3b64:	09 f0       	breq	.+2      	; 0x3b68 <zoProtocolUartGetPacket+0xe0>
    3b66:	bf cf       	rjmp	.-130    	; 0x3ae6 <zoProtocolUartGetPacket+0x5e>
			DecoderState =	WAIT_ON_LRC;
    3b68:	87 e0       	ldi	r24, 0x07	; 7
    3b6a:	80 93 32 03 	sts	0x0332, r24
    3b6e:	80 e0       	ldi	r24, 0x00	; 0
    3b70:	bb cf       	rjmp	.-138    	; 0x3ae8 <zoProtocolUartGetPacket+0x60>
		packet->commandID = c;
		DecoderState = WAIT_ON_BYTECOUNT;
		break;

	case WAIT_ON_BYTECOUNT:
		packet->byteCount = c;
    3b72:	89 81       	ldd	r24, Y+1	; 0x01
    3b74:	f8 01       	movw	r30, r16
    3b76:	83 83       	std	Z+3, r24	; 0x03
		byteCount = packet->byteCount;	//store for internal use
    3b78:	80 93 34 03 	sts	0x0334, r24
		if(byteCount > 0)
    3b7c:	88 23       	and	r24, r24
    3b7e:	a1 f3       	breq	.-24     	; 0x3b68 <zoProtocolUartGetPacket+0xe0>
			DecoderState = WAIT_ON_DATA;
    3b80:	86 e0       	ldi	r24, 0x06	; 6
    3b82:	80 93 32 03 	sts	0x0332, r24
    3b86:	80 e0       	ldi	r24, 0x00	; 0
    3b88:	af cf       	rjmp	.-162    	; 0x3ae8 <zoProtocolUartGetPacket+0x60>
	case WAIT_ON_HEADER_0:
		DecoderState = (c==ZO_PROTOCOL_HEADER_0)?WAIT_ON_HEADER_1:WAIT_ON_HEADER_0;
		break;

	case WAIT_ON_HEADER_1:
		DecoderState = (c==ZO_PROTOCOL_HEADER_1)?WAIT_ON_ADDRESSED_NODE_ID:WAIT_ON_HEADER_0;
    3b8a:	89 81       	ldd	r24, Y+1	; 0x01
    3b8c:	8a 3a       	cpi	r24, 0xAA	; 170
    3b8e:	49 f0       	breq	.+18     	; 0x3ba2 <zoProtocolUartGetPacket+0x11a>
    3b90:	80 e0       	ldi	r24, 0x00	; 0
    3b92:	98 cf       	rjmp	.-208    	; 0x3ac4 <zoProtocolUartGetPacket+0x3c>

	case WAIT_ON_ADDRESSED_NODE_ID:
		if( ( (c & zoProtocolUartLAM) == (OwnNodeID & zoProtocolUartLAM ) ) ||
			( c == ZO_PROTOCOL_BROADCAST_ID ) )
		{
			DecoderState = WAIT_ON_OWN_NODE_ID;
    3b94:	83 e0       	ldi	r24, 0x03	; 3
    3b96:	80 93 32 03 	sts	0x0332, r24
			packet->AddressedNodeID = c;
    3b9a:	d8 01       	movw	r26, r16
    3b9c:	2c 93       	st	X, r18
    3b9e:	80 e0       	ldi	r24, 0x00	; 0
    3ba0:	a3 cf       	rjmp	.-186    	; 0x3ae8 <zoProtocolUartGetPacket+0x60>
	case WAIT_ON_HEADER_0:
		DecoderState = (c==ZO_PROTOCOL_HEADER_0)?WAIT_ON_HEADER_1:WAIT_ON_HEADER_0;
		break;

	case WAIT_ON_HEADER_1:
		DecoderState = (c==ZO_PROTOCOL_HEADER_1)?WAIT_ON_ADDRESSED_NODE_ID:WAIT_ON_HEADER_0;
    3ba2:	82 e0       	ldi	r24, 0x02	; 2
    3ba4:	8f cf       	rjmp	.-226    	; 0x3ac4 <zoProtocolUartGetPacket+0x3c>

00003ba6 <zoProtocolUartPutPacket>:

	return success;
}

bool zoProtocolUartPutPacket(const ZO_PROTOCOL_PACKET* packet)
{
    3ba6:	cf 93       	push	r28
    3ba8:	df 93       	push	r29
    3baa:	ec 01       	movw	r28, r24
	if(!zoUartPutChar(ZO_PROTOCOL_HEADER_0))
    3bac:	85 e5       	ldi	r24, 0x55	; 85
    3bae:	0e 94 54 1c 	call	0x38a8	; 0x38a8 <zoUartPutChar>
    3bb2:	88 23       	and	r24, r24
    3bb4:	21 f4       	brne	.+8      	; 0x3bbe <zoProtocolUartPutPacket+0x18>
		return FALSE;

	if(!zoUartPutData(packet->data,packet->byteCount))
		return FALSE;

	if(!zoUartPutChar(packet->lrc))
    3bb6:	80 e0       	ldi	r24, 0x00	; 0
		return FALSE;
	
	return TRUE;
}
    3bb8:	df 91       	pop	r29
    3bba:	cf 91       	pop	r28
    3bbc:	08 95       	ret
bool zoProtocolUartPutPacket(const ZO_PROTOCOL_PACKET* packet)
{
	if(!zoUartPutChar(ZO_PROTOCOL_HEADER_0))
		return FALSE;

	if(!zoUartPutChar(ZO_PROTOCOL_HEADER_1))
    3bbe:	8a ea       	ldi	r24, 0xAA	; 170
    3bc0:	0e 94 54 1c 	call	0x38a8	; 0x38a8 <zoUartPutChar>
    3bc4:	88 23       	and	r24, r24
    3bc6:	b9 f3       	breq	.-18     	; 0x3bb6 <zoProtocolUartPutPacket+0x10>
		return FALSE;

	if(!zoUartPutChar(packet->AddressedNodeID))
    3bc8:	88 81       	ld	r24, Y
    3bca:	0e 94 54 1c 	call	0x38a8	; 0x38a8 <zoUartPutChar>
    3bce:	88 23       	and	r24, r24
    3bd0:	91 f3       	breq	.-28     	; 0x3bb6 <zoProtocolUartPutPacket+0x10>
		return FALSE;

	if(!zoUartPutChar(packet->OwnNodeID))
    3bd2:	89 81       	ldd	r24, Y+1	; 0x01
    3bd4:	0e 94 54 1c 	call	0x38a8	; 0x38a8 <zoUartPutChar>
    3bd8:	88 23       	and	r24, r24
    3bda:	69 f3       	breq	.-38     	; 0x3bb6 <zoProtocolUartPutPacket+0x10>
		return FALSE;

	if(!zoUartPutChar(packet->commandID))
    3bdc:	8a 81       	ldd	r24, Y+2	; 0x02
    3bde:	0e 94 54 1c 	call	0x38a8	; 0x38a8 <zoUartPutChar>
    3be2:	88 23       	and	r24, r24
    3be4:	41 f3       	breq	.-48     	; 0x3bb6 <zoProtocolUartPutPacket+0x10>
		return FALSE;

	if(!zoUartPutChar(packet->byteCount))
    3be6:	8b 81       	ldd	r24, Y+3	; 0x03
    3be8:	0e 94 54 1c 	call	0x38a8	; 0x38a8 <zoUartPutChar>
    3bec:	88 23       	and	r24, r24
    3bee:	19 f3       	breq	.-58     	; 0x3bb6 <zoProtocolUartPutPacket+0x10>
		return FALSE;

	if(!zoUartPutData(packet->data,packet->byteCount))
    3bf0:	ce 01       	movw	r24, r28
    3bf2:	04 96       	adiw	r24, 0x04	; 4
    3bf4:	6b 81       	ldd	r22, Y+3	; 0x03
    3bf6:	0e 94 99 1c 	call	0x3932	; 0x3932 <zoUartPutData>
    3bfa:	88 23       	and	r24, r24
    3bfc:	e1 f2       	breq	.-72     	; 0x3bb6 <zoProtocolUartPutPacket+0x10>
		return FALSE;

	if(!zoUartPutChar(packet->lrc))
    3bfe:	8c 89       	ldd	r24, Y+20	; 0x14
    3c00:	0e 94 54 1c 	call	0x38a8	; 0x38a8 <zoUartPutChar>
    3c04:	88 23       	and	r24, r24
    3c06:	b9 f2       	breq	.-82     	; 0x3bb6 <zoProtocolUartPutPacket+0x10>
    3c08:	8f ef       	ldi	r24, 0xFF	; 255
    3c0a:	d6 cf       	rjmp	.-84     	; 0x3bb8 <zoProtocolUartPutPacket+0x12>

00003c0c <zoProtocolUartInit>:
static u08 zoProtocolUartLAM = 0xFF;

ZO_ERROR *zoProtocolUartError = &zoUartError;

bool zoProtocolUartInit(ZO_PROTOCOL_HW_TYPE hw, u08 ownNodeID, u32 baudRate)
{
    3c0c:	df 92       	push	r13
    3c0e:	ef 92       	push	r14
    3c10:	ff 92       	push	r15
    3c12:	0f 93       	push	r16
    3c14:	1f 93       	push	r17
    3c16:	d6 2e       	mov	r13, r22
    3c18:	79 01       	movw	r14, r18
    3c1a:	8a 01       	movw	r16, r20
	bool success = TRUE;
	
	if( hw == ZO_PROTOCOL_HW_HALF_DUPLEX_RS485 )
    3c1c:	82 30       	cpi	r24, 0x02	; 2
    3c1e:	c1 f0       	breq	.+48     	; 0x3c50 <zoProtocolUartInit+0x44>
		zoUartInitRs485(&PORTD,PD2);
	
	//no error checking for valid node ID, this is left to be done in a higher level
	OwnNodeID = ownNodeID;	//store the node ID
    3c20:	d0 92 33 03 	sts	0x0333, r13

	if(!zoUartInit())
    3c24:	0e 94 f5 1c 	call	0x39ea	; 0x39ea <zoUartInit>
    3c28:	88 23       	and	r24, r24
    3c2a:	79 f4       	brne	.+30     	; 0x3c4a <zoProtocolUartInit+0x3e>
    3c2c:	dd 24       	eor	r13, r13
		success = FALSE;
	
	if(!zoUartSetBaud(baudRate))
    3c2e:	c8 01       	movw	r24, r16
    3c30:	b7 01       	movw	r22, r14
    3c32:	0e 94 07 1b 	call	0x360e	; 0x360e <zoUartSetBaud>
    3c36:	88 23       	and	r24, r24
    3c38:	09 f4       	brne	.+2      	; 0x3c3c <zoProtocolUartInit+0x30>
    3c3a:	dd 24       	eor	r13, r13
		success = FALSE;

	return success;
}
    3c3c:	8d 2d       	mov	r24, r13
    3c3e:	1f 91       	pop	r17
    3c40:	0f 91       	pop	r16
    3c42:	ff 90       	pop	r15
    3c44:	ef 90       	pop	r14
    3c46:	df 90       	pop	r13
    3c48:	08 95       	ret
		zoUartInitRs485(&PORTD,PD2);
	
	//no error checking for valid node ID, this is left to be done in a higher level
	OwnNodeID = ownNodeID;	//store the node ID

	if(!zoUartInit())
    3c4a:	dd 24       	eor	r13, r13
    3c4c:	da 94       	dec	r13
    3c4e:	ef cf       	rjmp	.-34     	; 0x3c2e <zoProtocolUartInit+0x22>
bool zoProtocolUartInit(ZO_PROTOCOL_HW_TYPE hw, u08 ownNodeID, u32 baudRate)
{
	bool success = TRUE;
	
	if( hw == ZO_PROTOCOL_HW_HALF_DUPLEX_RS485 )
		zoUartInitRs485(&PORTD,PD2);
    3c50:	8b e2       	ldi	r24, 0x2B	; 43
    3c52:	90 e0       	ldi	r25, 0x00	; 0
    3c54:	62 e0       	ldi	r22, 0x02	; 2
    3c56:	0e 94 48 1b 	call	0x3690	; 0x3690 <zoUartInitRs485>
    3c5a:	e2 cf       	rjmp	.-60     	; 0x3c20 <zoProtocolUartInit+0x14>

00003c5c <zoBufferIsEmpty>:
#include <stdlib.h>
#include <string.h>
#include "zoMcu.h"

inline bool zoBufferIsEmpty(ZO_BUFFER *p)
{
    3c5c:	fc 01       	movw	r30, r24
	return (p->ctr > 0)?FALSE:TRUE;
    3c5e:	81 81       	ldd	r24, Z+1	; 0x01
    3c60:	88 23       	and	r24, r24
    3c62:	11 f0       	breq	.+4      	; 0x3c68 <zoBufferIsEmpty+0xc>
    3c64:	80 e0       	ldi	r24, 0x00	; 0
}
    3c66:	08 95       	ret
#include <string.h>
#include "zoMcu.h"

inline bool zoBufferIsEmpty(ZO_BUFFER *p)
{
	return (p->ctr > 0)?FALSE:TRUE;
    3c68:	8f ef       	ldi	r24, 0xFF	; 255
    3c6a:	08 95       	ret

00003c6c <zoBufferIsFull>:
}

inline bool zoBufferIsFull(ZO_BUFFER *p)
{
    3c6c:	fc 01       	movw	r30, r24
	return (p->ctr < p->size)?FALSE:TRUE;
    3c6e:	91 81       	ldd	r25, Z+1	; 0x01
    3c70:	80 81       	ld	r24, Z
    3c72:	98 17       	cp	r25, r24
    3c74:	10 f4       	brcc	.+4      	; 0x3c7a <zoBufferIsFull+0xe>
    3c76:	80 e0       	ldi	r24, 0x00	; 0
}
    3c78:	08 95       	ret
	return (p->ctr > 0)?FALSE:TRUE;
}

inline bool zoBufferIsFull(ZO_BUFFER *p)
{
	return (p->ctr < p->size)?FALSE:TRUE;
    3c7a:	8f ef       	ldi	r24, 0xFF	; 255
    3c7c:	08 95       	ret

00003c7e <zoBufferFlush>:
}

void zoBufferFlush(ZO_BUFFER *p)
{
    3c7e:	fc 01       	movw	r30, r24
	enterCritical();
    3c80:	0f b6       	in	r0, 0x3f	; 63
    3c82:	0f 92       	push	r0
    3c84:	f8 94       	cli
	p->pIn = p->data;
    3c86:	86 81       	ldd	r24, Z+6	; 0x06
    3c88:	97 81       	ldd	r25, Z+7	; 0x07
    3c8a:	93 83       	std	Z+3, r25	; 0x03
    3c8c:	82 83       	std	Z+2, r24	; 0x02
	p->pOut = p->data;
    3c8e:	86 81       	ldd	r24, Z+6	; 0x06
    3c90:	97 81       	ldd	r25, Z+7	; 0x07
    3c92:	95 83       	std	Z+5, r25	; 0x05
    3c94:	84 83       	std	Z+4, r24	; 0x04
	p->ctr = 0;
    3c96:	11 82       	std	Z+1, r1	; 0x01
	exitCritical();
    3c98:	0f 90       	pop	r0
    3c9a:	0f be       	out	0x3f, r0	; 63
}
    3c9c:	08 95       	ret

00003c9e <zoBufferGetIsr>:

	return success;
}

inline u08  zoBufferGetIsr(ZO_BUFFER *p)
{
    3c9e:	dc 01       	movw	r26, r24
	u08 c;

	p->ctr--;							//decrement count of bytes in buffer
    3ca0:	11 96       	adiw	r26, 0x01	; 1
    3ca2:	8c 91       	ld	r24, X
    3ca4:	11 97       	sbiw	r26, 0x01	; 1
    3ca6:	81 50       	subi	r24, 0x01	; 1
    3ca8:	11 96       	adiw	r26, 0x01	; 1
    3caa:	8c 93       	st	X, r24
    3cac:	11 97       	sbiw	r26, 0x01	; 1
	c = *p->pOut++;					//get one piece of data
    3cae:	14 96       	adiw	r26, 0x04	; 4
    3cb0:	ed 91       	ld	r30, X+
    3cb2:	fc 91       	ld	r31, X
    3cb4:	15 97       	sbiw	r26, 0x05	; 5
    3cb6:	31 91       	ld	r19, Z+
    3cb8:	15 96       	adiw	r26, 0x05	; 5
    3cba:	fc 93       	st	X, r31
    3cbc:	ee 93       	st	-X, r30
    3cbe:	14 97       	sbiw	r26, 0x04	; 4
	if(p->pOut == &p->data[p->size])	//wrap pout pointer
    3cc0:	14 96       	adiw	r26, 0x04	; 4
    3cc2:	4d 91       	ld	r20, X+
    3cc4:	5c 91       	ld	r21, X
    3cc6:	15 97       	sbiw	r26, 0x05	; 5
    3cc8:	16 96       	adiw	r26, 0x06	; 6
    3cca:	8d 91       	ld	r24, X+
    3ccc:	9c 91       	ld	r25, X
    3cce:	17 97       	sbiw	r26, 0x07	; 7
    3cd0:	2c 91       	ld	r18, X
    3cd2:	82 0f       	add	r24, r18
    3cd4:	91 1d       	adc	r25, r1
    3cd6:	48 17       	cp	r20, r24
    3cd8:	59 07       	cpc	r21, r25
    3cda:	11 f0       	breq	.+4      	; 0x3ce0 <zoBufferGetIsr+0x42>
		p->pOut = &p->data[0];
	
	return c;
}
    3cdc:	83 2f       	mov	r24, r19
    3cde:	08 95       	ret
	u08 c;

	p->ctr--;							//decrement count of bytes in buffer
	c = *p->pOut++;					//get one piece of data
	if(p->pOut == &p->data[p->size])	//wrap pout pointer
		p->pOut = &p->data[0];
    3ce0:	16 96       	adiw	r26, 0x06	; 6
    3ce2:	8d 91       	ld	r24, X+
    3ce4:	9c 91       	ld	r25, X
    3ce6:	17 97       	sbiw	r26, 0x07	; 7
    3ce8:	15 96       	adiw	r26, 0x05	; 5
    3cea:	9c 93       	st	X, r25
    3cec:	8e 93       	st	-X, r24
    3cee:	14 97       	sbiw	r26, 0x04	; 4
	
	return c;
}
    3cf0:	83 2f       	mov	r24, r19
    3cf2:	08 95       	ret

00003cf4 <zoBufferPutIsr>:
	exitCritical();
	return c;	
}

inline void zoBufferPutIsr(ZO_BUFFER *p,const u08 data)
{
    3cf4:	dc 01       	movw	r26, r24
	p->ctr++;
    3cf6:	11 96       	adiw	r26, 0x01	; 1
    3cf8:	8c 91       	ld	r24, X
    3cfa:	11 97       	sbiw	r26, 0x01	; 1
    3cfc:	8f 5f       	subi	r24, 0xFF	; 255
    3cfe:	11 96       	adiw	r26, 0x01	; 1
    3d00:	8c 93       	st	X, r24
    3d02:	11 97       	sbiw	r26, 0x01	; 1
	*p->pIn++ = data;
    3d04:	12 96       	adiw	r26, 0x02	; 2
    3d06:	ed 91       	ld	r30, X+
    3d08:	fc 91       	ld	r31, X
    3d0a:	13 97       	sbiw	r26, 0x03	; 3
    3d0c:	61 93       	st	Z+, r22
    3d0e:	13 96       	adiw	r26, 0x03	; 3
    3d10:	fc 93       	st	X, r31
    3d12:	ee 93       	st	-X, r30
    3d14:	12 97       	sbiw	r26, 0x02	; 2
	if(p->pIn == &p->data[p->size])	//wrap the pIn ptr
    3d16:	12 96       	adiw	r26, 0x02	; 2
    3d18:	4d 91       	ld	r20, X+
    3d1a:	5c 91       	ld	r21, X
    3d1c:	13 97       	sbiw	r26, 0x03	; 3
    3d1e:	16 96       	adiw	r26, 0x06	; 6
    3d20:	8d 91       	ld	r24, X+
    3d22:	9c 91       	ld	r25, X
    3d24:	17 97       	sbiw	r26, 0x07	; 7
    3d26:	2c 91       	ld	r18, X
    3d28:	82 0f       	add	r24, r18
    3d2a:	91 1d       	adc	r25, r1
    3d2c:	48 17       	cp	r20, r24
    3d2e:	59 07       	cpc	r21, r25
    3d30:	09 f0       	breq	.+2      	; 0x3d34 <zoBufferPutIsr+0x40>
    3d32:	08 95       	ret
		p->pIn = &p->data[0];
    3d34:	16 96       	adiw	r26, 0x06	; 6
    3d36:	8d 91       	ld	r24, X+
    3d38:	9c 91       	ld	r25, X
    3d3a:	17 97       	sbiw	r26, 0x07	; 7
    3d3c:	13 96       	adiw	r26, 0x03	; 3
    3d3e:	9c 93       	st	X, r25
    3d40:	8e 93       	st	-X, r24
    3d42:	12 97       	sbiw	r26, 0x02	; 2
    3d44:	08 95       	ret

00003d46 <zoBufferReadIsr>:
	zoBufferPutIsr(p,data);
	exitCritical();
}

inline u08 zoBufferReadIsr(ZO_BUFFER *p,u08 index)
{
    3d46:	dc 01       	movw	r26, r24
	u08* c;
	
	c = p->pOut + index;
    3d48:	14 96       	adiw	r26, 0x04	; 4
    3d4a:	ed 91       	ld	r30, X+
    3d4c:	fc 91       	ld	r31, X
    3d4e:	15 97       	sbiw	r26, 0x05	; 5
    3d50:	70 e0       	ldi	r23, 0x00	; 0
    3d52:	e6 0f       	add	r30, r22
    3d54:	f7 1f       	adc	r31, r23
	if( c > &p->data[p->size] )
    3d56:	16 96       	adiw	r26, 0x06	; 6
    3d58:	8d 91       	ld	r24, X+
    3d5a:	9c 91       	ld	r25, X
    3d5c:	17 97       	sbiw	r26, 0x07	; 7
    3d5e:	2c 91       	ld	r18, X
    3d60:	82 0f       	add	r24, r18
    3d62:	91 1d       	adc	r25, r1
    3d64:	8e 17       	cp	r24, r30
    3d66:	9f 07       	cpc	r25, r31
    3d68:	48 f4       	brcc	.+18     	; 0x3d7c <zoBufferReadIsr+0x36>
		c = p->pOut - p->size + index;
    3d6a:	14 96       	adiw	r26, 0x04	; 4
    3d6c:	ed 91       	ld	r30, X+
    3d6e:	fc 91       	ld	r31, X
    3d70:	15 97       	sbiw	r26, 0x05	; 5
    3d72:	8c 91       	ld	r24, X
    3d74:	68 1b       	sub	r22, r24
    3d76:	71 09       	sbc	r23, r1
    3d78:	e6 0f       	add	r30, r22
    3d7a:	f7 1f       	adc	r31, r23
	
	return *c;
}
    3d7c:	80 81       	ld	r24, Z
    3d7e:	08 95       	ret

00003d80 <zoBufferRead>:

u08  zoBufferRead(ZO_BUFFER *p,u08 index)
{
    3d80:	dc 01       	movw	r26, r24
	u08 c;
	enterCritical();
    3d82:	0f b6       	in	r0, 0x3f	; 63
    3d84:	0f 92       	push	r0
    3d86:	f8 94       	cli

inline u08 zoBufferReadIsr(ZO_BUFFER *p,u08 index)
{
	u08* c;
	
	c = p->pOut + index;
    3d88:	14 96       	adiw	r26, 0x04	; 4
    3d8a:	ed 91       	ld	r30, X+
    3d8c:	fc 91       	ld	r31, X
    3d8e:	15 97       	sbiw	r26, 0x05	; 5
    3d90:	70 e0       	ldi	r23, 0x00	; 0
    3d92:	e6 0f       	add	r30, r22
    3d94:	f7 1f       	adc	r31, r23
	if( c > &p->data[p->size] )
    3d96:	16 96       	adiw	r26, 0x06	; 6
    3d98:	8d 91       	ld	r24, X+
    3d9a:	9c 91       	ld	r25, X
    3d9c:	17 97       	sbiw	r26, 0x07	; 7
    3d9e:	2c 91       	ld	r18, X
    3da0:	82 0f       	add	r24, r18
    3da2:	91 1d       	adc	r25, r1
    3da4:	8e 17       	cp	r24, r30
    3da6:	9f 07       	cpc	r25, r31
    3da8:	48 f4       	brcc	.+18     	; 0x3dbc <zoBufferRead+0x3c>
		c = p->pOut - p->size + index;
    3daa:	14 96       	adiw	r26, 0x04	; 4
    3dac:	ed 91       	ld	r30, X+
    3dae:	fc 91       	ld	r31, X
    3db0:	15 97       	sbiw	r26, 0x05	; 5
    3db2:	8c 91       	ld	r24, X
    3db4:	68 1b       	sub	r22, r24
    3db6:	71 09       	sbc	r23, r1
    3db8:	e6 0f       	add	r30, r22
    3dba:	f7 1f       	adc	r31, r23
u08  zoBufferRead(ZO_BUFFER *p,u08 index)
{
	u08 c;
	enterCritical();
	c = zoBufferReadIsr(p,index);
	exitCritical();
    3dbc:	0f 90       	pop	r0
    3dbe:	0f be       	out	0x3f, r0	; 63
	return c;
}
    3dc0:	80 81       	ld	r24, Z
    3dc2:	08 95       	ret

00003dc4 <zoBufferInit>:
	p->ctr = 0;
	exitCritical();
}

bool zoBufferInit(ZO_BUFFER *p,u08 size)
{
    3dc4:	cf 93       	push	r28
    3dc6:	df 93       	push	r29
    3dc8:	ec 01       	movw	r28, r24
    3dca:	86 2f       	mov	r24, r22
	bool success = FALSE;
	enterCritical();
    3dcc:	0f b6       	in	r0, 0x3f	; 63
    3dce:	0f 92       	push	r0
    3dd0:	f8 94       	cli

	p->ctr = 0;						//initialize counter to 0
    3dd2:	19 82       	std	Y+1, r1	; 0x01
	p->size = size;					//store size
    3dd4:	68 83       	st	Y, r22
	p->data = (u08*)calloc(size,1);		//allocate memory for data
    3dd6:	90 e0       	ldi	r25, 0x00	; 0
    3dd8:	61 e0       	ldi	r22, 0x01	; 1
    3dda:	70 e0       	ldi	r23, 0x00	; 0
    3ddc:	0e 94 78 25 	call	0x4af0	; 0x4af0 <calloc>
    3de0:	9f 83       	std	Y+7, r25	; 0x07
    3de2:	8e 83       	std	Y+6, r24	; 0x06
	
	if( p->data != NULL )				//if allocation was successfull
    3de4:	8e 81       	ldd	r24, Y+6	; 0x06
    3de6:	9f 81       	ldd	r25, Y+7	; 0x07
    3de8:	89 2b       	or	r24, r25
    3dea:	31 f4       	brne	.+12     	; 0x3df8 <zoBufferInit+0x34>
    3dec:	80 e0       	ldi	r24, 0x00	; 0
		p->pIn = p->data;	//initialize in pointer to start of data
		p->pOut = p->data;	//initialize out pinter to start of data
		success = TRUE;
	}

	exitCritical();
    3dee:	0f 90       	pop	r0
    3df0:	0f be       	out	0x3f, r0	; 63

	return success;
}
    3df2:	df 91       	pop	r29
    3df4:	cf 91       	pop	r28
    3df6:	08 95       	ret
	p->size = size;					//store size
	p->data = (u08*)calloc(size,1);		//allocate memory for data
	
	if( p->data != NULL )				//if allocation was successfull
	{
		p->pIn = p->data;	//initialize in pointer to start of data
    3df8:	8e 81       	ldd	r24, Y+6	; 0x06
    3dfa:	9f 81       	ldd	r25, Y+7	; 0x07
    3dfc:	9b 83       	std	Y+3, r25	; 0x03
    3dfe:	8a 83       	std	Y+2, r24	; 0x02
		p->pOut = p->data;	//initialize out pinter to start of data
    3e00:	8e 81       	ldd	r24, Y+6	; 0x06
    3e02:	9f 81       	ldd	r25, Y+7	; 0x07
    3e04:	9d 83       	std	Y+5, r25	; 0x05
    3e06:	8c 83       	std	Y+4, r24	; 0x04
    3e08:	8f ef       	ldi	r24, 0xFF	; 255
		success = TRUE;
	}

	exitCritical();
    3e0a:	0f 90       	pop	r0
    3e0c:	0f be       	out	0x3f, r0	; 63

	return success;
}
    3e0e:	df 91       	pop	r29
    3e10:	cf 91       	pop	r28
    3e12:	08 95       	ret

00003e14 <zoBufferPut>:
	if(p->pIn == &p->data[p->size])	//wrap the pIn ptr
		p->pIn = &p->data[0];
}

void zoBufferPut(ZO_BUFFER *p,const u08 data)
{
    3e14:	dc 01       	movw	r26, r24
	enterCritical();
    3e16:	0f b6       	in	r0, 0x3f	; 63
    3e18:	0f 92       	push	r0
    3e1a:	f8 94       	cli
	return c;	
}

inline void zoBufferPutIsr(ZO_BUFFER *p,const u08 data)
{
	p->ctr++;
    3e1c:	11 96       	adiw	r26, 0x01	; 1
    3e1e:	8c 91       	ld	r24, X
    3e20:	11 97       	sbiw	r26, 0x01	; 1
    3e22:	8f 5f       	subi	r24, 0xFF	; 255
    3e24:	11 96       	adiw	r26, 0x01	; 1
    3e26:	8c 93       	st	X, r24
    3e28:	11 97       	sbiw	r26, 0x01	; 1
	*p->pIn++ = data;
    3e2a:	12 96       	adiw	r26, 0x02	; 2
    3e2c:	ed 91       	ld	r30, X+
    3e2e:	fc 91       	ld	r31, X
    3e30:	13 97       	sbiw	r26, 0x03	; 3
    3e32:	61 93       	st	Z+, r22
    3e34:	13 96       	adiw	r26, 0x03	; 3
    3e36:	fc 93       	st	X, r31
    3e38:	ee 93       	st	-X, r30
    3e3a:	12 97       	sbiw	r26, 0x02	; 2
	if(p->pIn == &p->data[p->size])	//wrap the pIn ptr
    3e3c:	12 96       	adiw	r26, 0x02	; 2
    3e3e:	4d 91       	ld	r20, X+
    3e40:	5c 91       	ld	r21, X
    3e42:	13 97       	sbiw	r26, 0x03	; 3
    3e44:	16 96       	adiw	r26, 0x06	; 6
    3e46:	8d 91       	ld	r24, X+
    3e48:	9c 91       	ld	r25, X
    3e4a:	17 97       	sbiw	r26, 0x07	; 7
    3e4c:	2c 91       	ld	r18, X
    3e4e:	82 0f       	add	r24, r18
    3e50:	91 1d       	adc	r25, r1
    3e52:	48 17       	cp	r20, r24
    3e54:	59 07       	cpc	r21, r25
    3e56:	19 f0       	breq	.+6      	; 0x3e5e <zoBufferPut+0x4a>

void zoBufferPut(ZO_BUFFER *p,const u08 data)
{
	enterCritical();
	zoBufferPutIsr(p,data);
	exitCritical();
    3e58:	0f 90       	pop	r0
    3e5a:	0f be       	out	0x3f, r0	; 63
}
    3e5c:	08 95       	ret
inline void zoBufferPutIsr(ZO_BUFFER *p,const u08 data)
{
	p->ctr++;
	*p->pIn++ = data;
	if(p->pIn == &p->data[p->size])	//wrap the pIn ptr
		p->pIn = &p->data[0];
    3e5e:	16 96       	adiw	r26, 0x06	; 6
    3e60:	8d 91       	ld	r24, X+
    3e62:	9c 91       	ld	r25, X
    3e64:	17 97       	sbiw	r26, 0x07	; 7
    3e66:	13 96       	adiw	r26, 0x03	; 3
    3e68:	9c 93       	st	X, r25
    3e6a:	8e 93       	st	-X, r24
    3e6c:	12 97       	sbiw	r26, 0x02	; 2

void zoBufferPut(ZO_BUFFER *p,const u08 data)
{
	enterCritical();
	zoBufferPutIsr(p,data);
	exitCritical();
    3e6e:	0f 90       	pop	r0
    3e70:	0f be       	out	0x3f, r0	; 63
}
    3e72:	08 95       	ret

00003e74 <zoBufferGet>:
	
	return c;
}

u08  zoBufferGet(ZO_BUFFER *p)
{
    3e74:	dc 01       	movw	r26, r24
	u08 c;
	
	enterCritical();
    3e76:	0f b6       	in	r0, 0x3f	; 63
    3e78:	0f 92       	push	r0
    3e7a:	f8 94       	cli

inline u08  zoBufferGetIsr(ZO_BUFFER *p)
{
	u08 c;

	p->ctr--;							//decrement count of bytes in buffer
    3e7c:	11 96       	adiw	r26, 0x01	; 1
    3e7e:	8c 91       	ld	r24, X
    3e80:	11 97       	sbiw	r26, 0x01	; 1
    3e82:	81 50       	subi	r24, 0x01	; 1
    3e84:	11 96       	adiw	r26, 0x01	; 1
    3e86:	8c 93       	st	X, r24
    3e88:	11 97       	sbiw	r26, 0x01	; 1
	c = *p->pOut++;					//get one piece of data
    3e8a:	14 96       	adiw	r26, 0x04	; 4
    3e8c:	ed 91       	ld	r30, X+
    3e8e:	fc 91       	ld	r31, X
    3e90:	15 97       	sbiw	r26, 0x05	; 5
    3e92:	31 91       	ld	r19, Z+
    3e94:	15 96       	adiw	r26, 0x05	; 5
    3e96:	fc 93       	st	X, r31
    3e98:	ee 93       	st	-X, r30
    3e9a:	14 97       	sbiw	r26, 0x04	; 4
	if(p->pOut == &p->data[p->size])	//wrap pout pointer
    3e9c:	14 96       	adiw	r26, 0x04	; 4
    3e9e:	4d 91       	ld	r20, X+
    3ea0:	5c 91       	ld	r21, X
    3ea2:	15 97       	sbiw	r26, 0x05	; 5
    3ea4:	16 96       	adiw	r26, 0x06	; 6
    3ea6:	8d 91       	ld	r24, X+
    3ea8:	9c 91       	ld	r25, X
    3eaa:	17 97       	sbiw	r26, 0x07	; 7
    3eac:	2c 91       	ld	r18, X
    3eae:	82 0f       	add	r24, r18
    3eb0:	91 1d       	adc	r25, r1
    3eb2:	48 17       	cp	r20, r24
    3eb4:	59 07       	cpc	r21, r25
    3eb6:	21 f0       	breq	.+8      	; 0x3ec0 <zoBufferGet+0x4c>
{
	u08 c;
	
	enterCritical();
	c= zoBufferGetIsr(p);
	exitCritical();
    3eb8:	0f 90       	pop	r0
    3eba:	0f be       	out	0x3f, r0	; 63
	return c;	
}
    3ebc:	83 2f       	mov	r24, r19
    3ebe:	08 95       	ret
	u08 c;

	p->ctr--;							//decrement count of bytes in buffer
	c = *p->pOut++;					//get one piece of data
	if(p->pOut == &p->data[p->size])	//wrap pout pointer
		p->pOut = &p->data[0];
    3ec0:	16 96       	adiw	r26, 0x06	; 6
    3ec2:	8d 91       	ld	r24, X+
    3ec4:	9c 91       	ld	r25, X
    3ec6:	17 97       	sbiw	r26, 0x07	; 7
    3ec8:	15 96       	adiw	r26, 0x05	; 5
    3eca:	9c 93       	st	X, r25
    3ecc:	8e 93       	st	-X, r24
    3ece:	14 97       	sbiw	r26, 0x04	; 4
{
	u08 c;
	
	enterCritical();
	c= zoBufferGetIsr(p);
	exitCritical();
    3ed0:	0f 90       	pop	r0
    3ed2:	0f be       	out	0x3f, r0	; 63
	return c;	
}
    3ed4:	83 2f       	mov	r24, r19
    3ed6:	08 95       	ret

00003ed8 <zoIcpSetPrescaler>:
	sei();											//enable global interrupts
}

void zoIcpSetPrescaler(ZO_ICP_PRESCALE prescale)
{
	enterCritical();
    3ed8:	0f b6       	in	r0, 0x3f	; 63
    3eda:	0f 92       	push	r0
    3edc:	f8 94       	cli
	TCCR1B = (TCCR1B & 0xF8) | prescale;
    3ede:	e1 e8       	ldi	r30, 0x81	; 129
    3ee0:	f0 e0       	ldi	r31, 0x00	; 0
    3ee2:	90 81       	ld	r25, Z
    3ee4:	98 7f       	andi	r25, 0xF8	; 248
    3ee6:	98 2b       	or	r25, r24
    3ee8:	90 83       	st	Z, r25
	exitCritical();
    3eea:	0f 90       	pop	r0
    3eec:	0f be       	out	0x3f, r0	; 63
}
    3eee:	08 95       	ret

00003ef0 <zoIcpSetMode>:

void zoIcpSetMode(ZO_ICP_MODE mode)
{
	enterCritical();
    3ef0:	0f b6       	in	r0, 0x3f	; 63
    3ef2:	0f 92       	push	r0
    3ef4:	f8 94       	cli

	IcpMode = mode;
    3ef6:	80 93 42 03 	sts	0x0342, r24

	DDRB &= ~_BV(PB0);								//configure PB0 as input
    3efa:	20 98       	cbi	0x04, 0	; 4
	PORTB |= _BV(PB0);								//enable pull up
    3efc:	28 9a       	sbi	0x05, 0	; 5

	if( mode == ZO_ICP_MODE_LOW_HIGH_LOW )
    3efe:	81 30       	cpi	r24, 0x01	; 1
    3f00:	41 f0       	breq	.+16     	; 0x3f12 <zoIcpSetMode+0x22>
		TCCR1B |= _BV(6) ;		//configure edge select as per mode
	else
		TCCR1B &= ~_BV(6);
    3f02:	80 91 81 00 	lds	r24, 0x0081
    3f06:	8f 7b       	andi	r24, 0xBF	; 191
    3f08:	80 93 81 00 	sts	0x0081, r24

	exitCritical();
    3f0c:	0f 90       	pop	r0
    3f0e:	0f be       	out	0x3f, r0	; 63
}
    3f10:	08 95       	ret

	DDRB &= ~_BV(PB0);								//configure PB0 as input
	PORTB |= _BV(PB0);								//enable pull up

	if( mode == ZO_ICP_MODE_LOW_HIGH_LOW )
		TCCR1B |= _BV(6) ;		//configure edge select as per mode
    3f12:	80 91 81 00 	lds	r24, 0x0081
    3f16:	80 64       	ori	r24, 0x40	; 64
    3f18:	80 93 81 00 	sts	0x0081, r24
	else
		TCCR1B &= ~_BV(6);

	exitCritical();
    3f1c:	0f 90       	pop	r0
    3f1e:	0f be       	out	0x3f, r0	; 63
}
    3f20:	08 95       	ret

00003f22 <zoIcpAttachUserFunctionOnCapture>:

void zoIcpAttachUserFunctionOnCapture( void(*userFunc)(u16 timerTicks) )
{
	enterCritical();
    3f22:	0f b6       	in	r0, 0x3f	; 63
    3f24:	0f 92       	push	r0
    3f26:	f8 94       	cli
	IcpUserFunction = userFunc;
    3f28:	90 93 41 03 	sts	0x0341, r25
    3f2c:	80 93 40 03 	sts	0x0340, r24
	exitCritical();
    3f30:	0f 90       	pop	r0
    3f32:	0f be       	out	0x3f, r0	; 63
}
    3f34:	08 95       	ret

00003f36 <zoIcpAttachUserFunctionOnOverFlow>:

void zoIcpAttachUserFunctionOnOverFlow(void(*userFunc)(void))
{
	enterCritical();
    3f36:	0f b6       	in	r0, 0x3f	; 63
    3f38:	0f 92       	push	r0
    3f3a:	f8 94       	cli
	OvflUserFunction = userFunc;
    3f3c:	90 93 36 03 	sts	0x0336, r25
    3f40:	80 93 35 03 	sts	0x0335, r24
	exitCritical();
    3f44:	0f 90       	pop	r0
    3f46:	0f be       	out	0x3f, r0	; 63
}
    3f48:	08 95       	ret

00003f4a <zoIcpAttachUserFunctionOnCaptureFailure>:

void zoIcpAttachUserFunctionOnCaptureFailure(void(*userFunc)(void))
{
	enterCritical();
    3f4a:	0f b6       	in	r0, 0x3f	; 63
    3f4c:	0f 92       	push	r0
    3f4e:	f8 94       	cli
	IcpFailedUserFunction = userFunc;
    3f50:	90 93 3f 03 	sts	0x033F, r25
    3f54:	80 93 3e 03 	sts	0x033E, r24
	exitCritical();
    3f58:	0f 90       	pop	r0
    3f5a:	0f be       	out	0x3f, r0	; 63
}
    3f5c:	08 95       	ret

00003f5e <zoIcpIsrEnable>:

void zoIcpIsrEnable(void)
{
	enterCritical();
    3f5e:	0f b6       	in	r0, 0x3f	; 63
    3f60:	0f 92       	push	r0
    3f62:	f8 94       	cli
	TCNT1 = 0x0000;
    3f64:	10 92 85 00 	sts	0x0085, r1
    3f68:	10 92 84 00 	sts	0x0084, r1
	ICR1 = 0x0000;
    3f6c:	10 92 87 00 	sts	0x0087, r1
    3f70:	10 92 86 00 	sts	0x0086, r1
	exitCritical();
    3f74:	0f 90       	pop	r0
    3f76:	0f be       	out	0x3f, r0	; 63

	TIFR1 |= _BV(ICF1);								//clear ICF1 interrupt flag manually
    3f78:	b5 9a       	sbi	0x16, 5	; 22
	TIMSK1 |= _BV(ICIE1);							//enable input capture interrupt
    3f7a:	ef e6       	ldi	r30, 0x6F	; 111
    3f7c:	f0 e0       	ldi	r31, 0x00	; 0
    3f7e:	80 81       	ld	r24, Z
    3f80:	80 62       	ori	r24, 0x20	; 32
    3f82:	80 83       	st	Z, r24
}
    3f84:	08 95       	ret

00003f86 <zoIcpInit>:
static void (*IcpFailedUserFunction)(void) = 0;

void zoIcpInit(void)
{
	//configure defaults
	zoIcpSetMode(ZO_ICP_MODE_DEFAULT);				//configure default mode
    3f86:	81 e0       	ldi	r24, 0x01	; 1
    3f88:	0e 94 78 1f 	call	0x3ef0	; 0x3ef0 <zoIcpSetMode>
	sei();											//enable global interrupts
}

void zoIcpSetPrescaler(ZO_ICP_PRESCALE prescale)
{
	enterCritical();
    3f8c:	0f b6       	in	r0, 0x3f	; 63
    3f8e:	0f 92       	push	r0
    3f90:	f8 94       	cli
	TCCR1B = (TCCR1B & 0xF8) | prescale;
    3f92:	e1 e8       	ldi	r30, 0x81	; 129
    3f94:	f0 e0       	ldi	r31, 0x00	; 0
    3f96:	80 81       	ld	r24, Z
    3f98:	88 7f       	andi	r24, 0xF8	; 248
    3f9a:	81 60       	ori	r24, 0x01	; 1
    3f9c:	80 83       	st	Z, r24
	exitCritical();
    3f9e:	0f 90       	pop	r0
    3fa0:	0f be       	out	0x3f, r0	; 63
	//configure defaults
	zoIcpSetMode(ZO_ICP_MODE_DEFAULT);				//configure default mode
	zoIcpSetPrescaler(ZO_ICP_PRESCALE_DEFAULT);		//configure default prescaler
	
	//initialize timer1 used for input capture
	TCCR1A = 0x00;									//all waveform generation disabled
    3fa2:	10 92 80 00 	sts	0x0080, r1
	TCCR1B |= _BV(ICNC1);							//enable input noise canceller
    3fa6:	e1 e8       	ldi	r30, 0x81	; 129
    3fa8:	f0 e0       	ldi	r31, 0x00	; 0
    3faa:	80 81       	ld	r24, Z
    3fac:	80 68       	ori	r24, 0x80	; 128
    3fae:	80 83       	st	Z, r24
	
	zoIcpIsrEnable();	
    3fb0:	0e 94 af 1f 	call	0x3f5e	; 0x3f5e <zoIcpIsrEnable>
	sei();											//enable global interrupts
    3fb4:	78 94       	sei
}
    3fb6:	08 95       	ret

00003fb8 <zoIcpIsrDisable>:
	TIMSK1 |= _BV(ICIE1);							//enable input capture interrupt
}

void zoIcpIsrDisable(void)
{
	TIMSK1 &= ~_BV(5);								//disable input capture interrupt
    3fb8:	ef e6       	ldi	r30, 0x6F	; 111
    3fba:	f0 e0       	ldi	r31, 0x00	; 0
    3fbc:	80 81       	ld	r24, Z
    3fbe:	8f 7d       	andi	r24, 0xDF	; 223
    3fc0:	80 83       	st	Z, r24
	TIFR1 |= _BV(5);								//clear ICF1 interrupt flag manually
    3fc2:	b5 9a       	sbi	0x16, 5	; 22

	enterCritical();
    3fc4:	0f b6       	in	r0, 0x3f	; 63
    3fc6:	0f 92       	push	r0
    3fc8:	f8 94       	cli
	TCNT1 = 0x0000;
    3fca:	10 92 85 00 	sts	0x0085, r1
    3fce:	10 92 84 00 	sts	0x0084, r1
	ICR1 = 0x0000;
    3fd2:	10 92 87 00 	sts	0x0087, r1
    3fd6:	10 92 86 00 	sts	0x0086, r1
	exitCritical();
    3fda:	0f 90       	pop	r0
    3fdc:	0f be       	out	0x3f, r0	; 63
}
    3fde:	08 95       	ret

00003fe0 <zoIcpOverFlowIsrEnable>:

inline void zoIcpOverFlowIsrEnable(void)
{
	TIMSK1 |= _BV(TOIE1); 
    3fe0:	ef e6       	ldi	r30, 0x6F	; 111
    3fe2:	f0 e0       	ldi	r31, 0x00	; 0
    3fe4:	80 81       	ld	r24, Z
    3fe6:	81 60       	ori	r24, 0x01	; 1
    3fe8:	80 83       	st	Z, r24
}
    3fea:	08 95       	ret

00003fec <zoIcpOverFlowIsrDisable>:

inline void zoIcpOverFlowIsrDisable(void)
{
	TIMSK1 &= ~_BV(TOIE1);
    3fec:	ef e6       	ldi	r30, 0x6F	; 111
    3fee:	f0 e0       	ldi	r31, 0x00	; 0
    3ff0:	80 81       	ld	r24, Z
    3ff2:	8e 7f       	andi	r24, 0xFE	; 254
    3ff4:	80 83       	st	Z, r24
}
    3ff6:	08 95       	ret

00003ff8 <zoIcpGetPulseWidh>:

bool zoIcpGetPulseWidh(u16 *icpTimerTicks)
{
    3ff8:	fc 01       	movw	r30, r24
	enterCritical();
    3ffa:	0f b6       	in	r0, 0x3f	; 63
    3ffc:	0f 92       	push	r0
    3ffe:	f8 94       	cli
	*icpTimerTicks = IcpTimerTicks;
    4000:	80 91 3c 03 	lds	r24, 0x033C
    4004:	90 91 3d 03 	lds	r25, 0x033D
    4008:	91 83       	std	Z+1, r25	; 0x01
    400a:	80 83       	st	Z, r24
	exitCritical();
    400c:	0f 90       	pop	r0
    400e:	0f be       	out	0x3f, r0	; 63

	if( *icpTimerTicks != 0 )
    4010:	89 2b       	or	r24, r25
    4012:	11 f4       	brne	.+4      	; 0x4018 <zoIcpGetPulseWidh+0x20>
    4014:	80 e0       	ldi	r24, 0x00	; 0
    4016:	08 95       	ret
    4018:	8f ef       	ldi	r24, 0xFF	; 255
		return TRUE;
	else
		return FALSE;
}
    401a:	08 95       	ret

0000401c <__vector_10>:

ISR(TIMER1_CAPT_vect)
{
    401c:	1f 92       	push	r1
    401e:	0f 92       	push	r0
    4020:	0f b6       	in	r0, 0x3f	; 63
    4022:	0f 92       	push	r0
    4024:	11 24       	eor	r1, r1
    4026:	2f 93       	push	r18
    4028:	3f 93       	push	r19
    402a:	4f 93       	push	r20
    402c:	5f 93       	push	r21
    402e:	6f 93       	push	r22
    4030:	7f 93       	push	r23
    4032:	8f 93       	push	r24
    4034:	9f 93       	push	r25
    4036:	af 93       	push	r26
    4038:	bf 93       	push	r27
    403a:	ef 93       	push	r30
    403c:	ff 93       	push	r31
	u16 icr;

	icr = ICR1;
    403e:	40 91 86 00 	lds	r20, 0x0086
    4042:	50 91 87 00 	lds	r21, 0x0087

	if( (PINB & 0x01) == IcpMode  )
    4046:	83 b1       	in	r24, 0x03	; 3
    4048:	20 91 42 03 	lds	r18, 0x0342
    404c:	90 e0       	ldi	r25, 0x00	; 0
    404e:	81 70       	andi	r24, 0x01	; 1
    4050:	90 70       	andi	r25, 0x00	; 0
    4052:	30 e0       	ldi	r19, 0x00	; 0
    4054:	82 17       	cp	r24, r18
    4056:	93 07       	cpc	r25, r19
    4058:	09 f4       	brne	.+2      	; 0x405c <__vector_10+0x40>
    405a:	57 c0       	rjmp	.+174    	; 0x410a <__vector_10+0xee>

		HighLow++;
	}
	else
	{
		PulseOffTicks = icr;
    405c:	50 93 3b 03 	sts	0x033B, r21
    4060:	40 93 3a 03 	sts	0x033A, r20
		IcpTimerTicks = PulseOffTicks - PulseOnTicks;
    4064:	80 91 3a 03 	lds	r24, 0x033A
    4068:	90 91 3b 03 	lds	r25, 0x033B
    406c:	20 91 37 03 	lds	r18, 0x0337
    4070:	30 91 38 03 	lds	r19, 0x0338
    4074:	82 1b       	sub	r24, r18
    4076:	93 0b       	sbc	r25, r19
    4078:	90 93 3d 03 	sts	0x033D, r25
    407c:	80 93 3c 03 	sts	0x033C, r24

		HighLow--;
    4080:	80 91 39 03 	lds	r24, 0x0339
    4084:	81 50       	subi	r24, 0x01	; 1
    4086:	80 93 39 03 	sts	0x0339, r24

		if ( IcpMode == ZO_ICP_MODE_LOW_HIGH_LOW )
    408a:	80 91 42 03 	lds	r24, 0x0342
    408e:	81 30       	cpi	r24, 0x01	; 1
    4090:	b1 f1       	breq	.+108    	; 0x40fe <__vector_10+0xe2>
			TCCR1B |= _BV(6);
		else
			TCCR1B &= ~_BV(6);
    4092:	80 91 81 00 	lds	r24, 0x0081
    4096:	8f 7b       	andi	r24, 0xBF	; 191
    4098:	80 93 81 00 	sts	0x0081, r24
		
		TCNT1 = 0x0000;
    409c:	10 92 85 00 	sts	0x0085, r1
    40a0:	10 92 84 00 	sts	0x0084, r1

		if( ( HighLow != 0 ) || ( PulseOnTicks > PulseOffTicks ) )							
    40a4:	80 91 39 03 	lds	r24, 0x0339
    40a8:	88 23       	and	r24, r24
    40aa:	59 f4       	brne	.+22     	; 0x40c2 <__vector_10+0xa6>
    40ac:	20 91 37 03 	lds	r18, 0x0337
    40b0:	30 91 38 03 	lds	r19, 0x0338
    40b4:	80 91 3a 03 	lds	r24, 0x033A
    40b8:	90 91 3b 03 	lds	r25, 0x033B
    40bc:	82 17       	cp	r24, r18
    40be:	93 07       	cpc	r25, r19
    40c0:	b8 f5       	brcc	.+110    	; 0x4130 <__vector_10+0x114>
		{
			HighLow = 0;							//set up for next time
    40c2:	10 92 39 03 	sts	0x0339, r1
			IcpTimerTicks = 0;						//indicate it by zero pulse width
    40c6:	10 92 3d 03 	sts	0x033D, r1
    40ca:	10 92 3c 03 	sts	0x033C, r1
			if(IcpFailedUserFunction)
    40ce:	e0 91 3e 03 	lds	r30, 0x033E
    40d2:	f0 91 3f 03 	lds	r31, 0x033F
    40d6:	30 97       	sbiw	r30, 0x00	; 0
    40d8:	09 f0       	breq	.+2      	; 0x40dc <__vector_10+0xc0>
				IcpFailedUserFunction();
    40da:	09 95       	icall
		{
			if(IcpUserFunction)
				IcpUserFunction(IcpTimerTicks);
		}
	}
}
    40dc:	ff 91       	pop	r31
    40de:	ef 91       	pop	r30
    40e0:	bf 91       	pop	r27
    40e2:	af 91       	pop	r26
    40e4:	9f 91       	pop	r25
    40e6:	8f 91       	pop	r24
    40e8:	7f 91       	pop	r23
    40ea:	6f 91       	pop	r22
    40ec:	5f 91       	pop	r21
    40ee:	4f 91       	pop	r20
    40f0:	3f 91       	pop	r19
    40f2:	2f 91       	pop	r18
    40f4:	0f 90       	pop	r0
    40f6:	0f be       	out	0x3f, r0	; 63
    40f8:	0f 90       	pop	r0
    40fa:	1f 90       	pop	r1
    40fc:	18 95       	reti
		IcpTimerTicks = PulseOffTicks - PulseOnTicks;

		HighLow--;

		if ( IcpMode == ZO_ICP_MODE_LOW_HIGH_LOW )
			TCCR1B |= _BV(6);
    40fe:	80 91 81 00 	lds	r24, 0x0081
    4102:	80 64       	ori	r24, 0x40	; 64
    4104:	80 93 81 00 	sts	0x0081, r24
    4108:	c9 cf       	rjmp	.-110    	; 0x409c <__vector_10+0x80>

	icr = ICR1;

	if( (PINB & 0x01) == IcpMode  )
	{
		PulseOnTicks = icr;
    410a:	50 93 38 03 	sts	0x0338, r21
    410e:	40 93 37 03 	sts	0x0337, r20

		if ( IcpMode == ZO_ICP_MODE_LOW_HIGH_LOW )
    4112:	80 91 42 03 	lds	r24, 0x0342
    4116:	81 30       	cpi	r24, 0x01	; 1
    4118:	b9 f0       	breq	.+46     	; 0x4148 <__vector_10+0x12c>
			TCCR1B &= ~_BV(6);
		else
			TCCR1B |= _BV(6);
    411a:	80 91 81 00 	lds	r24, 0x0081
    411e:	80 64       	ori	r24, 0x40	; 64
    4120:	80 93 81 00 	sts	0x0081, r24

		HighLow++;
    4124:	80 91 39 03 	lds	r24, 0x0339
    4128:	8f 5f       	subi	r24, 0xFF	; 255
    412a:	80 93 39 03 	sts	0x0339, r24
    412e:	d6 cf       	rjmp	.-84     	; 0x40dc <__vector_10+0xc0>
			if(IcpFailedUserFunction)
				IcpFailedUserFunction();
		}
		else
		{
			if(IcpUserFunction)
    4130:	e0 91 40 03 	lds	r30, 0x0340
    4134:	f0 91 41 03 	lds	r31, 0x0341
    4138:	30 97       	sbiw	r30, 0x00	; 0
    413a:	81 f2       	breq	.-96     	; 0x40dc <__vector_10+0xc0>
				IcpUserFunction(IcpTimerTicks);
    413c:	80 91 3c 03 	lds	r24, 0x033C
    4140:	90 91 3d 03 	lds	r25, 0x033D
    4144:	09 95       	icall
    4146:	ca cf       	rjmp	.-108    	; 0x40dc <__vector_10+0xc0>
	if( (PINB & 0x01) == IcpMode  )
	{
		PulseOnTicks = icr;

		if ( IcpMode == ZO_ICP_MODE_LOW_HIGH_LOW )
			TCCR1B &= ~_BV(6);
    4148:	80 91 81 00 	lds	r24, 0x0081
    414c:	8f 7b       	andi	r24, 0xBF	; 191
    414e:	80 93 81 00 	sts	0x0081, r24
    4152:	e8 cf       	rjmp	.-48     	; 0x4124 <__vector_10+0x108>

00004154 <__vector_13>:
	}
}


ISR(TIMER1_OVF_vect)
{
    4154:	1f 92       	push	r1
    4156:	0f 92       	push	r0
    4158:	0f b6       	in	r0, 0x3f	; 63
    415a:	0f 92       	push	r0
    415c:	11 24       	eor	r1, r1
    415e:	2f 93       	push	r18
    4160:	3f 93       	push	r19
    4162:	4f 93       	push	r20
    4164:	5f 93       	push	r21
    4166:	6f 93       	push	r22
    4168:	7f 93       	push	r23
    416a:	8f 93       	push	r24
    416c:	9f 93       	push	r25
    416e:	af 93       	push	r26
    4170:	bf 93       	push	r27
    4172:	ef 93       	push	r30
    4174:	ff 93       	push	r31
	if(OvflUserFunction)
    4176:	e0 91 35 03 	lds	r30, 0x0335
    417a:	f0 91 36 03 	lds	r31, 0x0336
    417e:	30 97       	sbiw	r30, 0x00	; 0
    4180:	09 f0       	breq	.+2      	; 0x4184 <__vector_13+0x30>
		OvflUserFunction();
    4182:	09 95       	icall
    4184:	ff 91       	pop	r31
    4186:	ef 91       	pop	r30
    4188:	bf 91       	pop	r27
    418a:	af 91       	pop	r26
    418c:	9f 91       	pop	r25
    418e:	8f 91       	pop	r24
    4190:	7f 91       	pop	r23
    4192:	6f 91       	pop	r22
    4194:	5f 91       	pop	r21
    4196:	4f 91       	pop	r20
    4198:	3f 91       	pop	r19
    419a:	2f 91       	pop	r18
    419c:	0f 90       	pop	r0
    419e:	0f be       	out	0x3f, r0	; 63
    41a0:	0f 90       	pop	r0
    41a2:	1f 90       	pop	r1
    41a4:	18 95       	reti

000041a6 <icpFailedInterruptHandler>:

static volatile bool goingup = TRUE;

void icpFailedInterruptHandler(void)
{
	IsRcServoStarted = FALSE;
    41a6:	10 92 43 03 	sts	0x0343, r1
	ValidCommandCount = 0;
    41aa:	10 92 4d 03 	sts	0x034D, r1
	//Sms.Control.State = ZO_SMS_CONTROL_NO_CONTROL;
	//zoMotorSetState(FALSE);
}
    41ae:	08 95       	ret

000041b0 <icpTimerOverFlowInterruptHandler>:

void icpTimerOverFlowInterruptHandler(void)
{
	IsRcServoStarted = FALSE;
    41b0:	10 92 43 03 	sts	0x0343, r1
	ValidCommandCount = 0;
    41b4:	10 92 4d 03 	sts	0x034D, r1
	//Sms.Control.State = ZO_SMS_CONTROL_NO_CONTROL;
	//zoMotorSetState(FALSE);
}
    41b8:	08 95       	ret

000041ba <zoProtocolRcServoParse>:
	zoIcpAttachUserFunctionOnCaptureFailure(icpFailedInterruptHandler);
	zoIcpAttachUserFunctionOnOverFlow(icpTimerOverFlowInterruptHandler);
}

void zoProtocolRcServoParse(void)
{
    41ba:	df 93       	push	r29
    41bc:	cf 93       	push	r28
    41be:	00 d0       	rcall	.+0      	; 0x41c0 <zoProtocolRcServoParse+0x6>
    41c0:	cd b7       	in	r28, 0x3d	; 61
    41c2:	de b7       	in	r29, 0x3e	; 62
	s16 commandPos;
	u16 pulseWidth;
	
	if( IsRcServoStarted && IsNewRcServoSetPoint )
    41c4:	80 91 43 03 	lds	r24, 0x0343
    41c8:	88 23       	and	r24, r24
    41ca:	21 f0       	breq	.+8      	; 0x41d4 <zoProtocolRcServoParse+0x1a>
    41cc:	80 91 44 03 	lds	r24, 0x0344
    41d0:	88 23       	and	r24, r24
    41d2:	29 f4       	brne	.+10     	; 0x41de <zoProtocolRcServoParse+0x24>
			
			//give the setpoint
			Sms.Pid.SetPoint = (s32)PrevPositionCommand;
		}
	}
}
    41d4:	0f 90       	pop	r0
    41d6:	0f 90       	pop	r0
    41d8:	cf 91       	pop	r28
    41da:	df 91       	pop	r29
    41dc:	08 95       	ret
	s16 commandPos;
	u16 pulseWidth;
	
	if( IsRcServoStarted && IsNewRcServoSetPoint )
	{
		IsNewRcServoSetPoint = FALSE;
    41de:	10 92 44 03 	sts	0x0344, r1
		if(!zoIcpGetPulseWidh(&pulseWidth))
    41e2:	ce 01       	movw	r24, r28
    41e4:	01 96       	adiw	r24, 0x01	; 1
    41e6:	0e 94 fc 1f 	call	0x3ff8	; 0x3ff8 <zoIcpGetPulseWidh>
    41ea:	88 23       	and	r24, r24
    41ec:	99 f3       	breq	.-26     	; 0x41d4 <zoProtocolRcServoParse+0x1a>
			return;
	
		if( ( pulseWidth > 1200 ) && ( pulseWidth < 6300 ) )
    41ee:	69 81       	ldd	r22, Y+1	; 0x01
    41f0:	7a 81       	ldd	r23, Y+2	; 0x02
    41f2:	cb 01       	movw	r24, r22
    41f4:	81 5b       	subi	r24, 0xB1	; 177
    41f6:	94 40       	sbci	r25, 0x04	; 4
    41f8:	8b 5e       	subi	r24, 0xEB	; 235
    41fa:	93 41       	sbci	r25, 0x13	; 19
    41fc:	58 f7       	brcc	.-42     	; 0x41d4 <zoProtocolRcServoParse+0x1a>
		{
			//convert pulse to ticks
			commandPos = (s16)( CLOCK_TICKS_TO_ENCODER_TICKS_FACTOR * 
    41fe:	80 e0       	ldi	r24, 0x00	; 0
    4200:	90 e0       	ldi	r25, 0x00	; 0
    4202:	0e 94 bd 23 	call	0x477a	; 0x477a <__floatunsisf>
    4206:	27 e1       	ldi	r18, 0x17	; 23
    4208:	37 eb       	ldi	r19, 0xB7	; 183
    420a:	41 e5       	ldi	r20, 0x51	; 81
    420c:	5f e3       	ldi	r21, 0x3F	; 63
    420e:	0e 94 4b 24 	call	0x4896	; 0x4896 <__mulsf3>
    4212:	0e 94 8c 23 	call	0x4718	; 0x4718 <__fixsfsi>
				( (double)pulseWidth ) );

			//absolute positioning around zero
			if(InitialPos <= 2048)
    4216:	80 91 45 03 	lds	r24, 0x0345
    421a:	90 91 46 03 	lds	r25, 0x0346
    421e:	81 50       	subi	r24, 0x01	; 1
    4220:	98 40       	sbci	r25, 0x08	; 8
    4222:	08 f4       	brcc	.+2      	; 0x4226 <zoProtocolRcServoParse+0x6c>
    4224:	7f c0       	rjmp	.+254    	; 0x4324 <zoProtocolRcServoParse+0x16a>
				commandPos = commandPos - InitialPos - 3072;
			else
				commandPos = commandPos - InitialPos + 1024;
    4226:	80 91 45 03 	lds	r24, 0x0345
    422a:	90 91 46 03 	lds	r25, 0x0346
    422e:	68 1b       	sub	r22, r24
    4230:	79 0b       	sbc	r23, r25
    4232:	60 50       	subi	r22, 0x00	; 0
    4234:	7c 4f       	sbci	r23, 0xFC	; 252

			//proceed values in time
			PrevPrevPositionCommand = PrevPositionCommand;
    4236:	80 91 47 03 	lds	r24, 0x0347
    423a:	90 91 48 03 	lds	r25, 0x0348
    423e:	90 93 4a 03 	sts	0x034A, r25
    4242:	80 93 49 03 	sts	0x0349, r24
			PrevPositionCommand = PositionCommand;
    4246:	80 91 4b 03 	lds	r24, 0x034B
    424a:	90 91 4c 03 	lds	r25, 0x034C
    424e:	90 93 48 03 	sts	0x0348, r25
    4252:	80 93 47 03 	sts	0x0347, r24
			PositionCommand = (PositionCommand + commandPos)>>1;	//weighted running average
    4256:	80 91 4b 03 	lds	r24, 0x034B
    425a:	90 91 4c 03 	lds	r25, 0x034C
    425e:	68 0f       	add	r22, r24
    4260:	79 1f       	adc	r23, r25
    4262:	75 95       	asr	r23
    4264:	67 95       	ror	r22
    4266:	70 93 4c 03 	sts	0x034C, r23
    426a:	60 93 4b 03 	sts	0x034B, r22

			//anti-spike filter
			if( ( abs(PositionCommand - PrevPositionCommand) > abs(PositionCommand - PrevPrevPositionCommand) ) 
    426e:	20 91 4b 03 	lds	r18, 0x034B
    4272:	30 91 4c 03 	lds	r19, 0x034C
    4276:	80 91 47 03 	lds	r24, 0x0347
    427a:	90 91 48 03 	lds	r25, 0x0348
    427e:	60 91 4b 03 	lds	r22, 0x034B
    4282:	70 91 4c 03 	lds	r23, 0x034C
    4286:	40 91 49 03 	lds	r20, 0x0349
    428a:	50 91 4a 03 	lds	r21, 0x034A
    428e:	28 1b       	sub	r18, r24
    4290:	39 0b       	sbc	r19, r25
    4292:	37 fd       	sbrc	r19, 7
    4294:	54 c0       	rjmp	.+168    	; 0x433e <zoProtocolRcServoParse+0x184>
    4296:	cb 01       	movw	r24, r22
    4298:	84 1b       	sub	r24, r20
    429a:	95 0b       	sbc	r25, r21
    429c:	97 fd       	sbrc	r25, 7
    429e:	4b c0       	rjmp	.+150    	; 0x4336 <zoProtocolRcServoParse+0x17c>
    42a0:	82 17       	cp	r24, r18
    42a2:	93 07       	cpc	r25, r19
    42a4:	e4 f0       	brlt	.+56     	; 0x42de <zoProtocolRcServoParse+0x124>
    42a6:	20 91 49 03 	lds	r18, 0x0349
    42aa:	30 91 4a 03 	lds	r19, 0x034A
    42ae:	80 91 47 03 	lds	r24, 0x0347
    42b2:	90 91 48 03 	lds	r25, 0x0348
    42b6:	60 91 4b 03 	lds	r22, 0x034B
    42ba:	70 91 4c 03 	lds	r23, 0x034C
    42be:	40 91 49 03 	lds	r20, 0x0349
    42c2:	50 91 4a 03 	lds	r21, 0x034A
    42c6:	28 1b       	sub	r18, r24
    42c8:	39 0b       	sbc	r19, r25
    42ca:	37 fd       	sbrc	r19, 7
    42cc:	43 c0       	rjmp	.+134    	; 0x4354 <zoProtocolRcServoParse+0x19a>
    42ce:	cb 01       	movw	r24, r22
    42d0:	84 1b       	sub	r24, r20
    42d2:	95 0b       	sbc	r25, r21
    42d4:	97 fd       	sbrc	r25, 7
    42d6:	3a c0       	rjmp	.+116    	; 0x434c <zoProtocolRcServoParse+0x192>
    42d8:	82 17       	cp	r24, r18
    42da:	93 07       	cpc	r25, r19
    42dc:	94 f4       	brge	.+36     	; 0x4302 <zoProtocolRcServoParse+0x148>
				|| ( abs(PrevPrevPositionCommand - PrevPositionCommand) > abs(PositionCommand - PrevPrevPositionCommand) )  )
				PrevPositionCommand = (PositionCommand + PrevPrevPositionCommand)/2;
    42de:	80 91 4b 03 	lds	r24, 0x034B
    42e2:	90 91 4c 03 	lds	r25, 0x034C
    42e6:	20 91 49 03 	lds	r18, 0x0349
    42ea:	30 91 4a 03 	lds	r19, 0x034A
    42ee:	28 0f       	add	r18, r24
    42f0:	39 1f       	adc	r19, r25
    42f2:	37 fd       	sbrc	r19, 7
    42f4:	28 c0       	rjmp	.+80     	; 0x4346 <zoProtocolRcServoParse+0x18c>
    42f6:	35 95       	asr	r19
    42f8:	27 95       	ror	r18
    42fa:	30 93 48 03 	sts	0x0348, r19
    42fe:	20 93 47 03 	sts	0x0347, r18
			
			//give the setpoint
			Sms.Pid.SetPoint = (s32)PrevPositionCommand;
    4302:	80 91 47 03 	lds	r24, 0x0347
    4306:	90 91 48 03 	lds	r25, 0x0348
    430a:	aa 27       	eor	r26, r26
    430c:	97 fd       	sbrc	r25, 7
    430e:	a0 95       	com	r26
    4310:	ba 2f       	mov	r27, r26
    4312:	80 93 53 01 	sts	0x0153, r24
    4316:	90 93 54 01 	sts	0x0154, r25
    431a:	a0 93 55 01 	sts	0x0155, r26
    431e:	b0 93 56 01 	sts	0x0156, r27
    4322:	58 cf       	rjmp	.-336    	; 0x41d4 <zoProtocolRcServoParse+0x1a>
			commandPos = (s16)( CLOCK_TICKS_TO_ENCODER_TICKS_FACTOR * 
				( (double)pulseWidth ) );

			//absolute positioning around zero
			if(InitialPos <= 2048)
				commandPos = commandPos - InitialPos - 3072;
    4324:	80 91 45 03 	lds	r24, 0x0345
    4328:	90 91 46 03 	lds	r25, 0x0346
    432c:	68 1b       	sub	r22, r24
    432e:	79 0b       	sbc	r23, r25
    4330:	60 50       	subi	r22, 0x00	; 0
    4332:	7c 40       	sbci	r23, 0x0C	; 12
    4334:	80 cf       	rjmp	.-256    	; 0x4236 <zoProtocolRcServoParse+0x7c>
			PrevPrevPositionCommand = PrevPositionCommand;
			PrevPositionCommand = PositionCommand;
			PositionCommand = (PositionCommand + commandPos)>>1;	//weighted running average

			//anti-spike filter
			if( ( abs(PositionCommand - PrevPositionCommand) > abs(PositionCommand - PrevPrevPositionCommand) ) 
    4336:	90 95       	com	r25
    4338:	81 95       	neg	r24
    433a:	9f 4f       	sbci	r25, 0xFF	; 255
    433c:	b1 cf       	rjmp	.-158    	; 0x42a0 <zoProtocolRcServoParse+0xe6>
    433e:	30 95       	com	r19
    4340:	21 95       	neg	r18
    4342:	3f 4f       	sbci	r19, 0xFF	; 255
    4344:	a8 cf       	rjmp	.-176    	; 0x4296 <zoProtocolRcServoParse+0xdc>
				|| ( abs(PrevPrevPositionCommand - PrevPositionCommand) > abs(PositionCommand - PrevPrevPositionCommand) )  )
				PrevPositionCommand = (PositionCommand + PrevPrevPositionCommand)/2;
    4346:	2f 5f       	subi	r18, 0xFF	; 255
    4348:	3f 4f       	sbci	r19, 0xFF	; 255
    434a:	d5 cf       	rjmp	.-86     	; 0x42f6 <zoProtocolRcServoParse+0x13c>
			PrevPrevPositionCommand = PrevPositionCommand;
			PrevPositionCommand = PositionCommand;
			PositionCommand = (PositionCommand + commandPos)>>1;	//weighted running average

			//anti-spike filter
			if( ( abs(PositionCommand - PrevPositionCommand) > abs(PositionCommand - PrevPrevPositionCommand) ) 
    434c:	90 95       	com	r25
    434e:	81 95       	neg	r24
    4350:	9f 4f       	sbci	r25, 0xFF	; 255
    4352:	c2 cf       	rjmp	.-124    	; 0x42d8 <zoProtocolRcServoParse+0x11e>
    4354:	30 95       	com	r19
    4356:	21 95       	neg	r18
    4358:	3f 4f       	sbci	r19, 0xFF	; 255
    435a:	b9 cf       	rjmp	.-142    	; 0x42ce <zoProtocolRcServoParse+0x114>

0000435c <zoProtocolRcServoInit>:
	}
}

void zoProtocolRcServoInit(void)
{
	zoIcpInit();
    435c:	0e 94 c3 1f 	call	0x3f86	; 0x3f86 <zoIcpInit>
	zoIcpSetPrescaler(ZO_ICP_PRESCALE_8);
    4360:	82 e0       	ldi	r24, 0x02	; 2
    4362:	0e 94 6c 1f 	call	0x3ed8	; 0x3ed8 <zoIcpSetPrescaler>

	enterCritical();
    4366:	0f b6       	in	r0, 0x3f	; 63
    4368:	0f 92       	push	r0
    436a:	f8 94       	cli
	InitialPos = 0;
    436c:	10 92 46 03 	sts	0x0346, r1
    4370:	10 92 45 03 	sts	0x0345, r1
	PositionCommand = 0;
    4374:	10 92 4c 03 	sts	0x034C, r1
    4378:	10 92 4b 03 	sts	0x034B, r1
	ValidCommandCount = 0;
    437c:	10 92 4d 03 	sts	0x034D, r1
	IsRcServoStarted = FALSE;
    4380:	10 92 43 03 	sts	0x0343, r1
	IsNewRcServoSetPoint = FALSE;
    4384:	10 92 44 03 	sts	0x0344, r1
	exitCritical();
    4388:	0f 90       	pop	r0
    438a:	0f be       	out	0x3f, r0	; 63

	zoIcpAttachUserFunctionOnCapture(icpInterruptHandler);
    438c:	83 ed       	ldi	r24, 0xD3	; 211
    438e:	91 e2       	ldi	r25, 0x21	; 33
    4390:	0e 94 91 1f 	call	0x3f22	; 0x3f22 <zoIcpAttachUserFunctionOnCapture>
	zoIcpAttachUserFunctionOnCaptureFailure(icpFailedInterruptHandler);
    4394:	83 ed       	ldi	r24, 0xD3	; 211
    4396:	90 e2       	ldi	r25, 0x20	; 32
    4398:	0e 94 a5 1f 	call	0x3f4a	; 0x3f4a <zoIcpAttachUserFunctionOnCaptureFailure>
	zoIcpAttachUserFunctionOnOverFlow(icpTimerOverFlowInterruptHandler);
    439c:	88 ed       	ldi	r24, 0xD8	; 216
    439e:	90 e2       	ldi	r25, 0x20	; 32
    43a0:	0e 94 9b 1f 	call	0x3f36	; 0x3f36 <zoIcpAttachUserFunctionOnOverFlow>
}
    43a4:	08 95       	ret

000043a6 <icpInterruptHandler>:
	//zoMotorSetState(FALSE);
}

void icpInterruptHandler(u16 pulseWidth)
{
	if( IsRcServoStarted )
    43a6:	80 91 43 03 	lds	r24, 0x0343
    43aa:	88 23       	and	r24, r24
    43ac:	49 f4       	brne	.+18     	; 0x43c0 <icpInterruptHandler+0x1a>
		IsNewRcServoSetPoint = TRUE;
	else
	{
		if( ValidCommandCount++ >= 10 )
    43ae:	80 91 4d 03 	lds	r24, 0x034D
    43b2:	8f 5f       	subi	r24, 0xFF	; 255
    43b4:	80 93 4d 03 	sts	0x034D, r24
    43b8:	81 50       	subi	r24, 0x01	; 1
    43ba:	8a 30       	cpi	r24, 0x0A	; 10
    43bc:	28 f4       	brcc	.+10     	; 0x43c8 <icpInterruptHandler+0x22>
    43be:	08 95       	ret
}

void icpInterruptHandler(u16 pulseWidth)
{
	if( IsRcServoStarted )
		IsNewRcServoSetPoint = TRUE;
    43c0:	8f ef       	ldi	r24, 0xFF	; 255
    43c2:	80 93 44 03 	sts	0x0344, r24
    43c6:	08 95       	ret
	else
	{
		if( ValidCommandCount++ >= 10 )
		{
			Sms.BufferdSetPoint.type = ZO_SMS_SETPOINT_NONE;
    43c8:	10 92 5d 01 	sts	0x015D, r1
			zoEncoderReset();
    43cc:	0e 94 f9 03 	call	0x7f2	; 0x7f2 <zoEncoderReset>
			Sms.Pid.PrevError = 0;
    43d0:	10 92 47 01 	sts	0x0147, r1
    43d4:	10 92 48 01 	sts	0x0148, r1
    43d8:	10 92 49 01 	sts	0x0149, r1
    43dc:	10 92 4a 01 	sts	0x014A, r1
			Sms.Pid.Integral = 0;
    43e0:	10 92 4b 01 	sts	0x014B, r1
    43e4:	10 92 4c 01 	sts	0x014C, r1
    43e8:	10 92 4d 01 	sts	0x014D, r1
    43ec:	10 92 4e 01 	sts	0x014E, r1
			Sms.Pid.SetPoint = zoEncoderGetPos();
    43f0:	0e 94 36 04 	call	0x86c	; 0x86c <zoEncoderGetPos>
    43f4:	60 93 53 01 	sts	0x0153, r22
    43f8:	70 93 54 01 	sts	0x0154, r23
    43fc:	80 93 55 01 	sts	0x0155, r24
    4400:	90 93 56 01 	sts	0x0156, r25
			zoMotorSetState(TRUE);
    4404:	8f ef       	ldi	r24, 0xFF	; 255
    4406:	0e 94 7e 05 	call	0xafc	; 0xafc <zoMotorSetState>
			InitialPos = zoEncoderGetPosAbsolute();
    440a:	0e 94 33 04 	call	0x866	; 0x866 <zoEncoderGetPosAbsolute>
    440e:	90 93 46 03 	sts	0x0346, r25
    4412:	80 93 45 03 	sts	0x0345, r24
			Sms.Control.State = ZO_SMS_CONTROL_POSITION_CONTROL;
    4416:	81 e0       	ldi	r24, 0x01	; 1
    4418:	80 93 03 01 	sts	0x0103, r24
			IsRcServoStarted = TRUE;
    441c:	8f ef       	ldi	r24, 0xFF	; 255
    441e:	80 93 43 03 	sts	0x0343, r24
			ValidCommandCount = 0;
    4422:	10 92 4d 03 	sts	0x034D, r1
    4426:	08 95       	ret

00004428 <main>:

#include "zoUart.h"
#include <util/delay.h>

int main(void)
{
    4428:	af 92       	push	r10
    442a:	bf 92       	push	r11
    442c:	cf 92       	push	r12
    442e:	df 92       	push	r13
    4430:	ef 92       	push	r14
    4432:	ff 92       	push	r15
    4434:	0f 93       	push	r16
    4436:	1f 93       	push	r17
    4438:	df 93       	push	r29
    443a:	cf 93       	push	r28
    443c:	cd b7       	in	r28, 0x3d	; 61
    443e:	de b7       	in	r29, 0x3e	; 62
    4440:	c2 54       	subi	r28, 0x42	; 66
    4442:	d0 40       	sbci	r29, 0x00	; 0
    4444:	0f b6       	in	r0, 0x3f	; 63
    4446:	f8 94       	cli
    4448:	de bf       	out	0x3e, r29	; 62
    444a:	0f be       	out	0x3f, r0	; 63
    444c:	cd bf       	out	0x3d, r28	; 61
	//uncomment below two lines to restore defaults by programming the MCU
	//zoSmsRestoreDefaults();
	//while(1);
	
	//initialize all hardware and control
	zoSmsInit();		
    444e:	0e 94 1a 08 	call	0x1034	; 0x1034 <zoSmsInit>
	
	//initialize commands
	zoCommandsInit();
    4452:	0e 94 85 14 	call	0x290a	; 0x290a <zoCommandsInit>

	//initialize i2c communications
	zoProtocolInit(ZO_PROTOCOL_HW_I2C,&halI2c,Sms.Settings.NodeID);
    4456:	80 e0       	ldi	r24, 0x00	; 0
    4458:	5e 01       	movw	r10, r28
    445a:	08 94       	sec
    445c:	a1 1c       	adc	r10, r1
    445e:	b1 1c       	adc	r11, r1
    4460:	b5 01       	movw	r22, r10
    4462:	40 91 08 01 	lds	r20, 0x0108
    4466:	0e 94 f8 02 	call	0x5f0	; 0x5f0 <zoProtocolInit>
	hal->setLAM(lam);
}

inline void zoProtocolSetBitrate(ZO_PROTOCOL_HAL *hal,u32 bitrate)
{
	hal->setBitRate(bitrate);
    446a:	60 91 12 01 	lds	r22, 0x0112
    446e:	70 91 13 01 	lds	r23, 0x0113
    4472:	80 91 14 01 	lds	r24, 0x0114
    4476:	90 91 15 01 	lds	r25, 0x0115
    447a:	eb 85       	ldd	r30, Y+11	; 0x0b
    447c:	fc 85       	ldd	r31, Y+12	; 0x0c
    447e:	09 95       	icall

u08 zoProtocolLRC(const u08* crcBytes, u08 crcByteCount);

inline void zoProtocolSetLAM(ZO_PROTOCOL_HAL *hal,u08 lam)
{
	hal->setLAM(lam);
    4480:	e9 85       	ldd	r30, Y+9	; 0x09
    4482:	fa 85       	ldd	r31, Y+10	; 0x0a
    4484:	80 91 16 01 	lds	r24, 0x0116
    4488:	09 95       	icall
	zoProtocolSetBitrate(&halI2c,Sms.Settings.BaudI2C);
	zoProtocolSetLAM(&halI2c,Sms.Settings.localAcceptanceMask);
	
	//initialize uart communications
	zoProtocolInit(ZO_PROTOCOL_HW_HALF_DUPLEX_RS485,&halUart,Sms.Settings.NodeID);
    448a:	9d e0       	ldi	r25, 0x0D	; 13
    448c:	c9 2e       	mov	r12, r25
    448e:	d1 2c       	mov	r13, r1
    4490:	cc 0e       	add	r12, r28
    4492:	dd 1e       	adc	r13, r29
    4494:	82 e0       	ldi	r24, 0x02	; 2
    4496:	b6 01       	movw	r22, r12
    4498:	40 91 08 01 	lds	r20, 0x0108
    449c:	0e 94 f8 02 	call	0x5f0	; 0x5f0 <zoProtocolInit>
}

inline void zoProtocolSetBitrate(ZO_PROTOCOL_HAL *hal,u32 bitrate)
{
	hal->setBitRate(bitrate);
    44a0:	60 91 0e 01 	lds	r22, 0x010E
    44a4:	70 91 0f 01 	lds	r23, 0x010F
    44a8:	80 91 10 01 	lds	r24, 0x0110
    44ac:	90 91 11 01 	lds	r25, 0x0111
    44b0:	ef 89       	ldd	r30, Y+23	; 0x17
    44b2:	f8 8d       	ldd	r31, Y+24	; 0x18
    44b4:	09 95       	icall

u08 zoProtocolLRC(const u08* crcBytes, u08 crcByteCount);

inline void zoProtocolSetLAM(ZO_PROTOCOL_HAL *hal,u08 lam)
{
	hal->setLAM(lam);
    44b6:	ed 89       	ldd	r30, Y+21	; 0x15
    44b8:	fe 89       	ldd	r31, Y+22	; 0x16
    44ba:	80 91 16 01 	lds	r24, 0x0116
    44be:	09 95       	icall
	zoProtocolSetBitrate(&halUart,Sms.Settings.BaudUart);
	zoProtocolSetLAM(&halUart,Sms.Settings.localAcceptanceMask);

	//initialize PPM-VPM communication as per standard rc-servo communication
	zoProtocolRcServoInit();
    44c0:	0e 94 ae 21 	call	0x435c	; 0x435c <zoProtocolRcServoInit>
    44c4:	8e 01       	movw	r16, r28
    44c6:	07 5e       	subi	r16, 0xE7	; 231
    44c8:	1f 4f       	sbci	r17, 0xFF	; 255
    44ca:	8e e2       	ldi	r24, 0x2E	; 46
    44cc:	e8 2e       	mov	r14, r24
    44ce:	f1 2c       	mov	r15, r1
    44d0:	ec 0e       	add	r14, r28
    44d2:	fd 1e       	adc	r15, r29
	while(1)
	{
		//TODO:watchdog and fail-continue implementation		
		
		//poll the hardware for errors
		zoSmsErrorPoll();		
    44d4:	0e 94 1d 0b 	call	0x163a	; 0x163a <zoSmsErrorPoll>
		
		//Parse RC-Servo input
		zoProtocolRcServoParse();
    44d8:	0e 94 dd 20 	call	0x41ba	; 0x41ba <zoProtocolRcServoParse>

		//Parse I2C
		if(zoProtocolParse(&halI2c,&packetI2c))
    44dc:	c5 01       	movw	r24, r10
    44de:	b8 01       	movw	r22, r16
    44e0:	0e 94 40 02 	call	0x480	; 0x480 <zoProtocolParse>
    44e4:	88 23       	and	r24, r24
    44e6:	c9 f0       	breq	.+50     	; 0x451a <main+0xf2>
		{
			//if there arent any other errors present, execute the command.
			if( zoErrorIsEmpty(&zoSmsError) )
    44e8:	86 e9       	ldi	r24, 0x96	; 150
    44ea:	91 e0       	ldi	r25, 0x01	; 1
    44ec:	0e 94 ad 00 	call	0x15a	; 0x15a <zoErrorIsEmpty>
    44f0:	88 23       	and	r24, r24
    44f2:	a9 f5       	brne	.+106    	; 0x455e <main+0x136>
				if( !zoCommandsServiceCommand(&packetI2c) )
					zoSmsErrorHandleServiceCommandFailure();
			}
			
			//respond to command, if we fail try another 5 times to respond
			if( !zoProtocolCommandResponse(&halI2c,&packetI2c,&zoSmsError) )
    44f4:	c5 01       	movw	r24, r10
    44f6:	b8 01       	movw	r22, r16
    44f8:	46 e9       	ldi	r20, 0x96	; 150
    44fa:	51 e0       	ldi	r21, 0x01	; 1
    44fc:	0e 94 d0 01 	call	0x3a0	; 0x3a0 <zoProtocolCommandResponse>
    4500:	88 23       	and	r24, r24
    4502:	41 f1       	breq	.+80     	; 0x4554 <main+0x12c>
		else
			zoSmsErrorHandleParseFailure(&halI2c,&packetI2c);


		//Parse Uart
		if(zoProtocolParse(&halUart,&packetUart))
    4504:	c6 01       	movw	r24, r12
    4506:	b7 01       	movw	r22, r14
    4508:	0e 94 40 02 	call	0x480	; 0x480 <zoProtocolParse>
    450c:	88 23       	and	r24, r24
    450e:	79 f4       	brne	.+30     	; 0x452e <main+0x106>
			//respond to command, if we fail try another 5 times to respond
			if( !zoProtocolCommandResponse(&halUart,&packetUart,&zoSmsError) )
				zoSmsErrorHandleCommandResponseFailure(&halUart,&packetUart);
		}
		else
			zoSmsErrorHandleParseFailure(&halUart,&packetUart);
    4510:	c6 01       	movw	r24, r12
    4512:	b7 01       	movw	r22, r14
    4514:	0e 94 d0 0a 	call	0x15a0	; 0x15a0 <zoSmsErrorHandleParseFailure>
    4518:	dd cf       	rjmp	.-70     	; 0x44d4 <main+0xac>
			//respond to command, if we fail try another 5 times to respond
			if( !zoProtocolCommandResponse(&halI2c,&packetI2c,&zoSmsError) )
				zoSmsErrorHandleCommandResponseFailure(&halI2c,&packetI2c);
		}
		else
			zoSmsErrorHandleParseFailure(&halI2c,&packetI2c);
    451a:	c5 01       	movw	r24, r10
    451c:	b8 01       	movw	r22, r16
    451e:	0e 94 d0 0a 	call	0x15a0	; 0x15a0 <zoSmsErrorHandleParseFailure>


		//Parse Uart
		if(zoProtocolParse(&halUart,&packetUart))
    4522:	c6 01       	movw	r24, r12
    4524:	b7 01       	movw	r22, r14
    4526:	0e 94 40 02 	call	0x480	; 0x480 <zoProtocolParse>
    452a:	88 23       	and	r24, r24
    452c:	89 f3       	breq	.-30     	; 0x4510 <main+0xe8>
		{
			//if there arent any other errors present, execute the command.
			if( zoErrorIsEmpty(&zoSmsError) )
    452e:	86 e9       	ldi	r24, 0x96	; 150
    4530:	91 e0       	ldi	r25, 0x01	; 1
    4532:	0e 94 ad 00 	call	0x15a	; 0x15a <zoErrorIsEmpty>
    4536:	88 23       	and	r24, r24
    4538:	d1 f4       	brne	.+52     	; 0x456e <main+0x146>
				if( !zoCommandsServiceCommand(&packetUart) )
					zoSmsErrorHandleServiceCommandFailure();
			}
			
			//respond to command, if we fail try another 5 times to respond
			if( !zoProtocolCommandResponse(&halUart,&packetUart,&zoSmsError) )
    453a:	c6 01       	movw	r24, r12
    453c:	b7 01       	movw	r22, r14
    453e:	46 e9       	ldi	r20, 0x96	; 150
    4540:	51 e0       	ldi	r21, 0x01	; 1
    4542:	0e 94 d0 01 	call	0x3a0	; 0x3a0 <zoProtocolCommandResponse>
    4546:	88 23       	and	r24, r24
    4548:	29 f6       	brne	.-118    	; 0x44d4 <main+0xac>
				zoSmsErrorHandleCommandResponseFailure(&halUart,&packetUart);
    454a:	c6 01       	movw	r24, r12
    454c:	b7 01       	movw	r22, r14
    454e:	0e 94 84 0a 	call	0x1508	; 0x1508 <zoSmsErrorHandleCommandResponseFailure>
    4552:	c0 cf       	rjmp	.-128    	; 0x44d4 <main+0xac>
					zoSmsErrorHandleServiceCommandFailure();
			}
			
			//respond to command, if we fail try another 5 times to respond
			if( !zoProtocolCommandResponse(&halI2c,&packetI2c,&zoSmsError) )
				zoSmsErrorHandleCommandResponseFailure(&halI2c,&packetI2c);
    4554:	c5 01       	movw	r24, r10
    4556:	b8 01       	movw	r22, r16
    4558:	0e 94 84 0a 	call	0x1508	; 0x1508 <zoSmsErrorHandleCommandResponseFailure>
    455c:	d3 cf       	rjmp	.-90     	; 0x4504 <main+0xdc>
			//if there arent any other errors present, execute the command.
			if( zoErrorIsEmpty(&zoSmsError) )
			{
				//if the command was wrong, store errors so they can be indicated by 
				//the command response
				if( !zoCommandsServiceCommand(&packetI2c) )
    455e:	c8 01       	movw	r24, r16
    4560:	0e 94 fa 13 	call	0x27f4	; 0x27f4 <zoCommandsServiceCommand>
    4564:	88 23       	and	r24, r24
    4566:	31 f6       	brne	.-116    	; 0x44f4 <main+0xcc>
					zoSmsErrorHandleServiceCommandFailure();
    4568:	0e 94 61 0a 	call	0x14c2	; 0x14c2 <zoSmsErrorHandleServiceCommandFailure>
    456c:	c3 cf       	rjmp	.-122    	; 0x44f4 <main+0xcc>
			//if there arent any other errors present, execute the command.
			if( zoErrorIsEmpty(&zoSmsError) )
			{
				//if the command was wrong, store errors so they can be indicated by 
				//the command response
				if( !zoCommandsServiceCommand(&packetUart) )
    456e:	c7 01       	movw	r24, r14
    4570:	0e 94 fa 13 	call	0x27f4	; 0x27f4 <zoCommandsServiceCommand>
    4574:	88 23       	and	r24, r24
    4576:	09 f7       	brne	.-62     	; 0x453a <main+0x112>
					zoSmsErrorHandleServiceCommandFailure();
    4578:	0e 94 61 0a 	call	0x14c2	; 0x14c2 <zoSmsErrorHandleServiceCommandFailure>
    457c:	de cf       	rjmp	.-68     	; 0x453a <main+0x112>

0000457e <__subsf3>:
    457e:	50 58       	subi	r21, 0x80	; 128

00004580 <__addsf3>:
    4580:	bb 27       	eor	r27, r27
    4582:	aa 27       	eor	r26, r26
    4584:	0e d0       	rcall	.+28     	; 0x45a2 <__addsf3x>
    4586:	4d c1       	rjmp	.+666    	; 0x4822 <__fp_round>
    4588:	3e d1       	rcall	.+636    	; 0x4806 <__fp_pscA>
    458a:	30 f0       	brcs	.+12     	; 0x4598 <__addsf3+0x18>
    458c:	43 d1       	rcall	.+646    	; 0x4814 <__fp_pscB>
    458e:	20 f0       	brcs	.+8      	; 0x4598 <__addsf3+0x18>
    4590:	31 f4       	brne	.+12     	; 0x459e <__addsf3+0x1e>
    4592:	9f 3f       	cpi	r25, 0xFF	; 255
    4594:	11 f4       	brne	.+4      	; 0x459a <__addsf3+0x1a>
    4596:	1e f4       	brtc	.+6      	; 0x459e <__addsf3+0x1e>
    4598:	33 c1       	rjmp	.+614    	; 0x4800 <__fp_nan>
    459a:	0e f4       	brtc	.+2      	; 0x459e <__addsf3+0x1e>
    459c:	e0 95       	com	r30
    459e:	e7 fb       	bst	r30, 7
    45a0:	29 c1       	rjmp	.+594    	; 0x47f4 <__fp_inf>

000045a2 <__addsf3x>:
    45a2:	e9 2f       	mov	r30, r25
    45a4:	4f d1       	rcall	.+670    	; 0x4844 <__fp_split3>
    45a6:	80 f3       	brcs	.-32     	; 0x4588 <__addsf3+0x8>
    45a8:	ba 17       	cp	r27, r26
    45aa:	62 07       	cpc	r22, r18
    45ac:	73 07       	cpc	r23, r19
    45ae:	84 07       	cpc	r24, r20
    45b0:	95 07       	cpc	r25, r21
    45b2:	18 f0       	brcs	.+6      	; 0x45ba <__addsf3x+0x18>
    45b4:	71 f4       	brne	.+28     	; 0x45d2 <__addsf3x+0x30>
    45b6:	9e f5       	brtc	.+102    	; 0x461e <__addsf3x+0x7c>
    45b8:	67 c1       	rjmp	.+718    	; 0x4888 <__fp_zero>
    45ba:	0e f4       	brtc	.+2      	; 0x45be <__addsf3x+0x1c>
    45bc:	e0 95       	com	r30
    45be:	0b 2e       	mov	r0, r27
    45c0:	ba 2f       	mov	r27, r26
    45c2:	a0 2d       	mov	r26, r0
    45c4:	0b 01       	movw	r0, r22
    45c6:	b9 01       	movw	r22, r18
    45c8:	90 01       	movw	r18, r0
    45ca:	0c 01       	movw	r0, r24
    45cc:	ca 01       	movw	r24, r20
    45ce:	a0 01       	movw	r20, r0
    45d0:	11 24       	eor	r1, r1
    45d2:	ff 27       	eor	r31, r31
    45d4:	59 1b       	sub	r21, r25
    45d6:	99 f0       	breq	.+38     	; 0x45fe <__addsf3x+0x5c>
    45d8:	59 3f       	cpi	r21, 0xF9	; 249
    45da:	50 f4       	brcc	.+20     	; 0x45f0 <__addsf3x+0x4e>
    45dc:	50 3e       	cpi	r21, 0xE0	; 224
    45de:	68 f1       	brcs	.+90     	; 0x463a <__addsf3x+0x98>
    45e0:	1a 16       	cp	r1, r26
    45e2:	f0 40       	sbci	r31, 0x00	; 0
    45e4:	a2 2f       	mov	r26, r18
    45e6:	23 2f       	mov	r18, r19
    45e8:	34 2f       	mov	r19, r20
    45ea:	44 27       	eor	r20, r20
    45ec:	58 5f       	subi	r21, 0xF8	; 248
    45ee:	f3 cf       	rjmp	.-26     	; 0x45d6 <__addsf3x+0x34>
    45f0:	46 95       	lsr	r20
    45f2:	37 95       	ror	r19
    45f4:	27 95       	ror	r18
    45f6:	a7 95       	ror	r26
    45f8:	f0 40       	sbci	r31, 0x00	; 0
    45fa:	53 95       	inc	r21
    45fc:	c9 f7       	brne	.-14     	; 0x45f0 <__addsf3x+0x4e>
    45fe:	7e f4       	brtc	.+30     	; 0x461e <__addsf3x+0x7c>
    4600:	1f 16       	cp	r1, r31
    4602:	ba 0b       	sbc	r27, r26
    4604:	62 0b       	sbc	r22, r18
    4606:	73 0b       	sbc	r23, r19
    4608:	84 0b       	sbc	r24, r20
    460a:	ba f0       	brmi	.+46     	; 0x463a <__addsf3x+0x98>
    460c:	91 50       	subi	r25, 0x01	; 1
    460e:	a1 f0       	breq	.+40     	; 0x4638 <__addsf3x+0x96>
    4610:	ff 0f       	add	r31, r31
    4612:	bb 1f       	adc	r27, r27
    4614:	66 1f       	adc	r22, r22
    4616:	77 1f       	adc	r23, r23
    4618:	88 1f       	adc	r24, r24
    461a:	c2 f7       	brpl	.-16     	; 0x460c <__addsf3x+0x6a>
    461c:	0e c0       	rjmp	.+28     	; 0x463a <__addsf3x+0x98>
    461e:	ba 0f       	add	r27, r26
    4620:	62 1f       	adc	r22, r18
    4622:	73 1f       	adc	r23, r19
    4624:	84 1f       	adc	r24, r20
    4626:	48 f4       	brcc	.+18     	; 0x463a <__addsf3x+0x98>
    4628:	87 95       	ror	r24
    462a:	77 95       	ror	r23
    462c:	67 95       	ror	r22
    462e:	b7 95       	ror	r27
    4630:	f7 95       	ror	r31
    4632:	9e 3f       	cpi	r25, 0xFE	; 254
    4634:	08 f0       	brcs	.+2      	; 0x4638 <__addsf3x+0x96>
    4636:	b3 cf       	rjmp	.-154    	; 0x459e <__addsf3+0x1e>
    4638:	93 95       	inc	r25
    463a:	88 0f       	add	r24, r24
    463c:	08 f0       	brcs	.+2      	; 0x4640 <__addsf3x+0x9e>
    463e:	99 27       	eor	r25, r25
    4640:	ee 0f       	add	r30, r30
    4642:	97 95       	ror	r25
    4644:	87 95       	ror	r24
    4646:	08 95       	ret

00004648 <__divsf3>:
    4648:	0c d0       	rcall	.+24     	; 0x4662 <__divsf3x>
    464a:	eb c0       	rjmp	.+470    	; 0x4822 <__fp_round>
    464c:	e3 d0       	rcall	.+454    	; 0x4814 <__fp_pscB>
    464e:	40 f0       	brcs	.+16     	; 0x4660 <__divsf3+0x18>
    4650:	da d0       	rcall	.+436    	; 0x4806 <__fp_pscA>
    4652:	30 f0       	brcs	.+12     	; 0x4660 <__divsf3+0x18>
    4654:	21 f4       	brne	.+8      	; 0x465e <__divsf3+0x16>
    4656:	5f 3f       	cpi	r21, 0xFF	; 255
    4658:	19 f0       	breq	.+6      	; 0x4660 <__divsf3+0x18>
    465a:	cc c0       	rjmp	.+408    	; 0x47f4 <__fp_inf>
    465c:	51 11       	cpse	r21, r1
    465e:	15 c1       	rjmp	.+554    	; 0x488a <__fp_szero>
    4660:	cf c0       	rjmp	.+414    	; 0x4800 <__fp_nan>

00004662 <__divsf3x>:
    4662:	f0 d0       	rcall	.+480    	; 0x4844 <__fp_split3>
    4664:	98 f3       	brcs	.-26     	; 0x464c <__divsf3+0x4>

00004666 <__divsf3_pse>:
    4666:	99 23       	and	r25, r25
    4668:	c9 f3       	breq	.-14     	; 0x465c <__divsf3+0x14>
    466a:	55 23       	and	r21, r21
    466c:	b1 f3       	breq	.-20     	; 0x465a <__divsf3+0x12>
    466e:	95 1b       	sub	r25, r21
    4670:	55 0b       	sbc	r21, r21
    4672:	bb 27       	eor	r27, r27
    4674:	aa 27       	eor	r26, r26
    4676:	62 17       	cp	r22, r18
    4678:	73 07       	cpc	r23, r19
    467a:	84 07       	cpc	r24, r20
    467c:	38 f0       	brcs	.+14     	; 0x468c <__divsf3_pse+0x26>
    467e:	9f 5f       	subi	r25, 0xFF	; 255
    4680:	5f 4f       	sbci	r21, 0xFF	; 255
    4682:	22 0f       	add	r18, r18
    4684:	33 1f       	adc	r19, r19
    4686:	44 1f       	adc	r20, r20
    4688:	aa 1f       	adc	r26, r26
    468a:	a9 f3       	breq	.-22     	; 0x4676 <__divsf3_pse+0x10>
    468c:	33 d0       	rcall	.+102    	; 0x46f4 <__divsf3_pse+0x8e>
    468e:	0e 2e       	mov	r0, r30
    4690:	3a f0       	brmi	.+14     	; 0x46a0 <__divsf3_pse+0x3a>
    4692:	e0 e8       	ldi	r30, 0x80	; 128
    4694:	30 d0       	rcall	.+96     	; 0x46f6 <__divsf3_pse+0x90>
    4696:	91 50       	subi	r25, 0x01	; 1
    4698:	50 40       	sbci	r21, 0x00	; 0
    469a:	e6 95       	lsr	r30
    469c:	00 1c       	adc	r0, r0
    469e:	ca f7       	brpl	.-14     	; 0x4692 <__divsf3_pse+0x2c>
    46a0:	29 d0       	rcall	.+82     	; 0x46f4 <__divsf3_pse+0x8e>
    46a2:	fe 2f       	mov	r31, r30
    46a4:	27 d0       	rcall	.+78     	; 0x46f4 <__divsf3_pse+0x8e>
    46a6:	66 0f       	add	r22, r22
    46a8:	77 1f       	adc	r23, r23
    46aa:	88 1f       	adc	r24, r24
    46ac:	bb 1f       	adc	r27, r27
    46ae:	26 17       	cp	r18, r22
    46b0:	37 07       	cpc	r19, r23
    46b2:	48 07       	cpc	r20, r24
    46b4:	ab 07       	cpc	r26, r27
    46b6:	b0 e8       	ldi	r27, 0x80	; 128
    46b8:	09 f0       	breq	.+2      	; 0x46bc <__divsf3_pse+0x56>
    46ba:	bb 0b       	sbc	r27, r27
    46bc:	80 2d       	mov	r24, r0
    46be:	bf 01       	movw	r22, r30
    46c0:	ff 27       	eor	r31, r31
    46c2:	93 58       	subi	r25, 0x83	; 131
    46c4:	5f 4f       	sbci	r21, 0xFF	; 255
    46c6:	2a f0       	brmi	.+10     	; 0x46d2 <__divsf3_pse+0x6c>
    46c8:	9e 3f       	cpi	r25, 0xFE	; 254
    46ca:	51 05       	cpc	r21, r1
    46cc:	68 f0       	brcs	.+26     	; 0x46e8 <__divsf3_pse+0x82>
    46ce:	92 c0       	rjmp	.+292    	; 0x47f4 <__fp_inf>
    46d0:	dc c0       	rjmp	.+440    	; 0x488a <__fp_szero>
    46d2:	5f 3f       	cpi	r21, 0xFF	; 255
    46d4:	ec f3       	brlt	.-6      	; 0x46d0 <__divsf3_pse+0x6a>
    46d6:	98 3e       	cpi	r25, 0xE8	; 232
    46d8:	dc f3       	brlt	.-10     	; 0x46d0 <__divsf3_pse+0x6a>
    46da:	86 95       	lsr	r24
    46dc:	77 95       	ror	r23
    46de:	67 95       	ror	r22
    46e0:	b7 95       	ror	r27
    46e2:	f7 95       	ror	r31
    46e4:	9f 5f       	subi	r25, 0xFF	; 255
    46e6:	c9 f7       	brne	.-14     	; 0x46da <__divsf3_pse+0x74>
    46e8:	88 0f       	add	r24, r24
    46ea:	91 1d       	adc	r25, r1
    46ec:	96 95       	lsr	r25
    46ee:	87 95       	ror	r24
    46f0:	97 f9       	bld	r25, 7
    46f2:	08 95       	ret
    46f4:	e1 e0       	ldi	r30, 0x01	; 1
    46f6:	66 0f       	add	r22, r22
    46f8:	77 1f       	adc	r23, r23
    46fa:	88 1f       	adc	r24, r24
    46fc:	bb 1f       	adc	r27, r27
    46fe:	62 17       	cp	r22, r18
    4700:	73 07       	cpc	r23, r19
    4702:	84 07       	cpc	r24, r20
    4704:	ba 07       	cpc	r27, r26
    4706:	20 f0       	brcs	.+8      	; 0x4710 <__divsf3_pse+0xaa>
    4708:	62 1b       	sub	r22, r18
    470a:	73 0b       	sbc	r23, r19
    470c:	84 0b       	sbc	r24, r20
    470e:	ba 0b       	sbc	r27, r26
    4710:	ee 1f       	adc	r30, r30
    4712:	88 f7       	brcc	.-30     	; 0x46f6 <__divsf3_pse+0x90>
    4714:	e0 95       	com	r30
    4716:	08 95       	ret

00004718 <__fixsfsi>:
    4718:	04 d0       	rcall	.+8      	; 0x4722 <__fixunssfsi>
    471a:	68 94       	set
    471c:	b1 11       	cpse	r27, r1
    471e:	b5 c0       	rjmp	.+362    	; 0x488a <__fp_szero>
    4720:	08 95       	ret

00004722 <__fixunssfsi>:
    4722:	98 d0       	rcall	.+304    	; 0x4854 <__fp_splitA>
    4724:	88 f0       	brcs	.+34     	; 0x4748 <__fixunssfsi+0x26>
    4726:	9f 57       	subi	r25, 0x7F	; 127
    4728:	90 f0       	brcs	.+36     	; 0x474e <__fixunssfsi+0x2c>
    472a:	b9 2f       	mov	r27, r25
    472c:	99 27       	eor	r25, r25
    472e:	b7 51       	subi	r27, 0x17	; 23
    4730:	a0 f0       	brcs	.+40     	; 0x475a <__fixunssfsi+0x38>
    4732:	d1 f0       	breq	.+52     	; 0x4768 <__fixunssfsi+0x46>
    4734:	66 0f       	add	r22, r22
    4736:	77 1f       	adc	r23, r23
    4738:	88 1f       	adc	r24, r24
    473a:	99 1f       	adc	r25, r25
    473c:	1a f0       	brmi	.+6      	; 0x4744 <__fixunssfsi+0x22>
    473e:	ba 95       	dec	r27
    4740:	c9 f7       	brne	.-14     	; 0x4734 <__fixunssfsi+0x12>
    4742:	12 c0       	rjmp	.+36     	; 0x4768 <__fixunssfsi+0x46>
    4744:	b1 30       	cpi	r27, 0x01	; 1
    4746:	81 f0       	breq	.+32     	; 0x4768 <__fixunssfsi+0x46>
    4748:	9f d0       	rcall	.+318    	; 0x4888 <__fp_zero>
    474a:	b1 e0       	ldi	r27, 0x01	; 1
    474c:	08 95       	ret
    474e:	9c c0       	rjmp	.+312    	; 0x4888 <__fp_zero>
    4750:	67 2f       	mov	r22, r23
    4752:	78 2f       	mov	r23, r24
    4754:	88 27       	eor	r24, r24
    4756:	b8 5f       	subi	r27, 0xF8	; 248
    4758:	39 f0       	breq	.+14     	; 0x4768 <__fixunssfsi+0x46>
    475a:	b9 3f       	cpi	r27, 0xF9	; 249
    475c:	cc f3       	brlt	.-14     	; 0x4750 <__fixunssfsi+0x2e>
    475e:	86 95       	lsr	r24
    4760:	77 95       	ror	r23
    4762:	67 95       	ror	r22
    4764:	b3 95       	inc	r27
    4766:	d9 f7       	brne	.-10     	; 0x475e <__fixunssfsi+0x3c>
    4768:	3e f4       	brtc	.+14     	; 0x4778 <__fixunssfsi+0x56>
    476a:	90 95       	com	r25
    476c:	80 95       	com	r24
    476e:	70 95       	com	r23
    4770:	61 95       	neg	r22
    4772:	7f 4f       	sbci	r23, 0xFF	; 255
    4774:	8f 4f       	sbci	r24, 0xFF	; 255
    4776:	9f 4f       	sbci	r25, 0xFF	; 255
    4778:	08 95       	ret

0000477a <__floatunsisf>:
    477a:	e8 94       	clt
    477c:	09 c0       	rjmp	.+18     	; 0x4790 <__floatsisf+0x12>

0000477e <__floatsisf>:
    477e:	97 fb       	bst	r25, 7
    4780:	3e f4       	brtc	.+14     	; 0x4790 <__floatsisf+0x12>
    4782:	90 95       	com	r25
    4784:	80 95       	com	r24
    4786:	70 95       	com	r23
    4788:	61 95       	neg	r22
    478a:	7f 4f       	sbci	r23, 0xFF	; 255
    478c:	8f 4f       	sbci	r24, 0xFF	; 255
    478e:	9f 4f       	sbci	r25, 0xFF	; 255
    4790:	99 23       	and	r25, r25
    4792:	a9 f0       	breq	.+42     	; 0x47be <__floatsisf+0x40>
    4794:	f9 2f       	mov	r31, r25
    4796:	96 e9       	ldi	r25, 0x96	; 150
    4798:	bb 27       	eor	r27, r27
    479a:	93 95       	inc	r25
    479c:	f6 95       	lsr	r31
    479e:	87 95       	ror	r24
    47a0:	77 95       	ror	r23
    47a2:	67 95       	ror	r22
    47a4:	b7 95       	ror	r27
    47a6:	f1 11       	cpse	r31, r1
    47a8:	f8 cf       	rjmp	.-16     	; 0x479a <__floatsisf+0x1c>
    47aa:	fa f4       	brpl	.+62     	; 0x47ea <__floatsisf+0x6c>
    47ac:	bb 0f       	add	r27, r27
    47ae:	11 f4       	brne	.+4      	; 0x47b4 <__floatsisf+0x36>
    47b0:	60 ff       	sbrs	r22, 0
    47b2:	1b c0       	rjmp	.+54     	; 0x47ea <__floatsisf+0x6c>
    47b4:	6f 5f       	subi	r22, 0xFF	; 255
    47b6:	7f 4f       	sbci	r23, 0xFF	; 255
    47b8:	8f 4f       	sbci	r24, 0xFF	; 255
    47ba:	9f 4f       	sbci	r25, 0xFF	; 255
    47bc:	16 c0       	rjmp	.+44     	; 0x47ea <__floatsisf+0x6c>
    47be:	88 23       	and	r24, r24
    47c0:	11 f0       	breq	.+4      	; 0x47c6 <__floatsisf+0x48>
    47c2:	96 e9       	ldi	r25, 0x96	; 150
    47c4:	11 c0       	rjmp	.+34     	; 0x47e8 <__floatsisf+0x6a>
    47c6:	77 23       	and	r23, r23
    47c8:	21 f0       	breq	.+8      	; 0x47d2 <__floatsisf+0x54>
    47ca:	9e e8       	ldi	r25, 0x8E	; 142
    47cc:	87 2f       	mov	r24, r23
    47ce:	76 2f       	mov	r23, r22
    47d0:	05 c0       	rjmp	.+10     	; 0x47dc <__floatsisf+0x5e>
    47d2:	66 23       	and	r22, r22
    47d4:	71 f0       	breq	.+28     	; 0x47f2 <__floatsisf+0x74>
    47d6:	96 e8       	ldi	r25, 0x86	; 134
    47d8:	86 2f       	mov	r24, r22
    47da:	70 e0       	ldi	r23, 0x00	; 0
    47dc:	60 e0       	ldi	r22, 0x00	; 0
    47de:	2a f0       	brmi	.+10     	; 0x47ea <__floatsisf+0x6c>
    47e0:	9a 95       	dec	r25
    47e2:	66 0f       	add	r22, r22
    47e4:	77 1f       	adc	r23, r23
    47e6:	88 1f       	adc	r24, r24
    47e8:	da f7       	brpl	.-10     	; 0x47e0 <__floatsisf+0x62>
    47ea:	88 0f       	add	r24, r24
    47ec:	96 95       	lsr	r25
    47ee:	87 95       	ror	r24
    47f0:	97 f9       	bld	r25, 7
    47f2:	08 95       	ret

000047f4 <__fp_inf>:
    47f4:	97 f9       	bld	r25, 7
    47f6:	9f 67       	ori	r25, 0x7F	; 127
    47f8:	80 e8       	ldi	r24, 0x80	; 128
    47fa:	70 e0       	ldi	r23, 0x00	; 0
    47fc:	60 e0       	ldi	r22, 0x00	; 0
    47fe:	08 95       	ret

00004800 <__fp_nan>:
    4800:	9f ef       	ldi	r25, 0xFF	; 255
    4802:	80 ec       	ldi	r24, 0xC0	; 192
    4804:	08 95       	ret

00004806 <__fp_pscA>:
    4806:	00 24       	eor	r0, r0
    4808:	0a 94       	dec	r0
    480a:	16 16       	cp	r1, r22
    480c:	17 06       	cpc	r1, r23
    480e:	18 06       	cpc	r1, r24
    4810:	09 06       	cpc	r0, r25
    4812:	08 95       	ret

00004814 <__fp_pscB>:
    4814:	00 24       	eor	r0, r0
    4816:	0a 94       	dec	r0
    4818:	12 16       	cp	r1, r18
    481a:	13 06       	cpc	r1, r19
    481c:	14 06       	cpc	r1, r20
    481e:	05 06       	cpc	r0, r21
    4820:	08 95       	ret

00004822 <__fp_round>:
    4822:	09 2e       	mov	r0, r25
    4824:	03 94       	inc	r0
    4826:	00 0c       	add	r0, r0
    4828:	11 f4       	brne	.+4      	; 0x482e <__fp_round+0xc>
    482a:	88 23       	and	r24, r24
    482c:	52 f0       	brmi	.+20     	; 0x4842 <__fp_round+0x20>
    482e:	bb 0f       	add	r27, r27
    4830:	40 f4       	brcc	.+16     	; 0x4842 <__fp_round+0x20>
    4832:	bf 2b       	or	r27, r31
    4834:	11 f4       	brne	.+4      	; 0x483a <__fp_round+0x18>
    4836:	60 ff       	sbrs	r22, 0
    4838:	04 c0       	rjmp	.+8      	; 0x4842 <__fp_round+0x20>
    483a:	6f 5f       	subi	r22, 0xFF	; 255
    483c:	7f 4f       	sbci	r23, 0xFF	; 255
    483e:	8f 4f       	sbci	r24, 0xFF	; 255
    4840:	9f 4f       	sbci	r25, 0xFF	; 255
    4842:	08 95       	ret

00004844 <__fp_split3>:
    4844:	57 fd       	sbrc	r21, 7
    4846:	90 58       	subi	r25, 0x80	; 128
    4848:	44 0f       	add	r20, r20
    484a:	55 1f       	adc	r21, r21
    484c:	59 f0       	breq	.+22     	; 0x4864 <__fp_splitA+0x10>
    484e:	5f 3f       	cpi	r21, 0xFF	; 255
    4850:	71 f0       	breq	.+28     	; 0x486e <__fp_splitA+0x1a>
    4852:	47 95       	ror	r20

00004854 <__fp_splitA>:
    4854:	88 0f       	add	r24, r24
    4856:	97 fb       	bst	r25, 7
    4858:	99 1f       	adc	r25, r25
    485a:	61 f0       	breq	.+24     	; 0x4874 <__fp_splitA+0x20>
    485c:	9f 3f       	cpi	r25, 0xFF	; 255
    485e:	79 f0       	breq	.+30     	; 0x487e <__fp_splitA+0x2a>
    4860:	87 95       	ror	r24
    4862:	08 95       	ret
    4864:	12 16       	cp	r1, r18
    4866:	13 06       	cpc	r1, r19
    4868:	14 06       	cpc	r1, r20
    486a:	55 1f       	adc	r21, r21
    486c:	f2 cf       	rjmp	.-28     	; 0x4852 <__fp_split3+0xe>
    486e:	46 95       	lsr	r20
    4870:	f1 df       	rcall	.-30     	; 0x4854 <__fp_splitA>
    4872:	08 c0       	rjmp	.+16     	; 0x4884 <__fp_splitA+0x30>
    4874:	16 16       	cp	r1, r22
    4876:	17 06       	cpc	r1, r23
    4878:	18 06       	cpc	r1, r24
    487a:	99 1f       	adc	r25, r25
    487c:	f1 cf       	rjmp	.-30     	; 0x4860 <__fp_splitA+0xc>
    487e:	86 95       	lsr	r24
    4880:	71 05       	cpc	r23, r1
    4882:	61 05       	cpc	r22, r1
    4884:	08 94       	sec
    4886:	08 95       	ret

00004888 <__fp_zero>:
    4888:	e8 94       	clt

0000488a <__fp_szero>:
    488a:	bb 27       	eor	r27, r27
    488c:	66 27       	eor	r22, r22
    488e:	77 27       	eor	r23, r23
    4890:	cb 01       	movw	r24, r22
    4892:	97 f9       	bld	r25, 7
    4894:	08 95       	ret

00004896 <__mulsf3>:
    4896:	0b d0       	rcall	.+22     	; 0x48ae <__mulsf3x>
    4898:	c4 cf       	rjmp	.-120    	; 0x4822 <__fp_round>
    489a:	b5 df       	rcall	.-150    	; 0x4806 <__fp_pscA>
    489c:	28 f0       	brcs	.+10     	; 0x48a8 <__mulsf3+0x12>
    489e:	ba df       	rcall	.-140    	; 0x4814 <__fp_pscB>
    48a0:	18 f0       	brcs	.+6      	; 0x48a8 <__mulsf3+0x12>
    48a2:	95 23       	and	r25, r21
    48a4:	09 f0       	breq	.+2      	; 0x48a8 <__mulsf3+0x12>
    48a6:	a6 cf       	rjmp	.-180    	; 0x47f4 <__fp_inf>
    48a8:	ab cf       	rjmp	.-170    	; 0x4800 <__fp_nan>
    48aa:	11 24       	eor	r1, r1
    48ac:	ee cf       	rjmp	.-36     	; 0x488a <__fp_szero>

000048ae <__mulsf3x>:
    48ae:	ca df       	rcall	.-108    	; 0x4844 <__fp_split3>
    48b0:	a0 f3       	brcs	.-24     	; 0x489a <__mulsf3+0x4>

000048b2 <__mulsf3_pse>:
    48b2:	95 9f       	mul	r25, r21
    48b4:	d1 f3       	breq	.-12     	; 0x48aa <__mulsf3+0x14>
    48b6:	95 0f       	add	r25, r21
    48b8:	50 e0       	ldi	r21, 0x00	; 0
    48ba:	55 1f       	adc	r21, r21
    48bc:	62 9f       	mul	r22, r18
    48be:	f0 01       	movw	r30, r0
    48c0:	72 9f       	mul	r23, r18
    48c2:	bb 27       	eor	r27, r27
    48c4:	f0 0d       	add	r31, r0
    48c6:	b1 1d       	adc	r27, r1
    48c8:	63 9f       	mul	r22, r19
    48ca:	aa 27       	eor	r26, r26
    48cc:	f0 0d       	add	r31, r0
    48ce:	b1 1d       	adc	r27, r1
    48d0:	aa 1f       	adc	r26, r26
    48d2:	64 9f       	mul	r22, r20
    48d4:	66 27       	eor	r22, r22
    48d6:	b0 0d       	add	r27, r0
    48d8:	a1 1d       	adc	r26, r1
    48da:	66 1f       	adc	r22, r22
    48dc:	82 9f       	mul	r24, r18
    48de:	22 27       	eor	r18, r18
    48e0:	b0 0d       	add	r27, r0
    48e2:	a1 1d       	adc	r26, r1
    48e4:	62 1f       	adc	r22, r18
    48e6:	73 9f       	mul	r23, r19
    48e8:	b0 0d       	add	r27, r0
    48ea:	a1 1d       	adc	r26, r1
    48ec:	62 1f       	adc	r22, r18
    48ee:	83 9f       	mul	r24, r19
    48f0:	a0 0d       	add	r26, r0
    48f2:	61 1d       	adc	r22, r1
    48f4:	22 1f       	adc	r18, r18
    48f6:	74 9f       	mul	r23, r20
    48f8:	33 27       	eor	r19, r19
    48fa:	a0 0d       	add	r26, r0
    48fc:	61 1d       	adc	r22, r1
    48fe:	23 1f       	adc	r18, r19
    4900:	84 9f       	mul	r24, r20
    4902:	60 0d       	add	r22, r0
    4904:	21 1d       	adc	r18, r1
    4906:	82 2f       	mov	r24, r18
    4908:	76 2f       	mov	r23, r22
    490a:	6a 2f       	mov	r22, r26
    490c:	11 24       	eor	r1, r1
    490e:	9f 57       	subi	r25, 0x7F	; 127
    4910:	50 40       	sbci	r21, 0x00	; 0
    4912:	8a f0       	brmi	.+34     	; 0x4936 <__mulsf3_pse+0x84>
    4914:	e1 f0       	breq	.+56     	; 0x494e <__mulsf3_pse+0x9c>
    4916:	88 23       	and	r24, r24
    4918:	4a f0       	brmi	.+18     	; 0x492c <__mulsf3_pse+0x7a>
    491a:	ee 0f       	add	r30, r30
    491c:	ff 1f       	adc	r31, r31
    491e:	bb 1f       	adc	r27, r27
    4920:	66 1f       	adc	r22, r22
    4922:	77 1f       	adc	r23, r23
    4924:	88 1f       	adc	r24, r24
    4926:	91 50       	subi	r25, 0x01	; 1
    4928:	50 40       	sbci	r21, 0x00	; 0
    492a:	a9 f7       	brne	.-22     	; 0x4916 <__mulsf3_pse+0x64>
    492c:	9e 3f       	cpi	r25, 0xFE	; 254
    492e:	51 05       	cpc	r21, r1
    4930:	70 f0       	brcs	.+28     	; 0x494e <__mulsf3_pse+0x9c>
    4932:	60 cf       	rjmp	.-320    	; 0x47f4 <__fp_inf>
    4934:	aa cf       	rjmp	.-172    	; 0x488a <__fp_szero>
    4936:	5f 3f       	cpi	r21, 0xFF	; 255
    4938:	ec f3       	brlt	.-6      	; 0x4934 <__mulsf3_pse+0x82>
    493a:	98 3e       	cpi	r25, 0xE8	; 232
    493c:	dc f3       	brlt	.-10     	; 0x4934 <__mulsf3_pse+0x82>
    493e:	86 95       	lsr	r24
    4940:	77 95       	ror	r23
    4942:	67 95       	ror	r22
    4944:	b7 95       	ror	r27
    4946:	f7 95       	ror	r31
    4948:	e7 95       	ror	r30
    494a:	9f 5f       	subi	r25, 0xFF	; 255
    494c:	c1 f7       	brne	.-16     	; 0x493e <__mulsf3_pse+0x8c>
    494e:	fe 2b       	or	r31, r30
    4950:	88 0f       	add	r24, r24
    4952:	91 1d       	adc	r25, r1
    4954:	96 95       	lsr	r25
    4956:	87 95       	ror	r24
    4958:	97 f9       	bld	r25, 7
    495a:	08 95       	ret
    495c:	11 f4       	brne	.+4      	; 0x4962 <__mulsf3_pse+0xb0>
    495e:	0e f4       	brtc	.+2      	; 0x4962 <__mulsf3_pse+0xb0>
    4960:	4f cf       	rjmp	.-354    	; 0x4800 <__fp_nan>
    4962:	41 c0       	rjmp	.+130    	; 0x49e6 <__fp_mpack>

00004964 <sqrt>:
    4964:	77 df       	rcall	.-274    	; 0x4854 <__fp_splitA>
    4966:	d0 f3       	brcs	.-12     	; 0x495c <__mulsf3_pse+0xaa>
    4968:	99 23       	and	r25, r25
    496a:	d9 f3       	breq	.-10     	; 0x4962 <__mulsf3_pse+0xb0>
    496c:	ce f3       	brts	.-14     	; 0x4960 <__mulsf3_pse+0xae>
    496e:	9f 57       	subi	r25, 0x7F	; 127
    4970:	55 0b       	sbc	r21, r21
    4972:	87 ff       	sbrs	r24, 7
    4974:	46 d0       	rcall	.+140    	; 0x4a02 <__fp_norm2>
    4976:	00 24       	eor	r0, r0
    4978:	a0 e6       	ldi	r26, 0x60	; 96
    497a:	40 ea       	ldi	r20, 0xA0	; 160
    497c:	90 01       	movw	r18, r0
    497e:	80 58       	subi	r24, 0x80	; 128
    4980:	56 95       	lsr	r21
    4982:	97 95       	ror	r25
    4984:	28 f4       	brcc	.+10     	; 0x4990 <sqrt+0x2c>
    4986:	80 5c       	subi	r24, 0xC0	; 192
    4988:	66 0f       	add	r22, r22
    498a:	77 1f       	adc	r23, r23
    498c:	88 1f       	adc	r24, r24
    498e:	20 f0       	brcs	.+8      	; 0x4998 <sqrt+0x34>
    4990:	26 17       	cp	r18, r22
    4992:	37 07       	cpc	r19, r23
    4994:	48 07       	cpc	r20, r24
    4996:	30 f4       	brcc	.+12     	; 0x49a4 <sqrt+0x40>
    4998:	62 1b       	sub	r22, r18
    499a:	73 0b       	sbc	r23, r19
    499c:	84 0b       	sbc	r24, r20
    499e:	20 29       	or	r18, r0
    49a0:	31 29       	or	r19, r1
    49a2:	4a 2b       	or	r20, r26
    49a4:	a6 95       	lsr	r26
    49a6:	17 94       	ror	r1
    49a8:	07 94       	ror	r0
    49aa:	20 25       	eor	r18, r0
    49ac:	31 25       	eor	r19, r1
    49ae:	4a 27       	eor	r20, r26
    49b0:	58 f7       	brcc	.-42     	; 0x4988 <sqrt+0x24>
    49b2:	66 0f       	add	r22, r22
    49b4:	77 1f       	adc	r23, r23
    49b6:	88 1f       	adc	r24, r24
    49b8:	20 f0       	brcs	.+8      	; 0x49c2 <sqrt+0x5e>
    49ba:	26 17       	cp	r18, r22
    49bc:	37 07       	cpc	r19, r23
    49be:	48 07       	cpc	r20, r24
    49c0:	30 f4       	brcc	.+12     	; 0x49ce <sqrt+0x6a>
    49c2:	62 0b       	sbc	r22, r18
    49c4:	73 0b       	sbc	r23, r19
    49c6:	84 0b       	sbc	r24, r20
    49c8:	20 0d       	add	r18, r0
    49ca:	31 1d       	adc	r19, r1
    49cc:	41 1d       	adc	r20, r1
    49ce:	a0 95       	com	r26
    49d0:	81 f7       	brne	.-32     	; 0x49b2 <sqrt+0x4e>
    49d2:	b9 01       	movw	r22, r18
    49d4:	84 2f       	mov	r24, r20
    49d6:	91 58       	subi	r25, 0x81	; 129
    49d8:	88 0f       	add	r24, r24
    49da:	96 95       	lsr	r25
    49dc:	87 95       	ror	r24
    49de:	08 95       	ret

000049e0 <square>:
    49e0:	9b 01       	movw	r18, r22
    49e2:	ac 01       	movw	r20, r24
    49e4:	58 cf       	rjmp	.-336    	; 0x4896 <__mulsf3>

000049e6 <__fp_mpack>:
    49e6:	9f 3f       	cpi	r25, 0xFF	; 255
    49e8:	31 f0       	breq	.+12     	; 0x49f6 <__fp_mpack_finite+0xc>

000049ea <__fp_mpack_finite>:
    49ea:	91 50       	subi	r25, 0x01	; 1
    49ec:	20 f4       	brcc	.+8      	; 0x49f6 <__fp_mpack_finite+0xc>
    49ee:	87 95       	ror	r24
    49f0:	77 95       	ror	r23
    49f2:	67 95       	ror	r22
    49f4:	b7 95       	ror	r27
    49f6:	88 0f       	add	r24, r24
    49f8:	91 1d       	adc	r25, r1
    49fa:	96 95       	lsr	r25
    49fc:	87 95       	ror	r24
    49fe:	97 f9       	bld	r25, 7
    4a00:	08 95       	ret

00004a02 <__fp_norm2>:
    4a02:	91 50       	subi	r25, 0x01	; 1
    4a04:	50 40       	sbci	r21, 0x00	; 0
    4a06:	66 0f       	add	r22, r22
    4a08:	77 1f       	adc	r23, r23
    4a0a:	88 1f       	adc	r24, r24
    4a0c:	d2 f7       	brpl	.-12     	; 0x4a02 <__fp_norm2>
    4a0e:	08 95       	ret

00004a10 <__mulsi3>:
    4a10:	62 9f       	mul	r22, r18
    4a12:	d0 01       	movw	r26, r0
    4a14:	73 9f       	mul	r23, r19
    4a16:	f0 01       	movw	r30, r0
    4a18:	82 9f       	mul	r24, r18
    4a1a:	e0 0d       	add	r30, r0
    4a1c:	f1 1d       	adc	r31, r1
    4a1e:	64 9f       	mul	r22, r20
    4a20:	e0 0d       	add	r30, r0
    4a22:	f1 1d       	adc	r31, r1
    4a24:	92 9f       	mul	r25, r18
    4a26:	f0 0d       	add	r31, r0
    4a28:	83 9f       	mul	r24, r19
    4a2a:	f0 0d       	add	r31, r0
    4a2c:	74 9f       	mul	r23, r20
    4a2e:	f0 0d       	add	r31, r0
    4a30:	65 9f       	mul	r22, r21
    4a32:	f0 0d       	add	r31, r0
    4a34:	99 27       	eor	r25, r25
    4a36:	72 9f       	mul	r23, r18
    4a38:	b0 0d       	add	r27, r0
    4a3a:	e1 1d       	adc	r30, r1
    4a3c:	f9 1f       	adc	r31, r25
    4a3e:	63 9f       	mul	r22, r19
    4a40:	b0 0d       	add	r27, r0
    4a42:	e1 1d       	adc	r30, r1
    4a44:	f9 1f       	adc	r31, r25
    4a46:	bd 01       	movw	r22, r26
    4a48:	cf 01       	movw	r24, r30
    4a4a:	11 24       	eor	r1, r1
    4a4c:	08 95       	ret

00004a4e <__udivmodhi4>:
    4a4e:	aa 1b       	sub	r26, r26
    4a50:	bb 1b       	sub	r27, r27
    4a52:	51 e1       	ldi	r21, 0x11	; 17
    4a54:	07 c0       	rjmp	.+14     	; 0x4a64 <__udivmodhi4_ep>

00004a56 <__udivmodhi4_loop>:
    4a56:	aa 1f       	adc	r26, r26
    4a58:	bb 1f       	adc	r27, r27
    4a5a:	a6 17       	cp	r26, r22
    4a5c:	b7 07       	cpc	r27, r23
    4a5e:	10 f0       	brcs	.+4      	; 0x4a64 <__udivmodhi4_ep>
    4a60:	a6 1b       	sub	r26, r22
    4a62:	b7 0b       	sbc	r27, r23

00004a64 <__udivmodhi4_ep>:
    4a64:	88 1f       	adc	r24, r24
    4a66:	99 1f       	adc	r25, r25
    4a68:	5a 95       	dec	r21
    4a6a:	a9 f7       	brne	.-22     	; 0x4a56 <__udivmodhi4_loop>
    4a6c:	80 95       	com	r24
    4a6e:	90 95       	com	r25
    4a70:	bc 01       	movw	r22, r24
    4a72:	cd 01       	movw	r24, r26
    4a74:	08 95       	ret

00004a76 <__udivmodsi4>:
    4a76:	a1 e2       	ldi	r26, 0x21	; 33
    4a78:	1a 2e       	mov	r1, r26
    4a7a:	aa 1b       	sub	r26, r26
    4a7c:	bb 1b       	sub	r27, r27
    4a7e:	fd 01       	movw	r30, r26
    4a80:	0d c0       	rjmp	.+26     	; 0x4a9c <__udivmodsi4_ep>

00004a82 <__udivmodsi4_loop>:
    4a82:	aa 1f       	adc	r26, r26
    4a84:	bb 1f       	adc	r27, r27
    4a86:	ee 1f       	adc	r30, r30
    4a88:	ff 1f       	adc	r31, r31
    4a8a:	a2 17       	cp	r26, r18
    4a8c:	b3 07       	cpc	r27, r19
    4a8e:	e4 07       	cpc	r30, r20
    4a90:	f5 07       	cpc	r31, r21
    4a92:	20 f0       	brcs	.+8      	; 0x4a9c <__udivmodsi4_ep>
    4a94:	a2 1b       	sub	r26, r18
    4a96:	b3 0b       	sbc	r27, r19
    4a98:	e4 0b       	sbc	r30, r20
    4a9a:	f5 0b       	sbc	r31, r21

00004a9c <__udivmodsi4_ep>:
    4a9c:	66 1f       	adc	r22, r22
    4a9e:	77 1f       	adc	r23, r23
    4aa0:	88 1f       	adc	r24, r24
    4aa2:	99 1f       	adc	r25, r25
    4aa4:	1a 94       	dec	r1
    4aa6:	69 f7       	brne	.-38     	; 0x4a82 <__udivmodsi4_loop>
    4aa8:	60 95       	com	r22
    4aaa:	70 95       	com	r23
    4aac:	80 95       	com	r24
    4aae:	90 95       	com	r25
    4ab0:	9b 01       	movw	r18, r22
    4ab2:	ac 01       	movw	r20, r24
    4ab4:	bd 01       	movw	r22, r26
    4ab6:	cf 01       	movw	r24, r30
    4ab8:	08 95       	ret

00004aba <__divmodsi4>:
    4aba:	97 fb       	bst	r25, 7
    4abc:	09 2e       	mov	r0, r25
    4abe:	05 26       	eor	r0, r21
    4ac0:	0e d0       	rcall	.+28     	; 0x4ade <__divmodsi4_neg1>
    4ac2:	57 fd       	sbrc	r21, 7
    4ac4:	04 d0       	rcall	.+8      	; 0x4ace <__divmodsi4_neg2>
    4ac6:	d7 df       	rcall	.-82     	; 0x4a76 <__udivmodsi4>
    4ac8:	0a d0       	rcall	.+20     	; 0x4ade <__divmodsi4_neg1>
    4aca:	00 1c       	adc	r0, r0
    4acc:	38 f4       	brcc	.+14     	; 0x4adc <__divmodsi4_exit>

00004ace <__divmodsi4_neg2>:
    4ace:	50 95       	com	r21
    4ad0:	40 95       	com	r20
    4ad2:	30 95       	com	r19
    4ad4:	21 95       	neg	r18
    4ad6:	3f 4f       	sbci	r19, 0xFF	; 255
    4ad8:	4f 4f       	sbci	r20, 0xFF	; 255
    4ada:	5f 4f       	sbci	r21, 0xFF	; 255

00004adc <__divmodsi4_exit>:
    4adc:	08 95       	ret

00004ade <__divmodsi4_neg1>:
    4ade:	f6 f7       	brtc	.-4      	; 0x4adc <__divmodsi4_exit>
    4ae0:	90 95       	com	r25
    4ae2:	80 95       	com	r24
    4ae4:	70 95       	com	r23
    4ae6:	61 95       	neg	r22
    4ae8:	7f 4f       	sbci	r23, 0xFF	; 255
    4aea:	8f 4f       	sbci	r24, 0xFF	; 255
    4aec:	9f 4f       	sbci	r25, 0xFF	; 255
    4aee:	08 95       	ret

00004af0 <calloc>:
    4af0:	0f 93       	push	r16
    4af2:	1f 93       	push	r17
    4af4:	cf 93       	push	r28
    4af6:	df 93       	push	r29
    4af8:	68 9f       	mul	r22, r24
    4afa:	80 01       	movw	r16, r0
    4afc:	69 9f       	mul	r22, r25
    4afe:	10 0d       	add	r17, r0
    4b00:	78 9f       	mul	r23, r24
    4b02:	10 0d       	add	r17, r0
    4b04:	11 24       	eor	r1, r1
    4b06:	c8 01       	movw	r24, r16
    4b08:	0e 94 94 25 	call	0x4b28	; 0x4b28 <malloc>
    4b0c:	ec 01       	movw	r28, r24
    4b0e:	00 97       	sbiw	r24, 0x00	; 0
    4b10:	29 f0       	breq	.+10     	; 0x4b1c <calloc+0x2c>
    4b12:	60 e0       	ldi	r22, 0x00	; 0
    4b14:	70 e0       	ldi	r23, 0x00	; 0
    4b16:	a8 01       	movw	r20, r16
    4b18:	0e 94 99 26 	call	0x4d32	; 0x4d32 <memset>
    4b1c:	ce 01       	movw	r24, r28
    4b1e:	df 91       	pop	r29
    4b20:	cf 91       	pop	r28
    4b22:	1f 91       	pop	r17
    4b24:	0f 91       	pop	r16
    4b26:	08 95       	ret

00004b28 <malloc>:
    4b28:	cf 93       	push	r28
    4b2a:	df 93       	push	r29
    4b2c:	bc 01       	movw	r22, r24
    4b2e:	82 30       	cpi	r24, 0x02	; 2
    4b30:	91 05       	cpc	r25, r1
    4b32:	10 f4       	brcc	.+4      	; 0x4b38 <malloc+0x10>
    4b34:	62 e0       	ldi	r22, 0x02	; 2
    4b36:	70 e0       	ldi	r23, 0x00	; 0
    4b38:	a0 91 50 03 	lds	r26, 0x0350
    4b3c:	b0 91 51 03 	lds	r27, 0x0351
    4b40:	ed 01       	movw	r28, r26
    4b42:	e0 e0       	ldi	r30, 0x00	; 0
    4b44:	f0 e0       	ldi	r31, 0x00	; 0
    4b46:	40 e0       	ldi	r20, 0x00	; 0
    4b48:	50 e0       	ldi	r21, 0x00	; 0
    4b4a:	21 c0       	rjmp	.+66     	; 0x4b8e <malloc+0x66>
    4b4c:	88 81       	ld	r24, Y
    4b4e:	99 81       	ldd	r25, Y+1	; 0x01
    4b50:	86 17       	cp	r24, r22
    4b52:	97 07       	cpc	r25, r23
    4b54:	69 f4       	brne	.+26     	; 0x4b70 <malloc+0x48>
    4b56:	8a 81       	ldd	r24, Y+2	; 0x02
    4b58:	9b 81       	ldd	r25, Y+3	; 0x03
    4b5a:	30 97       	sbiw	r30, 0x00	; 0
    4b5c:	19 f0       	breq	.+6      	; 0x4b64 <malloc+0x3c>
    4b5e:	93 83       	std	Z+3, r25	; 0x03
    4b60:	82 83       	std	Z+2, r24	; 0x02
    4b62:	04 c0       	rjmp	.+8      	; 0x4b6c <malloc+0x44>
    4b64:	90 93 51 03 	sts	0x0351, r25
    4b68:	80 93 50 03 	sts	0x0350, r24
    4b6c:	fe 01       	movw	r30, r28
    4b6e:	34 c0       	rjmp	.+104    	; 0x4bd8 <malloc+0xb0>
    4b70:	68 17       	cp	r22, r24
    4b72:	79 07       	cpc	r23, r25
    4b74:	38 f4       	brcc	.+14     	; 0x4b84 <malloc+0x5c>
    4b76:	41 15       	cp	r20, r1
    4b78:	51 05       	cpc	r21, r1
    4b7a:	19 f0       	breq	.+6      	; 0x4b82 <malloc+0x5a>
    4b7c:	84 17       	cp	r24, r20
    4b7e:	95 07       	cpc	r25, r21
    4b80:	08 f4       	brcc	.+2      	; 0x4b84 <malloc+0x5c>
    4b82:	ac 01       	movw	r20, r24
    4b84:	fe 01       	movw	r30, r28
    4b86:	8a 81       	ldd	r24, Y+2	; 0x02
    4b88:	9b 81       	ldd	r25, Y+3	; 0x03
    4b8a:	9c 01       	movw	r18, r24
    4b8c:	e9 01       	movw	r28, r18
    4b8e:	20 97       	sbiw	r28, 0x00	; 0
    4b90:	e9 f6       	brne	.-70     	; 0x4b4c <malloc+0x24>
    4b92:	41 15       	cp	r20, r1
    4b94:	51 05       	cpc	r21, r1
    4b96:	a9 f1       	breq	.+106    	; 0x4c02 <malloc+0xda>
    4b98:	ca 01       	movw	r24, r20
    4b9a:	86 1b       	sub	r24, r22
    4b9c:	97 0b       	sbc	r25, r23
    4b9e:	04 97       	sbiw	r24, 0x04	; 4
    4ba0:	08 f4       	brcc	.+2      	; 0x4ba4 <malloc+0x7c>
    4ba2:	ba 01       	movw	r22, r20
    4ba4:	e0 e0       	ldi	r30, 0x00	; 0
    4ba6:	f0 e0       	ldi	r31, 0x00	; 0
    4ba8:	2a c0       	rjmp	.+84     	; 0x4bfe <malloc+0xd6>
    4baa:	8d 91       	ld	r24, X+
    4bac:	9c 91       	ld	r25, X
    4bae:	11 97       	sbiw	r26, 0x01	; 1
    4bb0:	84 17       	cp	r24, r20
    4bb2:	95 07       	cpc	r25, r21
    4bb4:	f9 f4       	brne	.+62     	; 0x4bf4 <malloc+0xcc>
    4bb6:	64 17       	cp	r22, r20
    4bb8:	75 07       	cpc	r23, r21
    4bba:	81 f4       	brne	.+32     	; 0x4bdc <malloc+0xb4>
    4bbc:	12 96       	adiw	r26, 0x02	; 2
    4bbe:	8d 91       	ld	r24, X+
    4bc0:	9c 91       	ld	r25, X
    4bc2:	13 97       	sbiw	r26, 0x03	; 3
    4bc4:	30 97       	sbiw	r30, 0x00	; 0
    4bc6:	19 f0       	breq	.+6      	; 0x4bce <malloc+0xa6>
    4bc8:	93 83       	std	Z+3, r25	; 0x03
    4bca:	82 83       	std	Z+2, r24	; 0x02
    4bcc:	04 c0       	rjmp	.+8      	; 0x4bd6 <malloc+0xae>
    4bce:	90 93 51 03 	sts	0x0351, r25
    4bd2:	80 93 50 03 	sts	0x0350, r24
    4bd6:	fd 01       	movw	r30, r26
    4bd8:	32 96       	adiw	r30, 0x02	; 2
    4bda:	4f c0       	rjmp	.+158    	; 0x4c7a <malloc+0x152>
    4bdc:	ca 01       	movw	r24, r20
    4bde:	86 1b       	sub	r24, r22
    4be0:	97 0b       	sbc	r25, r23
    4be2:	fd 01       	movw	r30, r26
    4be4:	e8 0f       	add	r30, r24
    4be6:	f9 1f       	adc	r31, r25
    4be8:	61 93       	st	Z+, r22
    4bea:	71 93       	st	Z+, r23
    4bec:	02 97       	sbiw	r24, 0x02	; 2
    4bee:	8d 93       	st	X+, r24
    4bf0:	9c 93       	st	X, r25
    4bf2:	43 c0       	rjmp	.+134    	; 0x4c7a <malloc+0x152>
    4bf4:	fd 01       	movw	r30, r26
    4bf6:	82 81       	ldd	r24, Z+2	; 0x02
    4bf8:	93 81       	ldd	r25, Z+3	; 0x03
    4bfa:	9c 01       	movw	r18, r24
    4bfc:	d9 01       	movw	r26, r18
    4bfe:	10 97       	sbiw	r26, 0x00	; 0
    4c00:	a1 f6       	brne	.-88     	; 0x4baa <malloc+0x82>
    4c02:	80 91 4e 03 	lds	r24, 0x034E
    4c06:	90 91 4f 03 	lds	r25, 0x034F
    4c0a:	89 2b       	or	r24, r25
    4c0c:	41 f4       	brne	.+16     	; 0x4c1e <malloc+0xf6>
    4c0e:	80 91 71 01 	lds	r24, 0x0171
    4c12:	90 91 72 01 	lds	r25, 0x0172
    4c16:	90 93 4f 03 	sts	0x034F, r25
    4c1a:	80 93 4e 03 	sts	0x034E, r24
    4c1e:	40 91 73 01 	lds	r20, 0x0173
    4c22:	50 91 74 01 	lds	r21, 0x0174
    4c26:	41 15       	cp	r20, r1
    4c28:	51 05       	cpc	r21, r1
    4c2a:	41 f4       	brne	.+16     	; 0x4c3c <malloc+0x114>
    4c2c:	4d b7       	in	r20, 0x3d	; 61
    4c2e:	5e b7       	in	r21, 0x3e	; 62
    4c30:	80 91 6f 01 	lds	r24, 0x016F
    4c34:	90 91 70 01 	lds	r25, 0x0170
    4c38:	48 1b       	sub	r20, r24
    4c3a:	59 0b       	sbc	r21, r25
    4c3c:	20 91 4e 03 	lds	r18, 0x034E
    4c40:	30 91 4f 03 	lds	r19, 0x034F
    4c44:	24 17       	cp	r18, r20
    4c46:	35 07       	cpc	r19, r21
    4c48:	b0 f4       	brcc	.+44     	; 0x4c76 <malloc+0x14e>
    4c4a:	ca 01       	movw	r24, r20
    4c4c:	82 1b       	sub	r24, r18
    4c4e:	93 0b       	sbc	r25, r19
    4c50:	86 17       	cp	r24, r22
    4c52:	97 07       	cpc	r25, r23
    4c54:	80 f0       	brcs	.+32     	; 0x4c76 <malloc+0x14e>
    4c56:	ab 01       	movw	r20, r22
    4c58:	4e 5f       	subi	r20, 0xFE	; 254
    4c5a:	5f 4f       	sbci	r21, 0xFF	; 255
    4c5c:	84 17       	cp	r24, r20
    4c5e:	95 07       	cpc	r25, r21
    4c60:	50 f0       	brcs	.+20     	; 0x4c76 <malloc+0x14e>
    4c62:	42 0f       	add	r20, r18
    4c64:	53 1f       	adc	r21, r19
    4c66:	50 93 4f 03 	sts	0x034F, r21
    4c6a:	40 93 4e 03 	sts	0x034E, r20
    4c6e:	f9 01       	movw	r30, r18
    4c70:	61 93       	st	Z+, r22
    4c72:	71 93       	st	Z+, r23
    4c74:	02 c0       	rjmp	.+4      	; 0x4c7a <malloc+0x152>
    4c76:	e0 e0       	ldi	r30, 0x00	; 0
    4c78:	f0 e0       	ldi	r31, 0x00	; 0
    4c7a:	cf 01       	movw	r24, r30
    4c7c:	df 91       	pop	r29
    4c7e:	cf 91       	pop	r28
    4c80:	08 95       	ret

00004c82 <free>:
    4c82:	cf 93       	push	r28
    4c84:	df 93       	push	r29
    4c86:	00 97       	sbiw	r24, 0x00	; 0
    4c88:	09 f4       	brne	.+2      	; 0x4c8c <free+0xa>
    4c8a:	50 c0       	rjmp	.+160    	; 0x4d2c <free+0xaa>
    4c8c:	ec 01       	movw	r28, r24
    4c8e:	22 97       	sbiw	r28, 0x02	; 2
    4c90:	1b 82       	std	Y+3, r1	; 0x03
    4c92:	1a 82       	std	Y+2, r1	; 0x02
    4c94:	a0 91 50 03 	lds	r26, 0x0350
    4c98:	b0 91 51 03 	lds	r27, 0x0351
    4c9c:	10 97       	sbiw	r26, 0x00	; 0
    4c9e:	09 f1       	breq	.+66     	; 0x4ce2 <free+0x60>
    4ca0:	40 e0       	ldi	r20, 0x00	; 0
    4ca2:	50 e0       	ldi	r21, 0x00	; 0
    4ca4:	ac 17       	cp	r26, r28
    4ca6:	bd 07       	cpc	r27, r29
    4ca8:	08 f1       	brcs	.+66     	; 0x4cec <free+0x6a>
    4caa:	bb 83       	std	Y+3, r27	; 0x03
    4cac:	aa 83       	std	Y+2, r26	; 0x02
    4cae:	fe 01       	movw	r30, r28
    4cb0:	21 91       	ld	r18, Z+
    4cb2:	31 91       	ld	r19, Z+
    4cb4:	e2 0f       	add	r30, r18
    4cb6:	f3 1f       	adc	r31, r19
    4cb8:	ae 17       	cp	r26, r30
    4cba:	bf 07       	cpc	r27, r31
    4cbc:	79 f4       	brne	.+30     	; 0x4cdc <free+0x5a>
    4cbe:	8d 91       	ld	r24, X+
    4cc0:	9c 91       	ld	r25, X
    4cc2:	11 97       	sbiw	r26, 0x01	; 1
    4cc4:	28 0f       	add	r18, r24
    4cc6:	39 1f       	adc	r19, r25
    4cc8:	2e 5f       	subi	r18, 0xFE	; 254
    4cca:	3f 4f       	sbci	r19, 0xFF	; 255
    4ccc:	39 83       	std	Y+1, r19	; 0x01
    4cce:	28 83       	st	Y, r18
    4cd0:	12 96       	adiw	r26, 0x02	; 2
    4cd2:	8d 91       	ld	r24, X+
    4cd4:	9c 91       	ld	r25, X
    4cd6:	13 97       	sbiw	r26, 0x03	; 3
    4cd8:	9b 83       	std	Y+3, r25	; 0x03
    4cda:	8a 83       	std	Y+2, r24	; 0x02
    4cdc:	41 15       	cp	r20, r1
    4cde:	51 05       	cpc	r21, r1
    4ce0:	71 f4       	brne	.+28     	; 0x4cfe <free+0x7c>
    4ce2:	d0 93 51 03 	sts	0x0351, r29
    4ce6:	c0 93 50 03 	sts	0x0350, r28
    4cea:	20 c0       	rjmp	.+64     	; 0x4d2c <free+0xaa>
    4cec:	12 96       	adiw	r26, 0x02	; 2
    4cee:	8d 91       	ld	r24, X+
    4cf0:	9c 91       	ld	r25, X
    4cf2:	13 97       	sbiw	r26, 0x03	; 3
    4cf4:	ad 01       	movw	r20, r26
    4cf6:	00 97       	sbiw	r24, 0x00	; 0
    4cf8:	11 f0       	breq	.+4      	; 0x4cfe <free+0x7c>
    4cfa:	dc 01       	movw	r26, r24
    4cfc:	d3 cf       	rjmp	.-90     	; 0x4ca4 <free+0x22>
    4cfe:	fa 01       	movw	r30, r20
    4d00:	d3 83       	std	Z+3, r29	; 0x03
    4d02:	c2 83       	std	Z+2, r28	; 0x02
    4d04:	21 91       	ld	r18, Z+
    4d06:	31 91       	ld	r19, Z+
    4d08:	e2 0f       	add	r30, r18
    4d0a:	f3 1f       	adc	r31, r19
    4d0c:	ce 17       	cp	r28, r30
    4d0e:	df 07       	cpc	r29, r31
    4d10:	69 f4       	brne	.+26     	; 0x4d2c <free+0xaa>
    4d12:	88 81       	ld	r24, Y
    4d14:	99 81       	ldd	r25, Y+1	; 0x01
    4d16:	28 0f       	add	r18, r24
    4d18:	39 1f       	adc	r19, r25
    4d1a:	2e 5f       	subi	r18, 0xFE	; 254
    4d1c:	3f 4f       	sbci	r19, 0xFF	; 255
    4d1e:	fa 01       	movw	r30, r20
    4d20:	31 83       	std	Z+1, r19	; 0x01
    4d22:	20 83       	st	Z, r18
    4d24:	8a 81       	ldd	r24, Y+2	; 0x02
    4d26:	9b 81       	ldd	r25, Y+3	; 0x03
    4d28:	93 83       	std	Z+3, r25	; 0x03
    4d2a:	82 83       	std	Z+2, r24	; 0x02
    4d2c:	df 91       	pop	r29
    4d2e:	cf 91       	pop	r28
    4d30:	08 95       	ret

00004d32 <memset>:
    4d32:	dc 01       	movw	r26, r24
    4d34:	01 c0       	rjmp	.+2      	; 0x4d38 <memset+0x6>
    4d36:	6d 93       	st	X+, r22
    4d38:	41 50       	subi	r20, 0x01	; 1
    4d3a:	50 40       	sbci	r21, 0x00	; 0
    4d3c:	e0 f7       	brcc	.-8      	; 0x4d36 <memset+0x4>
    4d3e:	08 95       	ret

00004d40 <__eerd_byte_m328p>:
    4d40:	f9 99       	sbic	0x1f, 1	; 31
    4d42:	fe cf       	rjmp	.-4      	; 0x4d40 <__eerd_byte_m328p>
    4d44:	92 bd       	out	0x22, r25	; 34
    4d46:	81 bd       	out	0x21, r24	; 33
    4d48:	f8 9a       	sbi	0x1f, 0	; 31
    4d4a:	99 27       	eor	r25, r25
    4d4c:	80 b5       	in	r24, 0x20	; 32
    4d4e:	08 95       	ret

00004d50 <__eerd_dword_m328p>:
    4d50:	a6 e1       	ldi	r26, 0x16	; 22
    4d52:	b0 e0       	ldi	r27, 0x00	; 0
    4d54:	44 e0       	ldi	r20, 0x04	; 4
    4d56:	50 e0       	ldi	r21, 0x00	; 0
    4d58:	0c 94 d1 26 	jmp	0x4da2	; 0x4da2 <__eerd_blraw_m328p>

00004d5c <__eerd_word_m328p>:
    4d5c:	a8 e1       	ldi	r26, 0x18	; 24
    4d5e:	b0 e0       	ldi	r27, 0x00	; 0
    4d60:	42 e0       	ldi	r20, 0x02	; 2
    4d62:	50 e0       	ldi	r21, 0x00	; 0
    4d64:	0c 94 d1 26 	jmp	0x4da2	; 0x4da2 <__eerd_blraw_m328p>

00004d68 <__eewr_byte_m328p>:
    4d68:	26 2f       	mov	r18, r22

00004d6a <__eewr_r18_m328p>:
    4d6a:	f9 99       	sbic	0x1f, 1	; 31
    4d6c:	fe cf       	rjmp	.-4      	; 0x4d6a <__eewr_r18_m328p>
    4d6e:	1f ba       	out	0x1f, r1	; 31
    4d70:	92 bd       	out	0x22, r25	; 34
    4d72:	81 bd       	out	0x21, r24	; 33
    4d74:	20 bd       	out	0x20, r18	; 32
    4d76:	0f b6       	in	r0, 0x3f	; 63
    4d78:	f8 94       	cli
    4d7a:	fa 9a       	sbi	0x1f, 2	; 31
    4d7c:	f9 9a       	sbi	0x1f, 1	; 31
    4d7e:	0f be       	out	0x3f, r0	; 63
    4d80:	01 96       	adiw	r24, 0x01	; 1
    4d82:	08 95       	ret

00004d84 <__eewr_dword_m328p>:
    4d84:	24 2f       	mov	r18, r20
    4d86:	0e 94 b5 26 	call	0x4d6a	; 0x4d6a <__eewr_r18_m328p>
    4d8a:	25 2f       	mov	r18, r21
    4d8c:	0e 94 b5 26 	call	0x4d6a	; 0x4d6a <__eewr_r18_m328p>
    4d90:	0c 94 ca 26 	jmp	0x4d94	; 0x4d94 <__eewr_word_m328p>

00004d94 <__eewr_word_m328p>:
    4d94:	0e 94 b4 26 	call	0x4d68	; 0x4d68 <__eewr_byte_m328p>
    4d98:	27 2f       	mov	r18, r23
    4d9a:	0c 94 b5 26 	jmp	0x4d6a	; 0x4d6a <__eewr_r18_m328p>

00004d9e <__eerd_block_m328p>:
    4d9e:	dc 01       	movw	r26, r24
    4da0:	cb 01       	movw	r24, r22

00004da2 <__eerd_blraw_m328p>:
    4da2:	fc 01       	movw	r30, r24
    4da4:	f9 99       	sbic	0x1f, 1	; 31
    4da6:	fe cf       	rjmp	.-4      	; 0x4da4 <__eerd_blraw_m328p+0x2>
    4da8:	06 c0       	rjmp	.+12     	; 0x4db6 <__eerd_blraw_m328p+0x14>
    4daa:	f2 bd       	out	0x22, r31	; 34
    4dac:	e1 bd       	out	0x21, r30	; 33
    4dae:	f8 9a       	sbi	0x1f, 0	; 31
    4db0:	31 96       	adiw	r30, 0x01	; 1
    4db2:	00 b4       	in	r0, 0x20	; 32
    4db4:	0d 92       	st	X+, r0
    4db6:	41 50       	subi	r20, 0x01	; 1
    4db8:	50 40       	sbci	r21, 0x00	; 0
    4dba:	b8 f7       	brcc	.-18     	; 0x4daa <__eerd_blraw_m328p+0x8>
    4dbc:	08 95       	ret

00004dbe <_exit>:
    4dbe:	f8 94       	cli

00004dc0 <__stop_program>:
    4dc0:	ff cf       	rjmp	.-2      	; 0x4dc0 <__stop_program>
