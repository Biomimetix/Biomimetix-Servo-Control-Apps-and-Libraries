
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000007a  00800100  00004e98  00004f2c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00004e98  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000001de  0080017a  0080017a  00004fa6  2**0
                  ALLOC
  3 .debug_aranges 00000260  00000000  00000000  00004fa6  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 000015aa  00000000  00000000  00005206  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00006f44  00000000  00000000  000067b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00001dfa  00000000  00000000  0000d6f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000475f  00000000  00000000  0000f4ee  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000e00  00000000  00000000  00013c50  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00002a21  00000000  00000000  00014a50  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00001fbc  00000000  00000000  00017471  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000180  00000000  00000000  0001942d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
       4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      18:	0c 94 88 01 	jmp	0x310	; 0x310 <__vector_6>
      1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      28:	0c 94 79 20 	jmp	0x40f2	; 0x40f2 <__vector_10>
      2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      34:	0c 94 15 21 	jmp	0x422a	; 0x422a <__vector_13>
      38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      40:	0c 94 b4 05 	jmp	0xb68	; 0xb68 <__vector_16>
      44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      48:	0c 94 50 1c 	jmp	0x38a0	; 0x38a0 <__vector_18>
      4c:	0c 94 03 1c 	jmp	0x3806	; 0x3806 <__vector_19>
      50:	0c 94 d7 1b 	jmp	0x37ae	; 0x37ae <__vector_20>
      54:	0c 94 cb 16 	jmp	0x2d96	; 0x2d96 <__vector_21>
      58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      60:	0c 94 b3 17 	jmp	0x2f66	; 0x2f66 <__vector_24>
      64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
      68:	11 24       	eor	r1, r1
      6a:	1f be       	out	0x3f, r1	; 63
      6c:	cf ef       	ldi	r28, 0xFF	; 255
      6e:	d8 e0       	ldi	r29, 0x08	; 8
      70:	de bf       	out	0x3e, r29	; 62
      72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
      74:	11 e0       	ldi	r17, 0x01	; 1
      76:	a0 e0       	ldi	r26, 0x00	; 0
      78:	b1 e0       	ldi	r27, 0x01	; 1
      7a:	e8 e9       	ldi	r30, 0x98	; 152
      7c:	fe e4       	ldi	r31, 0x4E	; 78
      7e:	02 c0       	rjmp	.+4      	; 0x84 <.do_copy_data_start>

00000080 <.do_copy_data_loop>:
      80:	05 90       	lpm	r0, Z+
      82:	0d 92       	st	X+, r0

00000084 <.do_copy_data_start>:
      84:	aa 37       	cpi	r26, 0x7A	; 122
      86:	b1 07       	cpc	r27, r17
      88:	d9 f7       	brne	.-10     	; 0x80 <.do_copy_data_loop>

0000008a <__do_clear_bss>:
      8a:	13 e0       	ldi	r17, 0x03	; 3
      8c:	aa e7       	ldi	r26, 0x7A	; 122
      8e:	b1 e0       	ldi	r27, 0x01	; 1
      90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
      92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
      94:	a8 35       	cpi	r26, 0x58	; 88
      96:	b1 07       	cpc	r27, r17
      98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
      9a:	0e 94 7f 22 	call	0x44fe	; 0x44fe <main>
      9e:	0c 94 4a 27 	jmp	0x4e94	; 0x4e94 <_exit>

000000a2 <__bad_interrupt>:
      a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <zoErrorInit>:
#include "zoError.h"
#include "zoMcu.h"

void zoErrorInit(ZO_ERROR *p)
{
      a6:	fc 01       	movw	r30, r24
	enterCritical();
      a8:	0f b6       	in	r0, 0x3f	; 63
      aa:	0f 92       	push	r0
      ac:	f8 94       	cli
	p->ctr = 0;						//initialize counter to 0
      ae:	10 82       	st	Z, r1
	p->pIn = p->error;	//initialize in pointer to start of data
      b0:	05 96       	adiw	r24, 0x05	; 5
      b2:	92 83       	std	Z+2, r25	; 0x02
      b4:	81 83       	std	Z+1, r24	; 0x01
	p->pOut = p->error;	//initialize out pinter to start of data
      b6:	94 83       	std	Z+4, r25	; 0x04
      b8:	83 83       	std	Z+3, r24	; 0x03
	exitCritical();
      ba:	0f 90       	pop	r0
      bc:	0f be       	out	0x3f, r0	; 63
}
      be:	08 95       	ret

000000c0 <zoErrorGetIsr>:

inline u08 zoErrorGetIsr(ZO_ERROR *p)
{
      c0:	dc 01       	movw	r26, r24
	u08 c;
	
	p->ctr--;							//decrement count of bytes in buffer
      c2:	8c 91       	ld	r24, X
      c4:	81 50       	subi	r24, 0x01	; 1
      c6:	8c 93       	st	X, r24
	c = *p->pOut;					//get one piece of data
      c8:	13 96       	adiw	r26, 0x03	; 3
      ca:	ed 91       	ld	r30, X+
      cc:	fc 91       	ld	r31, X
      ce:	14 97       	sbiw	r26, 0x04	; 4
      d0:	e0 81       	ld	r30, Z
	p->pOut++;						//point to next place from which data will be fetched
      d2:	13 96       	adiw	r26, 0x03	; 3
      d4:	8d 91       	ld	r24, X+
      d6:	9c 91       	ld	r25, X
      d8:	14 97       	sbiw	r26, 0x04	; 4
      da:	01 96       	adiw	r24, 0x01	; 1
      dc:	14 96       	adiw	r26, 0x04	; 4
      de:	9c 93       	st	X, r25
      e0:	8e 93       	st	-X, r24
      e2:	13 97       	sbiw	r26, 0x03	; 3
	if(p->pOut == &p->error[ZO_ERROR_STORAGE_SIZE])	//wrap pout pointer
      e4:	13 96       	adiw	r26, 0x03	; 3
      e6:	2d 91       	ld	r18, X+
      e8:	3c 91       	ld	r19, X
      ea:	14 97       	sbiw	r26, 0x04	; 4
      ec:	ad 01       	movw	r20, r26
      ee:	4b 5f       	subi	r20, 0xFB	; 251
      f0:	5f 4f       	sbci	r21, 0xFF	; 255
      f2:	cd 01       	movw	r24, r26
      f4:	0d 96       	adiw	r24, 0x0d	; 13
      f6:	28 17       	cp	r18, r24
      f8:	39 07       	cpc	r19, r25
      fa:	11 f0       	breq	.+4      	; 0x100 <zoErrorGetIsr+0x40>
		p->pOut = &p->error[0];

	return c;
}
      fc:	8e 2f       	mov	r24, r30
      fe:	08 95       	ret
	
	p->ctr--;							//decrement count of bytes in buffer
	c = *p->pOut;					//get one piece of data
	p->pOut++;						//point to next place from which data will be fetched
	if(p->pOut == &p->error[ZO_ERROR_STORAGE_SIZE])	//wrap pout pointer
		p->pOut = &p->error[0];
     100:	14 96       	adiw	r26, 0x04	; 4
     102:	5c 93       	st	X, r21
     104:	4e 93       	st	-X, r20
     106:	13 97       	sbiw	r26, 0x03	; 3

	return c;
}
     108:	8e 2f       	mov	r24, r30
     10a:	08 95       	ret

0000010c <zoErrorPutIsr>:
	exitCritical();
	return c;
}

inline void zoErrorPutIsr(ZO_ERROR *p,const u08 error)
{
     10c:	dc 01       	movw	r26, r24
	if( p->ctr < ZO_ERROR_STORAGE_SIZE )
     10e:	8c 91       	ld	r24, X
     110:	88 30       	cpi	r24, 0x08	; 8
     112:	18 f4       	brcc	.+6      	; 0x11a <zoErrorPutIsr+0xe>
		p->ctr++;;
     114:	8c 91       	ld	r24, X
     116:	8f 5f       	subi	r24, 0xFF	; 255
     118:	8c 93       	st	X, r24

	*p->pIn = error;
     11a:	11 96       	adiw	r26, 0x01	; 1
     11c:	ed 91       	ld	r30, X+
     11e:	fc 91       	ld	r31, X
     120:	12 97       	sbiw	r26, 0x02	; 2
     122:	60 83       	st	Z, r22
	p->pIn++;
     124:	11 96       	adiw	r26, 0x01	; 1
     126:	8d 91       	ld	r24, X+
     128:	9c 91       	ld	r25, X
     12a:	12 97       	sbiw	r26, 0x02	; 2
     12c:	01 96       	adiw	r24, 0x01	; 1
     12e:	12 96       	adiw	r26, 0x02	; 2
     130:	9c 93       	st	X, r25
     132:	8e 93       	st	-X, r24
     134:	11 97       	sbiw	r26, 0x01	; 1
	if(p->pIn == &p->error[ZO_ERROR_STORAGE_SIZE])	//wrap the pIn ptr
     136:	11 96       	adiw	r26, 0x01	; 1
     138:	2d 91       	ld	r18, X+
     13a:	3c 91       	ld	r19, X
     13c:	12 97       	sbiw	r26, 0x02	; 2
     13e:	ad 01       	movw	r20, r26
     140:	4b 5f       	subi	r20, 0xFB	; 251
     142:	5f 4f       	sbci	r21, 0xFF	; 255
     144:	cd 01       	movw	r24, r26
     146:	0d 96       	adiw	r24, 0x0d	; 13
     148:	28 17       	cp	r18, r24
     14a:	39 07       	cpc	r19, r25
     14c:	09 f0       	breq	.+2      	; 0x150 <zoErrorPutIsr+0x44>
     14e:	08 95       	ret
		p->pIn = &p->error[0];	
     150:	12 96       	adiw	r26, 0x02	; 2
     152:	5c 93       	st	X, r21
     154:	4e 93       	st	-X, r20
     156:	11 97       	sbiw	r26, 0x01	; 1
     158:	08 95       	ret

0000015a <zoErrorIsEmpty>:
	zoErrorPutIsr(p,error);
	exitCritical();
}

inline bool zoErrorIsEmpty(ZO_ERROR *p)
{
     15a:	fc 01       	movw	r30, r24
	return (p->ctr>0)?FALSE:TRUE;
     15c:	80 81       	ld	r24, Z
     15e:	88 23       	and	r24, r24
     160:	11 f0       	breq	.+4      	; 0x166 <zoErrorIsEmpty+0xc>
     162:	80 e0       	ldi	r24, 0x00	; 0
}
     164:	08 95       	ret
	exitCritical();
}

inline bool zoErrorIsEmpty(ZO_ERROR *p)
{
	return (p->ctr>0)?FALSE:TRUE;
     166:	8f ef       	ldi	r24, 0xFF	; 255
     168:	08 95       	ret

0000016a <zoErrorGet>:

	return c;
}

u08 zoErrorGet(ZO_ERROR *p)
{
     16a:	dc 01       	movw	r26, r24
	u08 c;
	
	enterCritical();
     16c:	0f b6       	in	r0, 0x3f	; 63
     16e:	0f 92       	push	r0
     170:	f8 94       	cli

inline u08 zoErrorGetIsr(ZO_ERROR *p)
{
	u08 c;
	
	p->ctr--;							//decrement count of bytes in buffer
     172:	8c 91       	ld	r24, X
     174:	81 50       	subi	r24, 0x01	; 1
     176:	8c 93       	st	X, r24
	c = *p->pOut;					//get one piece of data
     178:	13 96       	adiw	r26, 0x03	; 3
     17a:	ed 91       	ld	r30, X+
     17c:	fc 91       	ld	r31, X
     17e:	14 97       	sbiw	r26, 0x04	; 4
     180:	e0 81       	ld	r30, Z
	p->pOut++;						//point to next place from which data will be fetched
     182:	13 96       	adiw	r26, 0x03	; 3
     184:	8d 91       	ld	r24, X+
     186:	9c 91       	ld	r25, X
     188:	14 97       	sbiw	r26, 0x04	; 4
     18a:	01 96       	adiw	r24, 0x01	; 1
     18c:	14 96       	adiw	r26, 0x04	; 4
     18e:	9c 93       	st	X, r25
     190:	8e 93       	st	-X, r24
     192:	13 97       	sbiw	r26, 0x03	; 3
	if(p->pOut == &p->error[ZO_ERROR_STORAGE_SIZE])	//wrap pout pointer
     194:	13 96       	adiw	r26, 0x03	; 3
     196:	2d 91       	ld	r18, X+
     198:	3c 91       	ld	r19, X
     19a:	14 97       	sbiw	r26, 0x04	; 4
     19c:	ad 01       	movw	r20, r26
     19e:	4b 5f       	subi	r20, 0xFB	; 251
     1a0:	5f 4f       	sbci	r21, 0xFF	; 255
     1a2:	cd 01       	movw	r24, r26
     1a4:	0d 96       	adiw	r24, 0x0d	; 13
     1a6:	28 17       	cp	r18, r24
     1a8:	39 07       	cpc	r19, r25
     1aa:	21 f0       	breq	.+8      	; 0x1b4 <zoErrorGet+0x4a>
{
	u08 c;
	
	enterCritical();
	c = zoErrorGetIsr(p);
	exitCritical();
     1ac:	0f 90       	pop	r0
     1ae:	0f be       	out	0x3f, r0	; 63
	return c;
}
     1b0:	8e 2f       	mov	r24, r30
     1b2:	08 95       	ret
	
	p->ctr--;							//decrement count of bytes in buffer
	c = *p->pOut;					//get one piece of data
	p->pOut++;						//point to next place from which data will be fetched
	if(p->pOut == &p->error[ZO_ERROR_STORAGE_SIZE])	//wrap pout pointer
		p->pOut = &p->error[0];
     1b4:	14 96       	adiw	r26, 0x04	; 4
     1b6:	5c 93       	st	X, r21
     1b8:	4e 93       	st	-X, r20
     1ba:	13 97       	sbiw	r26, 0x03	; 3
{
	u08 c;
	
	enterCritical();
	c = zoErrorGetIsr(p);
	exitCritical();
     1bc:	0f 90       	pop	r0
     1be:	0f be       	out	0x3f, r0	; 63
	return c;
}
     1c0:	8e 2f       	mov	r24, r30
     1c2:	08 95       	ret

000001c4 <zoErrorPut>:
	if(p->pIn == &p->error[ZO_ERROR_STORAGE_SIZE])	//wrap the pIn ptr
		p->pIn = &p->error[0];	
}

void zoErrorPut(ZO_ERROR *p,const u08 error)
{
     1c4:	dc 01       	movw	r26, r24
	enterCritical();
     1c6:	0f b6       	in	r0, 0x3f	; 63
     1c8:	0f 92       	push	r0
     1ca:	f8 94       	cli
	return c;
}

inline void zoErrorPutIsr(ZO_ERROR *p,const u08 error)
{
	if( p->ctr < ZO_ERROR_STORAGE_SIZE )
     1cc:	8c 91       	ld	r24, X
     1ce:	88 30       	cpi	r24, 0x08	; 8
     1d0:	18 f4       	brcc	.+6      	; 0x1d8 <zoErrorPut+0x14>
		p->ctr++;;
     1d2:	8c 91       	ld	r24, X
     1d4:	8f 5f       	subi	r24, 0xFF	; 255
     1d6:	8c 93       	st	X, r24

	*p->pIn = error;
     1d8:	11 96       	adiw	r26, 0x01	; 1
     1da:	ed 91       	ld	r30, X+
     1dc:	fc 91       	ld	r31, X
     1de:	12 97       	sbiw	r26, 0x02	; 2
     1e0:	60 83       	st	Z, r22
	p->pIn++;
     1e2:	11 96       	adiw	r26, 0x01	; 1
     1e4:	8d 91       	ld	r24, X+
     1e6:	9c 91       	ld	r25, X
     1e8:	12 97       	sbiw	r26, 0x02	; 2
     1ea:	01 96       	adiw	r24, 0x01	; 1
     1ec:	12 96       	adiw	r26, 0x02	; 2
     1ee:	9c 93       	st	X, r25
     1f0:	8e 93       	st	-X, r24
     1f2:	11 97       	sbiw	r26, 0x01	; 1
	if(p->pIn == &p->error[ZO_ERROR_STORAGE_SIZE])	//wrap the pIn ptr
     1f4:	11 96       	adiw	r26, 0x01	; 1
     1f6:	2d 91       	ld	r18, X+
     1f8:	3c 91       	ld	r19, X
     1fa:	12 97       	sbiw	r26, 0x02	; 2
     1fc:	ad 01       	movw	r20, r26
     1fe:	4b 5f       	subi	r20, 0xFB	; 251
     200:	5f 4f       	sbci	r21, 0xFF	; 255
     202:	cd 01       	movw	r24, r26
     204:	0d 96       	adiw	r24, 0x0d	; 13
     206:	28 17       	cp	r18, r24
     208:	39 07       	cpc	r19, r25
     20a:	19 f0       	breq	.+6      	; 0x212 <zoErrorPut+0x4e>

void zoErrorPut(ZO_ERROR *p,const u08 error)
{
	enterCritical();
	zoErrorPutIsr(p,error);
	exitCritical();
     20c:	0f 90       	pop	r0
     20e:	0f be       	out	0x3f, r0	; 63
}
     210:	08 95       	ret
		p->ctr++;;

	*p->pIn = error;
	p->pIn++;
	if(p->pIn == &p->error[ZO_ERROR_STORAGE_SIZE])	//wrap the pIn ptr
		p->pIn = &p->error[0];	
     212:	12 96       	adiw	r26, 0x02	; 2
     214:	5c 93       	st	X, r21
     216:	4e 93       	st	-X, r20
     218:	11 97       	sbiw	r26, 0x01	; 1

void zoErrorPut(ZO_ERROR *p,const u08 error)
{
	enterCritical();
	zoErrorPutIsr(p,error);
	exitCritical();
     21a:	0f 90       	pop	r0
     21c:	0f be       	out	0x3f, r0	; 63
}
     21e:	08 95       	ret

00000220 <zoSystemTimerInit>:

void zoSystemTimerInit(void)
{
	//MCUSR &= ~_BV(WDRF);		//allow for WDE clear
	//WDTCSR |= _BV(WDCE);		//enable watchdog change
	WDTCSR = 0xD8;				//0b11011000:WDIF WDIE WDP3 WDCE WDE WDP2 WDP1 WDP0 
     220:	88 ed       	ldi	r24, 0xD8	; 216
     222:	80 93 60 00 	sts	0x0060, r24
	exitCritical();
}

inline void zoSystemTimerWatchDogDisable(void)
{
	enterCritical();
     226:	0f b6       	in	r0, 0x3f	; 63
     228:	0f 92       	push	r0
     22a:	f8 94       	cli
	WatchDogResetEnabled = TRUE;
     22c:	8f ef       	ldi	r24, 0xFF	; 255
     22e:	80 93 7e 01 	sts	0x017E, r24
	exitCritical();
     232:	0f 90       	pop	r0
     234:	0f be       	out	0x3f, r0	; 63
	//MCUSR &= ~_BV(WDRF);		//allow for WDE clear
	//WDTCSR |= _BV(WDCE);		//enable watchdog change
	WDTCSR = 0xD8;				//0b11011000:WDIF WDIE WDP3 WDCE WDE WDP2 WDP1 WDP0 
								//configure interrupt and system reset mode  
	zoSystemTimerWatchDogDisable();
}
     236:	08 95       	ret

00000238 <zoSystemTimerWatchDogInit>:

//watchdog functionality 
inline void zoSystemTimerWatchDogInit(const u16 timeOutMiliSecond)
{
	enterCritical();
     238:	0f b6       	in	r0, 0x3f	; 63
     23a:	0f 92       	push	r0
     23c:	f8 94       	cli
	WatchDogTimeOut = timeOutMiliSecond;
     23e:	90 93 01 01 	sts	0x0101, r25
     242:	80 93 00 01 	sts	0x0100, r24
	exitCritical();
     246:	0f 90       	pop	r0
     248:	0f be       	out	0x3f, r0	; 63
}
     24a:	08 95       	ret

0000024c <zoSystemTimerWatchDogEnable>:

inline void zoSystemTimerWatchDogEnable(void)
{
	enterCritical();
     24c:	0f b6       	in	r0, 0x3f	; 63
     24e:	0f 92       	push	r0
     250:	f8 94       	cli
	WatchDogResetEnabled = TRUE;
     252:	8f ef       	ldi	r24, 0xFF	; 255
     254:	80 93 7e 01 	sts	0x017E, r24
	exitCritical();
     258:	0f 90       	pop	r0
     25a:	0f be       	out	0x3f, r0	; 63
}
     25c:	08 95       	ret

0000025e <zoSystemTimerWatchDogDisable>:

inline void zoSystemTimerWatchDogDisable(void)
{
	enterCritical();
     25e:	0f b6       	in	r0, 0x3f	; 63
     260:	0f 92       	push	r0
     262:	f8 94       	cli
	WatchDogResetEnabled = TRUE;
     264:	8f ef       	ldi	r24, 0xFF	; 255
     266:	80 93 7e 01 	sts	0x017E, r24
	exitCritical();
     26a:	0f 90       	pop	r0
     26c:	0f be       	out	0x3f, r0	; 63
}
     26e:	08 95       	ret

00000270 <zoSystemTimerWatchDogReset>:

inline void zoSystemTimerWatchDogReset(void)
{
	enterCritical();
     270:	0f b6       	in	r0, 0x3f	; 63
     272:	0f 92       	push	r0
     274:	f8 94       	cli
	WatchDogMiliseconds = 0;
     276:	10 92 7d 01 	sts	0x017D, r1
     27a:	10 92 7c 01 	sts	0x017C, r1
	exitCritical();
     27e:	0f 90       	pop	r0
     280:	0f be       	out	0x3f, r0	; 63
}
     282:	08 95       	ret

00000284 <zoSystemTimerTimeOutInit>:

//timeout functionality 
inline void zoSystemTimerTimeOutInit(u16 *counter)
{
     284:	fc 01       	movw	r30, r24

//time measuring functionality
//system measured in ms
inline void zoSystemTimerMeasureStart(u16 *counter)
{
	enterCritical();
     286:	0f b6       	in	r0, 0x3f	; 63
     288:	0f 92       	push	r0
     28a:	f8 94       	cli
	*counter = Miliseconds;
     28c:	80 91 7a 01 	lds	r24, 0x017A
     290:	90 91 7b 01 	lds	r25, 0x017B
     294:	91 83       	std	Z+1, r25	; 0x01
     296:	80 83       	st	Z, r24
	exitCritical();
     298:	0f 90       	pop	r0
     29a:	0f be       	out	0x3f, r0	; 63

//timeout functionality 
inline void zoSystemTimerTimeOutInit(u16 *counter)
{
	zoSystemTimerMeasureStart(counter);
}
     29c:	08 95       	ret

0000029e <zoSystemTimerMeasureStart>:
}

//time measuring functionality
//system measured in ms
inline void zoSystemTimerMeasureStart(u16 *counter)
{
     29e:	fc 01       	movw	r30, r24
	enterCritical();
     2a0:	0f b6       	in	r0, 0x3f	; 63
     2a2:	0f 92       	push	r0
     2a4:	f8 94       	cli
	*counter = Miliseconds;
     2a6:	80 91 7a 01 	lds	r24, 0x017A
     2aa:	90 91 7b 01 	lds	r25, 0x017B
     2ae:	91 83       	std	Z+1, r25	; 0x01
     2b0:	80 83       	st	Z, r24
	exitCritical();
     2b2:	0f 90       	pop	r0
     2b4:	0f be       	out	0x3f, r0	; 63
}
     2b6:	08 95       	ret

000002b8 <zoSystemTimerMeasureGet>:

u16 zoSystemTimerMeasureGet(u16 *counter)
{
     2b8:	fc 01       	movw	r30, r24
	u16 curr;
	
	enterCritical();
     2ba:	0f b6       	in	r0, 0x3f	; 63
     2bc:	0f 92       	push	r0
     2be:	f8 94       	cli
	curr= Miliseconds;	
     2c0:	80 91 7a 01 	lds	r24, 0x017A
     2c4:	90 91 7b 01 	lds	r25, 0x017B
	exitCritical();
     2c8:	0f 90       	pop	r0
     2ca:	0f be       	out	0x3f, r0	; 63

	if(*counter <= curr)
     2cc:	01 90       	ld	r0, Z+
     2ce:	f0 81       	ld	r31, Z
     2d0:	e0 2d       	mov	r30, r0
     2d2:	8e 17       	cp	r24, r30
     2d4:	9f 07       	cpc	r25, r31
     2d6:	38 f4       	brcc	.+14     	; 0x2e6 <zoSystemTimerMeasureGet+0x2e>
		return (curr - *counter);
	else
		return (0xFFFF + curr -*counter); 
     2d8:	9c 01       	movw	r18, r24
     2da:	21 50       	subi	r18, 0x01	; 1
     2dc:	30 40       	sbci	r19, 0x00	; 0
     2de:	2e 1b       	sub	r18, r30
     2e0:	3f 0b       	sbc	r19, r31
}
     2e2:	c9 01       	movw	r24, r18
     2e4:	08 95       	ret
	enterCritical();
	curr= Miliseconds;	
	exitCritical();

	if(*counter <= curr)
		return (curr - *counter);
     2e6:	9c 01       	movw	r18, r24
     2e8:	2e 1b       	sub	r18, r30
     2ea:	3f 0b       	sbc	r19, r31
	else
		return (0xFFFF + curr -*counter); 
}
     2ec:	c9 01       	movw	r24, r18
     2ee:	08 95       	ret

000002f0 <zoSystemTimerTimeOutExpired>:
{
	zoSystemTimerMeasureStart(counter);
}

inline bool zoSystemTimerTimeOutExpired(u16 *counter, const u16 timeOutMiliSecond)
{
     2f0:	0f 93       	push	r16
     2f2:	1f 93       	push	r17
     2f4:	8b 01       	movw	r16, r22
	return( ( zoSystemTimerMeasureGet(counter) >= timeOutMiliSecond )?TRUE:FALSE );
     2f6:	0e 94 5c 01 	call	0x2b8	; 0x2b8 <zoSystemTimerMeasureGet>
     2fa:	80 17       	cp	r24, r16
     2fc:	91 07       	cpc	r25, r17
     2fe:	20 f4       	brcc	.+8      	; 0x308 <zoSystemTimerTimeOutExpired+0x18>
     300:	80 e0       	ldi	r24, 0x00	; 0
}
     302:	1f 91       	pop	r17
     304:	0f 91       	pop	r16
     306:	08 95       	ret
	zoSystemTimerMeasureStart(counter);
}

inline bool zoSystemTimerTimeOutExpired(u16 *counter, const u16 timeOutMiliSecond)
{
	return( ( zoSystemTimerMeasureGet(counter) >= timeOutMiliSecond )?TRUE:FALSE );
     308:	8f ef       	ldi	r24, 0xFF	; 255
}
     30a:	1f 91       	pop	r17
     30c:	0f 91       	pop	r16
     30e:	08 95       	ret

00000310 <__vector_6>:
	else
		return (0xFFFF + curr -*counter); 
}

ISR(WDT_vect)
{
     310:	1f 92       	push	r1
     312:	0f 92       	push	r0
     314:	0f b6       	in	r0, 0x3f	; 63
     316:	0f 92       	push	r0
     318:	11 24       	eor	r1, r1
     31a:	2f 93       	push	r18
     31c:	3f 93       	push	r19
     31e:	8f 93       	push	r24
     320:	9f 93       	push	r25
	Miliseconds+=16;
     322:	80 91 7a 01 	lds	r24, 0x017A
     326:	90 91 7b 01 	lds	r25, 0x017B
     32a:	40 96       	adiw	r24, 0x10	; 16
     32c:	90 93 7b 01 	sts	0x017B, r25
     330:	80 93 7a 01 	sts	0x017A, r24
	WatchDogMiliseconds+=16;
     334:	80 91 7c 01 	lds	r24, 0x017C
     338:	90 91 7d 01 	lds	r25, 0x017D
     33c:	40 96       	adiw	r24, 0x10	; 16
     33e:	90 93 7d 01 	sts	0x017D, r25
     342:	80 93 7c 01 	sts	0x017C, r24

	if( (WatchDogMiliseconds <= WatchDogTimeOut) || (!WatchDogResetEnabled) )
     346:	20 91 7c 01 	lds	r18, 0x017C
     34a:	30 91 7d 01 	lds	r19, 0x017D
     34e:	80 91 00 01 	lds	r24, 0x0100
     352:	90 91 01 01 	lds	r25, 0x0101
     356:	82 17       	cp	r24, r18
     358:	93 07       	cpc	r25, r19
     35a:	20 f4       	brcc	.+8      	; 0x364 <__vector_6+0x54>
     35c:	80 91 7e 01 	lds	r24, 0x017E
     360:	88 23       	and	r24, r24
     362:	29 f4       	brne	.+10     	; 0x36e <__vector_6+0x5e>
		WDTCSR |= _BV(WDCE)|_BV(WDIE);	//avoid reseting MCU			
     364:	80 91 60 00 	lds	r24, 0x0060
     368:	80 65       	ori	r24, 0x50	; 80
     36a:	80 93 60 00 	sts	0x0060, r24
     36e:	9f 91       	pop	r25
     370:	8f 91       	pop	r24
     372:	3f 91       	pop	r19
     374:	2f 91       	pop	r18
     376:	0f 90       	pop	r0
     378:	0f be       	out	0x3f, r0	; 63
     37a:	0f 90       	pop	r0
     37c:	1f 90       	pop	r1
     37e:	18 95       	reti

00000380 <zoProtocolLRC>:

	return (hal->putPacket(packet));
}

u08 zoProtocolLRC(const u08* crcBytes, u08 crcByteCount)
{
     380:	48 2f       	mov	r20, r24
	u08 i;
	u08 lrc = 0;

	for( i=0; i<crcByteCount; i++)
     382:	66 23       	and	r22, r22
     384:	59 f0       	breq	.+22     	; 0x39c <zoProtocolLRC+0x1c>
     386:	9c 01       	movw	r18, r24
     388:	f9 01       	movw	r30, r18
     38a:	90 e0       	ldi	r25, 0x00	; 0
		lrc ^= crcBytes[i];
     38c:	81 91       	ld	r24, Z+
     38e:	98 27       	eor	r25, r24
u08 zoProtocolLRC(const u08* crcBytes, u08 crcByteCount)
{
	u08 i;
	u08 lrc = 0;

	for( i=0; i<crcByteCount; i++)
     390:	8e 2f       	mov	r24, r30
     392:	84 1b       	sub	r24, r20
     394:	86 17       	cp	r24, r22
     396:	d0 f3       	brcs	.-12     	; 0x38c <zoProtocolLRC+0xc>
		lrc ^= crcBytes[i];

   return lrc;
}
     398:	89 2f       	mov	r24, r25
     39a:	08 95       	ret
u08 zoProtocolLRC(const u08* crcBytes, u08 crcByteCount)
{
	u08 i;
	u08 lrc = 0;

	for( i=0; i<crcByteCount; i++)
     39c:	90 e0       	ldi	r25, 0x00	; 0
     39e:	fc cf       	rjmp	.-8      	; 0x398 <zoProtocolLRC+0x18>

000003a0 <zoProtocolCommandResponse>:


bool zoProtocolCommandResponse(ZO_PROTOCOL_HAL *hal,
							   ZO_PROTOCOL_PACKET* packet,
							   ZO_ERROR *error)
{
     3a0:	cf 92       	push	r12
     3a2:	df 92       	push	r13
     3a4:	ef 92       	push	r14
     3a6:	ff 92       	push	r15
     3a8:	0f 93       	push	r16
     3aa:	1f 93       	push	r17
     3ac:	cf 93       	push	r28
     3ae:	df 93       	push	r29
     3b0:	6c 01       	movw	r12, r24
     3b2:	8b 01       	movw	r16, r22
     3b4:	7a 01       	movw	r14, r20
	//were we addressed directly? ie not with broadcast or through local acceptance
	//mechanism? no -> do not respond at all
	if( packet->AddressedNodeID  !=  hal->localNodeID )
     3b6:	db 01       	movw	r26, r22
     3b8:	9c 91       	ld	r25, X
     3ba:	f6 01       	movw	r30, r12
     3bc:	80 81       	ld	r24, Z
     3be:	98 17       	cp	r25, r24
     3c0:	51 f0       	breq	.+20     	; 0x3d6 <zoProtocolCommandResponse+0x36>
     3c2:	8f ef       	ldi	r24, 0xFF	; 255

	//compute lrc
	packet->lrc = zoProtocolLRC((u08*)&(packet->commandID),packet->byteCount + 2);

	return (hal->putPacket(packet));
}
     3c4:	df 91       	pop	r29
     3c6:	cf 91       	pop	r28
     3c8:	1f 91       	pop	r17
     3ca:	0f 91       	pop	r16
     3cc:	ff 90       	pop	r15
     3ce:	ef 90       	pop	r14
     3d0:	df 90       	pop	r13
     3d2:	cf 90       	pop	r12
     3d4:	08 95       	ret
	//mechanism? no -> do not respond at all
	if( packet->AddressedNodeID  !=  hal->localNodeID )
		return TRUE;

	//respond to the node that issued the command
	packet->AddressedNodeID =  packet->OwnNodeID;
     3d6:	db 01       	movw	r26, r22
     3d8:	11 96       	adiw	r26, 0x01	; 1
     3da:	8c 91       	ld	r24, X
     3dc:	11 97       	sbiw	r26, 0x01	; 1
     3de:	8c 93       	st	X, r24
	packet->OwnNodeID = hal->localNodeID;
     3e0:	f6 01       	movw	r30, r12
     3e2:	80 81       	ld	r24, Z
     3e4:	11 96       	adiw	r26, 0x01	; 1
     3e6:	8c 93       	st	X, r24
     3e8:	11 97       	sbiw	r26, 0x01	; 1

	//if it was a set command set bytecount to zero
	if ( packet->commandID < ZO_PROTOCOL_GET_COMMANDS_START )
     3ea:	12 96       	adiw	r26, 0x02	; 2
     3ec:	8c 91       	ld	r24, X
     3ee:	12 97       	sbiw	r26, 0x02	; 2
     3f0:	84 36       	cpi	r24, 0x64	; 100
     3f2:	18 f1       	brcs	.+70     	; 0x43a <zoProtocolCommandResponse+0x9a>
		packet->byteCount = 0;

	if(error != 0) //if the error struct pointer exists
     3f4:	e1 14       	cp	r14, r1
     3f6:	f1 04       	cpc	r15, r1
     3f8:	29 f0       	breq	.+10     	; 0x404 <zoProtocolCommandResponse+0x64>
	{
		if( !zoErrorIsEmpty(error) )		//are there any errors in the system?
     3fa:	c7 01       	movw	r24, r14
     3fc:	0e 94 ad 00 	call	0x15a	; 0x15a <zoErrorIsEmpty>
     400:	88 23       	and	r24, r24
     402:	f1 f0       	breq	.+60     	; 0x440 <zoProtocolCommandResponse+0xa0>
			}while(!zoErrorIsEmpty(error));
		}
	}

	//compute lrc
	packet->lrc = zoProtocolLRC((u08*)&(packet->commandID),packet->byteCount + 2);
     404:	98 01       	movw	r18, r16
     406:	2e 5f       	subi	r18, 0xFE	; 254
     408:	3f 4f       	sbci	r19, 0xFF	; 255
     40a:	f8 01       	movw	r30, r16
     40c:	43 81       	ldd	r20, Z+3	; 0x03
     40e:	4e 5f       	subi	r20, 0xFE	; 254
u08 zoProtocolLRC(const u08* crcBytes, u08 crcByteCount)
{
	u08 i;
	u08 lrc = 0;

	for( i=0; i<crcByteCount; i++)
     410:	a9 f1       	breq	.+106    	; 0x47c <zoProtocolCommandResponse+0xdc>
     412:	52 2f       	mov	r21, r18
     414:	f9 01       	movw	r30, r18
     416:	90 e0       	ldi	r25, 0x00	; 0
		lrc ^= crcBytes[i];
     418:	81 91       	ld	r24, Z+
     41a:	98 27       	eor	r25, r24
u08 zoProtocolLRC(const u08* crcBytes, u08 crcByteCount)
{
	u08 i;
	u08 lrc = 0;

	for( i=0; i<crcByteCount; i++)
     41c:	8e 2f       	mov	r24, r30
     41e:	85 1b       	sub	r24, r21
     420:	84 17       	cp	r24, r20
     422:	d0 f3       	brcs	.-12     	; 0x418 <zoProtocolCommandResponse+0x78>
			}while(!zoErrorIsEmpty(error));
		}
	}

	//compute lrc
	packet->lrc = zoProtocolLRC((u08*)&(packet->commandID),packet->byteCount + 2);
     424:	d8 01       	movw	r26, r16
     426:	54 96       	adiw	r26, 0x14	; 20
     428:	9c 93       	st	X, r25

	return (hal->putPacket(packet));
     42a:	d6 01       	movw	r26, r12
     42c:	14 96       	adiw	r26, 0x04	; 4
     42e:	ed 91       	ld	r30, X+
     430:	fc 91       	ld	r31, X
     432:	15 97       	sbiw	r26, 0x05	; 5
     434:	c8 01       	movw	r24, r16
     436:	09 95       	icall
     438:	c5 cf       	rjmp	.-118    	; 0x3c4 <zoProtocolCommandResponse+0x24>
	packet->AddressedNodeID =  packet->OwnNodeID;
	packet->OwnNodeID = hal->localNodeID;

	//if it was a set command set bytecount to zero
	if ( packet->commandID < ZO_PROTOCOL_GET_COMMANDS_START )
		packet->byteCount = 0;
     43a:	13 96       	adiw	r26, 0x03	; 3
     43c:	1c 92       	st	X, r1
     43e:	da cf       	rjmp	.-76     	; 0x3f4 <zoProtocolCommandResponse+0x54>
	if(error != 0) //if the error struct pointer exists
	{
		if( !zoErrorIsEmpty(error) )		//are there any errors in the system?
		{
			//yes there are, prepare the error response
			packet->commandID = ZO_PROTOCOL_ERROR_ID;
     440:	8a ef       	ldi	r24, 0xFA	; 250
     442:	d8 01       	movw	r26, r16
     444:	12 96       	adiw	r26, 0x02	; 2
     446:	8c 93       	st	X, r24
     448:	12 97       	sbiw	r26, 0x02	; 2
			packet->byteCount = 0;
     44a:	13 96       	adiw	r26, 0x03	; 3
     44c:	1c 92       	st	X, r1
			do {
				packet->data[packet->byteCount] = zoErrorGet(error);
     44e:	f8 01       	movw	r30, r16
     450:	83 81       	ldd	r24, Z+3	; 0x03
     452:	c8 2f       	mov	r28, r24
     454:	d0 e0       	ldi	r29, 0x00	; 0
     456:	c7 01       	movw	r24, r14
     458:	0e 94 b5 00 	call	0x16a	; 0x16a <zoErrorGet>
     45c:	c0 0f       	add	r28, r16
     45e:	d1 1f       	adc	r29, r17
     460:	8c 83       	std	Y+4, r24	; 0x04
				packet->byteCount++;
     462:	d8 01       	movw	r26, r16
     464:	13 96       	adiw	r26, 0x03	; 3
     466:	8c 91       	ld	r24, X
     468:	13 97       	sbiw	r26, 0x03	; 3
     46a:	8f 5f       	subi	r24, 0xFF	; 255
     46c:	13 96       	adiw	r26, 0x03	; 3
     46e:	8c 93       	st	X, r24
			}while(!zoErrorIsEmpty(error));
     470:	c7 01       	movw	r24, r14
     472:	0e 94 ad 00 	call	0x15a	; 0x15a <zoErrorIsEmpty>
     476:	88 23       	and	r24, r24
     478:	51 f3       	breq	.-44     	; 0x44e <zoProtocolCommandResponse+0xae>
     47a:	c4 cf       	rjmp	.-120    	; 0x404 <zoProtocolCommandResponse+0x64>
u08 zoProtocolLRC(const u08* crcBytes, u08 crcByteCount)
{
	u08 i;
	u08 lrc = 0;

	for( i=0; i<crcByteCount; i++)
     47c:	90 e0       	ldi	r25, 0x00	; 0
     47e:	d2 cf       	rjmp	.-92     	; 0x424 <zoProtocolCommandResponse+0x84>

00000480 <zoProtocolParse>:
	return success;
}

//slave operations
inline bool zoProtocolParse(ZO_PROTOCOL_HAL *hal, ZO_PROTOCOL_PACKET *packet )
{
     480:	0f 93       	push	r16
     482:	1f 93       	push	r17
     484:	cf 93       	push	r28
     486:	df 93       	push	r29
     488:	8c 01       	movw	r16, r24
     48a:	eb 01       	movw	r28, r22
	if( hal->getPacket(packet) )
     48c:	dc 01       	movw	r26, r24
     48e:	16 96       	adiw	r26, 0x06	; 6
     490:	ed 91       	ld	r30, X+
     492:	fc 91       	ld	r31, X
     494:	17 97       	sbiw	r26, 0x07	; 7
     496:	cb 01       	movw	r24, r22
     498:	09 95       	icall
     49a:	88 23       	and	r24, r24
     49c:	29 f4       	brne	.+10     	; 0x4a8 <zoProtocolParse+0x28>
		else
			zoErrorPut(hal->error,ZO_PROTOCOL_ERROR_WRONG_LRC);
	}

	return FALSE;
}
     49e:	df 91       	pop	r29
     4a0:	cf 91       	pop	r28
     4a2:	1f 91       	pop	r17
     4a4:	0f 91       	pop	r16
     4a6:	08 95       	ret
#include "zoProtocolUart.h"
#include "zoSystemTimer.h"

static inline bool checkLRC(ZO_PROTOCOL_PACKET* packet)
{
	return ( ( packet->lrc == 
     4a8:	5c 89       	ldd	r21, Y+20	; 0x14
     4aa:	9e 01       	movw	r18, r28
     4ac:	2e 5f       	subi	r18, 0xFE	; 254
     4ae:	3f 4f       	sbci	r19, 0xFF	; 255
     4b0:	6b 81       	ldd	r22, Y+3	; 0x03
     4b2:	6e 5f       	subi	r22, 0xFE	; 254
u08 zoProtocolLRC(const u08* crcBytes, u08 crcByteCount)
{
	u08 i;
	u08 lrc = 0;

	for( i=0; i<crcByteCount; i++)
     4b4:	a9 f0       	breq	.+42     	; 0x4e0 <zoProtocolParse+0x60>
     4b6:	42 2f       	mov	r20, r18
     4b8:	f9 01       	movw	r30, r18
     4ba:	90 e0       	ldi	r25, 0x00	; 0
		lrc ^= crcBytes[i];
     4bc:	81 91       	ld	r24, Z+
     4be:	98 27       	eor	r25, r24
u08 zoProtocolLRC(const u08* crcBytes, u08 crcByteCount)
{
	u08 i;
	u08 lrc = 0;

	for( i=0; i<crcByteCount; i++)
     4c0:	8e 2f       	mov	r24, r30
     4c2:	84 1b       	sub	r24, r20
     4c4:	86 17       	cp	r24, r22
     4c6:	d0 f3       	brcs	.-12     	; 0x4bc <zoProtocolParse+0x3c>
#include "zoProtocolUart.h"
#include "zoSystemTimer.h"

static inline bool checkLRC(ZO_PROTOCOL_PACKET* packet)
{
	return ( ( packet->lrc == 
     4c8:	59 17       	cp	r21, r25
     4ca:	41 f0       	breq	.+16     	; 0x4dc <zoProtocolParse+0x5c>
	if( hal->getPacket(packet) )
	{
		if ( checkLRC(packet) )
			return TRUE;
		else
			zoErrorPut(hal->error,ZO_PROTOCOL_ERROR_WRONG_LRC);
     4cc:	f8 01       	movw	r30, r16
     4ce:	82 81       	ldd	r24, Z+2	; 0x02
     4d0:	93 81       	ldd	r25, Z+3	; 0x03
     4d2:	62 e2       	ldi	r22, 0x22	; 34
     4d4:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <zoErrorPut>
     4d8:	80 e0       	ldi	r24, 0x00	; 0
     4da:	e1 cf       	rjmp	.-62     	; 0x49e <zoProtocolParse+0x1e>
#include "zoProtocolUart.h"
#include "zoSystemTimer.h"

static inline bool checkLRC(ZO_PROTOCOL_PACKET* packet)
{
	return ( ( packet->lrc == 
     4dc:	8f ef       	ldi	r24, 0xFF	; 255
     4de:	df cf       	rjmp	.-66     	; 0x49e <zoProtocolParse+0x1e>
u08 zoProtocolLRC(const u08* crcBytes, u08 crcByteCount)
{
	u08 i;
	u08 lrc = 0;

	for( i=0; i<crcByteCount; i++)
     4e0:	90 e0       	ldi	r25, 0x00	; 0
     4e2:	f2 cf       	rjmp	.-28     	; 0x4c8 <zoProtocolParse+0x48>

000004e4 <zoProtocolCommand>:
	return success;
}

//master operations
bool zoProtocolCommand(ZO_PROTOCOL_HAL* hal, ZO_PROTOCOL_PACKET* packet)
{
     4e4:	af 92       	push	r10
     4e6:	bf 92       	push	r11
     4e8:	cf 92       	push	r12
     4ea:	df 92       	push	r13
     4ec:	ef 92       	push	r14
     4ee:	ff 92       	push	r15
     4f0:	0f 93       	push	r16
     4f2:	1f 93       	push	r17
     4f4:	df 93       	push	r29
     4f6:	cf 93       	push	r28
     4f8:	00 d0       	rcall	.+0      	; 0x4fa <zoProtocolCommand+0x16>
     4fa:	cd b7       	in	r28, 0x3d	; 61
     4fc:	de b7       	in	r29, 0x3e	; 62
     4fe:	6c 01       	movw	r12, r24
     500:	8b 01       	movw	r16, r22
	bool success = TRUE;
	u16 t;
	
	//compute lrc
	packet->lrc = zoProtocolLRC((u08*)&(packet->commandID),packet->byteCount + 2);
     502:	82 e0       	ldi	r24, 0x02	; 2
     504:	e8 2e       	mov	r14, r24
     506:	f1 2c       	mov	r15, r1
     508:	e6 0e       	add	r14, r22
     50a:	f7 1e       	adc	r15, r23
     50c:	db 01       	movw	r26, r22
     50e:	13 96       	adiw	r26, 0x03	; 3
     510:	4c 91       	ld	r20, X
     512:	4e 5f       	subi	r20, 0xFE	; 254
u08 zoProtocolLRC(const u08* crcBytes, u08 crcByteCount)
{
	u08 i;
	u08 lrc = 0;

	for( i=0; i<crcByteCount; i++)
     514:	09 f4       	brne	.+2      	; 0x518 <zoProtocolCommand+0x34>
     516:	4b c0       	rjmp	.+150    	; 0x5ae <zoProtocolCommand+0xca>
     518:	5e 2d       	mov	r21, r14
     51a:	f7 01       	movw	r30, r14
     51c:	90 e0       	ldi	r25, 0x00	; 0
		lrc ^= crcBytes[i];
     51e:	81 91       	ld	r24, Z+
     520:	98 27       	eor	r25, r24
u08 zoProtocolLRC(const u08* crcBytes, u08 crcByteCount)
{
	u08 i;
	u08 lrc = 0;

	for( i=0; i<crcByteCount; i++)
     522:	8e 2f       	mov	r24, r30
     524:	85 1b       	sub	r24, r21
     526:	84 17       	cp	r24, r20
     528:	d0 f3       	brcs	.-12     	; 0x51e <zoProtocolCommand+0x3a>
{
	bool success = TRUE;
	u16 t;
	
	//compute lrc
	packet->lrc = zoProtocolLRC((u08*)&(packet->commandID),packet->byteCount + 2);
     52a:	f8 01       	movw	r30, r16
     52c:	94 8b       	std	Z+20, r25	; 0x14

	//is it a broadcast command? Then send it and do not wait on response
	if( packet->commandID >= ZO_PROTOCOL_BRC_COMMANDS_START )
     52e:	82 81       	ldd	r24, Z+2	; 0x02
     530:	88 3c       	cpi	r24, 0xC8	; 200
     532:	b0 f4       	brcc	.+44     	; 0x560 <zoProtocolCommand+0x7c>
		return (hal->putPacket(packet));

	//if it is a set or get command: Send it and wait with timeout on response
	if( hal->putPacket(packet) )
     534:	d6 01       	movw	r26, r12
     536:	14 96       	adiw	r26, 0x04	; 4
     538:	ed 91       	ld	r30, X+
     53a:	fc 91       	ld	r31, X
     53c:	15 97       	sbiw	r26, 0x05	; 5
     53e:	c8 01       	movw	r24, r16
     540:	09 95       	icall
     542:	88 23       	and	r24, r24
     544:	a9 f4       	brne	.+42     	; 0x570 <zoProtocolCommand+0x8c>
	}
	else
		success = FALSE;

	return success;
}
     546:	0f 90       	pop	r0
     548:	0f 90       	pop	r0
     54a:	cf 91       	pop	r28
     54c:	df 91       	pop	r29
     54e:	1f 91       	pop	r17
     550:	0f 91       	pop	r16
     552:	ff 90       	pop	r15
     554:	ef 90       	pop	r14
     556:	df 90       	pop	r13
     558:	cf 90       	pop	r12
     55a:	bf 90       	pop	r11
     55c:	af 90       	pop	r10
     55e:	08 95       	ret
	//compute lrc
	packet->lrc = zoProtocolLRC((u08*)&(packet->commandID),packet->byteCount + 2);

	//is it a broadcast command? Then send it and do not wait on response
	if( packet->commandID >= ZO_PROTOCOL_BRC_COMMANDS_START )
		return (hal->putPacket(packet));
     560:	d6 01       	movw	r26, r12
     562:	14 96       	adiw	r26, 0x04	; 4
     564:	ed 91       	ld	r30, X+
     566:	fc 91       	ld	r31, X
     568:	15 97       	sbiw	r26, 0x05	; 5
     56a:	c8 01       	movw	r24, r16
     56c:	09 95       	icall
     56e:	eb cf       	rjmp	.-42     	; 0x546 <zoProtocolCommand+0x62>

	//if it is a set or get command: Send it and wait with timeout on response
	if( hal->putPacket(packet) )
	{
		zoSystemTimerTimeOutInit(&t);
     570:	5e 01       	movw	r10, r28
     572:	08 94       	sec
     574:	a1 1c       	adc	r10, r1
     576:	b1 1c       	adc	r11, r1
     578:	c5 01       	movw	r24, r10
     57a:	0e 94 42 01 	call	0x284	; 0x284 <zoSystemTimerTimeOutInit>
		while( !(hal->getPacket(packet)) )
     57e:	d6 01       	movw	r26, r12
     580:	16 96       	adiw	r26, 0x06	; 6
     582:	ed 91       	ld	r30, X+
     584:	fc 91       	ld	r31, X
     586:	17 97       	sbiw	r26, 0x07	; 7
     588:	c8 01       	movw	r24, r16
     58a:	09 95       	icall
     58c:	88 23       	and	r24, r24
     58e:	89 f4       	brne	.+34     	; 0x5b2 <zoProtocolCommand+0xce>
		{
			if( zoSystemTimerTimeOutExpired(&t,ZO_PROTOCOL_COMMAND_RESPONSE_TIMEOUT_MS) )
     590:	c5 01       	movw	r24, r10
     592:	68 ec       	ldi	r22, 0xC8	; 200
     594:	70 e0       	ldi	r23, 0x00	; 0
     596:	0e 94 78 01 	call	0x2f0	; 0x2f0 <zoSystemTimerTimeOutExpired>
     59a:	88 23       	and	r24, r24
     59c:	81 f3       	breq	.-32     	; 0x57e <zoProtocolCommand+0x9a>
			{
				zoErrorPut(hal->error,ZO_PROTOCOL_ERROR_RESPONSE_TIMEOUT);
     59e:	f6 01       	movw	r30, r12
     5a0:	82 81       	ldd	r24, Z+2	; 0x02
     5a2:	93 81       	ldd	r25, Z+3	; 0x03
     5a4:	61 e2       	ldi	r22, 0x21	; 33
     5a6:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <zoErrorPut>
     5aa:	80 e0       	ldi	r24, 0x00	; 0
     5ac:	cc cf       	rjmp	.-104    	; 0x546 <zoProtocolCommand+0x62>
u08 zoProtocolLRC(const u08* crcBytes, u08 crcByteCount)
{
	u08 i;
	u08 lrc = 0;

	for( i=0; i<crcByteCount; i++)
     5ae:	90 e0       	ldi	r25, 0x00	; 0
     5b0:	bc cf       	rjmp	.-136    	; 0x52a <zoProtocolCommand+0x46>
#include "zoProtocolUart.h"
#include "zoSystemTimer.h"

static inline bool checkLRC(ZO_PROTOCOL_PACKET* packet)
{
	return ( ( packet->lrc == 
     5b2:	f8 01       	movw	r30, r16
     5b4:	54 89       	ldd	r21, Z+20	; 0x14
     5b6:	63 81       	ldd	r22, Z+3	; 0x03
     5b8:	6e 5f       	subi	r22, 0xFE	; 254
u08 zoProtocolLRC(const u08* crcBytes, u08 crcByteCount)
{
	u08 i;
	u08 lrc = 0;

	for( i=0; i<crcByteCount; i++)
     5ba:	c1 f0       	breq	.+48     	; 0x5ec <zoProtocolCommand+0x108>
     5bc:	4e 2d       	mov	r20, r14
     5be:	c7 01       	movw	r24, r14
     5c0:	fc 01       	movw	r30, r24
     5c2:	90 e0       	ldi	r25, 0x00	; 0
		lrc ^= crcBytes[i];
     5c4:	81 91       	ld	r24, Z+
     5c6:	98 27       	eor	r25, r24
u08 zoProtocolLRC(const u08* crcBytes, u08 crcByteCount)
{
	u08 i;
	u08 lrc = 0;

	for( i=0; i<crcByteCount; i++)
     5c8:	8e 2f       	mov	r24, r30
     5ca:	84 1b       	sub	r24, r20
     5cc:	86 17       	cp	r24, r22
     5ce:	d0 f3       	brcs	.-12     	; 0x5c4 <zoProtocolCommand+0xe0>
#include "zoProtocolUart.h"
#include "zoSystemTimer.h"

static inline bool checkLRC(ZO_PROTOCOL_PACKET* packet)
{
	return ( ( packet->lrc == 
     5d0:	59 17       	cp	r21, r25
     5d2:	51 f0       	breq	.+20     	; 0x5e8 <zoProtocolCommand+0x104>

		if( success )
		{
			if( ! checkLRC(packet)  )
			{
				zoErrorPut(hal->error,ZO_PROTOCOL_ERROR_WRONG_LRC);
     5d4:	d6 01       	movw	r26, r12
     5d6:	12 96       	adiw	r26, 0x02	; 2
     5d8:	8d 91       	ld	r24, X+
     5da:	9c 91       	ld	r25, X
     5dc:	13 97       	sbiw	r26, 0x03	; 3
     5de:	62 e2       	ldi	r22, 0x22	; 34
     5e0:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <zoErrorPut>
     5e4:	80 e0       	ldi	r24, 0x00	; 0
     5e6:	af cf       	rjmp	.-162    	; 0x546 <zoProtocolCommand+0x62>
#include "zoProtocolUart.h"
#include "zoSystemTimer.h"

static inline bool checkLRC(ZO_PROTOCOL_PACKET* packet)
{
	return ( ( packet->lrc == 
     5e8:	8f ef       	ldi	r24, 0xFF	; 255
     5ea:	ad cf       	rjmp	.-166    	; 0x546 <zoProtocolCommand+0x62>
u08 zoProtocolLRC(const u08* crcBytes, u08 crcByteCount)
{
	u08 i;
	u08 lrc = 0;

	for( i=0; i<crcByteCount; i++)
     5ec:	90 e0       	ldi	r25, 0x00	; 0
     5ee:	f0 cf       	rjmp	.-32     	; 0x5d0 <zoProtocolCommand+0xec>

000005f0 <zoProtocolInit>:
}


//initialization
bool zoProtocolInit(ZO_PROTOCOL_HW_TYPE hw,ZO_PROTOCOL_HAL *hal, u08 localNodeID)
{
     5f0:	ff 92       	push	r15
     5f2:	0f 93       	push	r16
     5f4:	1f 93       	push	r17
     5f6:	cf 93       	push	r28
     5f8:	df 93       	push	r29
     5fa:	08 2f       	mov	r16, r24
     5fc:	eb 01       	movw	r28, r22
     5fe:	f4 2e       	mov	r15, r20
	bool success = TRUE;

	switch (hw)
     600:	88 23       	and	r24, r24
     602:	49 f5       	brne	.+82     	; 0x656 <zoProtocolInit+0x66>
	{
	case ZO_PROTOCOL_HW_I2C:
		hal->putPacket = zoProtocolI2cPutPacket;
     604:	80 ec       	ldi	r24, 0xC0	; 192
     606:	9a e1       	ldi	r25, 0x1A	; 26
     608:	9d 83       	std	Y+5, r25	; 0x05
     60a:	8c 83       	std	Y+4, r24	; 0x04
		hal->getPacket = zoProtocolI2cGetPacket;
     60c:	85 e8       	ldi	r24, 0x85	; 133
     60e:	9a e1       	ldi	r25, 0x1A	; 26
     610:	9f 83       	std	Y+7, r25	; 0x07
     612:	8e 83       	std	Y+6, r24	; 0x06
		hal->setLAM = zoProtocolI2cSetLAM;
     614:	85 e7       	ldi	r24, 0x75	; 117
     616:	9a e1       	ldi	r25, 0x1A	; 26
     618:	99 87       	std	Y+9, r25	; 0x09
     61a:	88 87       	std	Y+8, r24	; 0x08
		hal->setBitRate = zoProtocolI2cSetBitrate;
     61c:	8a e7       	ldi	r24, 0x7A	; 122
     61e:	9a e1       	ldi	r25, 0x1A	; 26
     620:	9b 87       	std	Y+11, r25	; 0x0b
     622:	8a 87       	std	Y+10, r24	; 0x0a
		hal->error = zoProtocolI2cError;
     624:	80 91 6c 01 	lds	r24, 0x016C
     628:	90 91 6d 01 	lds	r25, 0x016D
     62c:	9b 83       	std	Y+3, r25	; 0x03
     62e:	8a 83       	std	Y+2, r24	; 0x02
		zoProtocolI2cInit(localNodeID,100);
     630:	84 2f       	mov	r24, r20
     632:	64 e6       	ldi	r22, 0x64	; 100
     634:	70 e0       	ldi	r23, 0x00	; 0
     636:	0e 94 04 1b 	call	0x3608	; 0x3608 <zoProtocolI2cInit>
     63a:	1f ef       	ldi	r17, 0xFF	; 255
	case ZO_PROTOCOL_HW_CAN:
		//TODO (for processors that support it)
		break;
	}

	hal->hw = hw;
     63c:	09 83       	std	Y+1, r16	; 0x01
	hal->localNodeID = localNodeID;
     63e:	f8 82       	st	Y, r15
	hal->setLAM(ZO_PROTOCOL_DEFAULT_LAM);
     640:	e8 85       	ldd	r30, Y+8	; 0x08
     642:	f9 85       	ldd	r31, Y+9	; 0x09
     644:	8f ef       	ldi	r24, 0xFF	; 255
     646:	09 95       	icall

	return success;
}
     648:	81 2f       	mov	r24, r17
     64a:	df 91       	pop	r29
     64c:	cf 91       	pop	r28
     64e:	1f 91       	pop	r17
     650:	0f 91       	pop	r16
     652:	ff 90       	pop	r15
     654:	08 95       	ret
//initialization
bool zoProtocolInit(ZO_PROTOCOL_HW_TYPE hw,ZO_PROTOCOL_HAL *hal, u08 localNodeID)
{
	bool success = TRUE;

	switch (hw)
     656:	84 30       	cpi	r24, 0x04	; 4
     658:	10 f0       	brcs	.+4      	; 0x65e <zoProtocolInit+0x6e>
		hal->putPacket = zoProtocolUartPutPacket;
		hal->getPacket = zoProtocolUartGetPacket;
		hal->setLAM = zoProtocolUartSetLAM;
		hal->setBitRate = zoProtocolUartSetBitrate;
		hal->error = zoProtocolUartError;
		if( ! zoProtocolUartInit(hal->hw,localNodeID,9600) )
     65a:	1f ef       	ldi	r17, 0xFF	; 255
     65c:	ef cf       	rjmp	.-34     	; 0x63c <zoProtocolInit+0x4c>
		break;

	case ZO_PROTOCOL_HW_RS232:
	case ZO_PROTOCOL_HW_UART_5V:
	case ZO_PROTOCOL_HW_HALF_DUPLEX_RS485:
		hal->putPacket = zoProtocolUartPutPacket;
     65e:	8e e3       	ldi	r24, 0x3E	; 62
     660:	9e e1       	ldi	r25, 0x1E	; 30
     662:	9d 83       	std	Y+5, r25	; 0x05
     664:	8c 83       	std	Y+4, r24	; 0x04
		hal->getPacket = zoProtocolUartGetPacket;
     666:	8f ea       	ldi	r24, 0xAF	; 175
     668:	9d e1       	ldi	r25, 0x1D	; 29
     66a:	9f 83       	std	Y+7, r25	; 0x07
     66c:	8e 83       	std	Y+6, r24	; 0x06
		hal->setLAM = zoProtocolUartSetLAM;
     66e:	89 ea       	ldi	r24, 0xA9	; 169
     670:	9d e1       	ldi	r25, 0x1D	; 29
     672:	99 87       	std	Y+9, r25	; 0x09
     674:	88 87       	std	Y+8, r24	; 0x08
		hal->setBitRate = zoProtocolUartSetBitrate;
     676:	8c ea       	ldi	r24, 0xAC	; 172
     678:	9d e1       	ldi	r25, 0x1D	; 29
     67a:	9b 87       	std	Y+11, r25	; 0x0b
     67c:	8a 87       	std	Y+10, r24	; 0x0a
		hal->error = zoProtocolUartError;
     67e:	80 91 70 01 	lds	r24, 0x0170
     682:	90 91 71 01 	lds	r25, 0x0171
     686:	9b 83       	std	Y+3, r25	; 0x03
     688:	8a 83       	std	Y+2, r24	; 0x02
		if( ! zoProtocolUartInit(hal->hw,localNodeID,9600) )
     68a:	89 81       	ldd	r24, Y+1	; 0x01
     68c:	64 2f       	mov	r22, r20
     68e:	20 e8       	ldi	r18, 0x80	; 128
     690:	35 e2       	ldi	r19, 0x25	; 37
     692:	40 e0       	ldi	r20, 0x00	; 0
     694:	50 e0       	ldi	r21, 0x00	; 0
     696:	0e 94 71 1e 	call	0x3ce2	; 0x3ce2 <zoProtocolUartInit>
     69a:	88 23       	and	r24, r24
     69c:	f1 f6       	brne	.-68     	; 0x65a <zoProtocolInit+0x6a>
     69e:	10 e0       	ldi	r17, 0x00	; 0
     6a0:	cd cf       	rjmp	.-102    	; 0x63c <zoProtocolInit+0x4c>

000006a2 <zoEncoderGetPosAbsolute>:

u16 zoEncoderGetPosAbsolute(void)
{
	u16 pos;

	enterCritical();
     6a2:	0f b6       	in	r0, 0x3f	; 63
     6a4:	0f 92       	push	r0
     6a6:	f8 94       	cli
	pos = PositionAbsolute;
     6a8:	20 91 8f 01 	lds	r18, 0x018F
     6ac:	30 91 90 01 	lds	r19, 0x0190
	exitCritical();
     6b0:	0f 90       	pop	r0
     6b2:	0f be       	out	0x3f, r0	; 63

	return pos;
}
     6b4:	c9 01       	movw	r24, r18
     6b6:	08 95       	ret

000006b8 <zoEncoderGetVel>:

s32 zoEncoderGetVel(void)
{
	s32 vel;

	enterCritical();
     6b8:	0f b6       	in	r0, 0x3f	; 63
     6ba:	0f 92       	push	r0
     6bc:	f8 94       	cli
	vel = DeltaPos;
     6be:	60 91 87 01 	lds	r22, 0x0187
     6c2:	70 91 88 01 	lds	r23, 0x0188
     6c6:	80 91 89 01 	lds	r24, 0x0189
     6ca:	90 91 8a 01 	lds	r25, 0x018A
	exitCritical();
     6ce:	0f 90       	pop	r0
     6d0:	0f be       	out	0x3f, r0	; 63

	vel = (s32)( (double)(vel) *
     6d2:	0e 94 2a 24 	call	0x4854	; 0x4854 <__floatsisf>
     6d6:	20 91 04 01 	lds	r18, 0x0104
     6da:	30 91 05 01 	lds	r19, 0x0105
     6de:	40 91 06 01 	lds	r20, 0x0106
     6e2:	50 91 07 01 	lds	r21, 0x0107
     6e6:	0e 94 b6 24 	call	0x496c	; 0x496c <__mulsf3>
     6ea:	20 e0       	ldi	r18, 0x00	; 0
     6ec:	30 e0       	ldi	r19, 0x00	; 0
     6ee:	48 ec       	ldi	r20, 0xC8	; 200
     6f0:	52 e4       	ldi	r21, 0x42	; 66
     6f2:	0e 94 8f 23 	call	0x471e	; 0x471e <__divsf3>
     6f6:	0e 94 f7 23 	call	0x47ee	; 0x47ee <__fixsfsi>
     6fa:	9b 01       	movw	r18, r22
     6fc:	ac 01       	movw	r20, r24
				 Sms.Control.LoopHz / 
				 (double)VELOCITY_READ_CONTROL_LOOP_ENTRIES );

	return vel;
}
     6fe:	ca 01       	movw	r24, r20
     700:	08 95       	ret

00000702 <zoEncoderSetVel>:
//this function needs to run inside the control loop, because accurate timing is needed
//in order to calculate velocity.

void zoEncoderSetVel(void)
{
	if(NoOfEntriesControlLoopIsr++ >= VELOCITY_READ_CONTROL_LOOP_ENTRIES)
     702:	80 91 02 01 	lds	r24, 0x0102
     706:	8f 5f       	subi	r24, 0xFF	; 255
     708:	80 93 02 01 	sts	0x0102, r24
     70c:	81 50       	subi	r24, 0x01	; 1
     70e:	84 36       	cpi	r24, 0x64	; 100
     710:	78 f1       	brcs	.+94     	; 0x770 <zoEncoderSetVel+0x6e>
	{
		NoOfEntriesControlLoopIsr = 1;
     712:	81 e0       	ldi	r24, 0x01	; 1
     714:	80 93 02 01 	sts	0x0102, r24
		DeltaPos = (s32)( (EncoderPos - LastEncoderPos) );
     718:	80 91 7f 01 	lds	r24, 0x017F
     71c:	90 91 80 01 	lds	r25, 0x0180
     720:	a0 91 81 01 	lds	r26, 0x0181
     724:	b0 91 82 01 	lds	r27, 0x0182
     728:	20 91 83 01 	lds	r18, 0x0183
     72c:	30 91 84 01 	lds	r19, 0x0184
     730:	40 91 85 01 	lds	r20, 0x0185
     734:	50 91 86 01 	lds	r21, 0x0186
     738:	82 1b       	sub	r24, r18
     73a:	93 0b       	sbc	r25, r19
     73c:	a4 0b       	sbc	r26, r20
     73e:	b5 0b       	sbc	r27, r21
     740:	80 93 87 01 	sts	0x0187, r24
     744:	90 93 88 01 	sts	0x0188, r25
     748:	a0 93 89 01 	sts	0x0189, r26
     74c:	b0 93 8a 01 	sts	0x018A, r27
		LastEncoderPos = EncoderPos;
     750:	80 91 7f 01 	lds	r24, 0x017F
     754:	90 91 80 01 	lds	r25, 0x0180
     758:	a0 91 81 01 	lds	r26, 0x0181
     75c:	b0 91 82 01 	lds	r27, 0x0182
     760:	80 93 83 01 	sts	0x0183, r24
     764:	90 93 84 01 	sts	0x0184, r25
     768:	a0 93 85 01 	sts	0x0185, r26
     76c:	b0 93 86 01 	sts	0x0186, r27
     770:	08 95       	ret

00000772 <zoEncoderPollOverFlowError>:

inline bool zoEncoderPollOverFlowError(void)
{
	bool ovfl = FALSE;
	
	enterCritical();
     772:	0f b6       	in	r0, 0x3f	; 63
     774:	0f 92       	push	r0
     776:	f8 94       	cli
	if(	EncoderPos >= ((s32)0x7FFFFC00) )
     778:	80 91 7f 01 	lds	r24, 0x017F
     77c:	90 91 80 01 	lds	r25, 0x0180
     780:	a0 91 81 01 	lds	r26, 0x0181
     784:	b0 91 82 01 	lds	r27, 0x0182
     788:	80 50       	subi	r24, 0x00	; 0
     78a:	9c 4f       	sbci	r25, 0xFC	; 252
     78c:	af 4f       	sbci	r26, 0xFF	; 255
     78e:	bf 47       	sbci	r27, 0x7F	; 127
     790:	24 f4       	brge	.+8      	; 0x79a <zoEncoderPollOverFlowError+0x28>
     792:	80 e0       	ldi	r24, 0x00	; 0
		ovfl = TRUE;
	exitCritical();
     794:	0f 90       	pop	r0
     796:	0f be       	out	0x3f, r0	; 63

	return ovfl;
}
     798:	08 95       	ret
inline bool zoEncoderPollOverFlowError(void)
{
	bool ovfl = FALSE;
	
	enterCritical();
	if(	EncoderPos >= ((s32)0x7FFFFC00) )
     79a:	8f ef       	ldi	r24, 0xFF	; 255
     79c:	fb cf       	rjmp	.-10     	; 0x794 <zoEncoderPollOverFlowError+0x22>

0000079e <zoEncoderPollUnderFlowError>:

inline bool zoEncoderPollUnderFlowError(void)
{
	bool unfl = FALSE;
	
	enterCritical();
     79e:	0f b6       	in	r0, 0x3f	; 63
     7a0:	0f 92       	push	r0
     7a2:	f8 94       	cli
	if(	EncoderPos <= ((s32)0x80000400) )
     7a4:	80 91 7f 01 	lds	r24, 0x017F
     7a8:	90 91 80 01 	lds	r25, 0x0180
     7ac:	a0 91 81 01 	lds	r26, 0x0181
     7b0:	b0 91 82 01 	lds	r27, 0x0182
     7b4:	81 50       	subi	r24, 0x01	; 1
     7b6:	94 40       	sbci	r25, 0x04	; 4
     7b8:	a0 40       	sbci	r26, 0x00	; 0
     7ba:	b0 48       	sbci	r27, 0x80	; 128
     7bc:	24 f0       	brlt	.+8      	; 0x7c6 <zoEncoderPollUnderFlowError+0x28>
     7be:	80 e0       	ldi	r24, 0x00	; 0
		unfl = TRUE;
	exitCritical();
     7c0:	0f 90       	pop	r0
     7c2:	0f be       	out	0x3f, r0	; 63

	return unfl;
}
     7c4:	08 95       	ret
inline bool zoEncoderPollUnderFlowError(void)
{
	bool unfl = FALSE;
	
	enterCritical();
	if(	EncoderPos <= ((s32)0x80000400) )
     7c6:	8f ef       	ldi	r24, 0xFF	; 255
     7c8:	fb cf       	rjmp	.-10     	; 0x7c0 <zoEncoderPollUnderFlowError+0x22>

000007ca <zoEncoderGetPosSpi>:

	return pos;
}

u16 zoEncoderGetPosSpi(void)
{
     7ca:	df 93       	push	r29
     7cc:	cf 93       	push	r28
     7ce:	00 d0       	rcall	.+0      	; 0x7d0 <zoEncoderGetPosSpi+0x6>
     7d0:	cd b7       	in	r28, 0x3d	; 61
     7d2:	de b7       	in	r29, 0x3e	; 62
	u08 dummy = 0;
	u08 data[2] = {0,0};
	u16 posSPI;

	PORTB &= ~_BV(PB2);
     7d4:	2a 98       	cbi	0x05, 2	; 5
	__asm__ __volatile__ ("nop" ::);
     7d6:	00 00       	nop
	__asm__ __volatile__ ("nop" ::);
     7d8:	00 00       	nop
	__asm__ __volatile__ ("nop" ::);
     7da:	00 00       	nop
	__asm__ __volatile__ ("nop" ::);
     7dc:	00 00       	nop
	__asm__ __volatile__ ("nop" ::);
     7de:	00 00       	nop
	__asm__ __volatile__ ("nop" ::);
     7e0:	00 00       	nop
	__asm__ __volatile__ ("nop" ::);
     7e2:	00 00       	nop
	__asm__ __volatile__ ("nop" ::);
     7e4:	00 00       	nop
	__asm__ __volatile__ ("nop" ::);
     7e6:	00 00       	nop
	__asm__ __volatile__ ("nop" ::);
     7e8:	00 00       	nop
	data[1] = zoSpiTransferByte(dummy);
     7ea:	80 e0       	ldi	r24, 0x00	; 0
     7ec:	0e 94 40 17 	call	0x2e80	; 0x2e80 <zoSpiTransferByte>
     7f0:	8a 83       	std	Y+2, r24	; 0x02
	data[0] = zoSpiTransferByte(dummy);
     7f2:	80 e0       	ldi	r24, 0x00	; 0
     7f4:	0e 94 40 17 	call	0x2e80	; 0x2e80 <zoSpiTransferByte>
     7f8:	89 83       	std	Y+1, r24	; 0x01
	PORTB |= _BV(PB2);
     7fa:	2a 9a       	sbi	0x05, 2	; 5
     7fc:	29 81       	ldd	r18, Y+1	; 0x01
     7fe:	3a 81       	ldd	r19, Y+2	; 0x02
     800:	32 95       	swap	r19
     802:	22 95       	swap	r18
     804:	2f 70       	andi	r18, 0x0F	; 15
     806:	23 27       	eor	r18, r19
     808:	3f 70       	andi	r19, 0x0F	; 15
     80a:	23 27       	eor	r18, r19
	posSPI = strToU16(data)>>4;
		
	return posSPI;
}
     80c:	c9 01       	movw	r24, r18
     80e:	0f 90       	pop	r0
     810:	0f 90       	pop	r0
     812:	cf 91       	pop	r28
     814:	df 91       	pop	r29
     816:	08 95       	ret

00000818 <zoEncoderReset>:

void zoEncoderReset(void)
{
	s32 pos;
	
	pos = zoEncoderGetPosSpi();
     818:	0e 94 e5 03 	call	0x7ca	; 0x7ca <zoEncoderGetPosSpi>
     81c:	9c 01       	movw	r18, r24
     81e:	40 e0       	ldi	r20, 0x00	; 0
     820:	50 e0       	ldi	r21, 0x00	; 0

	enterCritical();
     822:	0f b6       	in	r0, 0x3f	; 63
     824:	0f 92       	push	r0
     826:	f8 94       	cli
	InitialAbsPos = pos;
     828:	20 93 8b 01 	sts	0x018B, r18
     82c:	30 93 8c 01 	sts	0x018C, r19
     830:	40 93 8d 01 	sts	0x018D, r20
     834:	50 93 8e 01 	sts	0x018E, r21
	PositionAbsolute = pos;
     838:	90 93 90 01 	sts	0x0190, r25
     83c:	80 93 8f 01 	sts	0x018F, r24
	LastPositionAbsolute = pos;
     840:	90 93 92 01 	sts	0x0192, r25
     844:	80 93 91 01 	sts	0x0191, r24
	DeltaPos = 0;
     848:	10 92 87 01 	sts	0x0187, r1
     84c:	10 92 88 01 	sts	0x0188, r1
     850:	10 92 89 01 	sts	0x0189, r1
     854:	10 92 8a 01 	sts	0x018A, r1
	EncoderPos = 0;
     858:	10 92 7f 01 	sts	0x017F, r1
     85c:	10 92 80 01 	sts	0x0180, r1
     860:	10 92 81 01 	sts	0x0181, r1
     864:	10 92 82 01 	sts	0x0182, r1
	LastEncoderPos = 0;
     868:	10 92 83 01 	sts	0x0183, r1
     86c:	10 92 84 01 	sts	0x0184, r1
     870:	10 92 85 01 	sts	0x0185, r1
     874:	10 92 86 01 	sts	0x0186, r1
	NoOfEntriesControlLoopIsr = 1;
     878:	81 e0       	ldi	r24, 0x01	; 1
     87a:	80 93 02 01 	sts	0x0102, r24
	FullTurns = 0;
     87e:	10 92 93 01 	sts	0x0193, r1
     882:	10 92 94 01 	sts	0x0194, r1
     886:	10 92 95 01 	sts	0x0195, r1
     88a:	10 92 96 01 	sts	0x0196, r1
	exitCritical();	
     88e:	0f 90       	pop	r0
     890:	0f be       	out	0x3f, r0	; 63
}
     892:	08 95       	ret

00000894 <zoEncoderGetPos>:
	FullTurns = 0;
	exitCritical();
}

s32 zoEncoderGetPos(void)
{
     894:	ef 92       	push	r14
     896:	ff 92       	push	r15
     898:	0f 93       	push	r16
     89a:	1f 93       	push	r17
	s32 pos;

	enterCritical();
     89c:	0f b6       	in	r0, 0x3f	; 63
     89e:	0f 92       	push	r0
     8a0:	f8 94       	cli
	LastPositionAbsolute = PositionAbsolute;
     8a2:	80 91 8f 01 	lds	r24, 0x018F
     8a6:	90 91 90 01 	lds	r25, 0x0190
     8aa:	90 93 92 01 	sts	0x0192, r25
     8ae:	80 93 91 01 	sts	0x0191, r24
	PositionAbsolute = zoEncoderGetPosSpi();
     8b2:	0e 94 e5 03 	call	0x7ca	; 0x7ca <zoEncoderGetPosSpi>
     8b6:	90 93 90 01 	sts	0x0190, r25
     8ba:	80 93 8f 01 	sts	0x018F, r24
	
	if(( (s32)PositionAbsolute - (s32)LastPositionAbsolute ) < -2000)
     8be:	20 91 8f 01 	lds	r18, 0x018F
     8c2:	30 91 90 01 	lds	r19, 0x0190
     8c6:	80 91 91 01 	lds	r24, 0x0191
     8ca:	90 91 92 01 	lds	r25, 0x0192
     8ce:	40 e0       	ldi	r20, 0x00	; 0
     8d0:	50 e0       	ldi	r21, 0x00	; 0
     8d2:	a0 e0       	ldi	r26, 0x00	; 0
     8d4:	b0 e0       	ldi	r27, 0x00	; 0
     8d6:	28 1b       	sub	r18, r24
     8d8:	39 0b       	sbc	r19, r25
     8da:	4a 0b       	sbc	r20, r26
     8dc:	5b 0b       	sbc	r21, r27
     8de:	20 53       	subi	r18, 0x30	; 48
     8e0:	38 4f       	sbci	r19, 0xF8	; 248
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	9c f4       	brge	.+38     	; 0x90e <__stack+0xf>
		FullTurns++;
     8e8:	80 91 93 01 	lds	r24, 0x0193
     8ec:	90 91 94 01 	lds	r25, 0x0194
     8f0:	a0 91 95 01 	lds	r26, 0x0195
     8f4:	b0 91 96 01 	lds	r27, 0x0196
     8f8:	01 96       	adiw	r24, 0x01	; 1
     8fa:	a1 1d       	adc	r26, r1
     8fc:	b1 1d       	adc	r27, r1
     8fe:	80 93 93 01 	sts	0x0193, r24
     902:	90 93 94 01 	sts	0x0194, r25
     906:	a0 93 95 01 	sts	0x0195, r26
     90a:	b0 93 96 01 	sts	0x0196, r27
	
	if(( (s32)PositionAbsolute - (s32)LastPositionAbsolute ) > 2000)
     90e:	20 91 8f 01 	lds	r18, 0x018F
     912:	30 91 90 01 	lds	r19, 0x0190
     916:	80 91 91 01 	lds	r24, 0x0191
     91a:	90 91 92 01 	lds	r25, 0x0192
     91e:	40 e0       	ldi	r20, 0x00	; 0
     920:	50 e0       	ldi	r21, 0x00	; 0
     922:	a0 e0       	ldi	r26, 0x00	; 0
     924:	b0 e0       	ldi	r27, 0x00	; 0
     926:	28 1b       	sub	r18, r24
     928:	39 0b       	sbc	r19, r25
     92a:	4a 0b       	sbc	r20, r26
     92c:	5b 0b       	sbc	r21, r27
     92e:	21 5d       	subi	r18, 0xD1	; 209
     930:	37 40       	sbci	r19, 0x07	; 7
     932:	40 40       	sbci	r20, 0x00	; 0
     934:	50 40       	sbci	r21, 0x00	; 0
     936:	9c f0       	brlt	.+38     	; 0x95e <__stack+0x5f>
		FullTurns--;
     938:	80 91 93 01 	lds	r24, 0x0193
     93c:	90 91 94 01 	lds	r25, 0x0194
     940:	a0 91 95 01 	lds	r26, 0x0195
     944:	b0 91 96 01 	lds	r27, 0x0196
     948:	01 97       	sbiw	r24, 0x01	; 1
     94a:	a1 09       	sbc	r26, r1
     94c:	b1 09       	sbc	r27, r1
     94e:	80 93 93 01 	sts	0x0193, r24
     952:	90 93 94 01 	sts	0x0194, r25
     956:	a0 93 95 01 	sts	0x0195, r26
     95a:	b0 93 96 01 	sts	0x0196, r27
	
	pos = (FullTurns << 12) + PositionAbsolute - InitialAbsPos;
     95e:	80 91 93 01 	lds	r24, 0x0193
     962:	90 91 94 01 	lds	r25, 0x0194
     966:	a0 91 95 01 	lds	r26, 0x0195
     96a:	b0 91 96 01 	lds	r27, 0x0196
     96e:	20 91 8f 01 	lds	r18, 0x018F
     972:	30 91 90 01 	lds	r19, 0x0190
     976:	e0 90 8b 01 	lds	r14, 0x018B
     97a:	f0 90 8c 01 	lds	r15, 0x018C
     97e:	00 91 8d 01 	lds	r16, 0x018D
     982:	10 91 8e 01 	lds	r17, 0x018E
     986:	40 e0       	ldi	r20, 0x00	; 0
     988:	50 e0       	ldi	r21, 0x00	; 0
     98a:	6c e0       	ldi	r22, 0x0C	; 12
     98c:	88 0f       	add	r24, r24
     98e:	99 1f       	adc	r25, r25
     990:	aa 1f       	adc	r26, r26
     992:	bb 1f       	adc	r27, r27
     994:	6a 95       	dec	r22
     996:	d1 f7       	brne	.-12     	; 0x98c <__stack+0x8d>
     998:	28 0f       	add	r18, r24
     99a:	39 1f       	adc	r19, r25
     99c:	4a 1f       	adc	r20, r26
     99e:	5b 1f       	adc	r21, r27
     9a0:	2e 19       	sub	r18, r14
     9a2:	3f 09       	sbc	r19, r15
     9a4:	40 0b       	sbc	r20, r16
     9a6:	51 0b       	sbc	r21, r17
	EncoderPos = pos;
     9a8:	20 93 7f 01 	sts	0x017F, r18
     9ac:	30 93 80 01 	sts	0x0180, r19
     9b0:	40 93 81 01 	sts	0x0181, r20
     9b4:	50 93 82 01 	sts	0x0182, r21
	exitCritical();
     9b8:	0f 90       	pop	r0
     9ba:	0f be       	out	0x3f, r0	; 63

	return pos;
}
     9bc:	b9 01       	movw	r22, r18
     9be:	ca 01       	movw	r24, r20
     9c0:	1f 91       	pop	r17
     9c2:	0f 91       	pop	r16
     9c4:	ff 90       	pop	r15
     9c6:	ef 90       	pop	r14
     9c8:	08 95       	ret

000009ca <zoEncoderInit>:

void zoEncoderInit(void)
{
	u16 pos;
	
	zoSpiInit();
     9ca:	0e 94 29 17 	call	0x2e52	; 0x2e52 <zoSpiInit>
	zoEncoderGetPosSpi();
     9ce:	0e 94 e5 03 	call	0x7ca	; 0x7ca <zoEncoderGetPosSpi>
	pos = zoEncoderGetPosSpi();
     9d2:	0e 94 e5 03 	call	0x7ca	; 0x7ca <zoEncoderGetPosSpi>

	enterCritical();
     9d6:	0f b6       	in	r0, 0x3f	; 63
     9d8:	0f 92       	push	r0
     9da:	f8 94       	cli
	InitialAbsPos = pos;
     9dc:	9c 01       	movw	r18, r24
     9de:	40 e0       	ldi	r20, 0x00	; 0
     9e0:	50 e0       	ldi	r21, 0x00	; 0
     9e2:	20 93 8b 01 	sts	0x018B, r18
     9e6:	30 93 8c 01 	sts	0x018C, r19
     9ea:	40 93 8d 01 	sts	0x018D, r20
     9ee:	50 93 8e 01 	sts	0x018E, r21
	PositionAbsolute = pos;
     9f2:	90 93 90 01 	sts	0x0190, r25
     9f6:	80 93 8f 01 	sts	0x018F, r24
	LastPositionAbsolute = pos;
     9fa:	90 93 92 01 	sts	0x0192, r25
     9fe:	80 93 91 01 	sts	0x0191, r24
	DeltaPos = 0;
     a02:	10 92 87 01 	sts	0x0187, r1
     a06:	10 92 88 01 	sts	0x0188, r1
     a0a:	10 92 89 01 	sts	0x0189, r1
     a0e:	10 92 8a 01 	sts	0x018A, r1
	EncoderPos = 0;
     a12:	10 92 7f 01 	sts	0x017F, r1
     a16:	10 92 80 01 	sts	0x0180, r1
     a1a:	10 92 81 01 	sts	0x0181, r1
     a1e:	10 92 82 01 	sts	0x0182, r1
	LastEncoderPos = 0;
     a22:	10 92 83 01 	sts	0x0183, r1
     a26:	10 92 84 01 	sts	0x0184, r1
     a2a:	10 92 85 01 	sts	0x0185, r1
     a2e:	10 92 86 01 	sts	0x0186, r1
	NoOfEntriesControlLoopIsr = 1;
     a32:	81 e0       	ldi	r24, 0x01	; 1
     a34:	80 93 02 01 	sts	0x0102, r24
	FullTurns = 0;
     a38:	10 92 93 01 	sts	0x0193, r1
     a3c:	10 92 94 01 	sts	0x0194, r1
     a40:	10 92 95 01 	sts	0x0195, r1
     a44:	10 92 96 01 	sts	0x0196, r1
	exitCritical();
     a48:	0f 90       	pop	r0
     a4a:	0f be       	out	0x3f, r0	; 63
}
     a4c:	08 95       	ret

00000a4e <zoMotorSetTimedEventHandler>:

static void (*timedEventHandler)(void)=FALSE;

void zoMotorSetTimedEventHandler(void (*timedEventFunction)(void))
{
	timedEventHandler = timedEventFunction;
     a4e:	90 93 9a 01 	sts	0x019A, r25
     a52:	80 93 99 01 	sts	0x0199, r24
}
     a56:	08 95       	ret

00000a58 <zoMotorInit>:

void zoMotorInit(void)
{
	Sms.Control.LoopHz = (double)F_CPU/(double)2040/(double)TIMER_0_OVERFLOWS_FOR_CONTROL_LOOP;
     a58:	84 e6       	ldi	r24, 0x64	; 100
     a5a:	9a e2       	ldi	r25, 0x2A	; 42
     a5c:	a8 e8       	ldi	r26, 0x88	; 136
     a5e:	b4 e4       	ldi	r27, 0x44	; 68
     a60:	80 93 04 01 	sts	0x0104, r24
     a64:	90 93 05 01 	sts	0x0105, r25
     a68:	a0 93 06 01 	sts	0x0106, r26
     a6c:	b0 93 07 01 	sts	0x0107, r27
		
	//set timer prescalers to zero -> PWM frequency 39215 Hz for phase correct mode
	TCCR0B = 0x02;	//set prescaler to 1
     a70:	82 e0       	ldi	r24, 0x02	; 2
     a72:	85 bd       	out	0x25, r24	; 37
	TCCR2B = 0x02;	//set prescaler to 1
     a74:	e1 eb       	ldi	r30, 0xB1	; 177
     a76:	f0 e0       	ldi	r31, 0x00	; 0
     a78:	80 83       	st	Z, r24

	//configure phase correct mode
	TCCR0B &= ~0x08;	//clear WGM02
     a7a:	85 b5       	in	r24, 0x25	; 37
     a7c:	87 7f       	andi	r24, 0xF7	; 247
     a7e:	85 bd       	out	0x25, r24	; 37
	TCCR0A &= ~0x02;	//clear WGM01
     a80:	84 b5       	in	r24, 0x24	; 36
     a82:	8d 7f       	andi	r24, 0xFD	; 253
     a84:	84 bd       	out	0x24, r24	; 36
	TCCR0A |= 0x03;		//set WGM00
     a86:	84 b5       	in	r24, 0x24	; 36
     a88:	83 60       	ori	r24, 0x03	; 3
     a8a:	84 bd       	out	0x24, r24	; 36
	TCCR0A |= 0x10;		//set COM0B0
     a8c:	84 b5       	in	r24, 0x24	; 36
     a8e:	80 61       	ori	r24, 0x10	; 16
     a90:	84 bd       	out	0x24, r24	; 36
	TCCR0A |= 0x20;		//set COM0B1
     a92:	84 b5       	in	r24, 0x24	; 36
     a94:	80 62       	ori	r24, 0x20	; 32
     a96:	84 bd       	out	0x24, r24	; 36
	TCCR0A &= ~0xC0;	//clear COM0A0 and COM0A1
     a98:	84 b5       	in	r24, 0x24	; 36
     a9a:	8f 73       	andi	r24, 0x3F	; 63
     a9c:	84 bd       	out	0x24, r24	; 36
	
	TCCR2B &= ~0x08;	//clear WGM22
     a9e:	80 81       	ld	r24, Z
     aa0:	87 7f       	andi	r24, 0xF7	; 247
     aa2:	80 83       	st	Z, r24
	TCCR2A &= ~0x02;	//clear WGM21
     aa4:	e0 eb       	ldi	r30, 0xB0	; 176
     aa6:	f0 e0       	ldi	r31, 0x00	; 0
     aa8:	80 81       	ld	r24, Z
     aaa:	8d 7f       	andi	r24, 0xFD	; 253
     aac:	80 83       	st	Z, r24
	TCCR2A |= 0x03;		//set WGM20	
     aae:	80 81       	ld	r24, Z
     ab0:	83 60       	ori	r24, 0x03	; 3
     ab2:	80 83       	st	Z, r24
	TCCR2A |= 0x10;		//set COM2B0
     ab4:	80 81       	ld	r24, Z
     ab6:	80 61       	ori	r24, 0x10	; 16
     ab8:	80 83       	st	Z, r24
	TCCR2A |= 0x20;		//set COM2B1
     aba:	80 81       	ld	r24, Z
     abc:	80 62       	ori	r24, 0x20	; 32
     abe:	80 83       	st	Z, r24
	TCCR2A &= ~0xC0;	//clear COM2A0 and COM2A1
     ac0:	80 81       	ld	r24, Z
     ac2:	8f 73       	andi	r24, 0x3F	; 63
     ac4:	80 83       	st	Z, r24

	OCR0B = 0x00;		//set PWM duty to zero
     ac6:	18 bc       	out	0x28, r1	; 40
	OCR2B = 0x00;		//set PWM duty to zero
     ac8:	10 92 b4 00 	sts	0x00B4, r1

	TIMSK0 |= _BV(0);	//enable timer 0 overflow interrupt
     acc:	ee e6       	ldi	r30, 0x6E	; 110
     ace:	f0 e0       	ldi	r31, 0x00	; 0
     ad0:	80 81       	ld	r24, Z
     ad2:	81 60       	ori	r24, 0x01	; 1
     ad4:	80 83       	st	Z, r24
	sei();				//enable global interrupts
     ad6:	78 94       	sei

	PRR &=~ (_BV(PRTIM0)|_BV(PRTIM2));		//enable timer0 and timer2	
     ad8:	e4 e6       	ldi	r30, 0x64	; 100
     ada:	f0 e0       	ldi	r31, 0x00	; 0
     adc:	80 81       	ld	r24, Z
     ade:	8f 79       	andi	r24, 0x9F	; 159
     ae0:	80 83       	st	Z, r24
}
     ae2:	08 95       	ret

00000ae4 <zoMotorSet>:
void zoMotorSet(s32 pwmDuty)
{
	u08 ocrReg;
	u32 pwmDutyAbsolute;

	pwmDutyAbsolute = labs(pwmDuty);	//compute absolute value of motor command
     ae4:	9b 01       	movw	r18, r22
     ae6:	ac 01       	movw	r20, r24
     ae8:	97 fd       	sbrc	r25, 7
     aea:	18 c0       	rjmp	.+48     	; 0xb1c <zoMotorSet+0x38>

	pwmDutyAbsolute >>= 8;	//discard lower 8 bits : this is done to allow finer tuning of gains			
     aec:	23 2f       	mov	r18, r19
     aee:	34 2f       	mov	r19, r20
     af0:	45 2f       	mov	r20, r21
     af2:	55 27       	eor	r21, r21

	if(pwmDutyAbsolute > 0xFF)
		pwmDutyAbsolute = 0xFF;
	
	ocrReg = (u08)pwmDutyAbsolute;		
     af4:	2f 3f       	cpi	r18, 0xFF	; 255
     af6:	31 05       	cpc	r19, r1
     af8:	41 05       	cpc	r20, r1
     afa:	51 05       	cpc	r21, r1
     afc:	29 f0       	breq	.+10     	; 0xb08 <zoMotorSet+0x24>
     afe:	20 f0       	brcs	.+8      	; 0xb08 <zoMotorSet+0x24>
     b00:	2f ef       	ldi	r18, 0xFF	; 255
     b02:	30 e0       	ldi	r19, 0x00	; 0
     b04:	40 e0       	ldi	r20, 0x00	; 0
     b06:	50 e0       	ldi	r21, 0x00	; 0

	if(pwmDuty >= 0)
     b08:	97 fd       	sbrc	r25, 7
     b0a:	04 c0       	rjmp	.+8      	; 0xb14 <zoMotorSet+0x30>
	{
		OCR0B = ocrReg;
     b0c:	28 bd       	out	0x28, r18	; 40
		OCR2B = 0x00;		//constantly high
     b0e:	10 92 b4 00 	sts	0x00B4, r1
     b12:	08 95       	ret
	}
	else
	{
		OCR0B = 0x00;		//constantly high
     b14:	18 bc       	out	0x28, r1	; 40
		OCR2B = ocrReg;
     b16:	20 93 b4 00 	sts	0x00B4, r18
     b1a:	08 95       	ret
void zoMotorSet(s32 pwmDuty)
{
	u08 ocrReg;
	u32 pwmDutyAbsolute;

	pwmDutyAbsolute = labs(pwmDuty);	//compute absolute value of motor command
     b1c:	22 27       	eor	r18, r18
     b1e:	33 27       	eor	r19, r19
     b20:	a9 01       	movw	r20, r18
     b22:	26 1b       	sub	r18, r22
     b24:	37 0b       	sbc	r19, r23
     b26:	48 0b       	sbc	r20, r24
     b28:	59 0b       	sbc	r21, r25
     b2a:	e0 cf       	rjmp	.-64     	; 0xaec <zoMotorSet+0x8>

00000b2c <zoMotorSetState>:
		OCR2B = ocrReg;
	}
}

void zoMotorSetState(bool onOff)
{
     b2c:	1f 93       	push	r17
     b2e:	18 2f       	mov	r17, r24
	if(onOff)
     b30:	88 23       	and	r24, r24
     b32:	81 f4       	brne	.+32     	; 0xb54 <zoMotorSetState+0x28>
		PORTD |= _BV(PORT4);
	else
		PORTD &= ~_BV(PORT4);
     b34:	5c 98       	cbi	0x0b, 4	; 11

	zoMotorSet(0);
     b36:	60 e0       	ldi	r22, 0x00	; 0
     b38:	70 e0       	ldi	r23, 0x00	; 0
     b3a:	80 e0       	ldi	r24, 0x00	; 0
     b3c:	90 e0       	ldi	r25, 0x00	; 0
     b3e:	0e 94 72 05 	call	0xae4	; 0xae4 <zoMotorSet>
	enterCritical();
     b42:	0f b6       	in	r0, 0x3f	; 63
     b44:	0f 92       	push	r0
     b46:	f8 94       	cli
	MotorState = onOff;
     b48:	10 93 9b 01 	sts	0x019B, r17
	exitCritical();
     b4c:	0f 90       	pop	r0
     b4e:	0f be       	out	0x3f, r0	; 63
}
     b50:	1f 91       	pop	r17
     b52:	08 95       	ret
}

void zoMotorSetState(bool onOff)
{
	if(onOff)
		PORTD |= _BV(PORT4);
     b54:	5c 9a       	sbi	0x0b, 4	; 11
     b56:	ef cf       	rjmp	.-34     	; 0xb36 <zoMotorSetState+0xa>

00000b58 <zoMotorGetState>:

bool zoMotorGetState(void)
{
	bool state;

	enterCritical();
     b58:	0f b6       	in	r0, 0x3f	; 63
     b5a:	0f 92       	push	r0
     b5c:	f8 94       	cli
	state = MotorState;
     b5e:	80 91 9b 01 	lds	r24, 0x019B
	exitCritical();
     b62:	0f 90       	pop	r0
     b64:	0f be       	out	0x3f, r0	; 63

	return state;
}
     b66:	08 95       	ret

00000b68 <__vector_16>:

ISR(TIMER0_OVF_vect)
{
     b68:	1f 92       	push	r1
     b6a:	0f 92       	push	r0
     b6c:	0f b6       	in	r0, 0x3f	; 63
     b6e:	0f 92       	push	r0
     b70:	11 24       	eor	r1, r1
     b72:	2f 93       	push	r18
     b74:	3f 93       	push	r19
     b76:	4f 93       	push	r20
     b78:	5f 93       	push	r21
     b7a:	6f 93       	push	r22
     b7c:	7f 93       	push	r23
     b7e:	8f 93       	push	r24
     b80:	9f 93       	push	r25
     b82:	af 93       	push	r26
     b84:	bf 93       	push	r27
     b86:	ef 93       	push	r30
     b88:	ff 93       	push	r31
	if( NoOfTimer0OverFlowIsrEntries++ >= TIMER_0_OVERFLOWS_FOR_CONTROL_LOOP )
     b8a:	80 91 97 01 	lds	r24, 0x0197
     b8e:	90 91 98 01 	lds	r25, 0x0198
     b92:	01 96       	adiw	r24, 0x01	; 1
     b94:	90 93 98 01 	sts	0x0198, r25
     b98:	80 93 97 01 	sts	0x0197, r24
     b9c:	01 97       	sbiw	r24, 0x01	; 1
     b9e:	09 97       	sbiw	r24, 0x09	; 9
     ba0:	48 f0       	brcs	.+18     	; 0xbb4 <__vector_16+0x4c>
	{
		timedEventHandler();
     ba2:	e0 91 99 01 	lds	r30, 0x0199
     ba6:	f0 91 9a 01 	lds	r31, 0x019A
     baa:	09 95       	icall
		NoOfTimer0OverFlowIsrEntries = 0;
     bac:	10 92 98 01 	sts	0x0198, r1
     bb0:	10 92 97 01 	sts	0x0197, r1
	}
     bb4:	ff 91       	pop	r31
     bb6:	ef 91       	pop	r30
     bb8:	bf 91       	pop	r27
     bba:	af 91       	pop	r26
     bbc:	9f 91       	pop	r25
     bbe:	8f 91       	pop	r24
     bc0:	7f 91       	pop	r23
     bc2:	6f 91       	pop	r22
     bc4:	5f 91       	pop	r21
     bc6:	4f 91       	pop	r20
     bc8:	3f 91       	pop	r19
     bca:	2f 91       	pop	r18
     bcc:	0f 90       	pop	r0
     bce:	0f be       	out	0x3f, r0	; 63
     bd0:	0f 90       	pop	r0
     bd2:	1f 90       	pop	r1
     bd4:	18 95       	reti

00000bd6 <zoPidDoPid>:
#include "zoPid.h"

void zoPidDoPid( struct ZO_PID *p )
{
     bd6:	6f 92       	push	r6
     bd8:	7f 92       	push	r7
     bda:	8f 92       	push	r8
     bdc:	9f 92       	push	r9
     bde:	af 92       	push	r10
     be0:	bf 92       	push	r11
     be2:	cf 92       	push	r12
     be4:	df 92       	push	r13
     be6:	ef 92       	push	r14
     be8:	ff 92       	push	r15
     bea:	0f 93       	push	r16
     bec:	1f 93       	push	r17
     bee:	cf 93       	push	r28
     bf0:	df 93       	push	r29
     bf2:	ec 01       	movw	r28, r24
	p->PrevError = p->Error;						//store previous error
     bf4:	8e 81       	ldd	r24, Y+6	; 0x06
     bf6:	9f 81       	ldd	r25, Y+7	; 0x07
     bf8:	a8 85       	ldd	r26, Y+8	; 0x08
     bfa:	b9 85       	ldd	r27, Y+9	; 0x09
     bfc:	8a 87       	std	Y+10, r24	; 0x0a
     bfe:	9b 87       	std	Y+11, r25	; 0x0b
     c00:	ac 87       	std	Y+12, r26	; 0x0c
     c02:	bd 87       	std	Y+13, r27	; 0x0d
	p->Error = p->getFeedBack() - p->SetPoint;		//calculate error
     c04:	ee 8d       	ldd	r30, Y+30	; 0x1e
     c06:	ff 8d       	ldd	r31, Y+31	; 0x1f
     c08:	09 95       	icall
     c0a:	2e 89       	ldd	r18, Y+22	; 0x16
     c0c:	3f 89       	ldd	r19, Y+23	; 0x17
     c0e:	48 8d       	ldd	r20, Y+24	; 0x18
     c10:	59 8d       	ldd	r21, Y+25	; 0x19
     c12:	62 1b       	sub	r22, r18
     c14:	73 0b       	sbc	r23, r19
     c16:	84 0b       	sbc	r24, r20
     c18:	95 0b       	sbc	r25, r21
     c1a:	6e 83       	std	Y+6, r22	; 0x06
     c1c:	7f 83       	std	Y+7, r23	; 0x07
     c1e:	88 87       	std	Y+8, r24	; 0x08
     c20:	99 87       	std	Y+9, r25	; 0x09
	p->Integral += p->Error;							//integration
     c22:	2e 85       	ldd	r18, Y+14	; 0x0e
     c24:	3f 85       	ldd	r19, Y+15	; 0x0f
     c26:	48 89       	ldd	r20, Y+16	; 0x10
     c28:	59 89       	ldd	r21, Y+17	; 0x11
     c2a:	26 0f       	add	r18, r22
     c2c:	37 1f       	adc	r19, r23
     c2e:	48 1f       	adc	r20, r24
     c30:	59 1f       	adc	r21, r25
     c32:	2e 87       	std	Y+14, r18	; 0x0e
     c34:	3f 87       	std	Y+15, r19	; 0x0f
     c36:	48 8b       	std	Y+16, r20	; 0x10
     c38:	59 8b       	std	Y+17, r21	; 0x11

 	if( p->Integral > p->AntiWindUp )					//anti wind-up implementation
     c3a:	8a 89       	ldd	r24, Y+18	; 0x12
     c3c:	9b 89       	ldd	r25, Y+19	; 0x13
     c3e:	ac 89       	ldd	r26, Y+20	; 0x14
     c40:	bd 89       	ldd	r27, Y+21	; 0x15
     c42:	82 17       	cp	r24, r18
     c44:	93 07       	cpc	r25, r19
     c46:	a4 07       	cpc	r26, r20
     c48:	b5 07       	cpc	r27, r21
     c4a:	34 f4       	brge	.+12     	; 0xc58 <zoPidDoPid+0x82>
 		p->Integral = p->AntiWindUp;
     c4c:	8e 87       	std	Y+14, r24	; 0x0e
     c4e:	9f 87       	std	Y+15, r25	; 0x0f
     c50:	a8 8b       	std	Y+16, r26	; 0x10
     c52:	b9 8b       	std	Y+17, r27	; 0x11
     c54:	9c 01       	movw	r18, r24
     c56:	ad 01       	movw	r20, r26
 	if( p->Integral < (- p->AntiWindUp) )
     c58:	66 24       	eor	r6, r6
     c5a:	77 24       	eor	r7, r7
     c5c:	43 01       	movw	r8, r6
     c5e:	68 1a       	sub	r6, r24
     c60:	79 0a       	sbc	r7, r25
     c62:	8a 0a       	sbc	r8, r26
     c64:	9b 0a       	sbc	r9, r27
     c66:	26 15       	cp	r18, r6
     c68:	37 05       	cpc	r19, r7
     c6a:	48 05       	cpc	r20, r8
     c6c:	59 05       	cpc	r21, r9
     c6e:	0c f0       	brlt	.+2      	; 0xc72 <zoPidDoPid+0x9c>
     c70:	4c c0       	rjmp	.+152    	; 0xd0a <zoPidDoPid+0x134>
 		p->Integral = (-p->AntiWindUp);
     c72:	6e 86       	std	Y+14, r6	; 0x0e
     c74:	7f 86       	std	Y+15, r7	; 0x0f
     c76:	88 8a       	std	Y+16, r8	; 0x10
     c78:	99 8a       	std	Y+17, r9	; 0x11

	p->setActuator(( ((s32)p->GainP * p->Error + 
     c7a:	ae 80       	ldd	r10, Y+6	; 0x06
     c7c:	bf 80       	ldd	r11, Y+7	; 0x07
     c7e:	c8 84       	ldd	r12, Y+8	; 0x08
     c80:	d9 84       	ldd	r13, Y+9	; 0x09
     c82:	8a 85       	ldd	r24, Y+10	; 0x0a
     c84:	9b 85       	ldd	r25, Y+11	; 0x0b
     c86:	ac 85       	ldd	r26, Y+12	; 0x0c
     c88:	bd 85       	ldd	r27, Y+13	; 0x0d
     c8a:	a6 01       	movw	r20, r12
     c8c:	95 01       	movw	r18, r10
     c8e:	28 1b       	sub	r18, r24
     c90:	39 0b       	sbc	r19, r25
     c92:	4a 0b       	sbc	r20, r26
     c94:	5b 0b       	sbc	r21, r27
     c96:	ca 01       	movw	r24, r20
     c98:	b9 01       	movw	r22, r18
     c9a:	2c 81       	ldd	r18, Y+4	; 0x04
     c9c:	3d 81       	ldd	r19, Y+5	; 0x05
     c9e:	40 e0       	ldi	r20, 0x00	; 0
     ca0:	50 e0       	ldi	r21, 0x00	; 0
     ca2:	0e 94 73 25 	call	0x4ae6	; 0x4ae6 <__mulsi3>
     ca6:	7b 01       	movw	r14, r22
     ca8:	8c 01       	movw	r16, r24
     caa:	68 81       	ld	r22, Y
     cac:	79 81       	ldd	r23, Y+1	; 0x01
     cae:	80 e0       	ldi	r24, 0x00	; 0
     cb0:	90 e0       	ldi	r25, 0x00	; 0
     cb2:	a6 01       	movw	r20, r12
     cb4:	95 01       	movw	r18, r10
     cb6:	0e 94 73 25 	call	0x4ae6	; 0x4ae6 <__mulsi3>
     cba:	e6 0e       	add	r14, r22
     cbc:	f7 1e       	adc	r15, r23
     cbe:	08 1f       	adc	r16, r24
     cc0:	19 1f       	adc	r17, r25
     cc2:	2a 81       	ldd	r18, Y+2	; 0x02
     cc4:	3b 81       	ldd	r19, Y+3	; 0x03
     cc6:	40 e0       	ldi	r20, 0x00	; 0
     cc8:	50 e0       	ldi	r21, 0x00	; 0
     cca:	c4 01       	movw	r24, r8
     ccc:	b3 01       	movw	r22, r6
     cce:	0e 94 73 25 	call	0x4ae6	; 0x4ae6 <__mulsi3>
     cd2:	67 2f       	mov	r22, r23
     cd4:	78 2f       	mov	r23, r24
     cd6:	89 2f       	mov	r24, r25
     cd8:	99 27       	eor	r25, r25
     cda:	87 fd       	sbrc	r24, 7
     cdc:	9a 95       	dec	r25
     cde:	6e 0d       	add	r22, r14
     ce0:	7f 1d       	adc	r23, r15
     ce2:	80 1f       	adc	r24, r16
     ce4:	91 1f       	adc	r25, r17
     ce6:	ec 8d       	ldd	r30, Y+28	; 0x1c
     ce8:	fd 8d       	ldd	r31, Y+29	; 0x1d
     cea:	09 95       	icall
				     (((s32)p->GainI * p->Integral)>>8) ) 
				   ));	//write actuator using user provided function
	
	//the >>8 is to compensate for the control loop frequency
	//division is not used to optimize execution speed
     cec:	df 91       	pop	r29
     cee:	cf 91       	pop	r28
     cf0:	1f 91       	pop	r17
     cf2:	0f 91       	pop	r16
     cf4:	ff 90       	pop	r15
     cf6:	ef 90       	pop	r14
     cf8:	df 90       	pop	r13
     cfa:	cf 90       	pop	r12
     cfc:	bf 90       	pop	r11
     cfe:	af 90       	pop	r10
     d00:	9f 90       	pop	r9
     d02:	8f 90       	pop	r8
     d04:	7f 90       	pop	r7
     d06:	6f 90       	pop	r6
     d08:	08 95       	ret
	p->Error = p->getFeedBack() - p->SetPoint;		//calculate error
	p->Integral += p->Error;							//integration

 	if( p->Integral > p->AntiWindUp )					//anti wind-up implementation
 		p->Integral = p->AntiWindUp;
 	if( p->Integral < (- p->AntiWindUp) )
     d0a:	39 01       	movw	r6, r18
     d0c:	4a 01       	movw	r8, r20
     d0e:	b5 cf       	rjmp	.-150    	; 0xc7a <zoPidDoPid+0xa4>

00000d10 <zoSmsPinsInit>:
	//PB2: ENC_B	: B channel of encoder, pull up enabled
	//PB3: DIO2		: Digitl IO 2 initialized as input
	//PB4: DIO3		: Digitl IO 2 initialized as input
	//PB5: DIO4		: Digitl IO 2 initialized as input
	
	DDRB = 0x04;
     d10:	84 e0       	ldi	r24, 0x04	; 4
     d12:	84 b9       	out	0x04, r24	; 4
	PORTB |= 0x3E;	
     d14:	85 b1       	in	r24, 0x05	; 5
     d16:	8e 63       	ori	r24, 0x3E	; 62
     d18:	85 b9       	out	0x05, r24	; 5
	//PC4: SDA		: I2C data, configured as input, pull-up enabled
	//PC5: SCL		: I2C clock, configured as input, pull-up enabled
	//PC6: NOT USED
	//PC7: NOT USED

	DDRC = 0x00;
     d1a:	17 b8       	out	0x07, r1	; 7
	PORTC |= 0x30;
     d1c:	88 b1       	in	r24, 0x08	; 8
     d1e:	80 63       	ori	r24, 0x30	; 48
     d20:	88 b9       	out	0x08, r24	; 8
	//PD5: PWM1		: PWM2 output to motor driver
	//PD6: FAULT\	: Active low fault input from motor driver (not used with MCP17511), 
	//				  pull-up enabled
	//PD7: DIO1		: Digital IO, initially configured as input

	DDRD = 0x3E;
     d22:	8e e3       	ldi	r24, 0x3E	; 62
     d24:	8a b9       	out	0x0a, r24	; 10
	PORTD = 0xC1;
     d26:	81 ec       	ldi	r24, 0xC1	; 193
     d28:	8b b9       	out	0x0b, r24	; 11
}
     d2a:	08 95       	ret

00000d2c <accelerationCompleteCriterion>:
	return(  0.5 * square(Sms.Profile.VelocityDeltaPos) / 
		((double)(Sms.Profile.TargetPosition - zoEncoderGetPos())));
}

bool inline accelerationCompleteCriterion(void)
{
     d2c:	af 92       	push	r10
     d2e:	bf 92       	push	r11
     d30:	cf 92       	push	r12
     d32:	df 92       	push	r13
     d34:	ef 92       	push	r14
     d36:	ff 92       	push	r15
     d38:	0f 93       	push	r16
     d3a:	1f 93       	push	r17
	return (( (s32)((Sms.Profile.LastVelocityDeltaPos - Sms.Profile.TargetVelDeltaPos) *
     d3c:	e0 90 1c 01 	lds	r14, 0x011C
     d40:	f0 90 1d 01 	lds	r15, 0x011D
     d44:	00 91 1e 01 	lds	r16, 0x011E
     d48:	10 91 1f 01 	lds	r17, 0x011F
     d4c:	60 91 24 01 	lds	r22, 0x0124
     d50:	70 91 25 01 	lds	r23, 0x0125
     d54:	80 91 26 01 	lds	r24, 0x0126
     d58:	90 91 27 01 	lds	r25, 0x0127
     d5c:	a8 01       	movw	r20, r16
     d5e:	97 01       	movw	r18, r14
     d60:	0e 94 2a 23 	call	0x4654	; 0x4654 <__subsf3>
     d64:	5b 01       	movw	r10, r22
     d66:	6c 01       	movw	r12, r24
     d68:	60 91 20 01 	lds	r22, 0x0120
     d6c:	70 91 21 01 	lds	r23, 0x0121
     d70:	80 91 22 01 	lds	r24, 0x0122
     d74:	90 91 23 01 	lds	r25, 0x0123
     d78:	a8 01       	movw	r20, r16
     d7a:	97 01       	movw	r18, r14
     d7c:	0e 94 2a 23 	call	0x4654	; 0x4654 <__subsf3>
     d80:	9b 01       	movw	r18, r22
     d82:	ac 01       	movw	r20, r24
     d84:	c6 01       	movw	r24, r12
     d86:	b5 01       	movw	r22, r10
     d88:	0e 94 b6 24 	call	0x496c	; 0x496c <__mulsf3>
     d8c:	20 91 04 01 	lds	r18, 0x0104
     d90:	30 91 05 01 	lds	r19, 0x0105
     d94:	40 91 06 01 	lds	r20, 0x0106
     d98:	50 91 07 01 	lds	r21, 0x0107
     d9c:	0e 94 b6 24 	call	0x496c	; 0x496c <__mulsf3>
     da0:	0e 94 f7 23 	call	0x47ee	; 0x47ee <__fixsfsi>
     da4:	16 16       	cp	r1, r22
     da6:	17 06       	cpc	r1, r23
     da8:	18 06       	cpc	r1, r24
     daa:	19 06       	cpc	r1, r25
     dac:	54 f4       	brge	.+20     	; 0xdc2 <accelerationCompleteCriterion+0x96>
     dae:	80 e0       	ldi	r24, 0x00	; 0
		     (Sms.Profile.VelocityDeltaPos - Sms.Profile.TargetVelDeltaPos)*Sms.Control.LoopHz) > 0 )?
		     FALSE:TRUE);
}
     db0:	1f 91       	pop	r17
     db2:	0f 91       	pop	r16
     db4:	ff 90       	pop	r15
     db6:	ef 90       	pop	r14
     db8:	df 90       	pop	r13
     dba:	cf 90       	pop	r12
     dbc:	bf 90       	pop	r11
     dbe:	af 90       	pop	r10
     dc0:	08 95       	ret
		((double)(Sms.Profile.TargetPosition - zoEncoderGetPos())));
}

bool inline accelerationCompleteCriterion(void)
{
	return (( (s32)((Sms.Profile.LastVelocityDeltaPos - Sms.Profile.TargetVelDeltaPos) *
     dc2:	8f ef       	ldi	r24, 0xFF	; 255
     dc4:	f5 cf       	rjmp	.-22     	; 0xdb0 <accelerationCompleteCriterion+0x84>

00000dc6 <positionReachedCriterion>:
	return (( labs(zoEncoderGetPos() - Sms.Profile.DeccelerationKnee) >= 2 )?FALSE:TRUE);
}

bool inline positionReachedCriterion(void)
{
	return (( labs(zoEncoderGetPos() - Sms.Profile.TargetPosition) >= 2 )?FALSE:TRUE);
     dc6:	0e 94 4a 04 	call	0x894	; 0x894 <zoEncoderGetPos>
     dca:	9b 01       	movw	r18, r22
     dcc:	ac 01       	movw	r20, r24
     dce:	80 91 34 01 	lds	r24, 0x0134
     dd2:	90 91 35 01 	lds	r25, 0x0135
     dd6:	a0 91 36 01 	lds	r26, 0x0136
     dda:	b0 91 37 01 	lds	r27, 0x0137
     dde:	28 1b       	sub	r18, r24
     de0:	39 0b       	sbc	r19, r25
     de2:	4a 0b       	sbc	r20, r26
     de4:	5b 0b       	sbc	r21, r27
     de6:	57 fd       	sbrc	r21, 7
     de8:	07 c0       	rjmp	.+14     	; 0xdf8 <positionReachedCriterion+0x32>
     dea:	22 30       	cpi	r18, 0x02	; 2
     dec:	31 05       	cpc	r19, r1
     dee:	41 05       	cpc	r20, r1
     df0:	51 05       	cpc	r21, r1
     df2:	74 f0       	brlt	.+28     	; 0xe10 <positionReachedCriterion+0x4a>
     df4:	80 e0       	ldi	r24, 0x00	; 0
}
     df6:	08 95       	ret
	return (( labs(zoEncoderGetPos() - Sms.Profile.DeccelerationKnee) >= 2 )?FALSE:TRUE);
}

bool inline positionReachedCriterion(void)
{
	return (( labs(zoEncoderGetPos() - Sms.Profile.TargetPosition) >= 2 )?FALSE:TRUE);
     df8:	50 95       	com	r21
     dfa:	40 95       	com	r20
     dfc:	30 95       	com	r19
     dfe:	21 95       	neg	r18
     e00:	3f 4f       	sbci	r19, 0xFF	; 255
     e02:	4f 4f       	sbci	r20, 0xFF	; 255
     e04:	5f 4f       	sbci	r21, 0xFF	; 255
     e06:	22 30       	cpi	r18, 0x02	; 2
     e08:	31 05       	cpc	r19, r1
     e0a:	41 05       	cpc	r20, r1
     e0c:	51 05       	cpc	r21, r1
     e0e:	94 f7       	brge	.-28     	; 0xdf4 <positionReachedCriterion+0x2e>
     e10:	8f ef       	ldi	r24, 0xFF	; 255
     e12:	08 95       	ret

00000e14 <constantVelocityCompletedCriterion>:
		     FALSE:TRUE);
}

bool inline constantVelocityCompletedCriterion(void)
{
	return (( labs(zoEncoderGetPos() - Sms.Profile.DeccelerationKnee) >= 2 )?FALSE:TRUE);
     e14:	0e 94 4a 04 	call	0x894	; 0x894 <zoEncoderGetPos>
     e18:	9b 01       	movw	r18, r22
     e1a:	ac 01       	movw	r20, r24
     e1c:	80 91 30 01 	lds	r24, 0x0130
     e20:	90 91 31 01 	lds	r25, 0x0131
     e24:	a0 91 32 01 	lds	r26, 0x0132
     e28:	b0 91 33 01 	lds	r27, 0x0133
     e2c:	28 1b       	sub	r18, r24
     e2e:	39 0b       	sbc	r19, r25
     e30:	4a 0b       	sbc	r20, r26
     e32:	5b 0b       	sbc	r21, r27
     e34:	57 fd       	sbrc	r21, 7
     e36:	07 c0       	rjmp	.+14     	; 0xe46 <constantVelocityCompletedCriterion+0x32>
     e38:	22 30       	cpi	r18, 0x02	; 2
     e3a:	31 05       	cpc	r19, r1
     e3c:	41 05       	cpc	r20, r1
     e3e:	51 05       	cpc	r21, r1
     e40:	74 f0       	brlt	.+28     	; 0xe5e <constantVelocityCompletedCriterion+0x4a>
     e42:	80 e0       	ldi	r24, 0x00	; 0
}
     e44:	08 95       	ret
		     FALSE:TRUE);
}

bool inline constantVelocityCompletedCriterion(void)
{
	return (( labs(zoEncoderGetPos() - Sms.Profile.DeccelerationKnee) >= 2 )?FALSE:TRUE);
     e46:	50 95       	com	r21
     e48:	40 95       	com	r20
     e4a:	30 95       	com	r19
     e4c:	21 95       	neg	r18
     e4e:	3f 4f       	sbci	r19, 0xFF	; 255
     e50:	4f 4f       	sbci	r20, 0xFF	; 255
     e52:	5f 4f       	sbci	r21, 0xFF	; 255
     e54:	22 30       	cpi	r18, 0x02	; 2
     e56:	31 05       	cpc	r19, r1
     e58:	41 05       	cpc	r20, r1
     e5a:	51 05       	cpc	r21, r1
     e5c:	94 f7       	brge	.-28     	; 0xe42 <constantVelocityCompletedCriterion+0x2e>
     e5e:	8f ef       	ldi	r24, 0xFF	; 255
     e60:	08 95       	ret

00000e62 <deccelRecalc>:
	eeprom_write_byte((u08*)ZO_EEPROM_ADDRESS_LAM, ZO_DEFAULT_LAM);
	eeprom_write_byte((u08*)ZO_EEPROM_ADDRESS_ERROR_REPORTING_LVL, ZO_DEFAULT_ERROR_REPORTING_LVL);
}

double inline deccelRecalc(void)
{
     e62:	6f 92       	push	r6
     e64:	7f 92       	push	r7
     e66:	8f 92       	push	r8
     e68:	9f 92       	push	r9
     e6a:	af 92       	push	r10
     e6c:	bf 92       	push	r11
     e6e:	cf 92       	push	r12
     e70:	df 92       	push	r13
     e72:	ef 92       	push	r14
     e74:	ff 92       	push	r15
     e76:	0f 93       	push	r16
     e78:	1f 93       	push	r17
	return(  0.5 * square(Sms.Profile.VelocityDeltaPos) / 
     e7a:	60 91 20 01 	lds	r22, 0x0120
     e7e:	70 91 21 01 	lds	r23, 0x0121
     e82:	80 91 22 01 	lds	r24, 0x0122
     e86:	90 91 23 01 	lds	r25, 0x0123
     e8a:	0e 94 5b 25 	call	0x4ab6	; 0x4ab6 <square>
     e8e:	5b 01       	movw	r10, r22
     e90:	6c 01       	movw	r12, r24
     e92:	e0 90 34 01 	lds	r14, 0x0134
     e96:	f0 90 35 01 	lds	r15, 0x0135
     e9a:	00 91 36 01 	lds	r16, 0x0136
     e9e:	10 91 37 01 	lds	r17, 0x0137
     ea2:	0e 94 4a 04 	call	0x894	; 0x894 <zoEncoderGetPos>
     ea6:	3b 01       	movw	r6, r22
     ea8:	4c 01       	movw	r8, r24
     eaa:	c6 01       	movw	r24, r12
     eac:	b5 01       	movw	r22, r10
     eae:	20 e0       	ldi	r18, 0x00	; 0
     eb0:	30 e0       	ldi	r19, 0x00	; 0
     eb2:	40 e0       	ldi	r20, 0x00	; 0
     eb4:	5f e3       	ldi	r21, 0x3F	; 63
     eb6:	0e 94 b6 24 	call	0x496c	; 0x496c <__mulsf3>
     eba:	5b 01       	movw	r10, r22
     ebc:	6c 01       	movw	r12, r24
     ebe:	e6 18       	sub	r14, r6
     ec0:	f7 08       	sbc	r15, r7
     ec2:	08 09       	sbc	r16, r8
     ec4:	19 09       	sbc	r17, r9
     ec6:	c8 01       	movw	r24, r16
     ec8:	b7 01       	movw	r22, r14
     eca:	0e 94 2a 24 	call	0x4854	; 0x4854 <__floatsisf>
     ece:	9b 01       	movw	r18, r22
     ed0:	ac 01       	movw	r20, r24
     ed2:	c6 01       	movw	r24, r12
     ed4:	b5 01       	movw	r22, r10
     ed6:	0e 94 8f 23 	call	0x471e	; 0x471e <__divsf3>
		((double)(Sms.Profile.TargetPosition - zoEncoderGetPos())));
}
     eda:	1f 91       	pop	r17
     edc:	0f 91       	pop	r16
     ede:	ff 90       	pop	r15
     ee0:	ef 90       	pop	r14
     ee2:	df 90       	pop	r13
     ee4:	cf 90       	pop	r12
     ee6:	bf 90       	pop	r11
     ee8:	af 90       	pop	r10
     eea:	9f 90       	pop	r9
     eec:	8f 90       	pop	r8
     eee:	7f 90       	pop	r7
     ef0:	6f 90       	pop	r6
     ef2:	08 95       	ret

00000ef4 <zoSmsRestoreDefaults>:
	Sms.Settings.errorReportingLevel = eeprom_read_byte((u08*)ZO_EEPROM_ADDRESS_ERROR_REPORTING_LVL);
}

void zoSmsRestoreDefaults(void)
{
	eeprom_write_byte((u08*)ZO_EEPROM_ADDRESS_NODE_ID, ZO_DEFAULT_NODE_ID);
     ef4:	80 e0       	ldi	r24, 0x00	; 0
     ef6:	90 e0       	ldi	r25, 0x00	; 0
     ef8:	64 e0       	ldi	r22, 0x04	; 4
     efa:	0e 94 1f 27 	call	0x4e3e	; 0x4e3e <__eewr_byte_m328p>
	eeprom_write_word((u16*)ZO_EEPROM_ADDRESS_GAIN_P, ZO_DEFAULT_GAIN_P);
     efe:	80 e1       	ldi	r24, 0x10	; 16
     f00:	90 e0       	ldi	r25, 0x00	; 0
     f02:	60 ea       	ldi	r22, 0xA0	; 160
     f04:	7f e0       	ldi	r23, 0x0F	; 15
     f06:	0e 94 35 27 	call	0x4e6a	; 0x4e6a <__eewr_word_m328p>
	eeprom_write_word((u16*)ZO_EEPROM_ADDRESS_GAIN_I, ZO_DEFAULT_GAIN_I);
     f0a:	80 e2       	ldi	r24, 0x20	; 32
     f0c:	90 e0       	ldi	r25, 0x00	; 0
     f0e:	64 e6       	ldi	r22, 0x64	; 100
     f10:	70 e0       	ldi	r23, 0x00	; 0
     f12:	0e 94 35 27 	call	0x4e6a	; 0x4e6a <__eewr_word_m328p>
	eeprom_write_word((u16*)ZO_EEPROM_ADDRESS_GAIN_D, ZO_DEFAULT_GAIN_D);
     f16:	80 e3       	ldi	r24, 0x30	; 48
     f18:	90 e0       	ldi	r25, 0x00	; 0
     f1a:	68 ee       	ldi	r22, 0xE8	; 232
     f1c:	73 e0       	ldi	r23, 0x03	; 3
     f1e:	0e 94 35 27 	call	0x4e6a	; 0x4e6a <__eewr_word_m328p>
	eeprom_write_word((u16*)ZO_EEPROM_ADDRESS_CURRENT_LIMIT, ZO_DEFAULT_CURRENT_LIMIT);
     f22:	80 e4       	ldi	r24, 0x40	; 64
     f24:	90 e0       	ldi	r25, 0x00	; 0
     f26:	68 e8       	ldi	r22, 0x88	; 136
     f28:	73 e1       	ldi	r23, 0x13	; 19
     f2a:	0e 94 35 27 	call	0x4e6a	; 0x4e6a <__eewr_word_m328p>
	eeprom_write_word((u16*)ZO_EEPROM_ADDRESS_CURRENT_LIMIT_DURATION, ZO_DEFAULT_CURRENT_LIMIT_DURATION);
     f2e:	80 e5       	ldi	r24, 0x50	; 80
     f30:	90 e0       	ldi	r25, 0x00	; 0
     f32:	68 e8       	ldi	r22, 0x88	; 136
     f34:	73 e1       	ldi	r23, 0x13	; 19
     f36:	0e 94 35 27 	call	0x4e6a	; 0x4e6a <__eewr_word_m328p>
	eeprom_write_byte((u08*)ZO_EEPROM_ADDRESS_DIGITAL_IO_CONFIG, ZO_DEFAULT_DIGITAL_IO_CONFIG);
     f3a:	80 e8       	ldi	r24, 0x80	; 128
     f3c:	90 e0       	ldi	r25, 0x00	; 0
     f3e:	60 e0       	ldi	r22, 0x00	; 0
     f40:	0e 94 1f 27 	call	0x4e3e	; 0x4e3e <__eewr_byte_m328p>
	eeprom_write_dword((u32*)ZO_EEPROM_ADDRESS_BAUD_UART, ZO_DEFAULT_BAUD_UART);
     f44:	80 ea       	ldi	r24, 0xA0	; 160
     f46:	90 e0       	ldi	r25, 0x00	; 0
     f48:	40 e0       	ldi	r20, 0x00	; 0
     f4a:	52 ec       	ldi	r21, 0xC2	; 194
     f4c:	61 e0       	ldi	r22, 0x01	; 1
     f4e:	70 e0       	ldi	r23, 0x00	; 0
     f50:	0e 94 2d 27 	call	0x4e5a	; 0x4e5a <__eewr_dword_m328p>
	eeprom_write_dword((u32*)ZO_EEPROM_ADDRESS_BAUD_I2C, ZO_DEFAULT_BAUD_I2C);
     f54:	80 e9       	ldi	r24, 0x90	; 144
     f56:	90 e0       	ldi	r25, 0x00	; 0
     f58:	40 ea       	ldi	r20, 0xA0	; 160
     f5a:	56 e8       	ldi	r21, 0x86	; 134
     f5c:	61 e0       	ldi	r22, 0x01	; 1
     f5e:	70 e0       	ldi	r23, 0x00	; 0
     f60:	0e 94 2d 27 	call	0x4e5a	; 0x4e5a <__eewr_dword_m328p>
	eeprom_write_dword((u32*)ZO_EEPROM_ADDRESS_PROFILE_ACCELERATION, ZO_DEFAULT_PROFILE_ACCELERATION);
     f64:	80 e6       	ldi	r24, 0x60	; 96
     f66:	90 e0       	ldi	r25, 0x00	; 0
     f68:	40 e2       	ldi	r20, 0x20	; 32
     f6a:	53 e0       	ldi	r21, 0x03	; 3
     f6c:	60 e0       	ldi	r22, 0x00	; 0
     f6e:	70 e0       	ldi	r23, 0x00	; 0
     f70:	0e 94 2d 27 	call	0x4e5a	; 0x4e5a <__eewr_dword_m328p>
	eeprom_write_dword((u32*)ZO_EEPROM_ADDRESS_PROFILE_VELOCITY, ZO_DEFAULT_PROFILE_VELOCITY);
     f74:	80 e7       	ldi	r24, 0x70	; 112
     f76:	90 e0       	ldi	r25, 0x00	; 0
     f78:	40 e2       	ldi	r20, 0x20	; 32
     f7a:	53 e0       	ldi	r21, 0x03	; 3
     f7c:	60 e0       	ldi	r22, 0x00	; 0
     f7e:	70 e0       	ldi	r23, 0x00	; 0
     f80:	0e 94 2d 27 	call	0x4e5a	; 0x4e5a <__eewr_dword_m328p>
	eeprom_write_byte((u08*)ZO_EEPROM_ADDRESS_LAM, ZO_DEFAULT_LAM);
     f84:	80 eb       	ldi	r24, 0xB0	; 176
     f86:	90 e0       	ldi	r25, 0x00	; 0
     f88:	6f ef       	ldi	r22, 0xFF	; 255
     f8a:	0e 94 1f 27 	call	0x4e3e	; 0x4e3e <__eewr_byte_m328p>
	eeprom_write_byte((u08*)ZO_EEPROM_ADDRESS_ERROR_REPORTING_LVL, ZO_DEFAULT_ERROR_REPORTING_LVL);
     f8e:	80 ec       	ldi	r24, 0xC0	; 192
     f90:	90 e0       	ldi	r25, 0x00	; 0
     f92:	60 e0       	ldi	r22, 0x00	; 0
     f94:	0e 94 1f 27 	call	0x4e3e	; 0x4e3e <__eewr_byte_m328p>
}
     f98:	08 95       	ret

00000f9a <zoSmsInitSettingsFromEeprom>:
}


void zoSmsInitSettingsFromEeprom(void)
{
	Sms.Settings.NodeID = eeprom_read_byte((u08*)ZO_EEPROM_ADDRESS_NODE_ID);
     f9a:	80 e0       	ldi	r24, 0x00	; 0
     f9c:	90 e0       	ldi	r25, 0x00	; 0
     f9e:	0e 94 0b 27 	call	0x4e16	; 0x4e16 <__eerd_byte_m328p>
     fa2:	80 93 08 01 	sts	0x0108, r24
	Sms.Pid.GainP = eeprom_read_word((u16*)ZO_EEPROM_ADDRESS_GAIN_P);
     fa6:	80 e1       	ldi	r24, 0x10	; 16
     fa8:	90 e0       	ldi	r25, 0x00	; 0
     faa:	0e 94 19 27 	call	0x4e32	; 0x4e32 <__eerd_word_m328p>
     fae:	90 93 42 01 	sts	0x0142, r25
     fb2:	80 93 41 01 	sts	0x0141, r24
	Sms.Pid.GainI = eeprom_read_word((u16*)ZO_EEPROM_ADDRESS_GAIN_I);
     fb6:	80 e2       	ldi	r24, 0x20	; 32
     fb8:	90 e0       	ldi	r25, 0x00	; 0
     fba:	0e 94 19 27 	call	0x4e32	; 0x4e32 <__eerd_word_m328p>
     fbe:	90 93 44 01 	sts	0x0144, r25
     fc2:	80 93 43 01 	sts	0x0143, r24
	Sms.Pid.GainD = eeprom_read_word((u16*)ZO_EEPROM_ADDRESS_GAIN_D);
     fc6:	80 e3       	ldi	r24, 0x30	; 48
     fc8:	90 e0       	ldi	r25, 0x00	; 0
     fca:	0e 94 19 27 	call	0x4e32	; 0x4e32 <__eerd_word_m328p>
     fce:	90 93 46 01 	sts	0x0146, r25
     fd2:	80 93 45 01 	sts	0x0145, r24
	Sms.Settings.CurrentLimit = eeprom_read_word((u16*)ZO_EEPROM_ADDRESS_CURRENT_LIMIT);
     fd6:	80 e4       	ldi	r24, 0x40	; 64
     fd8:	90 e0       	ldi	r25, 0x00	; 0
     fda:	0e 94 19 27 	call	0x4e32	; 0x4e32 <__eerd_word_m328p>
     fde:	90 93 0b 01 	sts	0x010B, r25
     fe2:	80 93 0a 01 	sts	0x010A, r24
	Sms.Settings.CurrentLimitDuration = eeprom_read_word((u16*)ZO_EEPROM_ADDRESS_CURRENT_LIMIT_DURATION);
     fe6:	80 e5       	ldi	r24, 0x50	; 80
     fe8:	90 e0       	ldi	r25, 0x00	; 0
     fea:	0e 94 19 27 	call	0x4e32	; 0x4e32 <__eerd_word_m328p>
     fee:	90 93 0d 01 	sts	0x010D, r25
     ff2:	80 93 0c 01 	sts	0x010C, r24
	Sms.Settings.DigitalIoConfig = eeprom_read_byte((u08*)ZO_EEPROM_ADDRESS_DIGITAL_IO_CONFIG);
     ff6:	80 e8       	ldi	r24, 0x80	; 128
     ff8:	90 e0       	ldi	r25, 0x00	; 0
     ffa:	0e 94 0b 27 	call	0x4e16	; 0x4e16 <__eerd_byte_m328p>
     ffe:	80 93 09 01 	sts	0x0109, r24
	Sms.Settings.BaudUart = eeprom_read_dword((u32*)ZO_EEPROM_ADDRESS_BAUD_UART);
    1002:	80 ea       	ldi	r24, 0xA0	; 160
    1004:	90 e0       	ldi	r25, 0x00	; 0
    1006:	0e 94 13 27 	call	0x4e26	; 0x4e26 <__eerd_dword_m328p>
    100a:	60 93 0e 01 	sts	0x010E, r22
    100e:	70 93 0f 01 	sts	0x010F, r23
    1012:	80 93 10 01 	sts	0x0110, r24
    1016:	90 93 11 01 	sts	0x0111, r25
	Sms.Settings.BaudI2C = eeprom_read_dword((u32*)ZO_EEPROM_ADDRESS_BAUD_I2C);
    101a:	80 e9       	ldi	r24, 0x90	; 144
    101c:	90 e0       	ldi	r25, 0x00	; 0
    101e:	0e 94 13 27 	call	0x4e26	; 0x4e26 <__eerd_dword_m328p>
    1022:	60 93 12 01 	sts	0x0112, r22
    1026:	70 93 13 01 	sts	0x0113, r23
    102a:	80 93 14 01 	sts	0x0114, r24
    102e:	90 93 15 01 	sts	0x0115, r25
	Sms.Profile.DesiredAcceleration = eeprom_read_dword((u32*)ZO_EEPROM_ADDRESS_PROFILE_ACCELERATION);
    1032:	80 e6       	ldi	r24, 0x60	; 96
    1034:	90 e0       	ldi	r25, 0x00	; 0
    1036:	0e 94 13 27 	call	0x4e26	; 0x4e26 <__eerd_dword_m328p>
    103a:	60 93 38 01 	sts	0x0138, r22
    103e:	70 93 39 01 	sts	0x0139, r23
    1042:	80 93 3a 01 	sts	0x013A, r24
    1046:	90 93 3b 01 	sts	0x013B, r25
	Sms.Profile.DesiredVelocity = eeprom_read_dword((u32*)ZO_EEPROM_ADDRESS_PROFILE_VELOCITY);
    104a:	80 e7       	ldi	r24, 0x70	; 112
    104c:	90 e0       	ldi	r25, 0x00	; 0
    104e:	0e 94 13 27 	call	0x4e26	; 0x4e26 <__eerd_dword_m328p>
    1052:	60 93 3c 01 	sts	0x013C, r22
    1056:	70 93 3d 01 	sts	0x013D, r23
    105a:	80 93 3e 01 	sts	0x013E, r24
    105e:	90 93 3f 01 	sts	0x013F, r25
	Sms.Settings.localAcceptanceMask = eeprom_read_byte((u08*)ZO_EEPROM_ADDRESS_LAM);
    1062:	80 eb       	ldi	r24, 0xB0	; 176
    1064:	90 e0       	ldi	r25, 0x00	; 0
    1066:	0e 94 0b 27 	call	0x4e16	; 0x4e16 <__eerd_byte_m328p>
    106a:	80 93 16 01 	sts	0x0116, r24
	Sms.Settings.errorReportingLevel = eeprom_read_byte((u08*)ZO_EEPROM_ADDRESS_ERROR_REPORTING_LVL);
    106e:	80 ec       	ldi	r24, 0xC0	; 192
    1070:	90 e0       	ldi	r25, 0x00	; 0
    1072:	0e 94 0b 27 	call	0x4e16	; 0x4e16 <__eerd_byte_m328p>
    1076:	80 93 17 01 	sts	0x0117, r24
}
    107a:	08 95       	ret

0000107c <zoSmsInit>:
}

void zoSmsInit(void)
{
	//initialize MCU pins
	zoSmsPinsInit();
    107c:	0e 94 88 06 	call	0xd10	; 0xd10 <zoSmsPinsInit>

	//initialize motor. Also responsible for control loop timing.
	zoMotorInit();
    1080:	0e 94 2c 05 	call	0xa58	; 0xa58 <zoMotorInit>
	zoMotorSetState(FALSE);
    1084:	80 e0       	ldi	r24, 0x00	; 0
    1086:	0e 94 96 05 	call	0xb2c	; 0xb2c <zoMotorSetState>
	cli();	//disable interrupts during initialization
    108a:	f8 94       	cli

	//attach the control loop handler
	zoMotorSetTimedEventHandler(zoSmsControlLoop);
    108c:	8c eb       	ldi	r24, 0xBC	; 188
    108e:	98 e0       	ldi	r25, 0x08	; 8
    1090:	0e 94 27 05 	call	0xa4e	; 0xa4e <zoMotorSetTimedEventHandler>

	//initialize the encoder
	zoEncoderInit();
    1094:	0e 94 e5 04 	call	0x9ca	; 0x9ca <zoEncoderInit>
	zoEncoderReset();
    1098:	0e 94 0c 04 	call	0x818	; 0x818 <zoEncoderReset>
	cli();
    109c:	f8 94       	cli

	//get all settings from eeprom
	zoSmsInitSettingsFromEeprom();
    109e:	0e 94 cd 07 	call	0xf9a	; 0xf9a <zoSmsInitSettingsFromEeprom>
	
	//initialize other variables
	Sms.BufferdSetPoint.type = ZO_SMS_SETPOINT_NONE;
    10a2:	10 92 61 01 	sts	0x0161, r1
	Sms.Pid.Error = 0;
    10a6:	10 92 47 01 	sts	0x0147, r1
    10aa:	10 92 48 01 	sts	0x0148, r1
    10ae:	10 92 49 01 	sts	0x0149, r1
    10b2:	10 92 4a 01 	sts	0x014A, r1
	Sms.Pid.PrevError = 0;
    10b6:	10 92 4b 01 	sts	0x014B, r1
    10ba:	10 92 4c 01 	sts	0x014C, r1
    10be:	10 92 4d 01 	sts	0x014D, r1
    10c2:	10 92 4e 01 	sts	0x014E, r1
	Sms.Pid.Integral = 0;
    10c6:	10 92 4f 01 	sts	0x014F, r1
    10ca:	10 92 50 01 	sts	0x0150, r1
    10ce:	10 92 51 01 	sts	0x0151, r1
    10d2:	10 92 52 01 	sts	0x0152, r1
	Sms.Pid.SetPoint = 0;
    10d6:	10 92 57 01 	sts	0x0157, r1
    10da:	10 92 58 01 	sts	0x0158, r1
    10de:	10 92 59 01 	sts	0x0159, r1
    10e2:	10 92 5a 01 	sts	0x015A, r1
	Sms.Pid.setActuator = zoMotorSet;
    10e6:	82 e7       	ldi	r24, 0x72	; 114
    10e8:	95 e0       	ldi	r25, 0x05	; 5
    10ea:	90 93 5e 01 	sts	0x015E, r25
    10ee:	80 93 5d 01 	sts	0x015D, r24
	Sms.Pid.getFeedBack = zoEncoderGetPos;
    10f2:	8a e4       	ldi	r24, 0x4A	; 74
    10f4:	94 e0       	ldi	r25, 0x04	; 4
    10f6:	90 93 60 01 	sts	0x0160, r25
    10fa:	80 93 5f 01 	sts	0x015F, r24
	Sms.Pid.AntiWindUp = 0xFFFF/(Sms.Pid.GainP)*0xFF;
    10fe:	60 91 41 01 	lds	r22, 0x0141
    1102:	70 91 42 01 	lds	r23, 0x0142
    1106:	8f ef       	ldi	r24, 0xFF	; 255
    1108:	9f ef       	ldi	r25, 0xFF	; 255
    110a:	0e 94 92 25 	call	0x4b24	; 0x4b24 <__udivmodhi4>
    110e:	96 2f       	mov	r25, r22
    1110:	88 27       	eor	r24, r24
    1112:	86 1b       	sub	r24, r22
    1114:	97 0b       	sbc	r25, r23
    1116:	a0 e0       	ldi	r26, 0x00	; 0
    1118:	b0 e0       	ldi	r27, 0x00	; 0
    111a:	80 93 53 01 	sts	0x0153, r24
    111e:	90 93 54 01 	sts	0x0154, r25
    1122:	a0 93 55 01 	sts	0x0155, r26
    1126:	b0 93 56 01 	sts	0x0156, r27
	Sms.Profile.VelocityDeltaPos = 0;
    112a:	80 e0       	ldi	r24, 0x00	; 0
    112c:	90 e0       	ldi	r25, 0x00	; 0
    112e:	a0 e0       	ldi	r26, 0x00	; 0
    1130:	b0 e0       	ldi	r27, 0x00	; 0
    1132:	80 93 20 01 	sts	0x0120, r24
    1136:	90 93 21 01 	sts	0x0121, r25
    113a:	a0 93 22 01 	sts	0x0122, r26
    113e:	b0 93 23 01 	sts	0x0123, r27
	Sms.Control.State = ZO_SMS_CONTROL_NO_CONTROL;
    1142:	10 92 03 01 	sts	0x0103, r1
	
	zoSmsErrorInit();
    1146:	0e 94 75 0b 	call	0x16ea	; 0x16ea <zoSmsErrorInit>

	//TODO: think of another ADC scheme that takes less CPU power
	//now the adcisr runs at ~10KHz
	zoAdcInit();
    114a:	0e 94 52 16 	call	0x2ca4	; 0x2ca4 <zoAdcInit>
	cli();
    114e:	f8 94       	cli
	zoAdcSetTrigger(ZO_ADC_TRIGGER_FREE_RUNNING);
    1150:	80 e0       	ldi	r24, 0x00	; 0
    1152:	0e 94 95 16 	call	0x2d2a	; 0x2d2a <zoAdcSetTrigger>
	zoAdcChannelEnable(ZO_ADC_CHANNEL_0);
    1156:	80 e0       	ldi	r24, 0x00	; 0
    1158:	0e 94 a5 16 	call	0x2d4a	; 0x2d4a <zoAdcChannelEnable>
	zoAdcChannelEnable(ZO_ADC_CHANNEL_1);
    115c:	81 e0       	ldi	r24, 0x01	; 1
    115e:	0e 94 a5 16 	call	0x2d4a	; 0x2d4a <zoAdcChannelEnable>
	zoAdcChannelEnable(ZO_ADC_CHANNEL_2);
    1162:	82 e0       	ldi	r24, 0x02	; 2
    1164:	0e 94 a5 16 	call	0x2d4a	; 0x2d4a <zoAdcChannelEnable>
	zoAdcChannelEnable(ZO_ADC_CHANNEL_3);
    1168:	83 e0       	ldi	r24, 0x03	; 3
    116a:	0e 94 a5 16 	call	0x2d4a	; 0x2d4a <zoAdcChannelEnable>
	zoAdcChannelEnable(ZO_ADC_CHANNEL_7);
    116e:	87 e0       	ldi	r24, 0x07	; 7
    1170:	0e 94 a5 16 	call	0x2d4a	; 0x2d4a <zoAdcChannelEnable>
	
	//initialize global interrupts -> go
	sei();
    1174:	78 94       	sei
}
    1176:	08 95       	ret

00001178 <zoSmsControlLoop>:
		 {ZO_SMS_SETPOINT_NONE,0}
		};


void zoSmsControlLoop(void)
{
    1178:	af 92       	push	r10
    117a:	bf 92       	push	r11
    117c:	cf 92       	push	r12
    117e:	df 92       	push	r13
    1180:	ef 92       	push	r14
    1182:	ff 92       	push	r15
    1184:	0f 93       	push	r16
    1186:	1f 93       	push	r17
	zoEncoderSetVel();
    1188:	0e 94 81 03 	call	0x702	; 0x702 <zoEncoderSetVel>
	
	if(Sms.Control.State == ZO_SMS_CONTROL_NO_CONTROL)
    118c:	80 91 03 01 	lds	r24, 0x0103
    1190:	88 23       	and	r24, r24
    1192:	79 f0       	breq	.+30     	; 0x11b2 <zoSmsControlLoop+0x3a>
		return;

	switch (Sms.Control.State)
    1194:	83 30       	cpi	r24, 0x03	; 3
    1196:	b1 f0       	breq	.+44     	; 0x11c4 <zoSmsControlLoop+0x4c>
    1198:	84 30       	cpi	r24, 0x04	; 4
    119a:	09 f4       	brne	.+2      	; 0x119e <zoSmsControlLoop+0x26>
    119c:	ab c0       	rjmp	.+342    	; 0x12f4 <zoSmsControlLoop+0x17c>
    119e:	82 30       	cpi	r24, 0x02	; 2
    11a0:	09 f4       	brne	.+2      	; 0x11a4 <zoSmsControlLoop+0x2c>
    11a2:	7c c0       	rjmp	.+248    	; 0x129c <zoSmsControlLoop+0x124>

			case ZO_SMS_CONTROL_NO_CONTROL:	//Prevent compiler warning
				break;
	}

	Sms.Pid.doPID(&Sms.Pid);
    11a4:	e0 91 5b 01 	lds	r30, 0x015B
    11a8:	f0 91 5c 01 	lds	r31, 0x015C
    11ac:	81 e4       	ldi	r24, 0x41	; 65
    11ae:	91 e0       	ldi	r25, 0x01	; 1
    11b0:	09 95       	icall
}
    11b2:	1f 91       	pop	r17
    11b4:	0f 91       	pop	r16
    11b6:	ff 90       	pop	r15
    11b8:	ef 90       	pop	r14
    11ba:	df 90       	pop	r13
    11bc:	cf 90       	pop	r12
    11be:	bf 90       	pop	r11
    11c0:	af 90       	pop	r10
    11c2:	08 95       	ret
			Sms.Profile.PositionSetpoint += Sms.Profile.VelocityDeltaPos;
			Sms.Pid.SetPoint = (s32)Sms.Profile.PositionSetpoint;  
			break;

		case ZO_SMS_CONTROL_PROFILED_VELOCITY_CONTROL:
			Sms.Profile.LastVelocityDeltaPos = Sms.Profile.VelocityDeltaPos;
    11c4:	e0 90 20 01 	lds	r14, 0x0120
    11c8:	f0 90 21 01 	lds	r15, 0x0121
    11cc:	00 91 22 01 	lds	r16, 0x0122
    11d0:	10 91 23 01 	lds	r17, 0x0123
    11d4:	e0 92 24 01 	sts	0x0124, r14
    11d8:	f0 92 25 01 	sts	0x0125, r15
    11dc:	00 93 26 01 	sts	0x0126, r16
    11e0:	10 93 27 01 	sts	0x0127, r17
		((double)(Sms.Profile.TargetPosition - zoEncoderGetPos())));
}

bool inline accelerationCompleteCriterion(void)
{
	return (( (s32)((Sms.Profile.LastVelocityDeltaPos - Sms.Profile.TargetVelDeltaPos) *
    11e4:	a0 90 1c 01 	lds	r10, 0x011C
    11e8:	b0 90 1d 01 	lds	r11, 0x011D
    11ec:	c0 90 1e 01 	lds	r12, 0x011E
    11f0:	d0 90 1f 01 	lds	r13, 0x011F
    11f4:	c8 01       	movw	r24, r16
    11f6:	b7 01       	movw	r22, r14
    11f8:	a6 01       	movw	r20, r12
    11fa:	95 01       	movw	r18, r10
    11fc:	0e 94 2a 23 	call	0x4654	; 0x4654 <__subsf3>
    1200:	9b 01       	movw	r18, r22
    1202:	ac 01       	movw	r20, r24
    1204:	0e 94 b6 24 	call	0x496c	; 0x496c <__mulsf3>
    1208:	20 91 04 01 	lds	r18, 0x0104
    120c:	30 91 05 01 	lds	r19, 0x0105
    1210:	40 91 06 01 	lds	r20, 0x0106
    1214:	50 91 07 01 	lds	r21, 0x0107
    1218:	0e 94 b6 24 	call	0x496c	; 0x496c <__mulsf3>
    121c:	0e 94 f7 23 	call	0x47ee	; 0x47ee <__fixsfsi>
    1220:	16 16       	cp	r1, r22
    1222:	17 06       	cpc	r1, r23
    1224:	18 06       	cpc	r1, r24
    1226:	19 06       	cpc	r1, r25
    1228:	0c f0       	brlt	.+2      	; 0x122c <zoSmsControlLoop+0xb4>
    122a:	e9 c0       	rjmp	.+466    	; 0x13fe <zoSmsControlLoop+0x286>
			switch(Sms.Profile.State)
			{
				case ZO_SMS_PROFILE_ACCELERATING:
					if( !accelerationCompleteCriterion() )
					{
						Sms.Profile.VelocityDeltaPos += Sms.Profile.ConstAccelDeltaVel;
    122c:	c8 01       	movw	r24, r16
    122e:	b7 01       	movw	r22, r14
    1230:	20 91 28 01 	lds	r18, 0x0128
    1234:	30 91 29 01 	lds	r19, 0x0129
    1238:	40 91 2a 01 	lds	r20, 0x012A
    123c:	50 91 2b 01 	lds	r21, 0x012B
    1240:	0e 94 2b 23 	call	0x4656	; 0x4656 <__addsf3>
					break;

				case ZO_SMS_PROFILE_DECCELERATING:
					if( !positionReachedCriterion() )
					{
						Sms.Profile.VelocityDeltaPos -= deccelRecalc();
    1244:	60 93 20 01 	sts	0x0120, r22
    1248:	70 93 21 01 	sts	0x0121, r23
    124c:	80 93 22 01 	sts	0x0122, r24
    1250:	90 93 23 01 	sts	0x0123, r25
						Sms.Profile.PositionSetpoint +=	Sms.Profile.VelocityDeltaPos;
    1254:	20 91 18 01 	lds	r18, 0x0118
    1258:	30 91 19 01 	lds	r19, 0x0119
    125c:	40 91 1a 01 	lds	r20, 0x011A
    1260:	50 91 1b 01 	lds	r21, 0x011B
    1264:	0e 94 2b 23 	call	0x4656	; 0x4656 <__addsf3>
    1268:	60 93 18 01 	sts	0x0118, r22
    126c:	70 93 19 01 	sts	0x0119, r23
    1270:	80 93 1a 01 	sts	0x011A, r24
    1274:	90 93 1b 01 	sts	0x011B, r25
						Sms.Pid.SetPoint = (s32)Sms.Profile.PositionSetpoint;
    1278:	0e 94 f7 23 	call	0x47ee	; 0x47ee <__fixsfsi>
    127c:	60 93 57 01 	sts	0x0157, r22
    1280:	70 93 58 01 	sts	0x0158, r23
    1284:	80 93 59 01 	sts	0x0159, r24
    1288:	90 93 5a 01 	sts	0x015A, r25

			case ZO_SMS_CONTROL_NO_CONTROL:	//Prevent compiler warning
				break;
	}

	Sms.Pid.doPID(&Sms.Pid);
    128c:	e0 91 5b 01 	lds	r30, 0x015B
    1290:	f0 91 5c 01 	lds	r31, 0x015C
    1294:	81 e4       	ldi	r24, 0x41	; 65
    1296:	91 e0       	ldi	r25, 0x01	; 1
    1298:	09 95       	icall
    129a:	8b cf       	rjmp	.-234    	; 0x11b2 <zoSmsControlLoop+0x3a>
	{
		case ZO_SMS_CONTROL_POSITION_CONTROL:
			break;

		case ZO_SMS_CONTROL_VELOCITY_CONTROL:
			Sms.Profile.PositionSetpoint += Sms.Profile.VelocityDeltaPos;
    129c:	60 91 18 01 	lds	r22, 0x0118
    12a0:	70 91 19 01 	lds	r23, 0x0119
    12a4:	80 91 1a 01 	lds	r24, 0x011A
    12a8:	90 91 1b 01 	lds	r25, 0x011B
    12ac:	20 91 20 01 	lds	r18, 0x0120
    12b0:	30 91 21 01 	lds	r19, 0x0121
    12b4:	40 91 22 01 	lds	r20, 0x0122
    12b8:	50 91 23 01 	lds	r21, 0x0123
    12bc:	0e 94 2b 23 	call	0x4656	; 0x4656 <__addsf3>
    12c0:	60 93 18 01 	sts	0x0118, r22
    12c4:	70 93 19 01 	sts	0x0119, r23
    12c8:	80 93 1a 01 	sts	0x011A, r24
    12cc:	90 93 1b 01 	sts	0x011B, r25
			Sms.Pid.SetPoint = (s32)Sms.Profile.PositionSetpoint;  
    12d0:	0e 94 f7 23 	call	0x47ee	; 0x47ee <__fixsfsi>
    12d4:	60 93 57 01 	sts	0x0157, r22
    12d8:	70 93 58 01 	sts	0x0158, r23
    12dc:	80 93 59 01 	sts	0x0159, r24
    12e0:	90 93 5a 01 	sts	0x015A, r25

			case ZO_SMS_CONTROL_NO_CONTROL:	//Prevent compiler warning
				break;
	}

	Sms.Pid.doPID(&Sms.Pid);
    12e4:	e0 91 5b 01 	lds	r30, 0x015B
    12e8:	f0 91 5c 01 	lds	r31, 0x015C
    12ec:	81 e4       	ldi	r24, 0x41	; 65
    12ee:	91 e0       	ldi	r25, 0x01	; 1
    12f0:	09 95       	icall
    12f2:	5f cf       	rjmp	.-322    	; 0x11b2 <zoSmsControlLoop+0x3a>
				Sms.Profile.VelocityDeltaPos = Sms.Profile.TargetVelDeltaPos;
			}
			break;

		case ZO_SMS_CONTROL_PROFILED_POSITION_CONTROL:
			Sms.Profile.LastVelocityDeltaPos = Sms.Profile.VelocityDeltaPos;
    12f4:	e0 90 20 01 	lds	r14, 0x0120
    12f8:	f0 90 21 01 	lds	r15, 0x0121
    12fc:	00 91 22 01 	lds	r16, 0x0122
    1300:	10 91 23 01 	lds	r17, 0x0123
    1304:	e0 92 24 01 	sts	0x0124, r14
    1308:	f0 92 25 01 	sts	0x0125, r15
    130c:	00 93 26 01 	sts	0x0126, r16
    1310:	10 93 27 01 	sts	0x0127, r17
			switch(Sms.Profile.State)
    1314:	80 91 40 01 	lds	r24, 0x0140
    1318:	81 30       	cpi	r24, 0x01	; 1
    131a:	99 f1       	breq	.+102    	; 0x1382 <zoSmsControlLoop+0x20a>
    131c:	81 30       	cpi	r24, 0x01	; 1
    131e:	40 f1       	brcs	.+80     	; 0x1370 <zoSmsControlLoop+0x1f8>
    1320:	82 30       	cpi	r24, 0x02	; 2
    1322:	09 f0       	breq	.+2      	; 0x1326 <zoSmsControlLoop+0x1ae>
    1324:	3f cf       	rjmp	.-386    	; 0x11a4 <zoSmsControlLoop+0x2c>
					else
						Sms.Profile.State = ZO_SMS_PROFILE_DECCELERATING;
					break;

				case ZO_SMS_PROFILE_DECCELERATING:
					if( !positionReachedCriterion() )
    1326:	0e 94 e3 06 	call	0xdc6	; 0xdc6 <positionReachedCriterion>
    132a:	88 23       	and	r24, r24
    132c:	09 f4       	brne	.+2      	; 0x1330 <zoSmsControlLoop+0x1b8>
    132e:	56 c0       	rjmp	.+172    	; 0x13dc <zoSmsControlLoop+0x264>
						Sms.Profile.PositionSetpoint +=	Sms.Profile.VelocityDeltaPos;
						Sms.Pid.SetPoint = (s32)Sms.Profile.PositionSetpoint;
					}
					else
					{
						Sms.Profile.PositionSetpoint = Sms.Profile.TargetPosition;
    1330:	e0 90 34 01 	lds	r14, 0x0134
    1334:	f0 90 35 01 	lds	r15, 0x0135
    1338:	00 91 36 01 	lds	r16, 0x0136
    133c:	10 91 37 01 	lds	r17, 0x0137
    1340:	c8 01       	movw	r24, r16
    1342:	b7 01       	movw	r22, r14
    1344:	0e 94 2a 24 	call	0x4854	; 0x4854 <__floatsisf>
    1348:	60 93 18 01 	sts	0x0118, r22
    134c:	70 93 19 01 	sts	0x0119, r23
    1350:	80 93 1a 01 	sts	0x011A, r24
    1354:	90 93 1b 01 	sts	0x011B, r25
						Sms.Pid.SetPoint = Sms.Profile.TargetPosition;
    1358:	e0 92 57 01 	sts	0x0157, r14
    135c:	f0 92 58 01 	sts	0x0158, r15
    1360:	00 93 59 01 	sts	0x0159, r16
    1364:	10 93 5a 01 	sts	0x015A, r17
						Sms.Control.State = ZO_SMS_CONTROL_POSITION_CONTROL;
    1368:	81 e0       	ldi	r24, 0x01	; 1
    136a:	80 93 03 01 	sts	0x0103, r24
    136e:	1a cf       	rjmp	.-460    	; 0x11a4 <zoSmsControlLoop+0x2c>
		case ZO_SMS_CONTROL_PROFILED_POSITION_CONTROL:
			Sms.Profile.LastVelocityDeltaPos = Sms.Profile.VelocityDeltaPos;
			switch(Sms.Profile.State)
			{
				case ZO_SMS_PROFILE_ACCELERATING:
					if( !accelerationCompleteCriterion() )
    1370:	0e 94 96 06 	call	0xd2c	; 0xd2c <accelerationCompleteCriterion>
    1374:	88 23       	and	r24, r24
    1376:	09 f4       	brne	.+2      	; 0x137a <zoSmsControlLoop+0x202>
    1378:	59 cf       	rjmp	.-334    	; 0x122c <zoSmsControlLoop+0xb4>
						Sms.Profile.PositionSetpoint +=	Sms.Profile.VelocityDeltaPos;					
						Sms.Pid.SetPoint = (s32)Sms.Profile.PositionSetpoint;
					}
					else
					{
						Sms.Profile.State  = ZO_SMS_PROFILE_MOVING_WITH_VELOCITY;
    137a:	81 e0       	ldi	r24, 0x01	; 1
    137c:	80 93 40 01 	sts	0x0140, r24
    1380:	11 cf       	rjmp	.-478    	; 0x11a4 <zoSmsControlLoop+0x2c>
					}
					break;

				case ZO_SMS_PROFILE_MOVING_WITH_VELOCITY:
					if( !constantVelocityCompletedCriterion() )
    1382:	0e 94 0a 07 	call	0xe14	; 0xe14 <constantVelocityCompletedCriterion>
    1386:	88 23       	and	r24, r24
    1388:	29 f5       	brne	.+74     	; 0x13d4 <zoSmsControlLoop+0x25c>
					{
						Sms.Profile.PositionSetpoint += Sms.Profile.TargetVelDeltaPos;
    138a:	60 91 18 01 	lds	r22, 0x0118
    138e:	70 91 19 01 	lds	r23, 0x0119
    1392:	80 91 1a 01 	lds	r24, 0x011A
    1396:	90 91 1b 01 	lds	r25, 0x011B
    139a:	20 91 1c 01 	lds	r18, 0x011C
    139e:	30 91 1d 01 	lds	r19, 0x011D
    13a2:	40 91 1e 01 	lds	r20, 0x011E
    13a6:	50 91 1f 01 	lds	r21, 0x011F
    13aa:	0e 94 2b 23 	call	0x4656	; 0x4656 <__addsf3>
    13ae:	60 93 18 01 	sts	0x0118, r22
    13b2:	70 93 19 01 	sts	0x0119, r23
    13b6:	80 93 1a 01 	sts	0x011A, r24
    13ba:	90 93 1b 01 	sts	0x011B, r25
						Sms.Pid.SetPoint = (s32)Sms.Profile.PositionSetpoint;
    13be:	0e 94 f7 23 	call	0x47ee	; 0x47ee <__fixsfsi>
    13c2:	60 93 57 01 	sts	0x0157, r22
    13c6:	70 93 58 01 	sts	0x0158, r23
    13ca:	80 93 59 01 	sts	0x0159, r24
    13ce:	90 93 5a 01 	sts	0x015A, r25
    13d2:	e8 ce       	rjmp	.-560    	; 0x11a4 <zoSmsControlLoop+0x2c>
					}
					else
						Sms.Profile.State = ZO_SMS_PROFILE_DECCELERATING;
    13d4:	82 e0       	ldi	r24, 0x02	; 2
    13d6:	80 93 40 01 	sts	0x0140, r24
    13da:	e4 ce       	rjmp	.-568    	; 0x11a4 <zoSmsControlLoop+0x2c>
					break;

				case ZO_SMS_PROFILE_DECCELERATING:
					if( !positionReachedCriterion() )
					{
						Sms.Profile.VelocityDeltaPos -= deccelRecalc();
    13dc:	e0 90 20 01 	lds	r14, 0x0120
    13e0:	f0 90 21 01 	lds	r15, 0x0121
    13e4:	00 91 22 01 	lds	r16, 0x0122
    13e8:	10 91 23 01 	lds	r17, 0x0123
    13ec:	0e 94 31 07 	call	0xe62	; 0xe62 <deccelRecalc>
    13f0:	9b 01       	movw	r18, r22
    13f2:	ac 01       	movw	r20, r24
    13f4:	c8 01       	movw	r24, r16
    13f6:	b7 01       	movw	r22, r14
    13f8:	0e 94 2a 23 	call	0x4654	; 0x4654 <__subsf3>
    13fc:	23 cf       	rjmp	.-442    	; 0x1244 <zoSmsControlLoop+0xcc>
				Sms.Profile.PositionSetpoint +=	Sms.Profile.VelocityDeltaPos;					
				Sms.Pid.SetPoint = (s32)Sms.Profile.PositionSetpoint;
			}
			else
			{
				Sms.Control.State  = ZO_SMS_CONTROL_VELOCITY_CONTROL;
    13fe:	82 e0       	ldi	r24, 0x02	; 2
    1400:	80 93 03 01 	sts	0x0103, r24
				Sms.Profile.VelocityDeltaPos = Sms.Profile.TargetVelDeltaPos;
    1404:	a0 92 20 01 	sts	0x0120, r10
    1408:	b0 92 21 01 	sts	0x0121, r11
    140c:	c0 92 22 01 	sts	0x0122, r12
    1410:	d0 92 23 01 	sts	0x0123, r13
    1414:	c7 ce       	rjmp	.-626    	; 0x11a4 <zoSmsControlLoop+0x2c>

00001416 <zoSmsMotorStalled>:
}


//this should be called only if the motor is initialized
bool zoSmsMotorStalled(void)
{
    1416:	af 92       	push	r10
    1418:	bf 92       	push	r11
    141a:	cf 92       	push	r12
    141c:	df 92       	push	r13
    141e:	ef 92       	push	r14
    1420:	ff 92       	push	r15
    1422:	0f 93       	push	r16
    1424:	1f 93       	push	r17
	s32 currentPos;
	s32 lastPos;
	s32 commandedPos;

	enterCritical();
    1426:	0f b6       	in	r0, 0x3f	; 63
    1428:	0f 92       	push	r0
    142a:	f8 94       	cli
	lastPos = StalledLastPosition;
    142c:	a0 90 b6 01 	lds	r10, 0x01B6
    1430:	b0 90 b7 01 	lds	r11, 0x01B7
    1434:	c0 90 b8 01 	lds	r12, 0x01B8
    1438:	d0 90 b9 01 	lds	r13, 0x01B9
	currentPos = zoEncoderGetPos();
    143c:	0e 94 4a 04 	call	0x894	; 0x894 <zoEncoderGetPos>
	StalledLastPosition = currentPos;
    1440:	60 93 b6 01 	sts	0x01B6, r22
    1444:	70 93 b7 01 	sts	0x01B7, r23
    1448:	80 93 b8 01 	sts	0x01B8, r24
    144c:	90 93 b9 01 	sts	0x01B9, r25
	commandedPos = Sms.Pid.SetPoint; 
    1450:	e0 90 57 01 	lds	r14, 0x0157
    1454:	f0 90 58 01 	lds	r15, 0x0158
    1458:	00 91 59 01 	lds	r16, 0x0159
    145c:	10 91 5a 01 	lds	r17, 0x015A
	exitCritical();
    1460:	0f 90       	pop	r0
    1462:	0f be       	out	0x3f, r0	; 63

	//if the motor is not enabled or if it is approximately here it was commanded to be
	//then it is not stalled	
	if( labs(currentPos - commandedPos) < 200 )
    1464:	9b 01       	movw	r18, r22
    1466:	ac 01       	movw	r20, r24
    1468:	2e 19       	sub	r18, r14
    146a:	3f 09       	sbc	r19, r15
    146c:	40 0b       	sbc	r20, r16
    146e:	51 0b       	sbc	r21, r17
    1470:	da 01       	movw	r26, r20
    1472:	c9 01       	movw	r24, r18
    1474:	89 53       	subi	r24, 0x39	; 57
    1476:	9f 4f       	sbci	r25, 0xFF	; 255
    1478:	af 4f       	sbci	r26, 0xFF	; 255
    147a:	bf 4f       	sbci	r27, 0xFF	; 255
    147c:	8f 58       	subi	r24, 0x8F	; 143
    147e:	91 40       	sbci	r25, 0x01	; 1
    1480:	a0 40       	sbci	r26, 0x00	; 0
    1482:	b0 40       	sbci	r27, 0x00	; 0
    1484:	28 f1       	brcs	.+74     	; 0x14d0 <zoSmsMotorStalled+0xba>
	}

	//if the motor is still or moving away from the target then it is stalled. 
	//If it remains like this for more than a specific time then indicate the 
	//stalled condition.
	if( labs(currentPos - commandedPos) >= labs(lastPos - commandedPos) )
    1486:	ca 01       	movw	r24, r20
    1488:	b9 01       	movw	r22, r18
    148a:	57 fd       	sbrc	r21, 7
    148c:	27 c0       	rjmp	.+78     	; 0x14dc <zoSmsMotorStalled+0xc6>
    148e:	a6 01       	movw	r20, r12
    1490:	95 01       	movw	r18, r10
    1492:	2e 19       	sub	r18, r14
    1494:	3f 09       	sbc	r19, r15
    1496:	40 0b       	sbc	r20, r16
    1498:	51 0b       	sbc	r21, r17
    149a:	57 fd       	sbrc	r21, 7
    149c:	2e c0       	rjmp	.+92     	; 0x14fa <zoSmsMotorStalled+0xe4>
    149e:	62 17       	cp	r22, r18
    14a0:	73 07       	cpc	r23, r19
    14a2:	84 07       	cpc	r24, r20
    14a4:	95 07       	cpc	r25, r21
    14a6:	54 f0       	brlt	.+20     	; 0x14bc <zoSmsMotorStalled+0xa6>
	{
		if( zoSystemTimerTimeOutExpired(&StalledTimeOutTimer,ZO_SMS_MOTOR_STALLED_TIMEOUT_MS) )
    14a8:	8a eb       	ldi	r24, 0xBA	; 186
    14aa:	91 e0       	ldi	r25, 0x01	; 1
    14ac:	60 ed       	ldi	r22, 0xD0	; 208
    14ae:	77 e0       	ldi	r23, 0x07	; 7
    14b0:	0e 94 78 01 	call	0x2f0	; 0x2f0 <zoSystemTimerTimeOutExpired>
    14b4:	88 23       	and	r24, r24
    14b6:	11 f0       	breq	.+4      	; 0x14bc <zoSmsMotorStalled+0xa6>
    14b8:	8f ef       	ldi	r24, 0xFF	; 255
    14ba:	01 c0       	rjmp	.+2      	; 0x14be <zoSmsMotorStalled+0xa8>
    14bc:	80 e0       	ldi	r24, 0x00	; 0
			return TRUE;
	}

	return FALSE;
    14be:	1f 91       	pop	r17
    14c0:	0f 91       	pop	r16
    14c2:	ff 90       	pop	r15
    14c4:	ef 90       	pop	r14
    14c6:	df 90       	pop	r13
    14c8:	cf 90       	pop	r12
    14ca:	bf 90       	pop	r11
    14cc:	af 90       	pop	r10
    14ce:	08 95       	ret

	//if the motor is not enabled or if it is approximately here it was commanded to be
	//then it is not stalled	
	if( labs(currentPos - commandedPos) < 200 )
	{
		zoSystemTimerTimeOutInit(&StalledTimeOutTimer);
    14d0:	8a eb       	ldi	r24, 0xBA	; 186
    14d2:	91 e0       	ldi	r25, 0x01	; 1
    14d4:	0e 94 42 01 	call	0x284	; 0x284 <zoSystemTimerTimeOutInit>
    14d8:	80 e0       	ldi	r24, 0x00	; 0
    14da:	f1 cf       	rjmp	.-30     	; 0x14be <zoSmsMotorStalled+0xa8>
	}

	//if the motor is still or moving away from the target then it is stalled. 
	//If it remains like this for more than a specific time then indicate the 
	//stalled condition.
	if( labs(currentPos - commandedPos) >= labs(lastPos - commandedPos) )
    14dc:	90 95       	com	r25
    14de:	80 95       	com	r24
    14e0:	70 95       	com	r23
    14e2:	61 95       	neg	r22
    14e4:	7f 4f       	sbci	r23, 0xFF	; 255
    14e6:	8f 4f       	sbci	r24, 0xFF	; 255
    14e8:	9f 4f       	sbci	r25, 0xFF	; 255
    14ea:	a6 01       	movw	r20, r12
    14ec:	95 01       	movw	r18, r10
    14ee:	2e 19       	sub	r18, r14
    14f0:	3f 09       	sbc	r19, r15
    14f2:	40 0b       	sbc	r20, r16
    14f4:	51 0b       	sbc	r21, r17
    14f6:	57 ff       	sbrs	r21, 7
    14f8:	d2 cf       	rjmp	.-92     	; 0x149e <zoSmsMotorStalled+0x88>
    14fa:	50 95       	com	r21
    14fc:	40 95       	com	r20
    14fe:	30 95       	com	r19
    1500:	21 95       	neg	r18
    1502:	3f 4f       	sbci	r19, 0xFF	; 255
    1504:	4f 4f       	sbci	r20, 0xFF	; 255
    1506:	5f 4f       	sbci	r21, 0xFF	; 255
    1508:	ca cf       	rjmp	.-108    	; 0x149e <zoSmsMotorStalled+0x88>

0000150a <zoSmsErrorHandleServiceCommandFailure>:

void zoSmsErrorHandleServiceCommandFailure(void)
{
	u08 err;
	
	while( !zoErrorIsEmpty(&zoCommandsError) )
    150a:	8c eb       	ldi	r24, 0xBC	; 188
    150c:	91 e0       	ldi	r25, 0x01	; 1
    150e:	0e 94 ad 00 	call	0x15a	; 0x15a <zoErrorIsEmpty>
    1512:	88 23       	and	r24, r24
    1514:	b1 f4       	brne	.+44     	; 0x1542 <zoSmsErrorHandleServiceCommandFailure+0x38>
	{
		err = zoErrorGet(&zoCommandsError);
    1516:	8c eb       	ldi	r24, 0xBC	; 188
    1518:	91 e0       	ldi	r25, 0x01	; 1
    151a:	0e 94 b5 00 	call	0x16a	; 0x16a <zoErrorGet>
    151e:	68 2f       	mov	r22, r24

		if(err <= ZO_COMMANDS_ERROR_INVALID_COMMAND)
    1520:	85 30       	cpi	r24, 0x05	; 5
    1522:	80 f0       	brcs	.+32     	; 0x1544 <zoSmsErrorHandleServiceCommandFailure+0x3a>
			zoErrorPut(&zoSmsError,err + ZO_SMS_ERROR_COMMAND_ERRORS_OFFSET);
		else
		{
			if( Sms.Settings.errorReportingLevel == 0 )
    1524:	80 91 17 01 	lds	r24, 0x0117
    1528:	88 23       	and	r24, r24
    152a:	61 f4       	brne	.+24     	; 0x1544 <zoSmsErrorHandleServiceCommandFailure+0x3a>
				zoErrorPut(&zoSmsWarning,err + ZO_SMS_ERROR_COMMAND_ERRORS_OFFSET);
    152c:	60 5f       	subi	r22, 0xF0	; 240
    152e:	89 ea       	ldi	r24, 0xA9	; 169
    1530:	91 e0       	ldi	r25, 0x01	; 1
    1532:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <zoErrorPut>

void zoSmsErrorHandleServiceCommandFailure(void)
{
	u08 err;
	
	while( !zoErrorIsEmpty(&zoCommandsError) )
    1536:	8c eb       	ldi	r24, 0xBC	; 188
    1538:	91 e0       	ldi	r25, 0x01	; 1
    153a:	0e 94 ad 00 	call	0x15a	; 0x15a <zoErrorIsEmpty>
    153e:	88 23       	and	r24, r24
    1540:	51 f3       	breq	.-44     	; 0x1516 <zoSmsErrorHandleServiceCommandFailure+0xc>
				zoErrorPut(&zoSmsWarning,err + ZO_SMS_ERROR_COMMAND_ERRORS_OFFSET);
			else
				zoErrorPut(&zoSmsError,err + ZO_SMS_ERROR_COMMAND_ERRORS_OFFSET);
		}
	}
}		
    1542:	08 95       	ret
		else
		{
			if( Sms.Settings.errorReportingLevel == 0 )
				zoErrorPut(&zoSmsWarning,err + ZO_SMS_ERROR_COMMAND_ERRORS_OFFSET);
			else
				zoErrorPut(&zoSmsError,err + ZO_SMS_ERROR_COMMAND_ERRORS_OFFSET);
    1544:	60 5f       	subi	r22, 0xF0	; 240
    1546:	8c e9       	ldi	r24, 0x9C	; 156
    1548:	91 e0       	ldi	r25, 0x01	; 1
    154a:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <zoErrorPut>
    154e:	dd cf       	rjmp	.-70     	; 0x150a <zoSmsErrorHandleServiceCommandFailure>

00001550 <zoSmsErrorHandleCommandResponseFailure>:
		}
	}
}		

void zoSmsErrorHandleCommandResponseFailure(ZO_PROTOCOL_HAL *hal,ZO_PROTOCOL_PACKET *p)
{
    1550:	ef 92       	push	r14
    1552:	ff 92       	push	r15
    1554:	1f 93       	push	r17
    1556:	cf 93       	push	r28
    1558:	df 93       	push	r29
    155a:	ec 01       	movw	r28, r24
    155c:	7b 01       	movw	r14, r22
    155e:	10 e0       	ldi	r17, 0x00	; 0
	//This is a point in code that should not be reached easily. It happens only if there 
	//is a problem transmitting a response. This can be due to arbitration loss or full Tx
	//buffers etc. Software retries 5 times to issue the response, then gives up.
	for(i=0;i<5;i++)
	{
		while(!zoErrorIsEmpty(hal->error))	
    1560:	8a 81       	ldd	r24, Y+2	; 0x02
    1562:	9b 81       	ldd	r25, Y+3	; 0x03
    1564:	0e 94 ad 00 	call	0x15a	; 0x15a <zoErrorIsEmpty>
    1568:	88 23       	and	r24, r24
    156a:	c9 f4       	brne	.+50     	; 0x159e <zoSmsErrorHandleCommandResponseFailure+0x4e>
		{
			err = zoErrorGet(hal->error);
    156c:	8a 81       	ldd	r24, Y+2	; 0x02
    156e:	9b 81       	ldd	r25, Y+3	; 0x03
    1570:	0e 94 b5 00 	call	0x16a	; 0x16a <zoErrorGet>
    1574:	68 2f       	mov	r22, r24
			
			switch(hal->hw)
    1576:	89 81       	ldd	r24, Y+1	; 0x01
    1578:	88 23       	and	r24, r24
    157a:	11 f5       	brne	.+68     	; 0x15c0 <zoSmsErrorHandleCommandResponseFailure+0x70>
			{
			case ZO_PROTOCOL_HW_I2C:
				if(err == ZO_I2C_ERROR_ARBITRATION_LOST)
    157c:	63 30       	cpi	r22, 0x03	; 3
    157e:	41 f5       	brne	.+80     	; 0x15d0 <zoSmsErrorHandleCommandResponseFailure+0x80>
				{
					if(Sms.Settings.errorReportingLevel == 0)
    1580:	80 91 17 01 	lds	r24, 0x0117
    1584:	88 23       	and	r24, r24
    1586:	51 f5       	brne	.+84     	; 0x15dc <zoSmsErrorHandleCommandResponseFailure+0x8c>
						zoErrorPut(&zoSmsWarning,err + ZO_SMS_ERROR_I2C_ERRORS_OFFSET);
    1588:	89 ea       	ldi	r24, 0xA9	; 169
    158a:	91 e0       	ldi	r25, 0x01	; 1
    158c:	63 e2       	ldi	r22, 0x23	; 35
    158e:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <zoErrorPut>
	//This is a point in code that should not be reached easily. It happens only if there 
	//is a problem transmitting a response. This can be due to arbitration loss or full Tx
	//buffers etc. Software retries 5 times to issue the response, then gives up.
	for(i=0;i<5;i++)
	{
		while(!zoErrorIsEmpty(hal->error))	
    1592:	8a 81       	ldd	r24, Y+2	; 0x02
    1594:	9b 81       	ldd	r25, Y+3	; 0x03
    1596:	0e 94 ad 00 	call	0x15a	; 0x15a <zoErrorIsEmpty>
    159a:	88 23       	and	r24, r24
    159c:	39 f3       	breq	.-50     	; 0x156c <zoSmsErrorHandleCommandResponseFailure+0x1c>
				break;
			}
		}

		//If this retry of responding is successfull stop retrying to respond
		if( zoProtocolCommandResponse(hal,p,&zoSmsError) )
    159e:	ce 01       	movw	r24, r28
    15a0:	b7 01       	movw	r22, r14
    15a2:	4c e9       	ldi	r20, 0x9C	; 156
    15a4:	51 e0       	ldi	r21, 0x01	; 1
    15a6:	0e 94 d0 01 	call	0x3a0	; 0x3a0 <zoProtocolCommandResponse>
    15aa:	88 23       	and	r24, r24
    15ac:	19 f4       	brne	.+6      	; 0x15b4 <zoSmsErrorHandleCommandResponseFailure+0x64>
	u08 i,err;

	//This is a point in code that should not be reached easily. It happens only if there 
	//is a problem transmitting a response. This can be due to arbitration loss or full Tx
	//buffers etc. Software retries 5 times to issue the response, then gives up.
	for(i=0;i<5;i++)
    15ae:	1f 5f       	subi	r17, 0xFF	; 255
    15b0:	15 30       	cpi	r17, 0x05	; 5
    15b2:	b1 f6       	brne	.-84     	; 0x1560 <zoSmsErrorHandleCommandResponseFailure+0x10>

		//If this retry of responding is successfull stop retrying to respond
		if( zoProtocolCommandResponse(hal,p,&zoSmsError) )
			return;
	}
}
    15b4:	df 91       	pop	r29
    15b6:	cf 91       	pop	r28
    15b8:	1f 91       	pop	r17
    15ba:	ff 90       	pop	r15
    15bc:	ef 90       	pop	r14
    15be:	08 95       	ret
	{
		while(!zoErrorIsEmpty(hal->error))	
		{
			err = zoErrorGet(hal->error);
			
			switch(hal->hw)
    15c0:	84 30       	cpi	r24, 0x04	; 4
    15c2:	70 f6       	brcc	.-100    	; 0x1560 <zoSmsErrorHandleCommandResponseFailure+0x10>
				break;

			case ZO_PROTOCOL_HW_RS232:
			case ZO_PROTOCOL_HW_HALF_DUPLEX_RS485:
			case ZO_PROTOCOL_HW_UART_5V:
				zoErrorPut(&zoSmsError,err + ZO_SMS_ERROR_UART_ERRORS_OFFSET);
    15c4:	60 5c       	subi	r22, 0xC0	; 192
    15c6:	8c e9       	ldi	r24, 0x9C	; 156
    15c8:	91 e0       	ldi	r25, 0x01	; 1
    15ca:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <zoErrorPut>
    15ce:	c8 cf       	rjmp	.-112    	; 0x1560 <zoSmsErrorHandleCommandResponseFailure+0x10>
						zoErrorPut(&zoSmsWarning,err + ZO_SMS_ERROR_I2C_ERRORS_OFFSET);
					else
						zoErrorPut(&zoSmsError,err + ZO_SMS_ERROR_I2C_ERRORS_OFFSET);
				}
				else
					zoErrorPut(&zoSmsError,err + ZO_SMS_ERROR_I2C_ERRORS_OFFSET);
    15d0:	60 5e       	subi	r22, 0xE0	; 224
    15d2:	8c e9       	ldi	r24, 0x9C	; 156
    15d4:	91 e0       	ldi	r25, 0x01	; 1
    15d6:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <zoErrorPut>
    15da:	c2 cf       	rjmp	.-124    	; 0x1560 <zoSmsErrorHandleCommandResponseFailure+0x10>
				if(err == ZO_I2C_ERROR_ARBITRATION_LOST)
				{
					if(Sms.Settings.errorReportingLevel == 0)
						zoErrorPut(&zoSmsWarning,err + ZO_SMS_ERROR_I2C_ERRORS_OFFSET);
					else
						zoErrorPut(&zoSmsError,err + ZO_SMS_ERROR_I2C_ERRORS_OFFSET);
    15dc:	8c e9       	ldi	r24, 0x9C	; 156
    15de:	91 e0       	ldi	r25, 0x01	; 1
    15e0:	63 e2       	ldi	r22, 0x23	; 35
    15e2:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <zoErrorPut>
    15e6:	bc cf       	rjmp	.-136    	; 0x1560 <zoSmsErrorHandleCommandResponseFailure+0x10>

000015e8 <zoSmsErrorHandleParseFailure>:
		}
	}
}

void zoSmsErrorHandleParseFailure(ZO_PROTOCOL_HAL *hal,ZO_PROTOCOL_PACKET *p)
{
    15e8:	ef 92       	push	r14
    15ea:	ff 92       	push	r15
    15ec:	0f 93       	push	r16
    15ee:	1f 93       	push	r17
    15f0:	cf 93       	push	r28
    15f2:	df 93       	push	r29
    15f4:	ec 01       	movw	r28, r24
    15f6:	7b 01       	movw	r14, r22
    15f8:	00 e0       	ldi	r16, 0x00	; 0
	u08 err;
	bool issueCommandResponseNow = FALSE;
	
	while( !zoErrorIsEmpty(hal->error) )
    15fa:	8a 81       	ldd	r24, Y+2	; 0x02
    15fc:	9b 81       	ldd	r25, Y+3	; 0x03
    15fe:	0e 94 ad 00 	call	0x15a	; 0x15a <zoErrorIsEmpty>
    1602:	88 23       	and	r24, r24
    1604:	d9 f4       	brne	.+54     	; 0x163c <zoSmsErrorHandleParseFailure+0x54>
	{
		err = zoErrorGet(hal->error);
    1606:	8a 81       	ldd	r24, Y+2	; 0x02
    1608:	9b 81       	ldd	r25, Y+3	; 0x03
    160a:	0e 94 b5 00 	call	0x16a	; 0x16a <zoErrorGet>
    160e:	18 2f       	mov	r17, r24

		if(err > ZO_PROTOCOL_ERROR_NONE)			//process protocol errors first
    1610:	81 32       	cpi	r24, 0x21	; 33
    1612:	60 f5       	brcc	.+88     	; 0x166c <zoSmsErrorHandleParseFailure+0x84>
			if(err == ZO_PROTOCOL_ERROR_WRONG_LRC)  //if it was wrong lrc issue response
				issueCommandResponseNow = TRUE;		//immediately
		}
		else
		{
			switch(hal->hw)
    1614:	89 81       	ldd	r24, Y+1	; 0x01
    1616:	88 23       	and	r24, r24
    1618:	01 f5       	brne	.+64     	; 0x165a <zoSmsErrorHandleParseFailure+0x72>
			{
			case ZO_PROTOCOL_HW_I2C:
				zoErrorPut(&zoSmsError,err + ZO_SMS_ERROR_I2C_ERRORS_OFFSET);
    161a:	61 2f       	mov	r22, r17
    161c:	60 5e       	subi	r22, 0xE0	; 224
    161e:	8c e9       	ldi	r24, 0x9C	; 156
    1620:	91 e0       	ldi	r25, 0x01	; 1
    1622:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <zoErrorPut>
				if(err == ZO_PROTOCOL_I2C_ERROR_RX_PACKET_OVERWRITTEN)
    1626:	11 31       	cpi	r17, 0x11	; 17
    1628:	11 f0       	breq	.+4      	; 0x162e <zoSmsErrorHandleParseFailure+0x46>
					issueCommandResponseNow = TRUE;
				if(err == ZO_PROTOCOL_I2C_ERROR_INVALID_RX_BYTECOUNT)
    162a:	12 31       	cpi	r17, 0x12	; 18
    162c:	31 f7       	brne	.-52     	; 0x15fa <zoSmsErrorHandleParseFailure+0x12>
				break;

			case ZO_PROTOCOL_HW_RS232:
			case ZO_PROTOCOL_HW_HALF_DUPLEX_RS485:
			case ZO_PROTOCOL_HW_UART_5V:
				zoErrorPut(&zoSmsError,err + ZO_SMS_ERROR_UART_ERRORS_OFFSET);
    162e:	0f ef       	ldi	r16, 0xFF	; 255
void zoSmsErrorHandleParseFailure(ZO_PROTOCOL_HAL *hal,ZO_PROTOCOL_PACKET *p)
{
	u08 err;
	bool issueCommandResponseNow = FALSE;
	
	while( !zoErrorIsEmpty(hal->error) )
    1630:	8a 81       	ldd	r24, Y+2	; 0x02
    1632:	9b 81       	ldd	r25, Y+3	; 0x03
    1634:	0e 94 ad 00 	call	0x15a	; 0x15a <zoErrorIsEmpty>
    1638:	88 23       	and	r24, r24
    163a:	29 f3       	breq	.-54     	; 0x1606 <zoSmsErrorHandleParseFailure+0x1e>
				break;
			}
		}
	}

	if (issueCommandResponseNow)
    163c:	00 23       	and	r16, r16
    163e:	31 f0       	breq	.+12     	; 0x164c <zoSmsErrorHandleParseFailure+0x64>
		zoProtocolCommandResponse(hal,p,&zoSmsError);
    1640:	ce 01       	movw	r24, r28
    1642:	b7 01       	movw	r22, r14
    1644:	4c e9       	ldi	r20, 0x9C	; 156
    1646:	51 e0       	ldi	r21, 0x01	; 1
    1648:	0e 94 d0 01 	call	0x3a0	; 0x3a0 <zoProtocolCommandResponse>
}
    164c:	df 91       	pop	r29
    164e:	cf 91       	pop	r28
    1650:	1f 91       	pop	r17
    1652:	0f 91       	pop	r16
    1654:	ff 90       	pop	r15
    1656:	ef 90       	pop	r14
    1658:	08 95       	ret
			if(err == ZO_PROTOCOL_ERROR_WRONG_LRC)  //if it was wrong lrc issue response
				issueCommandResponseNow = TRUE;		//immediately
		}
		else
		{
			switch(hal->hw)
    165a:	84 30       	cpi	r24, 0x04	; 4
    165c:	70 f6       	brcc	.-100    	; 0x15fa <zoSmsErrorHandleParseFailure+0x12>
				break;

			case ZO_PROTOCOL_HW_RS232:
			case ZO_PROTOCOL_HW_HALF_DUPLEX_RS485:
			case ZO_PROTOCOL_HW_UART_5V:
				zoErrorPut(&zoSmsError,err + ZO_SMS_ERROR_UART_ERRORS_OFFSET);
    165e:	10 5c       	subi	r17, 0xC0	; 192
    1660:	8c e9       	ldi	r24, 0x9C	; 156
    1662:	91 e0       	ldi	r25, 0x01	; 1
    1664:	61 2f       	mov	r22, r17
    1666:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <zoErrorPut>
    166a:	c7 cf       	rjmp	.-114    	; 0x15fa <zoSmsErrorHandleParseFailure+0x12>
	{
		err = zoErrorGet(hal->error);

		if(err > ZO_PROTOCOL_ERROR_NONE)			//process protocol errors first
		{
			zoErrorPut(&zoSmsError,err + ZO_SMS_ERROR_PROTOCOL_ERRORS_OFFSET);
    166c:	68 2f       	mov	r22, r24
    166e:	60 5d       	subi	r22, 0xD0	; 208
    1670:	8c e9       	ldi	r24, 0x9C	; 156
    1672:	91 e0       	ldi	r25, 0x01	; 1
    1674:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <zoErrorPut>
						
			if(err == ZO_PROTOCOL_ERROR_WRONG_LRC)  //if it was wrong lrc issue response
    1678:	12 32       	cpi	r17, 0x22	; 34
    167a:	09 f0       	breq	.+2      	; 0x167e <zoSmsErrorHandleParseFailure+0x96>
    167c:	be cf       	rjmp	.-132    	; 0x15fa <zoSmsErrorHandleParseFailure+0x12>
				break;

			case ZO_PROTOCOL_HW_RS232:
			case ZO_PROTOCOL_HW_HALF_DUPLEX_RS485:
			case ZO_PROTOCOL_HW_UART_5V:
				zoErrorPut(&zoSmsError,err + ZO_SMS_ERROR_UART_ERRORS_OFFSET);
    167e:	0f ef       	ldi	r16, 0xFF	; 255
    1680:	d7 cf       	rjmp	.-82     	; 0x1630 <zoSmsErrorHandleParseFailure+0x48>

00001682 <zoSmsErrorPoll>:
	//dummy packet pointer to enable calling of command functions
	//attention: only commands of bytecount = 0  can be called
	ZO_PROTOCOL_PACKET *dummy = 0;
	ZO_SMS_CONTROL_STATE state;
	
	enterCritical();
    1682:	0f b6       	in	r0, 0x3f	; 63
    1684:	0f 92       	push	r0
    1686:	f8 94       	cli
	state = Sms.Control.State;
	exitCritical();
    1688:	0f 90       	pop	r0
    168a:	0f be       	out	0x3f, r0	; 63

	//these errors can occur only when the controller is initialized
	//no point of checking them when it is not
	if( state != ZO_SMS_CONTROL_NO_CONTROL )
    168c:	80 91 03 01 	lds	r24, 0x0103
    1690:	88 23       	and	r24, r24
    1692:	09 f4       	brne	.+2      	; 0x1696 <zoSmsErrorPoll+0x14>
    1694:	08 95       	ret
	{
		//these are very serious error conditions: motor is stopped if they are encountered
		if( zoSmsMotorStalled() )
    1696:	0e 94 0b 0a 	call	0x1416	; 0x1416 <zoSmsMotorStalled>
    169a:	88 23       	and	r24, r24
    169c:	e1 f4       	brne	.+56     	; 0x16d6 <zoSmsErrorPoll+0x54>
		{
			zoCommandStop(dummy);
			zoErrorPut(&zoSmsError,ZO_SMS_ERROR_MOTOR_STALLED);
		}

		if( zoEncoderPollOverFlowError() )
    169e:	0e 94 b9 03 	call	0x772	; 0x772 <zoEncoderPollOverFlowError>
    16a2:	88 23       	and	r24, r24
    16a4:	71 f4       	brne	.+28     	; 0x16c2 <zoSmsErrorPoll+0x40>
		{
			zoCommandStop(dummy);
			zoErrorPut(&zoSmsError,ZO_SMS_ERROR_ENCODER_OVERFLOW);
		}

		if( zoEncoderPollUnderFlowError() )
    16a6:	0e 94 cf 03 	call	0x79e	; 0x79e <zoEncoderPollUnderFlowError>
    16aa:	88 23       	and	r24, r24
    16ac:	99 f3       	breq	.-26     	; 0x1694 <zoSmsErrorPoll+0x12>
		{
			zoCommandStop(dummy);
    16ae:	80 e0       	ldi	r24, 0x00	; 0
    16b0:	90 e0       	ldi	r25, 0x00	; 0
    16b2:	0e 94 3d 13 	call	0x267a	; 0x267a <zoCommandStop>
			zoErrorPut(&zoSmsError,ZO_SMS_ERROR_ENCODER_UNDERFLOW);
    16b6:	8c e9       	ldi	r24, 0x9C	; 156
    16b8:	91 e0       	ldi	r25, 0x01	; 1
    16ba:	63 e0       	ldi	r22, 0x03	; 3
    16bc:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <zoErrorPut>
    16c0:	08 95       	ret
			zoErrorPut(&zoSmsError,ZO_SMS_ERROR_MOTOR_STALLED);
		}

		if( zoEncoderPollOverFlowError() )
		{
			zoCommandStop(dummy);
    16c2:	80 e0       	ldi	r24, 0x00	; 0
    16c4:	90 e0       	ldi	r25, 0x00	; 0
    16c6:	0e 94 3d 13 	call	0x267a	; 0x267a <zoCommandStop>
			zoErrorPut(&zoSmsError,ZO_SMS_ERROR_ENCODER_OVERFLOW);
    16ca:	8c e9       	ldi	r24, 0x9C	; 156
    16cc:	91 e0       	ldi	r25, 0x01	; 1
    16ce:	62 e0       	ldi	r22, 0x02	; 2
    16d0:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <zoErrorPut>
    16d4:	e8 cf       	rjmp	.-48     	; 0x16a6 <zoSmsErrorPoll+0x24>
	if( state != ZO_SMS_CONTROL_NO_CONTROL )
	{
		//these are very serious error conditions: motor is stopped if they are encountered
		if( zoSmsMotorStalled() )
		{
			zoCommandStop(dummy);
    16d6:	80 e0       	ldi	r24, 0x00	; 0
    16d8:	90 e0       	ldi	r25, 0x00	; 0
    16da:	0e 94 3d 13 	call	0x267a	; 0x267a <zoCommandStop>
			zoErrorPut(&zoSmsError,ZO_SMS_ERROR_MOTOR_STALLED);
    16de:	8c e9       	ldi	r24, 0x9C	; 156
    16e0:	91 e0       	ldi	r25, 0x01	; 1
    16e2:	61 e0       	ldi	r22, 0x01	; 1
    16e4:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <zoErrorPut>
    16e8:	da cf       	rjmp	.-76     	; 0x169e <zoSmsErrorPoll+0x1c>

000016ea <zoSmsErrorInit>:
static u16 StalledTimeOutTimer;

void zoSmsErrorInit(void)
{
	//initialize error buffers
	zoErrorInit(&zoSmsError);
    16ea:	8c e9       	ldi	r24, 0x9C	; 156
    16ec:	91 e0       	ldi	r25, 0x01	; 1
    16ee:	0e 94 53 00 	call	0xa6	; 0xa6 <zoErrorInit>
	zoErrorInit(&zoSmsWarning);
    16f2:	89 ea       	ldi	r24, 0xA9	; 169
    16f4:	91 e0       	ldi	r25, 0x01	; 1
    16f6:	0e 94 53 00 	call	0xa6	; 0xa6 <zoErrorInit>

	//Initialize the system timer
	zoSystemTimerInit();
    16fa:	0e 94 10 01 	call	0x220	; 0x220 <zoSystemTimerInit>
	//initialize the timeout for the motor stall regognition function
	zoSystemTimerTimeOutInit(&StalledTimeOutTimer);
    16fe:	8a eb       	ldi	r24, 0xBA	; 186
    1700:	91 e0       	ldi	r25, 0x01	; 1
    1702:	0e 94 42 01 	call	0x284	; 0x284 <zoSystemTimerTimeOutInit>
}
    1706:	08 95       	ret

00001708 <zoCommandAbsolutePositionMove>:

inline s32 strToS32(u08* str)
{
	S32 *num;
	num = (S32*)str;
	return num->all;
    1708:	fc 01       	movw	r30, r24
    170a:	84 81       	ldd	r24, Z+4	; 0x04
    170c:	95 81       	ldd	r25, Z+5	; 0x05
    170e:	a6 81       	ldd	r26, Z+6	; 0x06
    1710:	b7 81       	ldd	r27, Z+7	; 0x07
/*08*/	void zoCommandAbsolutePositionMove(ZO_PROTOCOL_PACKET *packet)
{
	s32 pos;
	pos = strToS32(packet->data);

	enterCritical();
    1712:	0f b6       	in	r0, 0x3f	; 63
    1714:	0f 92       	push	r0
    1716:	f8 94       	cli
	Sms.Control.State = ZO_SMS_CONTROL_POSITION_CONTROL;
    1718:	21 e0       	ldi	r18, 0x01	; 1
    171a:	20 93 03 01 	sts	0x0103, r18
	Sms.Pid.SetPoint = pos;
    171e:	80 93 57 01 	sts	0x0157, r24
    1722:	90 93 58 01 	sts	0x0158, r25
    1726:	a0 93 59 01 	sts	0x0159, r26
    172a:	b0 93 5a 01 	sts	0x015A, r27
	exitCritical();
    172e:	0f 90       	pop	r0
    1730:	0f be       	out	0x3f, r0	; 63
}
    1732:	08 95       	ret

00001734 <zoCommandRelativePositionMove>:
    1734:	fc 01       	movw	r30, r24
    1736:	84 81       	ldd	r24, Z+4	; 0x04
    1738:	95 81       	ldd	r25, Z+5	; 0x05
    173a:	a6 81       	ldd	r26, Z+6	; 0x06
    173c:	b7 81       	ldd	r27, Z+7	; 0x07
{
	s32 pos;

	pos = strToS32(packet->data);

	enterCritical();
    173e:	0f b6       	in	r0, 0x3f	; 63
    1740:	0f 92       	push	r0
    1742:	f8 94       	cli
	Sms.Control.State = ZO_SMS_CONTROL_POSITION_CONTROL;
    1744:	21 e0       	ldi	r18, 0x01	; 1
    1746:	20 93 03 01 	sts	0x0103, r18
	Sms.Pid.SetPoint += pos;
    174a:	20 91 57 01 	lds	r18, 0x0157
    174e:	30 91 58 01 	lds	r19, 0x0158
    1752:	40 91 59 01 	lds	r20, 0x0159
    1756:	50 91 5a 01 	lds	r21, 0x015A
    175a:	82 0f       	add	r24, r18
    175c:	93 1f       	adc	r25, r19
    175e:	a4 1f       	adc	r26, r20
    1760:	b5 1f       	adc	r27, r21
    1762:	80 93 57 01 	sts	0x0157, r24
    1766:	90 93 58 01 	sts	0x0158, r25
    176a:	a0 93 59 01 	sts	0x0159, r26
    176e:	b0 93 5a 01 	sts	0x015A, r27
	exitCritical();
    1772:	0f 90       	pop	r0
    1774:	0f be       	out	0x3f, r0	; 63
}
    1776:	08 95       	ret

00001778 <zoCommandSetVelocitySetpoint>:
    1778:	fc 01       	movw	r30, r24
    177a:	84 81       	ldd	r24, Z+4	; 0x04
    177c:	95 81       	ldd	r25, Z+5	; 0x05
    177e:	a6 81       	ldd	r26, Z+6	; 0x06
    1780:	b7 81       	ldd	r27, Z+7	; 0x07
{
	s32 vel;

	vel = strToS32(packet->data);

	enterCritical();
    1782:	0f b6       	in	r0, 0x3f	; 63
    1784:	0f 92       	push	r0
    1786:	f8 94       	cli
	Sms.BufferdSetPoint.type = ZO_SMS_SETPOINT_VELOCITY;
    1788:	21 e0       	ldi	r18, 0x01	; 1
    178a:	20 93 61 01 	sts	0x0161, r18
	Sms.BufferdSetPoint.value = vel;
    178e:	80 93 62 01 	sts	0x0162, r24
    1792:	90 93 63 01 	sts	0x0163, r25
    1796:	a0 93 64 01 	sts	0x0164, r26
    179a:	b0 93 65 01 	sts	0x0165, r27
	exitCritical();
    179e:	0f 90       	pop	r0
    17a0:	0f be       	out	0x3f, r0	; 63
}
    17a2:	08 95       	ret

000017a4 <zoCommandSetAbsolutePositionSetpoint>:
    17a4:	fc 01       	movw	r30, r24
    17a6:	84 81       	ldd	r24, Z+4	; 0x04
    17a8:	95 81       	ldd	r25, Z+5	; 0x05
    17aa:	a6 81       	ldd	r26, Z+6	; 0x06
    17ac:	b7 81       	ldd	r27, Z+7	; 0x07
{
	s32 pos;

	pos = strToS32(packet->data);

	enterCritical();
    17ae:	0f b6       	in	r0, 0x3f	; 63
    17b0:	0f 92       	push	r0
    17b2:	f8 94       	cli
	Sms.BufferdSetPoint.type = ZO_SMS_SETPOINT_ABSOLUTE_POSITION;
    17b4:	22 e0       	ldi	r18, 0x02	; 2
    17b6:	20 93 61 01 	sts	0x0161, r18
	Sms.BufferdSetPoint.value = pos;
    17ba:	80 93 62 01 	sts	0x0162, r24
    17be:	90 93 63 01 	sts	0x0163, r25
    17c2:	a0 93 64 01 	sts	0x0164, r26
    17c6:	b0 93 65 01 	sts	0x0165, r27
	exitCritical();
    17ca:	0f 90       	pop	r0
    17cc:	0f be       	out	0x3f, r0	; 63
}
    17ce:	08 95       	ret

000017d0 <zoCommandSetRelativePositionSetpoint>:
    17d0:	fc 01       	movw	r30, r24
    17d2:	84 81       	ldd	r24, Z+4	; 0x04
    17d4:	95 81       	ldd	r25, Z+5	; 0x05
    17d6:	a6 81       	ldd	r26, Z+6	; 0x06
    17d8:	b7 81       	ldd	r27, Z+7	; 0x07
{
	s32 pos;

	pos = strToS32(packet->data);

	enterCritical();
    17da:	0f b6       	in	r0, 0x3f	; 63
    17dc:	0f 92       	push	r0
    17de:	f8 94       	cli
	Sms.BufferdSetPoint.type = ZO_SMS_SETPOINT_RELATIVE_POSITION;
    17e0:	23 e0       	ldi	r18, 0x03	; 3
    17e2:	20 93 61 01 	sts	0x0161, r18
	Sms.BufferdSetPoint.value = pos;
    17e6:	80 93 62 01 	sts	0x0162, r24
    17ea:	90 93 63 01 	sts	0x0163, r25
    17ee:	a0 93 64 01 	sts	0x0164, r26
    17f2:	b0 93 65 01 	sts	0x0165, r27
	exitCritical();
    17f6:	0f 90       	pop	r0
    17f8:	0f be       	out	0x3f, r0	; 63
}
    17fa:	08 95       	ret

000017fc <zoCommandSetProfiledVelocitySetpoint>:
    17fc:	fc 01       	movw	r30, r24
    17fe:	84 81       	ldd	r24, Z+4	; 0x04
    1800:	95 81       	ldd	r25, Z+5	; 0x05
    1802:	a6 81       	ldd	r26, Z+6	; 0x06
    1804:	b7 81       	ldd	r27, Z+7	; 0x07
{
	s32 vel;

	vel = strToS32(packet->data);

	enterCritical();
    1806:	0f b6       	in	r0, 0x3f	; 63
    1808:	0f 92       	push	r0
    180a:	f8 94       	cli
	Sms.BufferdSetPoint.type = ZO_SMS_SETPOINT_PROFILED_VELOCITY;
    180c:	24 e0       	ldi	r18, 0x04	; 4
    180e:	20 93 61 01 	sts	0x0161, r18
	Sms.BufferdSetPoint.value = vel;
    1812:	80 93 62 01 	sts	0x0162, r24
    1816:	90 93 63 01 	sts	0x0163, r25
    181a:	a0 93 64 01 	sts	0x0164, r26
    181e:	b0 93 65 01 	sts	0x0165, r27
	exitCritical();
    1822:	0f 90       	pop	r0
    1824:	0f be       	out	0x3f, r0	; 63
}
    1826:	08 95       	ret

00001828 <zoCommandSetProfiledAbsolutePositionSetpoint>:
    1828:	fc 01       	movw	r30, r24
    182a:	84 81       	ldd	r24, Z+4	; 0x04
    182c:	95 81       	ldd	r25, Z+5	; 0x05
    182e:	a6 81       	ldd	r26, Z+6	; 0x06
    1830:	b7 81       	ldd	r27, Z+7	; 0x07
{
	s32 pos;

	pos = strToS32(packet->data);

	enterCritical();
    1832:	0f b6       	in	r0, 0x3f	; 63
    1834:	0f 92       	push	r0
    1836:	f8 94       	cli
	Sms.BufferdSetPoint.type = ZO_SMS_SETPOINT_PROFILED_ABSOLUTE_POSITION;
    1838:	25 e0       	ldi	r18, 0x05	; 5
    183a:	20 93 61 01 	sts	0x0161, r18
	Sms.BufferdSetPoint.value = pos;
    183e:	80 93 62 01 	sts	0x0162, r24
    1842:	90 93 63 01 	sts	0x0163, r25
    1846:	a0 93 64 01 	sts	0x0164, r26
    184a:	b0 93 65 01 	sts	0x0165, r27
	exitCritical();
    184e:	0f 90       	pop	r0
    1850:	0f be       	out	0x3f, r0	; 63
}
    1852:	08 95       	ret

00001854 <zoCommandSetProfiledRelativePositionSetpoint>:
    1854:	fc 01       	movw	r30, r24
    1856:	84 81       	ldd	r24, Z+4	; 0x04
    1858:	95 81       	ldd	r25, Z+5	; 0x05
    185a:	a6 81       	ldd	r26, Z+6	; 0x06
    185c:	b7 81       	ldd	r27, Z+7	; 0x07
{
	s32 pos;

	pos = strToS32(packet->data);

	enterCritical();
    185e:	0f b6       	in	r0, 0x3f	; 63
    1860:	0f 92       	push	r0
    1862:	f8 94       	cli
	Sms.BufferdSetPoint.type = ZO_SMS_SETPOINT_PROFILED_RELATIVE_POSITION;
    1864:	26 e0       	ldi	r18, 0x06	; 6
    1866:	20 93 61 01 	sts	0x0161, r18
	Sms.BufferdSetPoint.value = pos;
    186a:	80 93 62 01 	sts	0x0162, r24
    186e:	90 93 63 01 	sts	0x0163, r25
    1872:	a0 93 64 01 	sts	0x0164, r26
    1876:	b0 93 65 01 	sts	0x0165, r27
	exitCritical();
    187a:	0f 90       	pop	r0
    187c:	0f be       	out	0x3f, r0	; 63
}
    187e:	08 95       	ret

00001880 <zoCommandSetDigitalOut>:
	Sms.Settings.DigitalIoConfig = dir & 0x0F;
	exitCritical();
}

/*14*/	void zoCommandSetDigitalOut(ZO_PROTOCOL_PACKET *packet)
{
    1880:	fc 01       	movw	r30, r24
	u08 out;

	enterCritical();
    1882:	0f b6       	in	r0, 0x3f	; 63
    1884:	0f 92       	push	r0
    1886:	f8 94       	cli
	//if a pin is input leave respective bit zero
	out = packet->data[0] & Sms.Settings.DigitalIoConfig;
	//set digital out 1:if it is input leave it as it is (pull up enabled)
	PORTD = (PORTD & (~0x80)) | ( (out<<7) & 0x80 );
    1888:	4b b1       	in	r20, 0x0b	; 11
    188a:	80 91 09 01 	lds	r24, 0x0109
    188e:	24 81       	ldd	r18, Z+4	; 0x04
    1890:	82 23       	and	r24, r18
    1892:	90 e0       	ldi	r25, 0x00	; 0
    1894:	9c 01       	movw	r18, r24
    1896:	36 95       	lsr	r19
    1898:	32 2f       	mov	r19, r18
    189a:	22 27       	eor	r18, r18
    189c:	37 95       	ror	r19
    189e:	27 95       	ror	r18
    18a0:	4f 77       	andi	r20, 0x7F	; 127
    18a2:	42 2b       	or	r20, r18
    18a4:	4b b9       	out	0x0b, r20	; 11
	//set digital IO 2,3,4 direction -> portB3,4,5 respectively
	PORTB = (PORTB & (~0x38)) | ( (out<<3) & 0x38 );
    18a6:	25 b1       	in	r18, 0x05	; 5
    18a8:	88 0f       	add	r24, r24
    18aa:	99 1f       	adc	r25, r25
    18ac:	88 0f       	add	r24, r24
    18ae:	99 1f       	adc	r25, r25
    18b0:	88 0f       	add	r24, r24
    18b2:	99 1f       	adc	r25, r25
    18b4:	88 73       	andi	r24, 0x38	; 56
    18b6:	27 7c       	andi	r18, 0xC7	; 199
    18b8:	82 2b       	or	r24, r18
    18ba:	85 b9       	out	0x05, r24	; 5
	exitCritical();
    18bc:	0f 90       	pop	r0
    18be:	0f be       	out	0x3f, r0	; 63
}
    18c0:	08 95       	ret

000018c2 <zoCommandGetGainP>:
	Sms.Settings.errorReportingLevel = packet->data[0];
	exitCritical();	
}

/*64*/	void zoCommandGetGainP(ZO_PROTOCOL_PACKET *packet)
{
    18c2:	fc 01       	movw	r30, r24
	packet->byteCount = 2;
    18c4:	82 e0       	ldi	r24, 0x02	; 2
    18c6:	83 83       	std	Z+3, r24	; 0x03
	
	enterCritical();
    18c8:	0f b6       	in	r0, 0x3f	; 63
    18ca:	0f 92       	push	r0
    18cc:	f8 94       	cli

inline void u16ToStr(u16 data, u08* str)
{
	U16* num;
	num = (U16*)str;
	num->all = data;
    18ce:	80 91 41 01 	lds	r24, 0x0141
    18d2:	90 91 42 01 	lds	r25, 0x0142
    18d6:	95 83       	std	Z+5, r25	; 0x05
    18d8:	84 83       	std	Z+4, r24	; 0x04
	u16ToStr(Sms.Pid.GainP,packet->data);
	exitCritical();
    18da:	0f 90       	pop	r0
    18dc:	0f be       	out	0x3f, r0	; 63
}
    18de:	08 95       	ret

000018e0 <zoCommandGetGainI>:

/*65*/	void zoCommandGetGainI(ZO_PROTOCOL_PACKET *packet)
{
    18e0:	fc 01       	movw	r30, r24
	packet->byteCount = 2;
    18e2:	82 e0       	ldi	r24, 0x02	; 2
    18e4:	83 83       	std	Z+3, r24	; 0x03

	enterCritical();
    18e6:	0f b6       	in	r0, 0x3f	; 63
    18e8:	0f 92       	push	r0
    18ea:	f8 94       	cli
    18ec:	80 91 43 01 	lds	r24, 0x0143
    18f0:	90 91 44 01 	lds	r25, 0x0144
    18f4:	95 83       	std	Z+5, r25	; 0x05
    18f6:	84 83       	std	Z+4, r24	; 0x04
	u16ToStr(Sms.Pid.GainI,packet->data);
	exitCritical();
    18f8:	0f 90       	pop	r0
    18fa:	0f be       	out	0x3f, r0	; 63
}
    18fc:	08 95       	ret

000018fe <zoCommandGetGainD>:
/*66*/	void zoCommandGetGainD(ZO_PROTOCOL_PACKET *packet)
{
    18fe:	fc 01       	movw	r30, r24
	packet->byteCount = 2;
    1900:	82 e0       	ldi	r24, 0x02	; 2
    1902:	83 83       	std	Z+3, r24	; 0x03

	enterCritical();
    1904:	0f b6       	in	r0, 0x3f	; 63
    1906:	0f 92       	push	r0
    1908:	f8 94       	cli
    190a:	80 91 45 01 	lds	r24, 0x0145
    190e:	90 91 46 01 	lds	r25, 0x0146
    1912:	95 83       	std	Z+5, r25	; 0x05
    1914:	84 83       	std	Z+4, r24	; 0x04
	u16ToStr(Sms.Pid.GainD,packet->data);
	exitCritical();
    1916:	0f 90       	pop	r0
    1918:	0f be       	out	0x3f, r0	; 63
}
    191a:	08 95       	ret

0000191c <zoCommandGetProfileAcceleration>:

/*67*/	void zoCommandGetProfileAcceleration(ZO_PROTOCOL_PACKET *packet)
{
    191c:	fc 01       	movw	r30, r24
	packet->byteCount = 4;
    191e:	84 e0       	ldi	r24, 0x04	; 4
    1920:	83 83       	std	Z+3, r24	; 0x03

	enterCritical();
    1922:	0f b6       	in	r0, 0x3f	; 63
    1924:	0f 92       	push	r0
    1926:	f8 94       	cli

inline void u32ToStr(u32 data, u08* str)
{
	U32* num;
	num = (U32*)str;
	num->all = data;
    1928:	80 91 38 01 	lds	r24, 0x0138
    192c:	90 91 39 01 	lds	r25, 0x0139
    1930:	a0 91 3a 01 	lds	r26, 0x013A
    1934:	b0 91 3b 01 	lds	r27, 0x013B
    1938:	84 83       	std	Z+4, r24	; 0x04
    193a:	95 83       	std	Z+5, r25	; 0x05
    193c:	a6 83       	std	Z+6, r26	; 0x06
    193e:	b7 83       	std	Z+7, r27	; 0x07
	u32ToStr(Sms.Profile.DesiredAcceleration,packet->data);
	exitCritical();
    1940:	0f 90       	pop	r0
    1942:	0f be       	out	0x3f, r0	; 63
}
    1944:	08 95       	ret

00001946 <zoCommandGetProfileVelocity>:

/*68*/	void zoCommandGetProfileVelocity(ZO_PROTOCOL_PACKET *packet)
{
    1946:	fc 01       	movw	r30, r24
	packet->byteCount = 4;
    1948:	84 e0       	ldi	r24, 0x04	; 4
    194a:	83 83       	std	Z+3, r24	; 0x03
	
	enterCritical();
    194c:	0f b6       	in	r0, 0x3f	; 63
    194e:	0f 92       	push	r0
    1950:	f8 94       	cli
    1952:	80 91 3c 01 	lds	r24, 0x013C
    1956:	90 91 3d 01 	lds	r25, 0x013D
    195a:	a0 91 3e 01 	lds	r26, 0x013E
    195e:	b0 91 3f 01 	lds	r27, 0x013F
    1962:	84 83       	std	Z+4, r24	; 0x04
    1964:	95 83       	std	Z+5, r25	; 0x05
    1966:	a6 83       	std	Z+6, r26	; 0x06
    1968:	b7 83       	std	Z+7, r27	; 0x07
	u32ToStr(Sms.Profile.DesiredVelocity,packet->data);
	exitCritical();
    196a:	0f 90       	pop	r0
    196c:	0f be       	out	0x3f, r0	; 63
}
    196e:	08 95       	ret

00001970 <zoCommandGetCurrentLimit>:

/*69*/	void zoCommandGetCurrentLimit(ZO_PROTOCOL_PACKET *packet)
{
    1970:	fc 01       	movw	r30, r24
	packet->byteCount = 2;
    1972:	82 e0       	ldi	r24, 0x02	; 2
    1974:	83 83       	std	Z+3, r24	; 0x03
	
	enterCritical();
    1976:	0f b6       	in	r0, 0x3f	; 63
    1978:	0f 92       	push	r0
    197a:	f8 94       	cli

inline void u16ToStr(u16 data, u08* str)
{
	U16* num;
	num = (U16*)str;
	num->all = data;
    197c:	80 91 0a 01 	lds	r24, 0x010A
    1980:	90 91 0b 01 	lds	r25, 0x010B
    1984:	95 83       	std	Z+5, r25	; 0x05
    1986:	84 83       	std	Z+4, r24	; 0x04
	u16ToStr(Sms.Settings.CurrentLimit,packet->data);
	exitCritical();
    1988:	0f 90       	pop	r0
    198a:	0f be       	out	0x3f, r0	; 63
}
    198c:	08 95       	ret

0000198e <zoCommandGetCurrentLimitDuration>:

/*6A*/	void zoCommandGetCurrentLimitDuration(ZO_PROTOCOL_PACKET *packet)
{
    198e:	fc 01       	movw	r30, r24
	packet->byteCount = 2;
    1990:	82 e0       	ldi	r24, 0x02	; 2
    1992:	83 83       	std	Z+3, r24	; 0x03
	
	enterCritical();
    1994:	0f b6       	in	r0, 0x3f	; 63
    1996:	0f 92       	push	r0
    1998:	f8 94       	cli
    199a:	80 91 0c 01 	lds	r24, 0x010C
    199e:	90 91 0d 01 	lds	r25, 0x010D
    19a2:	95 83       	std	Z+5, r25	; 0x05
    19a4:	84 83       	std	Z+4, r24	; 0x04
	u16ToStr(Sms.Settings.CurrentLimitDuration,packet->data);
	exitCritical();
    19a6:	0f 90       	pop	r0
    19a8:	0f be       	out	0x3f, r0	; 63
}
    19aa:	08 95       	ret

000019ac <zoCommandGetDigitalIoConfiguration>:
/*6B*/	void zoCommandGetDigitalIoConfiguration(ZO_PROTOCOL_PACKET *packet)
{
    19ac:	fc 01       	movw	r30, r24
	packet->byteCount = 1;
    19ae:	81 e0       	ldi	r24, 0x01	; 1
    19b0:	83 83       	std	Z+3, r24	; 0x03
	packet->data[0] = Sms.Settings.DigitalIoConfig;
    19b2:	80 91 09 01 	lds	r24, 0x0109
    19b6:	84 83       	std	Z+4, r24	; 0x04
}
    19b8:	08 95       	ret

000019ba <zoCommandGetLocalAcceptanceMask>:
/*6C*/	void zoCommandGetLocalAcceptanceMask(ZO_PROTOCOL_PACKET *packet)
{
    19ba:	fc 01       	movw	r30, r24
	packet->byteCount = 1;
    19bc:	81 e0       	ldi	r24, 0x01	; 1
    19be:	83 83       	std	Z+3, r24	; 0x03
	packet->data[0]	= Sms.Settings.localAcceptanceMask;
    19c0:	80 91 16 01 	lds	r24, 0x0116
    19c4:	84 83       	std	Z+4, r24	; 0x04
}
    19c6:	08 95       	ret

000019c8 <zoCommandGetDigitalIn>:

/*6D*/	void zoCommandGetDigitalIn(ZO_PROTOCOL_PACKET *packet)
{
    19c8:	fc 01       	movw	r30, r24
	u08 in=0;

	packet->byteCount = 1;
    19ca:	81 e0       	ldi	r24, 0x01	; 1
    19cc:	83 83       	std	Z+3, r24	; 0x03

	enterCritical();
    19ce:	0f b6       	in	r0, 0x3f	; 63
    19d0:	0f 92       	push	r0
    19d2:	f8 94       	cli
	in = (PIND>>7) & 0x01;
    19d4:	29 b1       	in	r18, 0x09	; 9
	in |= (PINB & 0x38) >> 2;
    19d6:	83 b1       	in	r24, 0x03	; 3
    19d8:	90 e0       	ldi	r25, 0x00	; 0
    19da:	88 73       	andi	r24, 0x38	; 56
    19dc:	90 70       	andi	r25, 0x00	; 0
    19de:	95 95       	asr	r25
    19e0:	87 95       	ror	r24
    19e2:	95 95       	asr	r25
    19e4:	87 95       	ror	r24
    19e6:	22 1f       	adc	r18, r18
    19e8:	22 27       	eor	r18, r18
    19ea:	22 1f       	adc	r18, r18
    19ec:	28 2b       	or	r18, r24
	exitCritical();
    19ee:	0f 90       	pop	r0
    19f0:	0f be       	out	0x3f, r0	; 63

	packet->data[0] = in;
    19f2:	24 83       	std	Z+4, r18	; 0x04
}
    19f4:	08 95       	ret

000019f6 <zoCommandGetVelocity>:
	packet->byteCount = 2;

	u16ToStr(zoEncoderGetPosAbsolute(),packet->data);
}
/*71*/	void zoCommandGetVelocity(ZO_PROTOCOL_PACKET *packet)
{
    19f6:	0f 93       	push	r16
    19f8:	1f 93       	push	r17
    19fa:	8c 01       	movw	r16, r24
	packet->byteCount = 4;
    19fc:	84 e0       	ldi	r24, 0x04	; 4
    19fe:	f8 01       	movw	r30, r16
    1a00:	83 83       	std	Z+3, r24	; 0x03

	s32ToStr(zoEncoderGetVel(),packet->data);	
    1a02:	0e 94 5c 03 	call	0x6b8	; 0x6b8 <zoEncoderGetVel>

inline void s32ToStr(s32 data, u08* str)
{
	S32* num;
	num = (S32*)str;
	num->all = data;
    1a06:	f8 01       	movw	r30, r16
    1a08:	64 83       	std	Z+4, r22	; 0x04
    1a0a:	75 83       	std	Z+5, r23	; 0x05
    1a0c:	86 83       	std	Z+6, r24	; 0x06
    1a0e:	97 83       	std	Z+7, r25	; 0x07
}
    1a10:	1f 91       	pop	r17
    1a12:	0f 91       	pop	r16
    1a14:	08 95       	ret

00001a16 <zoProfiledVelocity>:
/*C9*/	//zoCommandGlobalStart(ZO_PROTOCOL_PACKET *packet){}
/*CA*/	//zoCommandGlobalHalt(ZO_PROTOCOL_PACKET *packet){}
/*CB*/	//zoCommandGlobalStop(ZO_PROTOCOL_PACKET *packet){}

void zoProfiledVelocity(s32 velocity)
{
    1a16:	2f 92       	push	r2
    1a18:	3f 92       	push	r3
    1a1a:	4f 92       	push	r4
    1a1c:	5f 92       	push	r5
    1a1e:	6f 92       	push	r6
    1a20:	7f 92       	push	r7
    1a22:	8f 92       	push	r8
    1a24:	9f 92       	push	r9
    1a26:	af 92       	push	r10
    1a28:	bf 92       	push	r11
    1a2a:	cf 92       	push	r12
    1a2c:	df 92       	push	r13
    1a2e:	ef 92       	push	r14
    1a30:	ff 92       	push	r15
    1a32:	0f 93       	push	r16
    1a34:	1f 93       	push	r17
    1a36:	df 93       	push	r29
    1a38:	cf 93       	push	r28
    1a3a:	cd b7       	in	r28, 0x3d	; 61
    1a3c:	de b7       	in	r29, 0x3e	; 62
    1a3e:	28 97       	sbiw	r28, 0x08	; 8
    1a40:	0f b6       	in	r0, 0x3f	; 63
    1a42:	f8 94       	cli
    1a44:	de bf       	out	0x3e, r29	; 62
    1a46:	0f be       	out	0x3f, r0	; 63
    1a48:	cd bf       	out	0x3d, r28	; 61
    1a4a:	3b 01       	movw	r6, r22
    1a4c:	4c 01       	movw	r8, r24
	s32 vel;
		
	s08 s=1;
	vel = velocity;

	enterCritical();
    1a4e:	0f b6       	in	r0, 0x3f	; 63
    1a50:	0f 92       	push	r0
    1a52:	f8 94       	cli
	if(Sms.Control.State == ZO_SMS_CONTROL_POSITION_CONTROL)					//if previous state was again profiled
    1a54:	80 91 03 01 	lds	r24, 0x0103
    1a58:	81 30       	cpi	r24, 0x01	; 1
    1a5a:	09 f4       	brne	.+2      	; 0x1a5e <zoProfiledVelocity+0x48>
    1a5c:	f5 c0       	rjmp	.+490    	; 0x1c48 <zoProfiledVelocity+0x232>
		currentPos = zoEncoderGetPos();
		currentVel = zoEncoderGetVel();
	}
	else
	{
		currentVel = (s32)(Sms.Profile.VelocityDeltaPos * Sms.Control.LoopHz);
    1a5e:	80 91 04 01 	lds	r24, 0x0104
    1a62:	90 91 05 01 	lds	r25, 0x0105
    1a66:	a0 91 06 01 	lds	r26, 0x0106
    1a6a:	b0 91 07 01 	lds	r27, 0x0107
    1a6e:	89 83       	std	Y+1, r24	; 0x01
    1a70:	9a 83       	std	Y+2, r25	; 0x02
    1a72:	ab 83       	std	Y+3, r26	; 0x03
    1a74:	bc 83       	std	Y+4, r27	; 0x04
    1a76:	bc 01       	movw	r22, r24
    1a78:	cd 01       	movw	r24, r26
    1a7a:	20 91 20 01 	lds	r18, 0x0120
    1a7e:	30 91 21 01 	lds	r19, 0x0121
    1a82:	40 91 22 01 	lds	r20, 0x0122
    1a86:	50 91 23 01 	lds	r21, 0x0123
    1a8a:	0e 94 b6 24 	call	0x496c	; 0x496c <__mulsf3>
    1a8e:	0e 94 f7 23 	call	0x47ee	; 0x47ee <__fixsfsi>
    1a92:	5b 01       	movw	r10, r22
    1a94:	6c 01       	movw	r12, r24
		currentPos = (s32)Sms.Profile.PositionSetpoint;
    1a96:	60 91 18 01 	lds	r22, 0x0118
    1a9a:	70 91 19 01 	lds	r23, 0x0119
    1a9e:	80 91 1a 01 	lds	r24, 0x011A
    1aa2:	90 91 1b 01 	lds	r25, 0x011B
    1aa6:	0e 94 f7 23 	call	0x47ee	; 0x47ee <__fixsfsi>
    1aaa:	1b 01       	movw	r2, r22
    1aac:	2c 01       	movw	r4, r24
	}

	s = ( vel >= currentVel ) ? 1 : -1;
    1aae:	6a 14       	cp	r6, r10
    1ab0:	7b 04       	cpc	r7, r11
    1ab2:	8c 04       	cpc	r8, r12
    1ab4:	9d 04       	cpc	r9, r13
    1ab6:	0c f4       	brge	.+2      	; 0x1aba <zoProfiledVelocity+0xa4>
    1ab8:	b3 c0       	rjmp	.+358    	; 0x1c20 <zoProfiledVelocity+0x20a>
	accel = ( s == 1 ) ? (s32)Sms.Profile.DesiredAcceleration : 
    1aba:	20 91 38 01 	lds	r18, 0x0138
    1abe:	30 91 39 01 	lds	r19, 0x0139
    1ac2:	40 91 3a 01 	lds	r20, 0x013A
    1ac6:	50 91 3b 01 	lds	r21, 0x013B
    1aca:	2d 83       	std	Y+5, r18	; 0x05
    1acc:	3e 83       	std	Y+6, r19	; 0x06
    1ace:	4f 83       	std	Y+7, r20	; 0x07
    1ad0:	58 87       	std	Y+8, r21	; 0x08
							   -((s32)Sms.Profile.DesiredAcceleration);
	exitCritical();
    1ad2:	0f 90       	pop	r0
    1ad4:	0f be       	out	0x3f, r0	; 63

	accelKnee = ( vel*vel - currentVel*currentVel ) / accel / 2 + currentPos;
	
	enterCritical();
    1ad6:	0f b6       	in	r0, 0x3f	; 63
    1ad8:	0f 92       	push	r0
    1ada:	f8 94       	cli
	Sms.Profile.PositionSetpoint = currentPos;
    1adc:	c2 01       	movw	r24, r4
    1ade:	b1 01       	movw	r22, r2
    1ae0:	0e 94 2a 24 	call	0x4854	; 0x4854 <__floatsisf>
    1ae4:	60 93 18 01 	sts	0x0118, r22
    1ae8:	70 93 19 01 	sts	0x0119, r23
    1aec:	80 93 1a 01 	sts	0x011A, r24
    1af0:	90 93 1b 01 	sts	0x011B, r25
	Sms.Profile.AccelerationKnee = accelKnee;
    1af4:	c4 01       	movw	r24, r8
    1af6:	b3 01       	movw	r22, r6
    1af8:	a4 01       	movw	r20, r8
    1afa:	93 01       	movw	r18, r6
    1afc:	0e 94 73 25 	call	0x4ae6	; 0x4ae6 <__mulsi3>
    1b00:	7b 01       	movw	r14, r22
    1b02:	8c 01       	movw	r16, r24
    1b04:	c6 01       	movw	r24, r12
    1b06:	b5 01       	movw	r22, r10
    1b08:	a6 01       	movw	r20, r12
    1b0a:	95 01       	movw	r18, r10
    1b0c:	0e 94 73 25 	call	0x4ae6	; 0x4ae6 <__mulsi3>
    1b10:	e6 1a       	sub	r14, r22
    1b12:	f7 0a       	sbc	r15, r23
    1b14:	08 0b       	sbc	r16, r24
    1b16:	19 0b       	sbc	r17, r25
    1b18:	c8 01       	movw	r24, r16
    1b1a:	b7 01       	movw	r22, r14
    1b1c:	2d 81       	ldd	r18, Y+5	; 0x05
    1b1e:	3e 81       	ldd	r19, Y+6	; 0x06
    1b20:	4f 81       	ldd	r20, Y+7	; 0x07
    1b22:	58 85       	ldd	r21, Y+8	; 0x08
    1b24:	0e 94 c8 25 	call	0x4b90	; 0x4b90 <__divmodsi4>
    1b28:	ca 01       	movw	r24, r20
    1b2a:	b9 01       	movw	r22, r18
    1b2c:	22 e0       	ldi	r18, 0x02	; 2
    1b2e:	30 e0       	ldi	r19, 0x00	; 0
    1b30:	40 e0       	ldi	r20, 0x00	; 0
    1b32:	50 e0       	ldi	r21, 0x00	; 0
    1b34:	0e 94 c8 25 	call	0x4b90	; 0x4b90 <__divmodsi4>
    1b38:	22 0d       	add	r18, r2
    1b3a:	33 1d       	adc	r19, r3
    1b3c:	44 1d       	adc	r20, r4
    1b3e:	55 1d       	adc	r21, r5
    1b40:	20 93 2c 01 	sts	0x012C, r18
    1b44:	30 93 2d 01 	sts	0x012D, r19
    1b48:	40 93 2e 01 	sts	0x012E, r20
    1b4c:	50 93 2f 01 	sts	0x012F, r21
	Sms.Control.State = ZO_SMS_CONTROL_PROFILED_VELOCITY_CONTROL;
    1b50:	83 e0       	ldi	r24, 0x03	; 3
    1b52:	80 93 03 01 	sts	0x0103, r24
	Sms.Profile.TargetVelDeltaPos = (double)vel/Sms.Control.LoopHz;
    1b56:	c4 01       	movw	r24, r8
    1b58:	b3 01       	movw	r22, r6
    1b5a:	0e 94 2a 24 	call	0x4854	; 0x4854 <__floatsisf>
    1b5e:	29 81       	ldd	r18, Y+1	; 0x01
    1b60:	3a 81       	ldd	r19, Y+2	; 0x02
    1b62:	4b 81       	ldd	r20, Y+3	; 0x03
    1b64:	5c 81       	ldd	r21, Y+4	; 0x04
    1b66:	0e 94 8f 23 	call	0x471e	; 0x471e <__divsf3>
    1b6a:	60 93 1c 01 	sts	0x011C, r22
    1b6e:	70 93 1d 01 	sts	0x011D, r23
    1b72:	80 93 1e 01 	sts	0x011E, r24
    1b76:	90 93 1f 01 	sts	0x011F, r25
	Sms.Profile.VelocityDeltaPos = (double)currentVel/Sms.Control.LoopHz;
    1b7a:	c6 01       	movw	r24, r12
    1b7c:	b5 01       	movw	r22, r10
    1b7e:	0e 94 2a 24 	call	0x4854	; 0x4854 <__floatsisf>
    1b82:	29 81       	ldd	r18, Y+1	; 0x01
    1b84:	3a 81       	ldd	r19, Y+2	; 0x02
    1b86:	4b 81       	ldd	r20, Y+3	; 0x03
    1b88:	5c 81       	ldd	r21, Y+4	; 0x04
    1b8a:	0e 94 8f 23 	call	0x471e	; 0x471e <__divsf3>
    1b8e:	dc 01       	movw	r26, r24
    1b90:	9b 01       	movw	r18, r22
    1b92:	ac 01       	movw	r20, r24
    1b94:	20 93 20 01 	sts	0x0120, r18
    1b98:	30 93 21 01 	sts	0x0121, r19
    1b9c:	40 93 22 01 	sts	0x0122, r20
    1ba0:	50 93 23 01 	sts	0x0123, r21
	Sms.Profile.LastVelocityDeltaPos = Sms.Profile.VelocityDeltaPos;
    1ba4:	cb 01       	movw	r24, r22
    1ba6:	80 93 24 01 	sts	0x0124, r24
    1baa:	90 93 25 01 	sts	0x0125, r25
    1bae:	a0 93 26 01 	sts	0x0126, r26
    1bb2:	b0 93 27 01 	sts	0x0127, r27
	Sms.Profile.ConstAccelDeltaVel = (double)accel/Sms.Control.LoopHz/Sms.Control.LoopHz;
    1bb6:	6d 81       	ldd	r22, Y+5	; 0x05
    1bb8:	7e 81       	ldd	r23, Y+6	; 0x06
    1bba:	8f 81       	ldd	r24, Y+7	; 0x07
    1bbc:	98 85       	ldd	r25, Y+8	; 0x08
    1bbe:	0e 94 2a 24 	call	0x4854	; 0x4854 <__floatsisf>
    1bc2:	29 81       	ldd	r18, Y+1	; 0x01
    1bc4:	3a 81       	ldd	r19, Y+2	; 0x02
    1bc6:	4b 81       	ldd	r20, Y+3	; 0x03
    1bc8:	5c 81       	ldd	r21, Y+4	; 0x04
    1bca:	0e 94 8f 23 	call	0x471e	; 0x471e <__divsf3>
    1bce:	29 81       	ldd	r18, Y+1	; 0x01
    1bd0:	3a 81       	ldd	r19, Y+2	; 0x02
    1bd2:	4b 81       	ldd	r20, Y+3	; 0x03
    1bd4:	5c 81       	ldd	r21, Y+4	; 0x04
    1bd6:	0e 94 8f 23 	call	0x471e	; 0x471e <__divsf3>
    1bda:	60 93 28 01 	sts	0x0128, r22
    1bde:	70 93 29 01 	sts	0x0129, r23
    1be2:	80 93 2a 01 	sts	0x012A, r24
    1be6:	90 93 2b 01 	sts	0x012B, r25
	exitCritical();
    1bea:	0f 90       	pop	r0
    1bec:	0f be       	out	0x3f, r0	; 63
}
    1bee:	28 96       	adiw	r28, 0x08	; 8
    1bf0:	0f b6       	in	r0, 0x3f	; 63
    1bf2:	f8 94       	cli
    1bf4:	de bf       	out	0x3e, r29	; 62
    1bf6:	0f be       	out	0x3f, r0	; 63
    1bf8:	cd bf       	out	0x3d, r28	; 61
    1bfa:	cf 91       	pop	r28
    1bfc:	df 91       	pop	r29
    1bfe:	1f 91       	pop	r17
    1c00:	0f 91       	pop	r16
    1c02:	ff 90       	pop	r15
    1c04:	ef 90       	pop	r14
    1c06:	df 90       	pop	r13
    1c08:	cf 90       	pop	r12
    1c0a:	bf 90       	pop	r11
    1c0c:	af 90       	pop	r10
    1c0e:	9f 90       	pop	r9
    1c10:	8f 90       	pop	r8
    1c12:	7f 90       	pop	r7
    1c14:	6f 90       	pop	r6
    1c16:	5f 90       	pop	r5
    1c18:	4f 90       	pop	r4
    1c1a:	3f 90       	pop	r3
    1c1c:	2f 90       	pop	r2
    1c1e:	08 95       	ret
		currentVel = (s32)(Sms.Profile.VelocityDeltaPos * Sms.Control.LoopHz);
		currentPos = (s32)Sms.Profile.PositionSetpoint;
	}

	s = ( vel >= currentVel ) ? 1 : -1;
	accel = ( s == 1 ) ? (s32)Sms.Profile.DesiredAcceleration : 
    1c20:	80 91 38 01 	lds	r24, 0x0138
    1c24:	90 91 39 01 	lds	r25, 0x0139
    1c28:	a0 91 3a 01 	lds	r26, 0x013A
    1c2c:	b0 91 3b 01 	lds	r27, 0x013B
    1c30:	22 27       	eor	r18, r18
    1c32:	33 27       	eor	r19, r19
    1c34:	a9 01       	movw	r20, r18
    1c36:	28 1b       	sub	r18, r24
    1c38:	39 0b       	sbc	r19, r25
    1c3a:	4a 0b       	sbc	r20, r26
    1c3c:	5b 0b       	sbc	r21, r27
    1c3e:	2d 83       	std	Y+5, r18	; 0x05
    1c40:	3e 83       	std	Y+6, r19	; 0x06
    1c42:	4f 83       	std	Y+7, r20	; 0x07
    1c44:	58 87       	std	Y+8, r21	; 0x08
    1c46:	45 cf       	rjmp	.-374    	; 0x1ad2 <zoProfiledVelocity+0xbc>
	vel = velocity;

	enterCritical();
	if(Sms.Control.State == ZO_SMS_CONTROL_POSITION_CONTROL)					//if previous state was again profiled
	{
		currentPos = zoEncoderGetPos();
    1c48:	0e 94 4a 04 	call	0x894	; 0x894 <zoEncoderGetPos>
    1c4c:	1b 01       	movw	r2, r22
    1c4e:	2c 01       	movw	r4, r24
		currentVel = zoEncoderGetVel();
    1c50:	0e 94 5c 03 	call	0x6b8	; 0x6b8 <zoEncoderGetVel>
    1c54:	5b 01       	movw	r10, r22
    1c56:	6c 01       	movw	r12, r24
    1c58:	20 91 04 01 	lds	r18, 0x0104
    1c5c:	30 91 05 01 	lds	r19, 0x0105
    1c60:	40 91 06 01 	lds	r20, 0x0106
    1c64:	50 91 07 01 	lds	r21, 0x0107
    1c68:	29 83       	std	Y+1, r18	; 0x01
    1c6a:	3a 83       	std	Y+2, r19	; 0x02
    1c6c:	4b 83       	std	Y+3, r20	; 0x03
    1c6e:	5c 83       	std	Y+4, r21	; 0x04
    1c70:	1e cf       	rjmp	.-452    	; 0x1aae <zoProfiledVelocity+0x98>

00001c72 <zoCommandProfiledVelocityMove>:
/*0A*/  void zoCommandProfiledVelocityMove(ZO_PROTOCOL_PACKET *packet)
{
	s32 vel;

	vel = strToS32(packet->data);
	zoProfiledVelocity(vel);
    1c72:	fc 01       	movw	r30, r24
    1c74:	64 81       	ldd	r22, Z+4	; 0x04
    1c76:	75 81       	ldd	r23, Z+5	; 0x05
    1c78:	86 81       	ldd	r24, Z+6	; 0x06
    1c7a:	97 81       	ldd	r25, Z+7	; 0x07
    1c7c:	0e 94 0b 0d 	call	0x1a16	; 0x1a16 <zoProfiledVelocity>
}
    1c80:	08 95       	ret

00001c82 <zoCommandGetPosition>:
	u16ToStr(zoAdcRead(ZO_ADC_CHANNEL_2),&packet->data[4]);
	u16ToStr(zoAdcRead(ZO_ADC_CHANNEL_3),&packet->data[6]);
}

/*6F*/  void zoCommandGetPosition(ZO_PROTOCOL_PACKET *packet)
{
    1c82:	0f 93       	push	r16
    1c84:	1f 93       	push	r17
    1c86:	8c 01       	movw	r16, r24
	packet->byteCount = 4;
    1c88:	84 e0       	ldi	r24, 0x04	; 4
    1c8a:	f8 01       	movw	r30, r16
    1c8c:	83 83       	std	Z+3, r24	; 0x03

	s32ToStr(zoEncoderGetPos(),packet->data);
    1c8e:	0e 94 4a 04 	call	0x894	; 0x894 <zoEncoderGetPos>
    1c92:	f8 01       	movw	r30, r16
    1c94:	64 83       	std	Z+4, r22	; 0x04
    1c96:	75 83       	std	Z+5, r23	; 0x05
    1c98:	86 83       	std	Z+6, r24	; 0x06
    1c9a:	97 83       	std	Z+7, r25	; 0x07
}
    1c9c:	1f 91       	pop	r17
    1c9e:	0f 91       	pop	r16
    1ca0:	08 95       	ret

00001ca2 <zoCommandHalt>:
	zoMotorSetState(TRUE);
	exitCritical();
}
/*1A*/	void zoCommandHalt(ZO_PROTOCOL_PACKET *packet)
{
	enterCritical();
    1ca2:	0f b6       	in	r0, 0x3f	; 63
    1ca4:	0f 92       	push	r0
    1ca6:	f8 94       	cli
	Sms.Control.State = ZO_SMS_CONTROL_POSITION_CONTROL;
    1ca8:	81 e0       	ldi	r24, 0x01	; 1
    1caa:	80 93 03 01 	sts	0x0103, r24
	Sms.Pid.SetPoint = zoEncoderGetPos();
    1cae:	0e 94 4a 04 	call	0x894	; 0x894 <zoEncoderGetPos>
    1cb2:	60 93 57 01 	sts	0x0157, r22
    1cb6:	70 93 58 01 	sts	0x0158, r23
    1cba:	80 93 59 01 	sts	0x0159, r24
    1cbe:	90 93 5a 01 	sts	0x015A, r25
	exitCritical();
    1cc2:	0f 90       	pop	r0
    1cc4:	0f be       	out	0x3f, r0	; 63
}
    1cc6:	08 95       	ret

00001cc8 <zoCommandVelocityMove>:
	Sms.Settings.CurrentLimit = currLimDurMiliSecs;
	exitCritical();
}

/*07*/	void zoCommandVelocityMove(ZO_PROTOCOL_PACKET *packet)
{
    1cc8:	ef 92       	push	r14
    1cca:	ff 92       	push	r15
    1ccc:	0f 93       	push	r16
    1cce:	1f 93       	push	r17

inline s32 strToS32(u08* str)
{
	S32 *num;
	num = (S32*)str;
	return num->all;
    1cd0:	fc 01       	movw	r30, r24
    1cd2:	e4 80       	ldd	r14, Z+4	; 0x04
    1cd4:	f5 80       	ldd	r15, Z+5	; 0x05
    1cd6:	06 81       	ldd	r16, Z+6	; 0x06
    1cd8:	17 81       	ldd	r17, Z+7	; 0x07
	s32 vel;

	vel = strToS32(packet->data);

	enterCritical();
    1cda:	0f b6       	in	r0, 0x3f	; 63
    1cdc:	0f 92       	push	r0
    1cde:	f8 94       	cli
	if(Sms.Control.State == ZO_SMS_CONTROL_POSITION_CONTROL)
    1ce0:	80 91 03 01 	lds	r24, 0x0103
    1ce4:	81 30       	cpi	r24, 0x01	; 1
    1ce6:	01 f1       	breq	.+64     	; 0x1d28 <zoCommandVelocityMove+0x60>
		Sms.Profile.PositionSetpoint = (double)zoEncoderGetPos();
	Sms.Profile.VelocityDeltaPos = (double)vel/Sms.Control.LoopHz;
    1ce8:	c8 01       	movw	r24, r16
    1cea:	b7 01       	movw	r22, r14
    1cec:	0e 94 2a 24 	call	0x4854	; 0x4854 <__floatsisf>
    1cf0:	20 91 04 01 	lds	r18, 0x0104
    1cf4:	30 91 05 01 	lds	r19, 0x0105
    1cf8:	40 91 06 01 	lds	r20, 0x0106
    1cfc:	50 91 07 01 	lds	r21, 0x0107
    1d00:	0e 94 8f 23 	call	0x471e	; 0x471e <__divsf3>
    1d04:	60 93 20 01 	sts	0x0120, r22
    1d08:	70 93 21 01 	sts	0x0121, r23
    1d0c:	80 93 22 01 	sts	0x0122, r24
    1d10:	90 93 23 01 	sts	0x0123, r25
	Sms.Control.State = ZO_SMS_CONTROL_VELOCITY_CONTROL;
    1d14:	82 e0       	ldi	r24, 0x02	; 2
    1d16:	80 93 03 01 	sts	0x0103, r24
	exitCritical();
    1d1a:	0f 90       	pop	r0
    1d1c:	0f be       	out	0x3f, r0	; 63
}
    1d1e:	1f 91       	pop	r17
    1d20:	0f 91       	pop	r16
    1d22:	ff 90       	pop	r15
    1d24:	ef 90       	pop	r14
    1d26:	08 95       	ret

	vel = strToS32(packet->data);

	enterCritical();
	if(Sms.Control.State == ZO_SMS_CONTROL_POSITION_CONTROL)
		Sms.Profile.PositionSetpoint = (double)zoEncoderGetPos();
    1d28:	0e 94 4a 04 	call	0x894	; 0x894 <zoEncoderGetPos>
    1d2c:	0e 94 2a 24 	call	0x4854	; 0x4854 <__floatsisf>
    1d30:	60 93 18 01 	sts	0x0118, r22
    1d34:	70 93 19 01 	sts	0x0119, r23
    1d38:	80 93 1a 01 	sts	0x011A, r24
    1d3c:	90 93 1b 01 	sts	0x011B, r25
    1d40:	d3 cf       	rjmp	.-90     	; 0x1ce8 <zoCommandVelocityMove+0x20>

00001d42 <zoProfiledMoveAbsolute>:
	Sms.Profile.ConstAccelDeltaVel = (double)accel/Sms.Control.LoopHz/Sms.Control.LoopHz;
	exitCritical();
}

void zoProfiledMoveAbsolute(s32 finalPos)
{
    1d42:	2f 92       	push	r2
    1d44:	3f 92       	push	r3
    1d46:	4f 92       	push	r4
    1d48:	5f 92       	push	r5
    1d4a:	6f 92       	push	r6
    1d4c:	7f 92       	push	r7
    1d4e:	8f 92       	push	r8
    1d50:	9f 92       	push	r9
    1d52:	af 92       	push	r10
    1d54:	bf 92       	push	r11
    1d56:	cf 92       	push	r12
    1d58:	df 92       	push	r13
    1d5a:	ef 92       	push	r14
    1d5c:	ff 92       	push	r15
    1d5e:	0f 93       	push	r16
    1d60:	1f 93       	push	r17
    1d62:	df 93       	push	r29
    1d64:	cf 93       	push	r28
    1d66:	cd b7       	in	r28, 0x3d	; 61
    1d68:	de b7       	in	r29, 0x3e	; 62
    1d6a:	a2 97       	sbiw	r28, 0x22	; 34
    1d6c:	0f b6       	in	r0, 0x3f	; 63
    1d6e:	f8 94       	cli
    1d70:	de bf       	out	0x3e, r29	; 62
    1d72:	0f be       	out	0x3f, r0	; 63
    1d74:	cd bf       	out	0x3d, r28	; 61
    1d76:	6f 8f       	std	Y+31, r22	; 0x1f
    1d78:	78 a3       	std	Y+32, r23	; 0x20
    1d7a:	89 a3       	std	Y+33, r24	; 0x21
    1d7c:	9a a3       	std	Y+34, r25	; 0x22
	s32 velCalc = 0;
	s32 posCalc = 0;
	bool zeroCross = FALSE;
	s08 s = 1;

	enterCritical();
    1d7e:	0f b6       	in	r0, 0x3f	; 63
    1d80:	0f 92       	push	r0
    1d82:	f8 94       	cli
	if(Sms.Control.State == ZO_SMS_CONTROL_POSITION_CONTROL)					
    1d84:	80 91 03 01 	lds	r24, 0x0103
    1d88:	81 30       	cpi	r24, 0x01	; 1
    1d8a:	09 f4       	brne	.+2      	; 0x1d8e <zoProfiledMoveAbsolute+0x4c>
    1d8c:	cb c2       	rjmp	.+1430   	; 0x2324 <zoProfiledMoveAbsolute+0x5e2>
		currentVel = zoEncoderGetVel();
		currentPos = zoEncoderGetPos();
	}
	else
	{																			//if previous state was again profiled
		currentVel = (s32)(Sms.Profile.VelocityDeltaPos * Sms.Control.LoopHz);	//do not requery velocity
    1d8e:	80 91 04 01 	lds	r24, 0x0104
    1d92:	90 91 05 01 	lds	r25, 0x0105
    1d96:	a0 91 06 01 	lds	r26, 0x0106
    1d9a:	b0 91 07 01 	lds	r27, 0x0107
    1d9e:	8d 83       	std	Y+5, r24	; 0x05
    1da0:	9e 83       	std	Y+6, r25	; 0x06
    1da2:	af 83       	std	Y+7, r26	; 0x07
    1da4:	b8 87       	std	Y+8, r27	; 0x08
    1da6:	bc 01       	movw	r22, r24
    1da8:	cd 01       	movw	r24, r26
    1daa:	20 91 20 01 	lds	r18, 0x0120
    1dae:	30 91 21 01 	lds	r19, 0x0121
    1db2:	40 91 22 01 	lds	r20, 0x0122
    1db6:	50 91 23 01 	lds	r21, 0x0123
    1dba:	0e 94 b6 24 	call	0x496c	; 0x496c <__mulsf3>
    1dbe:	0e 94 f7 23 	call	0x47ee	; 0x47ee <__fixsfsi>
    1dc2:	6b 87       	std	Y+11, r22	; 0x0b
    1dc4:	7c 87       	std	Y+12, r23	; 0x0c
    1dc6:	8d 87       	std	Y+13, r24	; 0x0d
    1dc8:	9e 87       	std	Y+14, r25	; 0x0e
		currentPos = (s32)(Sms.Profile.PositionSetpoint);						//and position
    1dca:	60 91 18 01 	lds	r22, 0x0118
    1dce:	70 91 19 01 	lds	r23, 0x0119
    1dd2:	80 91 1a 01 	lds	r24, 0x011A
    1dd6:	90 91 1b 01 	lds	r25, 0x011B
    1dda:	0e 94 f7 23 	call	0x47ee	; 0x47ee <__fixsfsi>
    1dde:	6b 8f       	std	Y+27, r22	; 0x1b
    1de0:	7c 8f       	std	Y+28, r23	; 0x1c
    1de2:	8d 8f       	std	Y+29, r24	; 0x1d
    1de4:	9e 8f       	std	Y+30, r25	; 0x1e
	}

	s = ( finalPos >= currentPos ) ? 1 : -1;	//calculate sign
    1de6:	2b 8d       	ldd	r18, Y+27	; 0x1b
    1de8:	3c 8d       	ldd	r19, Y+28	; 0x1c
    1dea:	4d 8d       	ldd	r20, Y+29	; 0x1d
    1dec:	5e 8d       	ldd	r21, Y+30	; 0x1e
    1dee:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1df0:	98 a1       	ldd	r25, Y+32	; 0x20
    1df2:	a9 a1       	ldd	r26, Y+33	; 0x21
    1df4:	ba a1       	ldd	r27, Y+34	; 0x22
    1df6:	82 17       	cp	r24, r18
    1df8:	93 07       	cpc	r25, r19
    1dfa:	a4 07       	cpc	r26, r20
    1dfc:	b5 07       	cpc	r27, r21
    1dfe:	0c f4       	brge	.+2      	; 0x1e02 <zoProfiledMoveAbsolute+0xc0>
    1e00:	7e c1       	rjmp	.+764    	; 0x20fe <zoProfiledMoveAbsolute+0x3bc>
	accel = ( s == 1 ) ? Sms.Profile.DesiredAcceleration : 
    1e02:	20 91 38 01 	lds	r18, 0x0138
    1e06:	30 91 39 01 	lds	r19, 0x0139
    1e0a:	40 91 3a 01 	lds	r20, 0x013A
    1e0e:	50 91 3b 01 	lds	r21, 0x013B
    1e12:	2f 8b       	std	Y+23, r18	; 0x17
    1e14:	38 8f       	std	Y+24, r19	; 0x18
    1e16:	49 8f       	std	Y+25, r20	; 0x19
    1e18:	5a 8f       	std	Y+26, r21	; 0x1a
							   -(Sms.Profile.DesiredAcceleration);			//get acceleration value
	deccel = -accel ;					
    1e1a:	50 95       	com	r21
    1e1c:	40 95       	com	r20
    1e1e:	30 95       	com	r19
    1e20:	21 95       	neg	r18
    1e22:	3f 4f       	sbci	r19, 0xFF	; 255
    1e24:	4f 4f       	sbci	r20, 0xFF	; 255
    1e26:	5f 4f       	sbci	r21, 0xFF	; 255
    1e28:	2b 8b       	std	Y+19, r18	; 0x13
    1e2a:	3c 8b       	std	Y+20, r19	; 0x14
    1e2c:	4d 8b       	std	Y+21, r20	; 0x15
    1e2e:	5e 8b       	std	Y+22, r21	; 0x16
	vel = ( s == 1 ) ? Sms.Profile.DesiredVelocity : 
    1e30:	60 90 3c 01 	lds	r6, 0x013C
    1e34:	70 90 3d 01 	lds	r7, 0x013D
    1e38:	80 90 3e 01 	lds	r8, 0x013E
    1e3c:	90 90 3f 01 	lds	r9, 0x013F
    1e40:	31 e0       	ldi	r19, 0x01	; 1
    1e42:	39 87       	std	Y+9, r19	; 0x09
    1e44:	81 e0       	ldi	r24, 0x01	; 1
    1e46:	90 e0       	ldi	r25, 0x00	; 0
    1e48:	a0 e0       	ldi	r26, 0x00	; 0
    1e4a:	b0 e0       	ldi	r27, 0x00	; 0
    1e4c:	89 83       	std	Y+1, r24	; 0x01
    1e4e:	9a 83       	std	Y+2, r25	; 0x02
    1e50:	ab 83       	std	Y+3, r26	; 0x03
    1e52:	bc 83       	std	Y+4, r27	; 0x04
    1e54:	6f 86       	std	Y+15, r6	; 0x0f
    1e56:	78 8a       	std	Y+16, r7	; 0x10
    1e58:	89 8a       	std	Y+17, r8	; 0x11
    1e5a:	9a 8a       	std	Y+18, r9	; 0x12
							  -(Sms.Profile.DesiredVelocity);				//get target velocity
	exitCritical();
    1e5c:	0f 90       	pop	r0
    1e5e:	0f be       	out	0x3f, r0	; 63

	if ( (currentVel * vel) >= 0 )	//does the velocity change sign ?
    1e60:	c4 01       	movw	r24, r8
    1e62:	b3 01       	movw	r22, r6
    1e64:	2b 85       	ldd	r18, Y+11	; 0x0b
    1e66:	3c 85       	ldd	r19, Y+12	; 0x0c
    1e68:	4d 85       	ldd	r20, Y+13	; 0x0d
    1e6a:	5e 85       	ldd	r21, Y+14	; 0x0e
    1e6c:	0e 94 73 25 	call	0x4ae6	; 0x4ae6 <__mulsi3>
    1e70:	97 fd       	sbrc	r25, 7
    1e72:	2b c2       	rjmp	.+1110   	; 0x22ca <zoProfiledMoveAbsolute+0x588>
    1e74:	59 01       	movw	r10, r18
    1e76:	6a 01       	movw	r12, r20
    1e78:	2b 8c       	ldd	r2, Y+27	; 0x1b
    1e7a:	3c 8c       	ldd	r3, Y+28	; 0x1c
    1e7c:	4d 8c       	ldd	r4, Y+29	; 0x1d
    1e7e:	5e 8c       	ldd	r5, Y+30	; 0x1e
    1e80:	1a 86       	std	Y+10, r1	; 0x0a
		posCalc = currentPos - ( currentVel * currentVel ) / 2 / accel ;
	}

	//calculate the square of the velocity 
	//at the intersection of the acceleration and decceleration curves
	velInt = s * (s32)sqrt( (double)(accel * ( finalPos - posCalc ) + ( velCalc * velCalc ) / 2) );
    1e82:	c6 01       	movw	r24, r12
    1e84:	b5 01       	movw	r22, r10
    1e86:	a6 01       	movw	r20, r12
    1e88:	95 01       	movw	r18, r10
    1e8a:	0e 94 73 25 	call	0x4ae6	; 0x4ae6 <__mulsi3>
    1e8e:	22 e0       	ldi	r18, 0x02	; 2
    1e90:	30 e0       	ldi	r19, 0x00	; 0
    1e92:	40 e0       	ldi	r20, 0x00	; 0
    1e94:	50 e0       	ldi	r21, 0x00	; 0
    1e96:	0e 94 c8 25 	call	0x4b90	; 0x4b90 <__divmodsi4>
    1e9a:	79 01       	movw	r14, r18
    1e9c:	8a 01       	movw	r16, r20
    1e9e:	6f 8d       	ldd	r22, Y+31	; 0x1f
    1ea0:	78 a1       	ldd	r23, Y+32	; 0x20
    1ea2:	89 a1       	ldd	r24, Y+33	; 0x21
    1ea4:	9a a1       	ldd	r25, Y+34	; 0x22
    1ea6:	62 19       	sub	r22, r2
    1ea8:	73 09       	sbc	r23, r3
    1eaa:	84 09       	sbc	r24, r4
    1eac:	95 09       	sbc	r25, r5
    1eae:	2f 89       	ldd	r18, Y+23	; 0x17
    1eb0:	38 8d       	ldd	r19, Y+24	; 0x18
    1eb2:	49 8d       	ldd	r20, Y+25	; 0x19
    1eb4:	5a 8d       	ldd	r21, Y+26	; 0x1a
    1eb6:	0e 94 73 25 	call	0x4ae6	; 0x4ae6 <__mulsi3>
    1eba:	e6 0e       	add	r14, r22
    1ebc:	f7 1e       	adc	r15, r23
    1ebe:	08 1f       	adc	r16, r24
    1ec0:	19 1f       	adc	r17, r25
    1ec2:	c8 01       	movw	r24, r16
    1ec4:	b7 01       	movw	r22, r14
    1ec6:	0e 94 2a 24 	call	0x4854	; 0x4854 <__floatsisf>
    1eca:	0e 94 1d 25 	call	0x4a3a	; 0x4a3a <sqrt>
    1ece:	0e 94 f7 23 	call	0x47ee	; 0x47ee <__fixsfsi>
    1ed2:	9b 01       	movw	r18, r22
    1ed4:	ac 01       	movw	r20, r24
    1ed6:	69 81       	ldd	r22, Y+1	; 0x01
    1ed8:	7a 81       	ldd	r23, Y+2	; 0x02
    1eda:	8b 81       	ldd	r24, Y+3	; 0x03
    1edc:	9c 81       	ldd	r25, Y+4	; 0x04
    1ede:	0e 94 73 25 	call	0x4ae6	; 0x4ae6 <__mulsi3>
    1ee2:	7b 01       	movw	r14, r22
    1ee4:	8c 01       	movw	r16, r24
	
	//we must deccelerate now with given decceleration but we will overshoot and
	//then we will need to go back. Make necessary changes.
	if(  ( (velCalc -  velInt) * s > 0 ) && (!zeroCross) ) 
    1ee6:	c6 01       	movw	r24, r12
    1ee8:	b5 01       	movw	r22, r10
    1eea:	6e 19       	sub	r22, r14
    1eec:	7f 09       	sbc	r23, r15
    1eee:	80 0b       	sbc	r24, r16
    1ef0:	91 0b       	sbc	r25, r17
    1ef2:	29 81       	ldd	r18, Y+1	; 0x01
    1ef4:	3a 81       	ldd	r19, Y+2	; 0x02
    1ef6:	4b 81       	ldd	r20, Y+3	; 0x03
    1ef8:	5c 81       	ldd	r21, Y+4	; 0x04
    1efa:	0e 94 73 25 	call	0x4ae6	; 0x4ae6 <__mulsi3>
    1efe:	16 16       	cp	r1, r22
    1f00:	17 06       	cpc	r1, r23
    1f02:	18 06       	cpc	r1, r24
    1f04:	19 06       	cpc	r1, r25
    1f06:	24 f4       	brge	.+8      	; 0x1f10 <zoProfiledMoveAbsolute+0x1ce>
    1f08:	4a 85       	ldd	r20, Y+10	; 0x0a
    1f0a:	44 23       	and	r20, r20
    1f0c:	09 f4       	brne	.+2      	; 0x1f10 <zoProfiledMoveAbsolute+0x1ce>
    1f0e:	3f c1       	rjmp	.+638    	; 0x218e <zoProfiledMoveAbsolute+0x44c>
		velCalc = 0;
		posCalc = currentPos - ( currentVel * currentVel ) / 2 / accel ;		
		velInt =  (-s) * (s32)sqrt( (double)(accel * ( finalPos - posCalc ) + ( velCalc * velCalc ) / 2 ) );
	}

	if ( (velInt - vel ) * s >= 0 ) //we can do full profile
    1f10:	c8 01       	movw	r24, r16
    1f12:	b7 01       	movw	r22, r14
    1f14:	66 19       	sub	r22, r6
    1f16:	77 09       	sbc	r23, r7
    1f18:	88 09       	sbc	r24, r8
    1f1a:	99 09       	sbc	r25, r9
    1f1c:	29 81       	ldd	r18, Y+1	; 0x01
    1f1e:	3a 81       	ldd	r19, Y+2	; 0x02
    1f20:	4b 81       	ldd	r20, Y+3	; 0x03
    1f22:	5c 81       	ldd	r21, Y+4	; 0x04
    1f24:	0e 94 73 25 	call	0x4ae6	; 0x4ae6 <__mulsi3>
    1f28:	97 fd       	sbrc	r25, 7
    1f2a:	97 c1       	rjmp	.+814    	; 0x225a <zoProfiledMoveAbsolute+0x518>
	{								
		accel = ( (vel - velCalc ) * s >= 0 ) ? accel : -accel;	 //check wether we must initialy accelerate or deccelerate
    1f2c:	c4 01       	movw	r24, r8
    1f2e:	b3 01       	movw	r22, r6
    1f30:	6a 19       	sub	r22, r10
    1f32:	7b 09       	sbc	r23, r11
    1f34:	8c 09       	sbc	r24, r12
    1f36:	9d 09       	sbc	r25, r13
    1f38:	0e 94 73 25 	call	0x4ae6	; 0x4ae6 <__mulsi3>
    1f3c:	97 fd       	sbrc	r25, 7
    1f3e:	17 c1       	rjmp	.+558    	; 0x216e <zoProfiledMoveAbsolute+0x42c>
		accelKnee = ( vel * vel - velCalc * velCalc ) / 2 / accel + posCalc;	
    1f40:	c4 01       	movw	r24, r8
    1f42:	b3 01       	movw	r22, r6
    1f44:	a4 01       	movw	r20, r8
    1f46:	93 01       	movw	r18, r6
    1f48:	0e 94 73 25 	call	0x4ae6	; 0x4ae6 <__mulsi3>
    1f4c:	7b 01       	movw	r14, r22
    1f4e:	8c 01       	movw	r16, r24
    1f50:	c6 01       	movw	r24, r12
    1f52:	b5 01       	movw	r22, r10
    1f54:	a6 01       	movw	r20, r12
    1f56:	95 01       	movw	r18, r10
    1f58:	0e 94 73 25 	call	0x4ae6	; 0x4ae6 <__mulsi3>
    1f5c:	a8 01       	movw	r20, r16
    1f5e:	97 01       	movw	r18, r14
    1f60:	26 1b       	sub	r18, r22
    1f62:	37 0b       	sbc	r19, r23
    1f64:	48 0b       	sbc	r20, r24
    1f66:	59 0b       	sbc	r21, r25
    1f68:	ca 01       	movw	r24, r20
    1f6a:	b9 01       	movw	r22, r18
    1f6c:	22 e0       	ldi	r18, 0x02	; 2
    1f6e:	30 e0       	ldi	r19, 0x00	; 0
    1f70:	40 e0       	ldi	r20, 0x00	; 0
    1f72:	50 e0       	ldi	r21, 0x00	; 0
    1f74:	0e 94 c8 25 	call	0x4b90	; 0x4b90 <__divmodsi4>
    1f78:	ca 01       	movw	r24, r20
    1f7a:	b9 01       	movw	r22, r18
    1f7c:	2f 89       	ldd	r18, Y+23	; 0x17
    1f7e:	38 8d       	ldd	r19, Y+24	; 0x18
    1f80:	49 8d       	ldd	r20, Y+25	; 0x19
    1f82:	5a 8d       	ldd	r21, Y+26	; 0x1a
    1f84:	0e 94 c8 25 	call	0x4b90	; 0x4b90 <__divmodsi4>
    1f88:	59 01       	movw	r10, r18
    1f8a:	6a 01       	movw	r12, r20
    1f8c:	a2 0c       	add	r10, r2
    1f8e:	b3 1c       	adc	r11, r3
    1f90:	c4 1c       	adc	r12, r4
    1f92:	d5 1c       	adc	r13, r5
		deccelKnee = finalPos + vel * vel / 2 / deccel;
    1f94:	c8 01       	movw	r24, r16
    1f96:	b7 01       	movw	r22, r14
    1f98:	22 e0       	ldi	r18, 0x02	; 2
    1f9a:	30 e0       	ldi	r19, 0x00	; 0
    1f9c:	40 e0       	ldi	r20, 0x00	; 0
    1f9e:	50 e0       	ldi	r21, 0x00	; 0
    1fa0:	0e 94 c8 25 	call	0x4b90	; 0x4b90 <__divmodsi4>
    1fa4:	ca 01       	movw	r24, r20
    1fa6:	b9 01       	movw	r22, r18
    1fa8:	2b 89       	ldd	r18, Y+19	; 0x13
    1faa:	3c 89       	ldd	r19, Y+20	; 0x14
    1fac:	4d 89       	ldd	r20, Y+21	; 0x15
    1fae:	5e 89       	ldd	r21, Y+22	; 0x16
    1fb0:	0e 94 c8 25 	call	0x4b90	; 0x4b90 <__divmodsi4>
    1fb4:	79 01       	movw	r14, r18
    1fb6:	8a 01       	movw	r16, r20
    1fb8:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1fba:	98 a1       	ldd	r25, Y+32	; 0x20
    1fbc:	a9 a1       	ldd	r26, Y+33	; 0x21
    1fbe:	ba a1       	ldd	r27, Y+34	; 0x22
    1fc0:	e8 0e       	add	r14, r24
    1fc2:	f9 1e       	adc	r15, r25
    1fc4:	0a 1f       	adc	r16, r26
    1fc6:	1b 1f       	adc	r17, r27
		vel = velInt;
	}

	//initialise profile and calculate delta pos and delta u
	//to achieve velocity and acceleration at control loop
	enterCritical();
    1fc8:	0f b6       	in	r0, 0x3f	; 63
    1fca:	0f 92       	push	r0
    1fcc:	f8 94       	cli
	Sms.Profile.PositionSetpoint = currentPos;
    1fce:	6b 8d       	ldd	r22, Y+27	; 0x1b
    1fd0:	7c 8d       	ldd	r23, Y+28	; 0x1c
    1fd2:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1fd4:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1fd6:	0e 94 2a 24 	call	0x4854	; 0x4854 <__floatsisf>
    1fda:	60 93 18 01 	sts	0x0118, r22
    1fde:	70 93 19 01 	sts	0x0119, r23
    1fe2:	80 93 1a 01 	sts	0x011A, r24
    1fe6:	90 93 1b 01 	sts	0x011B, r25
	Sms.Profile.AccelerationKnee = accelKnee;
    1fea:	a0 92 2c 01 	sts	0x012C, r10
    1fee:	b0 92 2d 01 	sts	0x012D, r11
    1ff2:	c0 92 2e 01 	sts	0x012E, r12
    1ff6:	d0 92 2f 01 	sts	0x012F, r13
	Sms.Profile.DeccelerationKnee = deccelKnee;
    1ffa:	e0 92 30 01 	sts	0x0130, r14
    1ffe:	f0 92 31 01 	sts	0x0131, r15
    2002:	00 93 32 01 	sts	0x0132, r16
    2006:	10 93 33 01 	sts	0x0133, r17
	Sms.Profile.TargetPosition = finalPos;
    200a:	8f 8d       	ldd	r24, Y+31	; 0x1f
    200c:	98 a1       	ldd	r25, Y+32	; 0x20
    200e:	a9 a1       	ldd	r26, Y+33	; 0x21
    2010:	ba a1       	ldd	r27, Y+34	; 0x22
    2012:	80 93 34 01 	sts	0x0134, r24
    2016:	90 93 35 01 	sts	0x0135, r25
    201a:	a0 93 36 01 	sts	0x0136, r26
    201e:	b0 93 37 01 	sts	0x0137, r27
	Sms.Profile.State = ZO_SMS_PROFILE_ACCELERATING;
    2022:	10 92 40 01 	sts	0x0140, r1
	Sms.Control.State = ZO_SMS_CONTROL_PROFILED_POSITION_CONTROL;
    2026:	84 e0       	ldi	r24, 0x04	; 4
    2028:	80 93 03 01 	sts	0x0103, r24
	Sms.Profile.TargetVelDeltaPos = (double)vel/Sms.Control.LoopHz;
    202c:	6f 85       	ldd	r22, Y+15	; 0x0f
    202e:	78 89       	ldd	r23, Y+16	; 0x10
    2030:	89 89       	ldd	r24, Y+17	; 0x11
    2032:	9a 89       	ldd	r25, Y+18	; 0x12
    2034:	0e 94 2a 24 	call	0x4854	; 0x4854 <__floatsisf>
    2038:	2d 81       	ldd	r18, Y+5	; 0x05
    203a:	3e 81       	ldd	r19, Y+6	; 0x06
    203c:	4f 81       	ldd	r20, Y+7	; 0x07
    203e:	58 85       	ldd	r21, Y+8	; 0x08
    2040:	0e 94 8f 23 	call	0x471e	; 0x471e <__divsf3>
    2044:	60 93 1c 01 	sts	0x011C, r22
    2048:	70 93 1d 01 	sts	0x011D, r23
    204c:	80 93 1e 01 	sts	0x011E, r24
    2050:	90 93 1f 01 	sts	0x011F, r25
	Sms.Profile.VelocityDeltaPos =(double)currentVel/Sms.Control.LoopHz;
    2054:	6b 85       	ldd	r22, Y+11	; 0x0b
    2056:	7c 85       	ldd	r23, Y+12	; 0x0c
    2058:	8d 85       	ldd	r24, Y+13	; 0x0d
    205a:	9e 85       	ldd	r25, Y+14	; 0x0e
    205c:	0e 94 2a 24 	call	0x4854	; 0x4854 <__floatsisf>
    2060:	2d 81       	ldd	r18, Y+5	; 0x05
    2062:	3e 81       	ldd	r19, Y+6	; 0x06
    2064:	4f 81       	ldd	r20, Y+7	; 0x07
    2066:	58 85       	ldd	r21, Y+8	; 0x08
    2068:	0e 94 8f 23 	call	0x471e	; 0x471e <__divsf3>
    206c:	dc 01       	movw	r26, r24
    206e:	9b 01       	movw	r18, r22
    2070:	ac 01       	movw	r20, r24
    2072:	20 93 20 01 	sts	0x0120, r18
    2076:	30 93 21 01 	sts	0x0121, r19
    207a:	40 93 22 01 	sts	0x0122, r20
    207e:	50 93 23 01 	sts	0x0123, r21
	Sms.Profile.LastVelocityDeltaPos = Sms.Profile.VelocityDeltaPos;
    2082:	cb 01       	movw	r24, r22
    2084:	80 93 24 01 	sts	0x0124, r24
    2088:	90 93 25 01 	sts	0x0125, r25
    208c:	a0 93 26 01 	sts	0x0126, r26
    2090:	b0 93 27 01 	sts	0x0127, r27
	Sms.Profile.ConstAccelDeltaVel = (double)accel/Sms.Control.LoopHz/Sms.Control.LoopHz;
    2094:	6f 89       	ldd	r22, Y+23	; 0x17
    2096:	78 8d       	ldd	r23, Y+24	; 0x18
    2098:	89 8d       	ldd	r24, Y+25	; 0x19
    209a:	9a 8d       	ldd	r25, Y+26	; 0x1a
    209c:	0e 94 2a 24 	call	0x4854	; 0x4854 <__floatsisf>
    20a0:	2d 81       	ldd	r18, Y+5	; 0x05
    20a2:	3e 81       	ldd	r19, Y+6	; 0x06
    20a4:	4f 81       	ldd	r20, Y+7	; 0x07
    20a6:	58 85       	ldd	r21, Y+8	; 0x08
    20a8:	0e 94 8f 23 	call	0x471e	; 0x471e <__divsf3>
    20ac:	2d 81       	ldd	r18, Y+5	; 0x05
    20ae:	3e 81       	ldd	r19, Y+6	; 0x06
    20b0:	4f 81       	ldd	r20, Y+7	; 0x07
    20b2:	58 85       	ldd	r21, Y+8	; 0x08
    20b4:	0e 94 8f 23 	call	0x471e	; 0x471e <__divsf3>
    20b8:	60 93 28 01 	sts	0x0128, r22
    20bc:	70 93 29 01 	sts	0x0129, r23
    20c0:	80 93 2a 01 	sts	0x012A, r24
    20c4:	90 93 2b 01 	sts	0x012B, r25
	exitCritical();
    20c8:	0f 90       	pop	r0
    20ca:	0f be       	out	0x3f, r0	; 63
}
    20cc:	a2 96       	adiw	r28, 0x22	; 34
    20ce:	0f b6       	in	r0, 0x3f	; 63
    20d0:	f8 94       	cli
    20d2:	de bf       	out	0x3e, r29	; 62
    20d4:	0f be       	out	0x3f, r0	; 63
    20d6:	cd bf       	out	0x3d, r28	; 61
    20d8:	cf 91       	pop	r28
    20da:	df 91       	pop	r29
    20dc:	1f 91       	pop	r17
    20de:	0f 91       	pop	r16
    20e0:	ff 90       	pop	r15
    20e2:	ef 90       	pop	r14
    20e4:	df 90       	pop	r13
    20e6:	cf 90       	pop	r12
    20e8:	bf 90       	pop	r11
    20ea:	af 90       	pop	r10
    20ec:	9f 90       	pop	r9
    20ee:	8f 90       	pop	r8
    20f0:	7f 90       	pop	r7
    20f2:	6f 90       	pop	r6
    20f4:	5f 90       	pop	r5
    20f6:	4f 90       	pop	r4
    20f8:	3f 90       	pop	r3
    20fa:	2f 90       	pop	r2
    20fc:	08 95       	ret
		currentVel = (s32)(Sms.Profile.VelocityDeltaPos * Sms.Control.LoopHz);	//do not requery velocity
		currentPos = (s32)(Sms.Profile.PositionSetpoint);						//and position
	}

	s = ( finalPos >= currentPos ) ? 1 : -1;	//calculate sign
	accel = ( s == 1 ) ? Sms.Profile.DesiredAcceleration : 
    20fe:	80 91 38 01 	lds	r24, 0x0138
    2102:	90 91 39 01 	lds	r25, 0x0139
    2106:	a0 91 3a 01 	lds	r26, 0x013A
    210a:	b0 91 3b 01 	lds	r27, 0x013B
    210e:	22 27       	eor	r18, r18
    2110:	33 27       	eor	r19, r19
    2112:	a9 01       	movw	r20, r18
    2114:	28 1b       	sub	r18, r24
    2116:	39 0b       	sbc	r19, r25
    2118:	4a 0b       	sbc	r20, r26
    211a:	5b 0b       	sbc	r21, r27
    211c:	2f 8b       	std	Y+23, r18	; 0x17
    211e:	38 8f       	std	Y+24, r19	; 0x18
    2120:	49 8f       	std	Y+25, r20	; 0x19
    2122:	5a 8f       	std	Y+26, r21	; 0x1a
							   -(Sms.Profile.DesiredAcceleration);			//get acceleration value
	deccel = -accel ;					
    2124:	50 95       	com	r21
    2126:	40 95       	com	r20
    2128:	30 95       	com	r19
    212a:	21 95       	neg	r18
    212c:	3f 4f       	sbci	r19, 0xFF	; 255
    212e:	4f 4f       	sbci	r20, 0xFF	; 255
    2130:	5f 4f       	sbci	r21, 0xFF	; 255
    2132:	2b 8b       	std	Y+19, r18	; 0x13
    2134:	3c 8b       	std	Y+20, r19	; 0x14
    2136:	4d 8b       	std	Y+21, r20	; 0x15
    2138:	5e 8b       	std	Y+22, r21	; 0x16
	vel = ( s == 1 ) ? Sms.Profile.DesiredVelocity : 
    213a:	80 91 3c 01 	lds	r24, 0x013C
    213e:	90 91 3d 01 	lds	r25, 0x013D
    2142:	a0 91 3e 01 	lds	r26, 0x013E
    2146:	b0 91 3f 01 	lds	r27, 0x013F
    214a:	66 24       	eor	r6, r6
    214c:	77 24       	eor	r7, r7
    214e:	43 01       	movw	r8, r6
    2150:	68 1a       	sub	r6, r24
    2152:	79 0a       	sbc	r7, r25
    2154:	8a 0a       	sbc	r8, r26
    2156:	9b 0a       	sbc	r9, r27
    2158:	3f ef       	ldi	r19, 0xFF	; 255
    215a:	39 87       	std	Y+9, r19	; 0x09
    215c:	8f ef       	ldi	r24, 0xFF	; 255
    215e:	9f ef       	ldi	r25, 0xFF	; 255
    2160:	af ef       	ldi	r26, 0xFF	; 255
    2162:	bf ef       	ldi	r27, 0xFF	; 255
    2164:	89 83       	std	Y+1, r24	; 0x01
    2166:	9a 83       	std	Y+2, r25	; 0x02
    2168:	ab 83       	std	Y+3, r26	; 0x03
    216a:	bc 83       	std	Y+4, r27	; 0x04
    216c:	73 ce       	rjmp	.-794    	; 0x1e54 <zoProfiledMoveAbsolute+0x112>
		velInt =  (-s) * (s32)sqrt( (double)(accel * ( finalPos - posCalc ) + ( velCalc * velCalc ) / 2 ) );
	}

	if ( (velInt - vel ) * s >= 0 ) //we can do full profile
	{								
		accel = ( (vel - velCalc ) * s >= 0 ) ? accel : -accel;	 //check wether we must initialy accelerate or deccelerate
    216e:	8f 89       	ldd	r24, Y+23	; 0x17
    2170:	98 8d       	ldd	r25, Y+24	; 0x18
    2172:	a9 8d       	ldd	r26, Y+25	; 0x19
    2174:	ba 8d       	ldd	r27, Y+26	; 0x1a
    2176:	b0 95       	com	r27
    2178:	a0 95       	com	r26
    217a:	90 95       	com	r25
    217c:	81 95       	neg	r24
    217e:	9f 4f       	sbci	r25, 0xFF	; 255
    2180:	af 4f       	sbci	r26, 0xFF	; 255
    2182:	bf 4f       	sbci	r27, 0xFF	; 255
    2184:	8f 8b       	std	Y+23, r24	; 0x17
    2186:	98 8f       	std	Y+24, r25	; 0x18
    2188:	a9 8f       	std	Y+25, r26	; 0x19
    218a:	ba 8f       	std	Y+26, r27	; 0x1a
    218c:	d9 ce       	rjmp	.-590    	; 0x1f40 <zoProfiledMoveAbsolute+0x1fe>
	if(  ( (velCalc -  velInt) * s > 0 ) && (!zeroCross) ) 
	{
		accel = -accel;
		deccel = -deccel;
		velCalc = 0;
		posCalc = currentPos - ( currentVel * currentVel ) / 2 / accel ;		
    218e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2190:	7c 85       	ldd	r23, Y+12	; 0x0c
    2192:	8d 85       	ldd	r24, Y+13	; 0x0d
    2194:	9e 85       	ldd	r25, Y+14	; 0x0e
    2196:	9b 01       	movw	r18, r22
    2198:	ac 01       	movw	r20, r24
    219a:	0e 94 73 25 	call	0x4ae6	; 0x4ae6 <__mulsi3>
    219e:	22 e0       	ldi	r18, 0x02	; 2
    21a0:	30 e0       	ldi	r19, 0x00	; 0
    21a2:	40 e0       	ldi	r20, 0x00	; 0
    21a4:	50 e0       	ldi	r21, 0x00	; 0
    21a6:	0e 94 c8 25 	call	0x4b90	; 0x4b90 <__divmodsi4>
    21aa:	50 95       	com	r21
    21ac:	40 95       	com	r20
    21ae:	30 95       	com	r19
    21b0:	21 95       	neg	r18
    21b2:	3f 4f       	sbci	r19, 0xFF	; 255
    21b4:	4f 4f       	sbci	r20, 0xFF	; 255
    21b6:	5f 4f       	sbci	r21, 0xFF	; 255
    21b8:	ca 01       	movw	r24, r20
    21ba:	b9 01       	movw	r22, r18
    21bc:	2b 89       	ldd	r18, Y+19	; 0x13
    21be:	3c 89       	ldd	r19, Y+20	; 0x14
    21c0:	4d 89       	ldd	r20, Y+21	; 0x15
    21c2:	5e 89       	ldd	r21, Y+22	; 0x16
    21c4:	0e 94 c8 25 	call	0x4b90	; 0x4b90 <__divmodsi4>
    21c8:	19 01       	movw	r2, r18
    21ca:	2a 01       	movw	r4, r20
    21cc:	8b 8d       	ldd	r24, Y+27	; 0x1b
    21ce:	9c 8d       	ldd	r25, Y+28	; 0x1c
    21d0:	ad 8d       	ldd	r26, Y+29	; 0x1d
    21d2:	be 8d       	ldd	r27, Y+30	; 0x1e
    21d4:	28 0e       	add	r2, r24
    21d6:	39 1e       	adc	r3, r25
    21d8:	4a 1e       	adc	r4, r26
    21da:	5b 1e       	adc	r5, r27
		velInt =  (-s) * (s32)sqrt( (double)(accel * ( finalPos - posCalc ) + ( velCalc * velCalc ) / 2 ) );
    21dc:	6f 8d       	ldd	r22, Y+31	; 0x1f
    21de:	78 a1       	ldd	r23, Y+32	; 0x20
    21e0:	89 a1       	ldd	r24, Y+33	; 0x21
    21e2:	9a a1       	ldd	r25, Y+34	; 0x22
    21e4:	62 19       	sub	r22, r2
    21e6:	73 09       	sbc	r23, r3
    21e8:	84 09       	sbc	r24, r4
    21ea:	95 09       	sbc	r25, r5
    21ec:	2b 89       	ldd	r18, Y+19	; 0x13
    21ee:	3c 89       	ldd	r19, Y+20	; 0x14
    21f0:	4d 89       	ldd	r20, Y+21	; 0x15
    21f2:	5e 89       	ldd	r21, Y+22	; 0x16
    21f4:	0e 94 73 25 	call	0x4ae6	; 0x4ae6 <__mulsi3>
    21f8:	0e 94 2a 24 	call	0x4854	; 0x4854 <__floatsisf>
    21fc:	0e 94 1d 25 	call	0x4a3a	; 0x4a3a <sqrt>
    2200:	a9 85       	ldd	r26, Y+9	; 0x09
    2202:	ea 2e       	mov	r14, r26
    2204:	ff 24       	eor	r15, r15
    2206:	e7 fc       	sbrc	r14, 7
    2208:	f0 94       	com	r15
    220a:	f0 94       	com	r15
    220c:	e1 94       	neg	r14
    220e:	f1 08       	sbc	r15, r1
    2210:	f3 94       	inc	r15
    2212:	00 27       	eor	r16, r16
    2214:	f7 fc       	sbrc	r15, 7
    2216:	00 95       	com	r16
    2218:	10 2f       	mov	r17, r16
    221a:	0e 94 f7 23 	call	0x47ee	; 0x47ee <__fixsfsi>
    221e:	9b 01       	movw	r18, r22
    2220:	ac 01       	movw	r20, r24
    2222:	c8 01       	movw	r24, r16
    2224:	b7 01       	movw	r22, r14
    2226:	0e 94 73 25 	call	0x4ae6	; 0x4ae6 <__mulsi3>
    222a:	7b 01       	movw	r14, r22
    222c:	8c 01       	movw	r16, r24
    222e:	8b 89       	ldd	r24, Y+19	; 0x13
    2230:	9c 89       	ldd	r25, Y+20	; 0x14
    2232:	6d 89       	ldd	r22, Y+21	; 0x15
    2234:	7e 89       	ldd	r23, Y+22	; 0x16
    2236:	2f 89       	ldd	r18, Y+23	; 0x17
    2238:	38 8d       	ldd	r19, Y+24	; 0x18
    223a:	49 8d       	ldd	r20, Y+25	; 0x19
    223c:	5a 8d       	ldd	r21, Y+26	; 0x1a
    223e:	2b 8b       	std	Y+19, r18	; 0x13
    2240:	3c 8b       	std	Y+20, r19	; 0x14
    2242:	4d 8b       	std	Y+21, r20	; 0x15
    2244:	5e 8b       	std	Y+22, r21	; 0x16
    2246:	ab 01       	movw	r20, r22
    2248:	da 01       	movw	r26, r20
    224a:	8f 8b       	std	Y+23, r24	; 0x17
    224c:	98 8f       	std	Y+24, r25	; 0x18
    224e:	a9 8f       	std	Y+25, r26	; 0x19
    2250:	ba 8f       	std	Y+26, r27	; 0x1a
    2252:	aa 24       	eor	r10, r10
    2254:	bb 24       	eor	r11, r11
    2256:	65 01       	movw	r12, r10
    2258:	5b ce       	rjmp	.-842    	; 0x1f10 <zoProfiledMoveAbsolute+0x1ce>
		accelKnee = ( vel * vel - velCalc * velCalc ) / 2 / accel + posCalc;	
		deccelKnee = finalPos + vel * vel / 2 / deccel;
	}
	else 	//we cannot reach the desired velocity but we can go with desired accel, deccel
	{		//accelKnee = deccelKnee = intersection
		accelKnee = (finalPos + posCalc) / 2 - ( velCalc * velCalc ) / 4 / accel;
    225a:	c6 01       	movw	r24, r12
    225c:	b5 01       	movw	r22, r10
    225e:	a6 01       	movw	r20, r12
    2260:	95 01       	movw	r18, r10
    2262:	0e 94 73 25 	call	0x4ae6	; 0x4ae6 <__mulsi3>
    2266:	24 e0       	ldi	r18, 0x04	; 4
    2268:	30 e0       	ldi	r19, 0x00	; 0
    226a:	40 e0       	ldi	r20, 0x00	; 0
    226c:	50 e0       	ldi	r21, 0x00	; 0
    226e:	0e 94 c8 25 	call	0x4b90	; 0x4b90 <__divmodsi4>
    2272:	50 95       	com	r21
    2274:	40 95       	com	r20
    2276:	30 95       	com	r19
    2278:	21 95       	neg	r18
    227a:	3f 4f       	sbci	r19, 0xFF	; 255
    227c:	4f 4f       	sbci	r20, 0xFF	; 255
    227e:	5f 4f       	sbci	r21, 0xFF	; 255
    2280:	ca 01       	movw	r24, r20
    2282:	b9 01       	movw	r22, r18
    2284:	2f 89       	ldd	r18, Y+23	; 0x17
    2286:	38 8d       	ldd	r19, Y+24	; 0x18
    2288:	49 8d       	ldd	r20, Y+25	; 0x19
    228a:	5a 8d       	ldd	r21, Y+26	; 0x1a
    228c:	0e 94 c8 25 	call	0x4b90	; 0x4b90 <__divmodsi4>
    2290:	59 01       	movw	r10, r18
    2292:	6a 01       	movw	r12, r20
    2294:	2f 8d       	ldd	r18, Y+31	; 0x1f
    2296:	38 a1       	ldd	r19, Y+32	; 0x20
    2298:	49 a1       	ldd	r20, Y+33	; 0x21
    229a:	5a a1       	ldd	r21, Y+34	; 0x22
    229c:	22 0e       	add	r2, r18
    229e:	33 1e       	adc	r3, r19
    22a0:	44 1e       	adc	r4, r20
    22a2:	55 1e       	adc	r5, r21
    22a4:	c2 01       	movw	r24, r4
    22a6:	b1 01       	movw	r22, r2
    22a8:	22 e0       	ldi	r18, 0x02	; 2
    22aa:	30 e0       	ldi	r19, 0x00	; 0
    22ac:	40 e0       	ldi	r20, 0x00	; 0
    22ae:	50 e0       	ldi	r21, 0x00	; 0
    22b0:	0e 94 c8 25 	call	0x4b90	; 0x4b90 <__divmodsi4>
    22b4:	a2 0e       	add	r10, r18
    22b6:	b3 1e       	adc	r11, r19
    22b8:	c4 1e       	adc	r12, r20
    22ba:	d5 1e       	adc	r13, r21
    22bc:	ef 86       	std	Y+15, r14	; 0x0f
    22be:	f8 8a       	std	Y+16, r15	; 0x10
    22c0:	09 8b       	std	Y+17, r16	; 0x11
    22c2:	1a 8b       	std	Y+18, r17	; 0x12
    22c4:	86 01       	movw	r16, r12
    22c6:	75 01       	movw	r14, r10
    22c8:	7f ce       	rjmp	.-770    	; 0x1fc8 <zoProfiledMoveAbsolute+0x286>
	}
	else
	{								//else calculate as if we started from zero velocity
		zeroCross = TRUE;
		velCalc = 0;
		posCalc = currentPos - ( currentVel * currentVel ) / 2 / accel ;
    22ca:	6b 85       	ldd	r22, Y+11	; 0x0b
    22cc:	7c 85       	ldd	r23, Y+12	; 0x0c
    22ce:	8d 85       	ldd	r24, Y+13	; 0x0d
    22d0:	9e 85       	ldd	r25, Y+14	; 0x0e
    22d2:	9b 01       	movw	r18, r22
    22d4:	ac 01       	movw	r20, r24
    22d6:	0e 94 73 25 	call	0x4ae6	; 0x4ae6 <__mulsi3>
    22da:	22 e0       	ldi	r18, 0x02	; 2
    22dc:	30 e0       	ldi	r19, 0x00	; 0
    22de:	40 e0       	ldi	r20, 0x00	; 0
    22e0:	50 e0       	ldi	r21, 0x00	; 0
    22e2:	0e 94 c8 25 	call	0x4b90	; 0x4b90 <__divmodsi4>
    22e6:	50 95       	com	r21
    22e8:	40 95       	com	r20
    22ea:	30 95       	com	r19
    22ec:	21 95       	neg	r18
    22ee:	3f 4f       	sbci	r19, 0xFF	; 255
    22f0:	4f 4f       	sbci	r20, 0xFF	; 255
    22f2:	5f 4f       	sbci	r21, 0xFF	; 255
    22f4:	ca 01       	movw	r24, r20
    22f6:	b9 01       	movw	r22, r18
    22f8:	2f 89       	ldd	r18, Y+23	; 0x17
    22fa:	38 8d       	ldd	r19, Y+24	; 0x18
    22fc:	49 8d       	ldd	r20, Y+25	; 0x19
    22fe:	5a 8d       	ldd	r21, Y+26	; 0x1a
    2300:	0e 94 c8 25 	call	0x4b90	; 0x4b90 <__divmodsi4>
    2304:	19 01       	movw	r2, r18
    2306:	2a 01       	movw	r4, r20
    2308:	2b 8d       	ldd	r18, Y+27	; 0x1b
    230a:	3c 8d       	ldd	r19, Y+28	; 0x1c
    230c:	4d 8d       	ldd	r20, Y+29	; 0x1d
    230e:	5e 8d       	ldd	r21, Y+30	; 0x1e
    2310:	22 0e       	add	r2, r18
    2312:	33 1e       	adc	r3, r19
    2314:	44 1e       	adc	r4, r20
    2316:	55 1e       	adc	r5, r21
    2318:	aa 24       	eor	r10, r10
    231a:	bb 24       	eor	r11, r11
    231c:	65 01       	movw	r12, r10
    231e:	3f ef       	ldi	r19, 0xFF	; 255
    2320:	3a 87       	std	Y+10, r19	; 0x0a
    2322:	af cd       	rjmp	.-1186   	; 0x1e82 <zoProfiledMoveAbsolute+0x140>
	s08 s = 1;

	enterCritical();
	if(Sms.Control.State == ZO_SMS_CONTROL_POSITION_CONTROL)					
	{
		currentVel = zoEncoderGetVel();
    2324:	0e 94 5c 03 	call	0x6b8	; 0x6b8 <zoEncoderGetVel>
    2328:	6b 87       	std	Y+11, r22	; 0x0b
    232a:	7c 87       	std	Y+12, r23	; 0x0c
    232c:	8d 87       	std	Y+13, r24	; 0x0d
    232e:	9e 87       	std	Y+14, r25	; 0x0e
		currentPos = zoEncoderGetPos();
    2330:	0e 94 4a 04 	call	0x894	; 0x894 <zoEncoderGetPos>
    2334:	6b 8f       	std	Y+27, r22	; 0x1b
    2336:	7c 8f       	std	Y+28, r23	; 0x1c
    2338:	8d 8f       	std	Y+29, r24	; 0x1d
    233a:	9e 8f       	std	Y+30, r25	; 0x1e
    233c:	20 91 04 01 	lds	r18, 0x0104
    2340:	30 91 05 01 	lds	r19, 0x0105
    2344:	40 91 06 01 	lds	r20, 0x0106
    2348:	50 91 07 01 	lds	r21, 0x0107
    234c:	2d 83       	std	Y+5, r18	; 0x05
    234e:	3e 83       	std	Y+6, r19	; 0x06
    2350:	4f 83       	std	Y+7, r20	; 0x07
    2352:	58 87       	std	Y+8, r21	; 0x08
    2354:	48 cd       	rjmp	.-1392   	; 0x1de6 <zoProfiledMoveAbsolute+0xa4>

00002356 <zoCommandDoMove>:
		packet->byteCount++;
	}
}

/*C8*/	void zoCommandDoMove(ZO_PROTOCOL_PACKET *packet)
{
    2356:	ef 92       	push	r14
    2358:	ff 92       	push	r15
    235a:	0f 93       	push	r16
    235c:	1f 93       	push	r17
    235e:	fc 01       	movw	r30, r24
	enterCritical();
    2360:	0f b6       	in	r0, 0x3f	; 63
    2362:	0f 92       	push	r0
    2364:	f8 94       	cli
	ZO_SMS_SETPOINT_TYPE spType = Sms.BufferdSetPoint.type;
	exitCritical();
    2366:	0f 90       	pop	r0
    2368:	0f be       	out	0x3f, r0	; 63

	switch(spType)
    236a:	80 91 61 01 	lds	r24, 0x0161
    236e:	83 30       	cpi	r24, 0x03	; 3
    2370:	09 f4       	brne	.+2      	; 0x2374 <zoCommandDoMove+0x1e>
    2372:	73 c0       	rjmp	.+230    	; 0x245a <zoCommandDoMove+0x104>
    2374:	84 30       	cpi	r24, 0x04	; 4
    2376:	30 f1       	brcs	.+76     	; 0x23c4 <zoCommandDoMove+0x6e>
    2378:	85 30       	cpi	r24, 0x05	; 5
    237a:	09 f4       	brne	.+2      	; 0x237e <zoCommandDoMove+0x28>
    237c:	53 c0       	rjmp	.+166    	; 0x2424 <zoCommandDoMove+0xce>
    237e:	85 30       	cpi	r24, 0x05	; 5
    2380:	08 f4       	brcc	.+2      	; 0x2384 <zoCommandDoMove+0x2e>
    2382:	41 c0       	rjmp	.+130    	; 0x2406 <zoCommandDoMove+0xb0>
    2384:	86 30       	cpi	r24, 0x06	; 6
    2386:	91 f4       	brne	.+36     	; 0x23ac <zoCommandDoMove+0x56>
	case ZO_SMS_SETPOINT_PROFILED_ABSOLUTE_POSITION:
		zoProfiledMoveAbsolute(Sms.BufferdSetPoint.value);
		break;

	case ZO_SMS_SETPOINT_PROFILED_RELATIVE_POSITION:
		zoProfiledMoveAbsolute(Sms.BufferdSetPoint.value + zoEncoderGetPos());
    2388:	e0 90 62 01 	lds	r14, 0x0162
    238c:	f0 90 63 01 	lds	r15, 0x0163
    2390:	00 91 64 01 	lds	r16, 0x0164
    2394:	10 91 65 01 	lds	r17, 0x0165
    2398:	0e 94 4a 04 	call	0x894	; 0x894 <zoEncoderGetPos>
    239c:	e6 0e       	add	r14, r22
    239e:	f7 1e       	adc	r15, r23
    23a0:	08 1f       	adc	r16, r24
    23a2:	19 1f       	adc	r17, r25
    23a4:	c8 01       	movw	r24, r16
    23a6:	b7 01       	movw	r22, r14
    23a8:	0e 94 a1 0e 	call	0x1d42	; 0x1d42 <zoProfiledMoveAbsolute>
		break;
	}
	
	//indicate execution of buffered setpoint
	enterCritical();
    23ac:	0f b6       	in	r0, 0x3f	; 63
    23ae:	0f 92       	push	r0
    23b0:	f8 94       	cli
	Sms.BufferdSetPoint.type = ZO_SMS_SETPOINT_NONE;
    23b2:	10 92 61 01 	sts	0x0161, r1
	exitCritical();
    23b6:	0f 90       	pop	r0
    23b8:	0f be       	out	0x3f, r0	; 63
}
    23ba:	1f 91       	pop	r17
    23bc:	0f 91       	pop	r16
    23be:	ff 90       	pop	r15
    23c0:	ef 90       	pop	r14
    23c2:	08 95       	ret
{
	enterCritical();
	ZO_SMS_SETPOINT_TYPE spType = Sms.BufferdSetPoint.type;
	exitCritical();

	switch(spType)
    23c4:	81 30       	cpi	r24, 0x01	; 1
    23c6:	c9 f1       	breq	.+114    	; 0x243a <zoCommandDoMove+0xe4>
    23c8:	82 30       	cpi	r24, 0x02	; 2
    23ca:	b8 f3       	brcs	.-18     	; 0x23ba <zoCommandDoMove+0x64>
		s32ToStr((s32)Sms.BufferdSetPoint.value,packet->data);
		zoCommandVelocityMove(packet);
		break;

	case ZO_SMS_SETPOINT_ABSOLUTE_POSITION:
		s32ToStr(Sms.BufferdSetPoint.value,packet->data);
    23cc:	80 91 62 01 	lds	r24, 0x0162
    23d0:	90 91 63 01 	lds	r25, 0x0163
    23d4:	a0 91 64 01 	lds	r26, 0x0164
    23d8:	b0 91 65 01 	lds	r27, 0x0165

inline void s32ToStr(s32 data, u08* str)
{
	S32* num;
	num = (S32*)str;
	num->all = data;
    23dc:	84 83       	std	Z+4, r24	; 0x04
    23de:	95 83       	std	Z+5, r25	; 0x05
    23e0:	a6 83       	std	Z+6, r26	; 0x06
    23e2:	b7 83       	std	Z+7, r27	; 0x07
/*08*/	void zoCommandAbsolutePositionMove(ZO_PROTOCOL_PACKET *packet)
{
	s32 pos;
	pos = strToS32(packet->data);

	enterCritical();
    23e4:	0f b6       	in	r0, 0x3f	; 63
    23e6:	0f 92       	push	r0
    23e8:	f8 94       	cli
	Sms.Control.State = ZO_SMS_CONTROL_POSITION_CONTROL;
    23ea:	21 e0       	ldi	r18, 0x01	; 1
    23ec:	20 93 03 01 	sts	0x0103, r18
	Sms.Pid.SetPoint = pos;
    23f0:	80 93 57 01 	sts	0x0157, r24
    23f4:	90 93 58 01 	sts	0x0158, r25
    23f8:	a0 93 59 01 	sts	0x0159, r26
    23fc:	b0 93 5a 01 	sts	0x015A, r27
	exitCritical();
    2400:	0f 90       	pop	r0
    2402:	0f be       	out	0x3f, r0	; 63
    2404:	d3 cf       	rjmp	.-90     	; 0x23ac <zoCommandDoMove+0x56>
		s32ToStr(Sms.BufferdSetPoint.value,packet->data);
		zoCommandRelativePositionMove(packet);
		break;

	case ZO_SMS_SETPOINT_PROFILED_VELOCITY:
		s32ToStr((s32)Sms.BufferdSetPoint.value,packet->data);
    2406:	60 91 62 01 	lds	r22, 0x0162
    240a:	70 91 63 01 	lds	r23, 0x0163
    240e:	80 91 64 01 	lds	r24, 0x0164
    2412:	90 91 65 01 	lds	r25, 0x0165
    2416:	64 83       	std	Z+4, r22	; 0x04
    2418:	75 83       	std	Z+5, r23	; 0x05
    241a:	86 83       	std	Z+6, r24	; 0x06
    241c:	97 83       	std	Z+7, r25	; 0x07
/*0A*/  void zoCommandProfiledVelocityMove(ZO_PROTOCOL_PACKET *packet)
{
	s32 vel;

	vel = strToS32(packet->data);
	zoProfiledVelocity(vel);
    241e:	0e 94 0b 0d 	call	0x1a16	; 0x1a16 <zoProfiledVelocity>
    2422:	c4 cf       	rjmp	.-120    	; 0x23ac <zoCommandDoMove+0x56>
		s32ToStr((s32)Sms.BufferdSetPoint.value,packet->data);
		zoCommandProfiledVelocityMove(packet);
		break;

	case ZO_SMS_SETPOINT_PROFILED_ABSOLUTE_POSITION:
		zoProfiledMoveAbsolute(Sms.BufferdSetPoint.value);
    2424:	60 91 62 01 	lds	r22, 0x0162
    2428:	70 91 63 01 	lds	r23, 0x0163
    242c:	80 91 64 01 	lds	r24, 0x0164
    2430:	90 91 65 01 	lds	r25, 0x0165
    2434:	0e 94 a1 0e 	call	0x1d42	; 0x1d42 <zoProfiledMoveAbsolute>
    2438:	b9 cf       	rjmp	.-142    	; 0x23ac <zoCommandDoMove+0x56>
    243a:	80 91 62 01 	lds	r24, 0x0162
    243e:	90 91 63 01 	lds	r25, 0x0163
    2442:	a0 91 64 01 	lds	r26, 0x0164
    2446:	b0 91 65 01 	lds	r27, 0x0165
    244a:	84 83       	std	Z+4, r24	; 0x04
    244c:	95 83       	std	Z+5, r25	; 0x05
    244e:	a6 83       	std	Z+6, r26	; 0x06
    2450:	b7 83       	std	Z+7, r27	; 0x07
		return;
		break;

	case ZO_SMS_SETPOINT_VELOCITY:
		s32ToStr((s32)Sms.BufferdSetPoint.value,packet->data);
		zoCommandVelocityMove(packet);
    2452:	cf 01       	movw	r24, r30
    2454:	0e 94 64 0e 	call	0x1cc8	; 0x1cc8 <zoCommandVelocityMove>
    2458:	a9 cf       	rjmp	.-174    	; 0x23ac <zoCommandDoMove+0x56>
		s32ToStr(Sms.BufferdSetPoint.value,packet->data);
		zoCommandAbsolutePositionMove(packet);
		break;

	case ZO_SMS_SETPOINT_RELATIVE_POSITION:
		s32ToStr(Sms.BufferdSetPoint.value,packet->data);
    245a:	80 91 62 01 	lds	r24, 0x0162
    245e:	90 91 63 01 	lds	r25, 0x0163
    2462:	a0 91 64 01 	lds	r26, 0x0164
    2466:	b0 91 65 01 	lds	r27, 0x0165
    246a:	84 83       	std	Z+4, r24	; 0x04
    246c:	95 83       	std	Z+5, r25	; 0x05
    246e:	a6 83       	std	Z+6, r26	; 0x06
    2470:	b7 83       	std	Z+7, r27	; 0x07
{
	s32 pos;

	pos = strToS32(packet->data);

	enterCritical();
    2472:	0f b6       	in	r0, 0x3f	; 63
    2474:	0f 92       	push	r0
    2476:	f8 94       	cli
	Sms.Control.State = ZO_SMS_CONTROL_POSITION_CONTROL;
    2478:	21 e0       	ldi	r18, 0x01	; 1
    247a:	20 93 03 01 	sts	0x0103, r18
	Sms.Pid.SetPoint += pos;
    247e:	20 91 57 01 	lds	r18, 0x0157
    2482:	30 91 58 01 	lds	r19, 0x0158
    2486:	40 91 59 01 	lds	r20, 0x0159
    248a:	50 91 5a 01 	lds	r21, 0x015A
    248e:	28 0f       	add	r18, r24
    2490:	39 1f       	adc	r19, r25
    2492:	4a 1f       	adc	r20, r26
    2494:	5b 1f       	adc	r21, r27
    2496:	20 93 57 01 	sts	0x0157, r18
    249a:	30 93 58 01 	sts	0x0158, r19
    249e:	40 93 59 01 	sts	0x0159, r20
    24a2:	50 93 5a 01 	sts	0x015A, r21
	exitCritical();
    24a6:	0f 90       	pop	r0
    24a8:	0f be       	out	0x3f, r0	; 63
    24aa:	80 cf       	rjmp	.-256    	; 0x23ac <zoCommandDoMove+0x56>

000024ac <zoCommandProfiledRelativePositionMove>:
	pos = strToS32(packet->data);
	zoProfiledMoveAbsolute(pos);
}

/*0C*/	void zoCommandProfiledRelativePositionMove(ZO_PROTOCOL_PACKET *packet)
{
    24ac:	ef 92       	push	r14
    24ae:	ff 92       	push	r15
    24b0:	0f 93       	push	r16
    24b2:	1f 93       	push	r17

inline s32 strToS32(u08* str)
{
	S32 *num;
	num = (S32*)str;
	return num->all;
    24b4:	fc 01       	movw	r30, r24
    24b6:	e4 80       	ldd	r14, Z+4	; 0x04
    24b8:	f5 80       	ldd	r15, Z+5	; 0x05
    24ba:	06 81       	ldd	r16, Z+6	; 0x06
    24bc:	17 81       	ldd	r17, Z+7	; 0x07
	s32 pos;
	
	pos = strToS32(packet->data) + zoEncoderGetPos();
    24be:	0e 94 4a 04 	call	0x894	; 0x894 <zoEncoderGetPos>
	zoProfiledMoveAbsolute(pos);
    24c2:	e6 0e       	add	r14, r22
    24c4:	f7 1e       	adc	r15, r23
    24c6:	08 1f       	adc	r16, r24
    24c8:	19 1f       	adc	r17, r25
    24ca:	c8 01       	movw	r24, r16
    24cc:	b7 01       	movw	r22, r14
    24ce:	0e 94 a1 0e 	call	0x1d42	; 0x1d42 <zoProfiledMoveAbsolute>
}
    24d2:	1f 91       	pop	r17
    24d4:	0f 91       	pop	r16
    24d6:	ff 90       	pop	r15
    24d8:	ef 90       	pop	r14
    24da:	08 95       	ret

000024dc <zoCommandProfiledAbsolutePositionMove>:
/*0B*/  void zoCommandProfiledAbsolutePositionMove(ZO_PROTOCOL_PACKET *packet)
{
	s32 pos;

	pos = strToS32(packet->data);
	zoProfiledMoveAbsolute(pos);
    24dc:	fc 01       	movw	r30, r24
    24de:	64 81       	ldd	r22, Z+4	; 0x04
    24e0:	75 81       	ldd	r23, Z+5	; 0x05
    24e2:	86 81       	ldd	r24, Z+6	; 0x06
    24e4:	97 81       	ldd	r25, Z+7	; 0x07
    24e6:	0e 94 a1 0e 	call	0x1d42	; 0x1d42 <zoProfiledMoveAbsolute>
}
    24ea:	08 95       	ret

000024ec <zoCommandGetWarning>:

	u16ToStr(zoAdcRead(ZO_ADC_CHANNEL_7),packet->data);
}

/*73*/	void zoCommandGetWarning(ZO_PROTOCOL_PACKET *packet)
{
    24ec:	0f 93       	push	r16
    24ee:	1f 93       	push	r17
    24f0:	cf 93       	push	r28
    24f2:	df 93       	push	r29
    24f4:	8c 01       	movw	r16, r24
	packet->byteCount = 0;
    24f6:	fc 01       	movw	r30, r24
    24f8:	13 82       	std	Z+3, r1	; 0x03
    24fa:	0f c0       	rjmp	.+30     	; 0x251a <zoCommandGetWarning+0x2e>
	while(!zoErrorIsEmpty(&zoSmsWarning))
	{
		packet->data[packet->byteCount] = zoErrorGet(&zoSmsWarning);
    24fc:	f8 01       	movw	r30, r16
    24fe:	83 81       	ldd	r24, Z+3	; 0x03
    2500:	c8 2f       	mov	r28, r24
    2502:	d0 e0       	ldi	r29, 0x00	; 0
    2504:	89 ea       	ldi	r24, 0xA9	; 169
    2506:	91 e0       	ldi	r25, 0x01	; 1
    2508:	0e 94 b5 00 	call	0x16a	; 0x16a <zoErrorGet>
    250c:	c0 0f       	add	r28, r16
    250e:	d1 1f       	adc	r29, r17
    2510:	8c 83       	std	Y+4, r24	; 0x04
		packet->byteCount++;
    2512:	f8 01       	movw	r30, r16
    2514:	83 81       	ldd	r24, Z+3	; 0x03
    2516:	8f 5f       	subi	r24, 0xFF	; 255
    2518:	83 83       	std	Z+3, r24	; 0x03
}

/*73*/	void zoCommandGetWarning(ZO_PROTOCOL_PACKET *packet)
{
	packet->byteCount = 0;
	while(!zoErrorIsEmpty(&zoSmsWarning))
    251a:	89 ea       	ldi	r24, 0xA9	; 169
    251c:	91 e0       	ldi	r25, 0x01	; 1
    251e:	0e 94 ad 00 	call	0x15a	; 0x15a <zoErrorIsEmpty>
    2522:	88 23       	and	r24, r24
    2524:	59 f3       	breq	.-42     	; 0x24fc <zoCommandGetWarning+0x10>
	{
		packet->data[packet->byteCount] = zoErrorGet(&zoSmsWarning);
		packet->byteCount++;
	}
}
    2526:	df 91       	pop	r29
    2528:	cf 91       	pop	r28
    252a:	1f 91       	pop	r17
    252c:	0f 91       	pop	r16
    252e:	08 95       	ret

00002530 <zoCommandGetCurrent>:

	s32ToStr(zoEncoderGetVel(),packet->data);	
}

/*72*/	void zoCommandGetCurrent(ZO_PROTOCOL_PACKET *packet)
{
    2530:	0f 93       	push	r16
    2532:	1f 93       	push	r17
    2534:	8c 01       	movw	r16, r24
	packet->byteCount = 2;
    2536:	82 e0       	ldi	r24, 0x02	; 2
    2538:	f8 01       	movw	r30, r16
    253a:	83 83       	std	Z+3, r24	; 0x03

	u16ToStr(zoAdcRead(ZO_ADC_CHANNEL_7),packet->data);
    253c:	87 e0       	ldi	r24, 0x07	; 7
    253e:	0e 94 bc 16 	call	0x2d78	; 0x2d78 <zoAdcRead>

inline void u16ToStr(u16 data, u08* str)
{
	U16* num;
	num = (U16*)str;
	num->all = data;
    2542:	f8 01       	movw	r30, r16
    2544:	95 83       	std	Z+5, r25	; 0x05
    2546:	84 83       	std	Z+4, r24	; 0x04
}
    2548:	1f 91       	pop	r17
    254a:	0f 91       	pop	r16
    254c:	08 95       	ret

0000254e <zoCommandGetAnalogIn>:

	packet->data[0] = in;
}

/*6E*/  void zoCommandGetAnalogIn(ZO_PROTOCOL_PACKET *packet)
{
    254e:	0f 93       	push	r16
    2550:	1f 93       	push	r17
    2552:	8c 01       	movw	r16, r24
	packet->byteCount = 8;
    2554:	88 e0       	ldi	r24, 0x08	; 8
    2556:	f8 01       	movw	r30, r16
    2558:	83 83       	std	Z+3, r24	; 0x03
	u16ToStr(zoAdcRead(ZO_ADC_CHANNEL_0),packet->data);
    255a:	80 e0       	ldi	r24, 0x00	; 0
    255c:	0e 94 bc 16 	call	0x2d78	; 0x2d78 <zoAdcRead>
    2560:	f8 01       	movw	r30, r16
    2562:	95 83       	std	Z+5, r25	; 0x05
    2564:	84 83       	std	Z+4, r24	; 0x04
	u16ToStr(zoAdcRead(ZO_ADC_CHANNEL_1),&packet->data[2]);
    2566:	81 e0       	ldi	r24, 0x01	; 1
    2568:	0e 94 bc 16 	call	0x2d78	; 0x2d78 <zoAdcRead>
    256c:	f8 01       	movw	r30, r16
    256e:	97 83       	std	Z+7, r25	; 0x07
    2570:	86 83       	std	Z+6, r24	; 0x06
	u16ToStr(zoAdcRead(ZO_ADC_CHANNEL_2),&packet->data[4]);
    2572:	82 e0       	ldi	r24, 0x02	; 2
    2574:	0e 94 bc 16 	call	0x2d78	; 0x2d78 <zoAdcRead>
    2578:	f8 01       	movw	r30, r16
    257a:	91 87       	std	Z+9, r25	; 0x09
    257c:	80 87       	std	Z+8, r24	; 0x08
	u16ToStr(zoAdcRead(ZO_ADC_CHANNEL_3),&packet->data[6]);
    257e:	83 e0       	ldi	r24, 0x03	; 3
    2580:	0e 94 bc 16 	call	0x2d78	; 0x2d78 <zoAdcRead>
    2584:	f8 01       	movw	r30, r16
    2586:	93 87       	std	Z+11, r25	; 0x0b
    2588:	82 87       	std	Z+10, r24	; 0x0a
}
    258a:	1f 91       	pop	r17
    258c:	0f 91       	pop	r16
    258e:	08 95       	ret

00002590 <zoCommandGetAbsolutePosition>:

	s32ToStr(zoEncoderGetPos(),packet->data);
}

/*70*/	void zoCommandGetAbsolutePosition(ZO_PROTOCOL_PACKET *packet)
{
    2590:	0f 93       	push	r16
    2592:	1f 93       	push	r17
    2594:	8c 01       	movw	r16, r24
	packet->byteCount = 2;
    2596:	82 e0       	ldi	r24, 0x02	; 2
    2598:	f8 01       	movw	r30, r16
    259a:	83 83       	std	Z+3, r24	; 0x03

	u16ToStr(zoEncoderGetPosAbsolute(),packet->data);
    259c:	0e 94 51 03 	call	0x6a2	; 0x6a2 <zoEncoderGetPosAbsolute>
    25a0:	f8 01       	movw	r30, r16
    25a2:	95 83       	std	Z+5, r25	; 0x05
    25a4:	84 83       	std	Z+4, r24	; 0x04
}
    25a6:	1f 91       	pop	r17
    25a8:	0f 91       	pop	r16
    25aa:	08 95       	ret

000025ac <zoCommandSetErrorReportingLevel>:
	Sms.Control.State = ZO_SMS_CONTROL_NO_CONTROL;
	exitCritical();
	zoMotorSetState(FALSE);
}
/*1C*/  void zoCommandSetErrorReportingLevel(ZO_PROTOCOL_PACKET *packet)
{
    25ac:	cf 93       	push	r28
    25ae:	df 93       	push	r29
    25b0:	ec 01       	movw	r28, r24
	//only error reporting levels 0 and 1 exist.
	if(packet->data[0]>1)
    25b2:	6c 81       	ldd	r22, Y+4	; 0x04
    25b4:	62 30       	cpi	r22, 0x02	; 2
    25b6:	40 f0       	brcs	.+16     	; 0x25c8 <zoCommandSetErrorReportingLevel+0x1c>
	{
		zoErrorPut(&zoCommandsError,ZO_COMMANDS_ERROR_INVALID_ARGUMENT);
    25b8:	8c eb       	ldi	r24, 0xBC	; 188
    25ba:	91 e0       	ldi	r25, 0x01	; 1
    25bc:	63 e0       	ldi	r22, 0x03	; 3
    25be:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <zoErrorPut>
	eeprom_write_byte((u08*)ZO_EEPROM_ADDRESS_ERROR_REPORTING_LVL, packet->data[0]);
	
	enterCritical();
	Sms.Settings.errorReportingLevel = packet->data[0];
	exitCritical();	
}
    25c2:	df 91       	pop	r29
    25c4:	cf 91       	pop	r28
    25c6:	08 95       	ret
	{
		zoErrorPut(&zoCommandsError,ZO_COMMANDS_ERROR_INVALID_ARGUMENT);
		return;
	}
	
	eeprom_write_byte((u08*)ZO_EEPROM_ADDRESS_ERROR_REPORTING_LVL, packet->data[0]);
    25c8:	80 ec       	ldi	r24, 0xC0	; 192
    25ca:	90 e0       	ldi	r25, 0x00	; 0
    25cc:	0e 94 1f 27 	call	0x4e3e	; 0x4e3e <__eewr_byte_m328p>
	
	enterCritical();
    25d0:	0f b6       	in	r0, 0x3f	; 63
    25d2:	0f 92       	push	r0
    25d4:	f8 94       	cli
	Sms.Settings.errorReportingLevel = packet->data[0];
    25d6:	8c 81       	ldd	r24, Y+4	; 0x04
    25d8:	80 93 17 01 	sts	0x0117, r24
	exitCritical();	
    25dc:	0f 90       	pop	r0
    25de:	0f be       	out	0x3f, r0	; 63
}
    25e0:	df 91       	pop	r29
    25e2:	cf 91       	pop	r28
    25e4:	08 95       	ret

000025e6 <zoCommandSetLocalAcceptanceMask>:
	//only write to eeprom. A restart is required for setting to take effect
	eeprom_write_byte((u08*)ZO_EEPROM_ADDRESS_NODE_ID, packet->data[0]);
}
/*16*/  void zoCommandSetLocalAcceptanceMask(ZO_PROTOCOL_PACKET *packet)
{
	if( (packet->data[0] == 0x00) )
    25e6:	fc 01       	movw	r30, r24
    25e8:	64 81       	ldd	r22, Z+4	; 0x04
    25ea:	66 23       	and	r22, r22
    25ec:	29 f0       	breq	.+10     	; 0x25f8 <zoCommandSetLocalAcceptanceMask+0x12>
	{
		zoErrorPut(&zoCommandsError,ZO_COMMANDS_ERROR_INVALID_ARGUMENT);
		return;
	}

	eeprom_write_byte((u08*)ZO_EEPROM_ADDRESS_LAM, packet->data[0]);
    25ee:	80 eb       	ldi	r24, 0xB0	; 176
    25f0:	90 e0       	ldi	r25, 0x00	; 0
    25f2:	0e 94 1f 27 	call	0x4e3e	; 0x4e3e <__eewr_byte_m328p>
    25f6:	08 95       	ret
}
/*16*/  void zoCommandSetLocalAcceptanceMask(ZO_PROTOCOL_PACKET *packet)
{
	if( (packet->data[0] == 0x00) )
	{
		zoErrorPut(&zoCommandsError,ZO_COMMANDS_ERROR_INVALID_ARGUMENT);
    25f8:	8c eb       	ldi	r24, 0xBC	; 188
    25fa:	91 e0       	ldi	r25, 0x01	; 1
    25fc:	63 e0       	ldi	r22, 0x03	; 3
    25fe:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <zoErrorPut>
    2602:	08 95       	ret

00002604 <zoCommandSetNodeID>:
}

/*15*/	void zoCommandSetNodeID(ZO_PROTOCOL_PACKET *packet)
{
	//node id of 0x00 is forbidden by the protocol
	if( (packet->data[0] == 0x00) || (packet->data[0] > 0x7F) )
    2604:	fc 01       	movw	r30, r24
    2606:	64 81       	ldd	r22, Z+4	; 0x04
    2608:	16 16       	cp	r1, r22
    260a:	2c f4       	brge	.+10     	; 0x2616 <zoCommandSetNodeID+0x12>
		zoErrorPut(&zoCommandsError,ZO_COMMANDS_ERROR_INVALID_ARGUMENT);
		return;
	}
	
	//only write to eeprom. A restart is required for setting to take effect
	eeprom_write_byte((u08*)ZO_EEPROM_ADDRESS_NODE_ID, packet->data[0]);
    260c:	80 e0       	ldi	r24, 0x00	; 0
    260e:	90 e0       	ldi	r25, 0x00	; 0
    2610:	0e 94 1f 27 	call	0x4e3e	; 0x4e3e <__eewr_byte_m328p>
    2614:	08 95       	ret
/*15*/	void zoCommandSetNodeID(ZO_PROTOCOL_PACKET *packet)
{
	//node id of 0x00 is forbidden by the protocol
	if( (packet->data[0] == 0x00) || (packet->data[0] > 0x7F) )
	{
		zoErrorPut(&zoCommandsError,ZO_COMMANDS_ERROR_INVALID_ARGUMENT);
    2616:	8c eb       	ldi	r24, 0xBC	; 188
    2618:	91 e0       	ldi	r25, 0x01	; 1
    261a:	63 e0       	ldi	r22, 0x03	; 3
    261c:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <zoErrorPut>
    2620:	08 95       	ret

00002622 <zoCommandConfigureDigitalIO>:
	Sms.BufferdSetPoint.value = pos;
	exitCritical();
}

/*13*/	void zoCommandConfigureDigitalIO(ZO_PROTOCOL_PACKET *packet)
{
    2622:	ff 92       	push	r15
    2624:	0f 93       	push	r16
    2626:	1f 93       	push	r17
	u08 dir;

	dir = packet->data[0];
    2628:	fc 01       	movw	r30, r24
    262a:	04 81       	ldd	r16, Z+4	; 0x04
	
	eeprom_write_byte((u08*)ZO_EEPROM_ADDRESS_DIGITAL_IO_CONFIG, dir & 0x0F);
    262c:	ff e0       	ldi	r31, 0x0F	; 15
    262e:	ff 2e       	mov	r15, r31
    2630:	f0 22       	and	r15, r16
    2632:	80 e8       	ldi	r24, 0x80	; 128
    2634:	90 e0       	ldi	r25, 0x00	; 0
    2636:	6f 2d       	mov	r22, r15
    2638:	0e 94 1f 27 	call	0x4e3e	; 0x4e3e <__eewr_byte_m328p>

	enterCritical();
    263c:	0f b6       	in	r0, 0x3f	; 63
    263e:	0f 92       	push	r0
    2640:	f8 94       	cli
	//set digital IO 1 direction -> portD7
	DDRD = (DDRD & (~0x80)) | ( (dir<<7) & 0x80 );
    2642:	8a b1       	in	r24, 0x0a	; 10
    2644:	10 e0       	ldi	r17, 0x00	; 0
    2646:	98 01       	movw	r18, r16
    2648:	36 95       	lsr	r19
    264a:	32 2f       	mov	r19, r18
    264c:	22 27       	eor	r18, r18
    264e:	37 95       	ror	r19
    2650:	27 95       	ror	r18
    2652:	8f 77       	andi	r24, 0x7F	; 127
    2654:	82 2b       	or	r24, r18
    2656:	8a b9       	out	0x0a, r24	; 10
	//set digital IO 2,3,4 direction -> portB3,4,5 respectively
	DDRB = (DDRB & (~0x38)) | ( (dir<<2) & 0x38 );
    2658:	84 b1       	in	r24, 0x04	; 4
    265a:	00 0f       	add	r16, r16
    265c:	11 1f       	adc	r17, r17
    265e:	00 0f       	add	r16, r16
    2660:	11 1f       	adc	r17, r17
    2662:	08 73       	andi	r16, 0x38	; 56
    2664:	87 7c       	andi	r24, 0xC7	; 199
    2666:	08 2b       	or	r16, r24
    2668:	04 b9       	out	0x04, r16	; 4
	
	Sms.Settings.DigitalIoConfig = dir & 0x0F;
    266a:	f0 92 09 01 	sts	0x0109, r15
	exitCritical();
    266e:	0f 90       	pop	r0
    2670:	0f be       	out	0x3f, r0	; 63
}
    2672:	1f 91       	pop	r17
    2674:	0f 91       	pop	r16
    2676:	ff 90       	pop	r15
    2678:	08 95       	ret

0000267a <zoCommandStop>:
	Sms.Pid.SetPoint = zoEncoderGetPos();
	exitCritical();
}
/*1B*/	void zoCommandStop(ZO_PROTOCOL_PACKET *packet)
{
	enterCritical();
    267a:	0f b6       	in	r0, 0x3f	; 63
    267c:	0f 92       	push	r0
    267e:	f8 94       	cli
	Sms.Control.State = ZO_SMS_CONTROL_NO_CONTROL;
    2680:	10 92 03 01 	sts	0x0103, r1
	exitCritical();
    2684:	0f 90       	pop	r0
    2686:	0f be       	out	0x3f, r0	; 63
	zoMotorSetState(FALSE);
    2688:	80 e0       	ldi	r24, 0x00	; 0
    268a:	0e 94 96 05 	call	0xb2c	; 0xb2c <zoMotorSetState>
}
    268e:	08 95       	ret

00002690 <zoCommandStart>:
{
	zoEncoderReset();
}
/*19*/	void zoCommandStart(ZO_PROTOCOL_PACKET *packet)
{
	enterCritical();
    2690:	0f b6       	in	r0, 0x3f	; 63
    2692:	0f 92       	push	r0
    2694:	f8 94       	cli
	Sms.BufferdSetPoint.type = ZO_SMS_SETPOINT_NONE;
    2696:	10 92 61 01 	sts	0x0161, r1
	zoEncoderReset();
    269a:	0e 94 0c 04 	call	0x818	; 0x818 <zoEncoderReset>
	Sms.Pid.PrevError = 0;
    269e:	10 92 4b 01 	sts	0x014B, r1
    26a2:	10 92 4c 01 	sts	0x014C, r1
    26a6:	10 92 4d 01 	sts	0x014D, r1
    26aa:	10 92 4e 01 	sts	0x014E, r1
	Sms.Pid.Integral = 0;
    26ae:	10 92 4f 01 	sts	0x014F, r1
    26b2:	10 92 50 01 	sts	0x0150, r1
    26b6:	10 92 51 01 	sts	0x0151, r1
    26ba:	10 92 52 01 	sts	0x0152, r1
	Sms.Control.State = ZO_SMS_CONTROL_POSITION_CONTROL;
    26be:	81 e0       	ldi	r24, 0x01	; 1
    26c0:	80 93 03 01 	sts	0x0103, r24
	Sms.Pid.SetPoint = 0;
    26c4:	10 92 57 01 	sts	0x0157, r1
    26c8:	10 92 58 01 	sts	0x0158, r1
    26cc:	10 92 59 01 	sts	0x0159, r1
    26d0:	10 92 5a 01 	sts	0x015A, r1
	zoMotorSetState(TRUE);
    26d4:	8f ef       	ldi	r24, 0xFF	; 255
    26d6:	0e 94 96 05 	call	0xb2c	; 0xb2c <zoMotorSetState>
	exitCritical();
    26da:	0f 90       	pop	r0
    26dc:	0f be       	out	0x3f, r0	; 63
}
    26de:	08 95       	ret

000026e0 <zoCommandResetPosition>:
	
	eeprom_write_dword((u32*)ZO_EEPROM_ADDRESS_BAUD_UART, baud);
}
/*18*/	void zoCommandResetPosition(ZO_PROTOCOL_PACKET *packet)
{
	zoEncoderReset();
    26e0:	0e 94 0c 04 	call	0x818	; 0x818 <zoEncoderReset>
}
    26e4:	08 95       	ret

000026e6 <zoCommandSetBaudUart>:
}
/*17*/  void zoCommandSetBaudUart(ZO_PROTOCOL_PACKET *packet)
{
	u32 baud;

	baud = strToS32(packet->data);
    26e6:	fc 01       	movw	r30, r24
    26e8:	44 81       	ldd	r20, Z+4	; 0x04
    26ea:	55 81       	ldd	r21, Z+5	; 0x05
    26ec:	66 81       	ldd	r22, Z+6	; 0x06
    26ee:	77 81       	ldd	r23, Z+7	; 0x07

	if( ( baud > 115200 ) || (baud == 0) )
    26f0:	db 01       	movw	r26, r22
    26f2:	ca 01       	movw	r24, r20
    26f4:	01 97       	sbiw	r24, 0x01	; 1
    26f6:	a1 09       	sbc	r26, r1
    26f8:	b1 09       	sbc	r27, r1
    26fa:	80 50       	subi	r24, 0x00	; 0
    26fc:	92 4c       	sbci	r25, 0xC2	; 194
    26fe:	a1 40       	sbci	r26, 0x01	; 1
    2700:	b0 40       	sbci	r27, 0x00	; 0
    2702:	28 f4       	brcc	.+10     	; 0x270e <zoCommandSetBaudUart+0x28>
	{
		zoErrorPut(&zoCommandsError,ZO_COMMANDS_ERROR_INVALID_ARGUMENT);
		return;
	}
	
	eeprom_write_dword((u32*)ZO_EEPROM_ADDRESS_BAUD_UART, baud);
    2704:	80 ea       	ldi	r24, 0xA0	; 160
    2706:	90 e0       	ldi	r25, 0x00	; 0
    2708:	0e 94 2d 27 	call	0x4e5a	; 0x4e5a <__eewr_dword_m328p>
    270c:	08 95       	ret

	baud = strToS32(packet->data);

	if( ( baud > 115200 ) || (baud == 0) )
	{
		zoErrorPut(&zoCommandsError,ZO_COMMANDS_ERROR_INVALID_ARGUMENT);
    270e:	8c eb       	ldi	r24, 0xBC	; 188
    2710:	91 e0       	ldi	r25, 0x01	; 1
    2712:	63 e0       	ldi	r22, 0x03	; 3
    2714:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <zoErrorPut>
    2718:	08 95       	ret

0000271a <zoCommandSetProfileVelocity>:
	Sms.Profile.DesiredAcceleration = pAccel;
	exitCritical();
}

/*04*/	void zoCommandSetProfileVelocity(ZO_PROTOCOL_PACKET *packet)
{
    271a:	ef 92       	push	r14
    271c:	ff 92       	push	r15
    271e:	0f 93       	push	r16
    2720:	1f 93       	push	r17

inline u32 strToU32(u08* str)
{
	U32 *num;
	num = (U32*)str;
	return num->all;
    2722:	fc 01       	movw	r30, r24
    2724:	e4 80       	ldd	r14, Z+4	; 0x04
    2726:	f5 80       	ldd	r15, Z+5	; 0x05
    2728:	06 81       	ldd	r16, Z+6	; 0x06
    272a:	17 81       	ldd	r17, Z+7	; 0x07
	u32 pVel;

	pVel = strToU32(packet->data);

	//Pointless to allow a profile velocity of zero
	if(pVel == 0)
    272c:	e1 14       	cp	r14, r1
    272e:	f1 04       	cpc	r15, r1
    2730:	01 05       	cpc	r16, r1
    2732:	11 05       	cpc	r17, r1
    2734:	c1 f0       	breq	.+48     	; 0x2766 <zoCommandSetProfileVelocity+0x4c>
	{
		zoErrorPut(&zoCommandsError,ZO_COMMANDS_ERROR_INVALID_ARGUMENT);
		return;
	}

	eeprom_write_dword((u32*)ZO_EEPROM_ADDRESS_PROFILE_VELOCITY, pVel);
    2736:	80 e7       	ldi	r24, 0x70	; 112
    2738:	90 e0       	ldi	r25, 0x00	; 0
    273a:	b8 01       	movw	r22, r16
    273c:	a7 01       	movw	r20, r14
    273e:	0e 94 2d 27 	call	0x4e5a	; 0x4e5a <__eewr_dword_m328p>
	
	enterCritical();
    2742:	0f b6       	in	r0, 0x3f	; 63
    2744:	0f 92       	push	r0
    2746:	f8 94       	cli
	Sms.Profile.DesiredVelocity = pVel;
    2748:	e0 92 3c 01 	sts	0x013C, r14
    274c:	f0 92 3d 01 	sts	0x013D, r15
    2750:	00 93 3e 01 	sts	0x013E, r16
    2754:	10 93 3f 01 	sts	0x013F, r17
	exitCritical();
    2758:	0f 90       	pop	r0
    275a:	0f be       	out	0x3f, r0	; 63
}
    275c:	1f 91       	pop	r17
    275e:	0f 91       	pop	r16
    2760:	ff 90       	pop	r15
    2762:	ef 90       	pop	r14
    2764:	08 95       	ret
	pVel = strToU32(packet->data);

	//Pointless to allow a profile velocity of zero
	if(pVel == 0)
	{
		zoErrorPut(&zoCommandsError,ZO_COMMANDS_ERROR_INVALID_ARGUMENT);
    2766:	8c eb       	ldi	r24, 0xBC	; 188
    2768:	91 e0       	ldi	r25, 0x01	; 1
    276a:	63 e0       	ldi	r22, 0x03	; 3
    276c:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <zoErrorPut>
	eeprom_write_dword((u32*)ZO_EEPROM_ADDRESS_PROFILE_VELOCITY, pVel);
	
	enterCritical();
	Sms.Profile.DesiredVelocity = pVel;
	exitCritical();
}
    2770:	1f 91       	pop	r17
    2772:	0f 91       	pop	r16
    2774:	ff 90       	pop	r15
    2776:	ef 90       	pop	r14
    2778:	08 95       	ret

0000277a <zoCommandSetProfileAcceleration>:
	Sms.Pid.GainD = gainD;
	exitCritical();
}

/*03*/	void zoCommandSetProfileAcceleration(ZO_PROTOCOL_PACKET *packet)
{
    277a:	ef 92       	push	r14
    277c:	ff 92       	push	r15
    277e:	0f 93       	push	r16
    2780:	1f 93       	push	r17
    2782:	fc 01       	movw	r30, r24
    2784:	e4 80       	ldd	r14, Z+4	; 0x04
    2786:	f5 80       	ldd	r15, Z+5	; 0x05
    2788:	06 81       	ldd	r16, Z+6	; 0x06
    278a:	17 81       	ldd	r17, Z+7	; 0x07
	u32 pAccel;

	pAccel = strToU32(packet->data);

	//Pointless to allow a profile acceleration of 0.
	if(pAccel == 0)
    278c:	e1 14       	cp	r14, r1
    278e:	f1 04       	cpc	r15, r1
    2790:	01 05       	cpc	r16, r1
    2792:	11 05       	cpc	r17, r1
    2794:	c1 f0       	breq	.+48     	; 0x27c6 <zoCommandSetProfileAcceleration+0x4c>
	{
		zoErrorPut(&zoCommandsError,ZO_COMMANDS_ERROR_INVALID_ARGUMENT);
		return;
	}

	eeprom_write_dword((u32*)ZO_EEPROM_ADDRESS_PROFILE_ACCELERATION, pAccel);
    2796:	80 e6       	ldi	r24, 0x60	; 96
    2798:	90 e0       	ldi	r25, 0x00	; 0
    279a:	b8 01       	movw	r22, r16
    279c:	a7 01       	movw	r20, r14
    279e:	0e 94 2d 27 	call	0x4e5a	; 0x4e5a <__eewr_dword_m328p>
	
	enterCritical();
    27a2:	0f b6       	in	r0, 0x3f	; 63
    27a4:	0f 92       	push	r0
    27a6:	f8 94       	cli
	Sms.Profile.DesiredAcceleration = pAccel;
    27a8:	e0 92 38 01 	sts	0x0138, r14
    27ac:	f0 92 39 01 	sts	0x0139, r15
    27b0:	00 93 3a 01 	sts	0x013A, r16
    27b4:	10 93 3b 01 	sts	0x013B, r17
	exitCritical();
    27b8:	0f 90       	pop	r0
    27ba:	0f be       	out	0x3f, r0	; 63
}
    27bc:	1f 91       	pop	r17
    27be:	0f 91       	pop	r16
    27c0:	ff 90       	pop	r15
    27c2:	ef 90       	pop	r14
    27c4:	08 95       	ret
	pAccel = strToU32(packet->data);

	//Pointless to allow a profile acceleration of 0.
	if(pAccel == 0)
	{
		zoErrorPut(&zoCommandsError,ZO_COMMANDS_ERROR_INVALID_ARGUMENT);
    27c6:	8c eb       	ldi	r24, 0xBC	; 188
    27c8:	91 e0       	ldi	r25, 0x01	; 1
    27ca:	63 e0       	ldi	r22, 0x03	; 3
    27cc:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <zoErrorPut>
	eeprom_write_dword((u32*)ZO_EEPROM_ADDRESS_PROFILE_ACCELERATION, pAccel);
	
	enterCritical();
	Sms.Profile.DesiredAcceleration = pAccel;
	exitCritical();
}
    27d0:	1f 91       	pop	r17
    27d2:	0f 91       	pop	r16
    27d4:	ff 90       	pop	r15
    27d6:	ef 90       	pop	r14
    27d8:	08 95       	ret

000027da <zoCommandSetCurrentLimitDuration>:
	Sms.Settings.CurrentLimit = currLim;
	exitCritical();
}

/*06*/	void zoCommandSetCurrentLimitDuration(ZO_PROTOCOL_PACKET *packet)
{
    27da:	0f 93       	push	r16
    27dc:	1f 93       	push	r17

inline u16 strToU16(u08* str)
{
	U16 *num;
	num = (U16*)str;
	return num->all;
    27de:	fc 01       	movw	r30, r24
    27e0:	04 81       	ldd	r16, Z+4	; 0x04
    27e2:	15 81       	ldd	r17, Z+5	; 0x05
	u16 currLimDurMiliSecs;

	currLimDurMiliSecs = strToU16(packet->data);
	eeprom_write_word((u16*)ZO_EEPROM_ADDRESS_CURRENT_LIMIT_DURATION, currLimDurMiliSecs);
    27e4:	80 e5       	ldi	r24, 0x50	; 80
    27e6:	90 e0       	ldi	r25, 0x00	; 0
    27e8:	b8 01       	movw	r22, r16
    27ea:	0e 94 35 27 	call	0x4e6a	; 0x4e6a <__eewr_word_m328p>
	
	enterCritical();
    27ee:	0f b6       	in	r0, 0x3f	; 63
    27f0:	0f 92       	push	r0
    27f2:	f8 94       	cli
	Sms.Settings.CurrentLimit = currLimDurMiliSecs;
    27f4:	10 93 0b 01 	sts	0x010B, r17
    27f8:	00 93 0a 01 	sts	0x010A, r16
	exitCritical();
    27fc:	0f 90       	pop	r0
    27fe:	0f be       	out	0x3f, r0	; 63
}
    2800:	1f 91       	pop	r17
    2802:	0f 91       	pop	r16
    2804:	08 95       	ret

00002806 <zoCommandSetCurrentLimit>:
	Sms.Profile.DesiredVelocity = pVel;
	exitCritical();
}

/*05*/	void zoCommandSetCurrentLimit(ZO_PROTOCOL_PACKET *packet)
{
    2806:	cf 93       	push	r28
    2808:	df 93       	push	r29
    280a:	fc 01       	movw	r30, r24
    280c:	c4 81       	ldd	r28, Z+4	; 0x04
    280e:	d5 81       	ldd	r29, Z+5	; 0x05
	u16 currLim;

	currLim = strToU16(packet->data);

	//Pointless to allow a current limit of zero
	if(currLim == 0)
    2810:	20 97       	sbiw	r28, 0x00	; 0
    2812:	89 f0       	breq	.+34     	; 0x2836 <zoCommandSetCurrentLimit+0x30>
	{
		zoErrorPut(&zoCommandsError,ZO_COMMANDS_ERROR_INVALID_ARGUMENT);
		return;
	}

	eeprom_write_word((u16*)ZO_EEPROM_ADDRESS_CURRENT_LIMIT, currLim);
    2814:	80 e4       	ldi	r24, 0x40	; 64
    2816:	90 e0       	ldi	r25, 0x00	; 0
    2818:	be 01       	movw	r22, r28
    281a:	0e 94 35 27 	call	0x4e6a	; 0x4e6a <__eewr_word_m328p>
	
	enterCritical();
    281e:	0f b6       	in	r0, 0x3f	; 63
    2820:	0f 92       	push	r0
    2822:	f8 94       	cli
	Sms.Settings.CurrentLimit = currLim;
    2824:	d0 93 0b 01 	sts	0x010B, r29
    2828:	c0 93 0a 01 	sts	0x010A, r28
	exitCritical();
    282c:	0f 90       	pop	r0
    282e:	0f be       	out	0x3f, r0	; 63
}
    2830:	df 91       	pop	r29
    2832:	cf 91       	pop	r28
    2834:	08 95       	ret
	currLim = strToU16(packet->data);

	//Pointless to allow a current limit of zero
	if(currLim == 0)
	{
		zoErrorPut(&zoCommandsError,ZO_COMMANDS_ERROR_INVALID_ARGUMENT);
    2836:	8c eb       	ldi	r24, 0xBC	; 188
    2838:	91 e0       	ldi	r25, 0x01	; 1
    283a:	63 e0       	ldi	r22, 0x03	; 3
    283c:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <zoErrorPut>
	eeprom_write_word((u16*)ZO_EEPROM_ADDRESS_CURRENT_LIMIT, currLim);
	
	enterCritical();
	Sms.Settings.CurrentLimit = currLim;
	exitCritical();
}
    2840:	df 91       	pop	r29
    2842:	cf 91       	pop	r28
    2844:	08 95       	ret

00002846 <zoCommandSetGainD>:
	Sms.Pid.GainI = gainI;
	exitCritical();
}

/*02*/	void zoCommandSetGainD(ZO_PROTOCOL_PACKET *packet)
{
    2846:	0f 93       	push	r16
    2848:	1f 93       	push	r17
    284a:	fc 01       	movw	r30, r24
    284c:	04 81       	ldd	r16, Z+4	; 0x04
    284e:	15 81       	ldd	r17, Z+5	; 0x05
	u16 gainD;

	gainD = strToU16(packet->data);
	eeprom_write_word((u16*)ZO_EEPROM_ADDRESS_GAIN_D, gainD);
    2850:	80 e3       	ldi	r24, 0x30	; 48
    2852:	90 e0       	ldi	r25, 0x00	; 0
    2854:	b8 01       	movw	r22, r16
    2856:	0e 94 35 27 	call	0x4e6a	; 0x4e6a <__eewr_word_m328p>
	
	enterCritical();
    285a:	0f b6       	in	r0, 0x3f	; 63
    285c:	0f 92       	push	r0
    285e:	f8 94       	cli
	Sms.Pid.GainD = gainD;
    2860:	10 93 46 01 	sts	0x0146, r17
    2864:	00 93 45 01 	sts	0x0145, r16
	exitCritical();
    2868:	0f 90       	pop	r0
    286a:	0f be       	out	0x3f, r0	; 63
}
    286c:	1f 91       	pop	r17
    286e:	0f 91       	pop	r16
    2870:	08 95       	ret

00002872 <zoCommandSetGainI>:
	Sms.Pid.GainP = gainP;
	exitCritical();	
}

/*01*/	void zoCommandSetGainI(ZO_PROTOCOL_PACKET *packet)
{
    2872:	0f 93       	push	r16
    2874:	1f 93       	push	r17
    2876:	fc 01       	movw	r30, r24
    2878:	04 81       	ldd	r16, Z+4	; 0x04
    287a:	15 81       	ldd	r17, Z+5	; 0x05
	u16 gainI;

	gainI = strToU16(packet->data);
	eeprom_write_word((u16*)ZO_EEPROM_ADDRESS_GAIN_I, gainI);
    287c:	80 e2       	ldi	r24, 0x20	; 32
    287e:	90 e0       	ldi	r25, 0x00	; 0
    2880:	b8 01       	movw	r22, r16
    2882:	0e 94 35 27 	call	0x4e6a	; 0x4e6a <__eewr_word_m328p>
	
	enterCritical();
    2886:	0f b6       	in	r0, 0x3f	; 63
    2888:	0f 92       	push	r0
    288a:	f8 94       	cli
	Sms.Pid.GainI = gainI;
    288c:	10 93 44 01 	sts	0x0144, r17
    2890:	00 93 43 01 	sts	0x0143, r16
	exitCritical();
    2894:	0f 90       	pop	r0
    2896:	0f be       	out	0x3f, r0	; 63
}
    2898:	1f 91       	pop	r17
    289a:	0f 91       	pop	r16
    289c:	08 95       	ret

0000289e <zoCommandSetGainP>:
	}
}

//command function definitions____________________________________________________________
/*00*/	void zoCommandSetGainP(ZO_PROTOCOL_PACKET *packet)
{
    289e:	0f 93       	push	r16
    28a0:	1f 93       	push	r17
    28a2:	fc 01       	movw	r30, r24
    28a4:	04 81       	ldd	r16, Z+4	; 0x04
    28a6:	15 81       	ldd	r17, Z+5	; 0x05
	u16 gainP;

	gainP = strToU16(packet->data);
	eeprom_write_word((u16*)ZO_EEPROM_ADDRESS_GAIN_P, gainP);
    28a8:	80 e1       	ldi	r24, 0x10	; 16
    28aa:	90 e0       	ldi	r25, 0x00	; 0
    28ac:	b8 01       	movw	r22, r16
    28ae:	0e 94 35 27 	call	0x4e6a	; 0x4e6a <__eewr_word_m328p>
	
	enterCritical();
    28b2:	0f b6       	in	r0, 0x3f	; 63
    28b4:	0f 92       	push	r0
    28b6:	f8 94       	cli
	Sms.Pid.GainP = gainP;
    28b8:	10 93 42 01 	sts	0x0142, r17
    28bc:	00 93 41 01 	sts	0x0141, r16
	exitCritical();	
    28c0:	0f 90       	pop	r0
    28c2:	0f be       	out	0x3f, r0	; 63
}
    28c4:	1f 91       	pop	r17
    28c6:	0f 91       	pop	r16
    28c8:	08 95       	ret

000028ca <zoCommandsServiceCommand>:
/*CB*/	zoCommandBrc[ZO_COMMAND_GLOBAL_STOP-ZO_PROTOCOL_BRC_COMMANDS_START]
		= zoCommandStop;
}

bool zoCommandsServiceCommand(ZO_PROTOCOL_PACKET *packet)
{
    28ca:	cf 93       	push	r28
    28cc:	df 93       	push	r29
    28ce:	ec 01       	movw	r28, r24
	if( packet->commandID >= ZO_COMMANDS_BRC_COMMANDS_END )
    28d0:	ea 81       	ldd	r30, Y+2	; 0x02
    28d2:	ec 3c       	cpi	r30, 0xCC	; 204
    28d4:	98 f5       	brcc	.+102    	; 0x293c <zoCommandsServiceCommand+0x72>
	{
		zoErrorPut(&zoCommandsError,ZO_COMMANDS_ERROR_INVALID_COMMAND_ID);
		return FALSE;
	}
	
	if( packet->commandID >= ZO_PROTOCOL_BRC_COMMANDS_START )
    28d6:	e8 3c       	cpi	r30, 0xC8	; 200
    28d8:	e8 f0       	brcs	.+58     	; 0x2914 <zoCommandsServiceCommand+0x4a>
	{
		//all broadcast commands of the supermodified have bytecount = zero
		if(packet->byteCount != 0)
    28da:	8b 81       	ldd	r24, Y+3	; 0x03
    28dc:	88 23       	and	r24, r24
    28de:	09 f0       	breq	.+2      	; 0x28e2 <zoCommandsServiceCommand+0x18>
    28e0:	70 c0       	rjmp	.+224    	; 0x29c2 <zoCommandsServiceCommand+0xf8>
			zoErrorPut(&zoCommandsError,ZO_COMMANDS_ERROR_INVALID_BYTECOUNT);

		//check if a command that needs the motor initialized is being called and the 
		//motor is not initialized
		if( !zoMotorGetState() && ( (packet->commandID == ZO_COMMAND_DO_MOVE) || 
    28e2:	0e 94 ac 05 	call	0xb58	; 0xb58 <zoMotorGetState>
    28e6:	88 23       	and	r24, r24
    28e8:	91 f1       	breq	.+100    	; 0x294e <zoCommandsServiceCommand+0x84>
			(packet->commandID == ZO_COMMAND_GLOBAL_HALT) ) )
		{
			zoErrorPut(&zoCommandsError,ZO_COMMANDS_ERROR_INVALID_COMMAND);
    28ea:	ea 81       	ldd	r30, Y+2	; 0x02
		}

		//above are warnings so try to execute the command
		zoCommandBrc[packet->commandID - ZO_PROTOCOL_BRC_COMMANDS_START](packet);
    28ec:	f0 e0       	ldi	r31, 0x00	; 0
    28ee:	ee 0f       	add	r30, r30
    28f0:	ff 1f       	adc	r31, r31
    28f2:	e0 55       	subi	r30, 0x50	; 80
    28f4:	ff 4f       	sbci	r31, 0xFF	; 255
    28f6:	01 90       	ld	r0, Z+
    28f8:	f0 81       	ld	r31, Z
    28fa:	e0 2d       	mov	r30, r0
    28fc:	ce 01       	movw	r24, r28
    28fe:	09 95       	icall

		if(!zoErrorIsEmpty(&zoCommandsError))
    2900:	8c eb       	ldi	r24, 0xBC	; 188
    2902:	91 e0       	ldi	r25, 0x01	; 1
    2904:	0e 94 ad 00 	call	0x15a	; 0x15a <zoErrorIsEmpty>
    2908:	88 23       	and	r24, r24
    290a:	09 f0       	breq	.+2      	; 0x290e <zoCommandsServiceCommand+0x44>
    290c:	53 c0       	rjmp	.+166    	; 0x29b4 <zoCommandsServiceCommand+0xea>
		}		
		
		zoCommandSet[packet->commandID](packet);
		return (zoErrorIsEmpty(&zoCommandsError));
	}
}
    290e:	df 91       	pop	r29
    2910:	cf 91       	pop	r28
    2912:	08 95       	ret
			return FALSE;

		return (zoErrorIsEmpty(&zoCommandsError));
	}
	
	if( packet->commandID >= ZO_COMMANDS_GET_COMMANDS_END)
    2914:	e4 37       	cpi	r30, 0x74	; 116
    2916:	90 f4       	brcc	.+36     	; 0x293c <zoCommandsServiceCommand+0x72>
	{
		zoErrorPut(&zoCommandsError,ZO_COMMANDS_ERROR_INVALID_COMMAND_ID);
		return FALSE;
	}

	if( packet->commandID >= ZO_PROTOCOL_GET_COMMANDS_START )
    2918:	e4 36       	cpi	r30, 0x64	; 100
    291a:	20 f5       	brcc	.+72     	; 0x2964 <zoCommandsServiceCommand+0x9a>
		}

		return (zoErrorIsEmpty(&zoCommandsError));
	}

	if( packet->commandID >= ZO_COMMANDS_SET_COMMANDS_END)
    291c:	ed 31       	cpi	r30, 0x1D	; 29
    291e:	70 f4       	brcc	.+28     	; 0x293c <zoCommandsServiceCommand+0x72>
	if( packet->commandID >= ZO_PROTOCOL_SET_COMMANDS_START )
	{
		//check received bytecount. In this case it is a serious error because if motor 
		//receives wrong data we might damage something. So if a wrong bytecount is 
		//received do not execute the command.
		if(packet->byteCount != zoCommandsSetByteCount[packet->commandID])
    2920:	f0 e0       	ldi	r31, 0x00	; 0
    2922:	ed 5f       	subi	r30, 0xFD	; 253
    2924:	fd 4f       	sbci	r31, 0xFD	; 253
    2926:	9b 81       	ldd	r25, Y+3	; 0x03
    2928:	80 81       	ld	r24, Z
    292a:	98 17       	cp	r25, r24
    292c:	71 f1       	breq	.+92     	; 0x298a <zoCommandsServiceCommand+0xc0>
		{
			zoErrorPut(&zoCommandsError,ZO_COMMANDS_ERROR_INVALID_SET_BYTECOUNT);
    292e:	8c eb       	ldi	r24, 0xBC	; 188
    2930:	91 e0       	ldi	r25, 0x01	; 1
    2932:	62 e0       	ldi	r22, 0x02	; 2
    2934:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <zoErrorPut>
    2938:	80 e0       	ldi	r24, 0x00	; 0
    293a:	e9 cf       	rjmp	.-46     	; 0x290e <zoCommandsServiceCommand+0x44>
		return (zoErrorIsEmpty(&zoCommandsError));
	}

	if( packet->commandID >= ZO_COMMANDS_SET_COMMANDS_END)
	{
		zoErrorPut(&zoCommandsError,ZO_COMMANDS_ERROR_INVALID_COMMAND_ID);
    293c:	8c eb       	ldi	r24, 0xBC	; 188
    293e:	91 e0       	ldi	r25, 0x01	; 1
    2940:	61 e0       	ldi	r22, 0x01	; 1
    2942:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <zoErrorPut>
    2946:	80 e0       	ldi	r24, 0x00	; 0
		}		
		
		zoCommandSet[packet->commandID](packet);
		return (zoErrorIsEmpty(&zoCommandsError));
	}
}
    2948:	df 91       	pop	r29
    294a:	cf 91       	pop	r28
    294c:	08 95       	ret
		if(packet->byteCount != 0)
			zoErrorPut(&zoCommandsError,ZO_COMMANDS_ERROR_INVALID_BYTECOUNT);

		//check if a command that needs the motor initialized is being called and the 
		//motor is not initialized
		if( !zoMotorGetState() && ( (packet->commandID == ZO_COMMAND_DO_MOVE) || 
    294e:	ea 81       	ldd	r30, Y+2	; 0x02
    2950:	e8 3c       	cpi	r30, 0xC8	; 200
    2952:	11 f0       	breq	.+4      	; 0x2958 <zoCommandsServiceCommand+0x8e>
    2954:	ea 3c       	cpi	r30, 0xCA	; 202
    2956:	51 f6       	brne	.-108    	; 0x28ec <zoCommandsServiceCommand+0x22>
			(packet->commandID == ZO_COMMAND_GLOBAL_HALT) ) )
		{
			zoErrorPut(&zoCommandsError,ZO_COMMANDS_ERROR_INVALID_COMMAND);
    2958:	8c eb       	ldi	r24, 0xBC	; 188
    295a:	91 e0       	ldi	r25, 0x01	; 1
    295c:	64 e0       	ldi	r22, 0x04	; 4
    295e:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <zoErrorPut>
    2962:	c3 cf       	rjmp	.-122    	; 0x28ea <zoCommandsServiceCommand+0x20>
	}

	if( packet->commandID >= ZO_PROTOCOL_GET_COMMANDS_START )
	{
		//execute the command even with wrong bytecount. Then issue the warning
		zoCommandGet[packet->commandID - ZO_PROTOCOL_GET_COMMANDS_START](packet);
    2964:	f0 e0       	ldi	r31, 0x00	; 0
    2966:	ee 0f       	add	r30, r30
    2968:	ff 1f       	adc	r31, r31
    296a:	e8 5a       	subi	r30, 0xA8	; 168
    296c:	fe 4f       	sbci	r31, 0xFE	; 254
    296e:	01 90       	ld	r0, Z+
    2970:	f0 81       	ld	r31, Z
    2972:	e0 2d       	mov	r30, r0
    2974:	09 95       	icall

		//all get commands should have a bytecount of zero
		if(packet->byteCount != 0)
    2976:	8b 81       	ldd	r24, Y+3	; 0x03
    2978:	88 23       	and	r24, r24
    297a:	e1 f0       	breq	.+56     	; 0x29b4 <zoCommandsServiceCommand+0xea>
		{
			zoErrorPut(&zoCommandsError,ZO_COMMANDS_ERROR_INVALID_BYTECOUNT);
    297c:	8c eb       	ldi	r24, 0xBC	; 188
    297e:	91 e0       	ldi	r25, 0x01	; 1
    2980:	65 e0       	ldi	r22, 0x05	; 5
    2982:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <zoErrorPut>
    2986:	80 e0       	ldi	r24, 0x00	; 0
    2988:	c2 cf       	rjmp	.-124    	; 0x290e <zoCommandsServiceCommand+0x44>
			return FALSE;
		}
		
		//check if a command that needs the motor initialized is being called and the 
		//motor is not initialized
		if( !zoMotorGetState() && ( ((packet->commandID >= ZO_COMMAND_VELOCITY_MOVE) && 
    298a:	0e 94 ac 05 	call	0xb58	; 0xb58 <zoMotorGetState>
    298e:	88 23       	and	r24, r24
    2990:	29 f5       	brne	.+74     	; 0x29dc <zoCommandsServiceCommand+0x112>
    2992:	ea 81       	ldd	r30, Y+2	; 0x02
    2994:	8e 2f       	mov	r24, r30
    2996:	87 50       	subi	r24, 0x07	; 7
    2998:	86 30       	cpi	r24, 0x06	; 6
    299a:	c8 f0       	brcs	.+50     	; 0x29ce <zoCommandsServiceCommand+0x104>
    299c:	ea 31       	cpi	r30, 0x1A	; 26
    299e:	b9 f0       	breq	.+46     	; 0x29ce <zoCommandsServiceCommand+0x104>
		{
			zoErrorPut(&zoCommandsError,ZO_COMMANDS_ERROR_INVALID_COMMAND);
			return FALSE;
		}		
		
		zoCommandSet[packet->commandID](packet);
    29a0:	f0 e0       	ldi	r31, 0x00	; 0
    29a2:	ee 0f       	add	r30, r30
    29a4:	ff 1f       	adc	r31, r31
    29a6:	e7 53       	subi	r30, 0x37	; 55
    29a8:	fe 4f       	sbci	r31, 0xFE	; 254
    29aa:	01 90       	ld	r0, Z+
    29ac:	f0 81       	ld	r31, Z
    29ae:	e0 2d       	mov	r30, r0
    29b0:	ce 01       	movw	r24, r28
    29b2:	09 95       	icall
		return (zoErrorIsEmpty(&zoCommandsError));
    29b4:	8c eb       	ldi	r24, 0xBC	; 188
    29b6:	91 e0       	ldi	r25, 0x01	; 1
    29b8:	0e 94 ad 00 	call	0x15a	; 0x15a <zoErrorIsEmpty>
	}
}
    29bc:	df 91       	pop	r29
    29be:	cf 91       	pop	r28
    29c0:	08 95       	ret
	
	if( packet->commandID >= ZO_PROTOCOL_BRC_COMMANDS_START )
	{
		//all broadcast commands of the supermodified have bytecount = zero
		if(packet->byteCount != 0)
			zoErrorPut(&zoCommandsError,ZO_COMMANDS_ERROR_INVALID_BYTECOUNT);
    29c2:	8c eb       	ldi	r24, 0xBC	; 188
    29c4:	91 e0       	ldi	r25, 0x01	; 1
    29c6:	65 e0       	ldi	r22, 0x05	; 5
    29c8:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <zoErrorPut>
    29cc:	8a cf       	rjmp	.-236    	; 0x28e2 <zoCommandsServiceCommand+0x18>
		//motor is not initialized
		if( !zoMotorGetState() && ( ((packet->commandID >= ZO_COMMAND_VELOCITY_MOVE) && 
			(packet->commandID <= ZO_COMMAND_PROFILED_RELATIVE_POSITION_MOVE)) || 
			(packet->commandID == ZO_COMMAND_HALT) ) )
		{
			zoErrorPut(&zoCommandsError,ZO_COMMANDS_ERROR_INVALID_COMMAND);
    29ce:	8c eb       	ldi	r24, 0xBC	; 188
    29d0:	91 e0       	ldi	r25, 0x01	; 1
    29d2:	64 e0       	ldi	r22, 0x04	; 4
    29d4:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <zoErrorPut>
    29d8:	80 e0       	ldi	r24, 0x00	; 0
    29da:	99 cf       	rjmp	.-206    	; 0x290e <zoCommandsServiceCommand+0x44>
			return FALSE;
    29dc:	ea 81       	ldd	r30, Y+2	; 0x02
    29de:	e0 cf       	rjmp	.-64     	; 0x29a0 <zoCommandsServiceCommand+0xd6>

000029e0 <zoCommandsInit>:


//utility functions_______________________________________________________________________
void zoCommandsInit(void)
{
		zoErrorInit(&zoCommandsError);
    29e0:	8c eb       	ldi	r24, 0xBC	; 188
    29e2:	91 e0       	ldi	r25, 0x01	; 1
    29e4:	0e 94 53 00 	call	0xa6	; 0xa6 <zoErrorInit>
	
/*00*/	zoCommandSet[ZO_COMMAND_SET_GAIN_P] = zoCommandSetGainP;
    29e8:	8f e4       	ldi	r24, 0x4F	; 79
    29ea:	94 e1       	ldi	r25, 0x14	; 20
    29ec:	90 93 ca 01 	sts	0x01CA, r25
    29f0:	80 93 c9 01 	sts	0x01C9, r24
		zoCommandsSetByteCount[ZO_COMMAND_SET_GAIN_P] = 2;
    29f4:	32 e0       	ldi	r19, 0x02	; 2
    29f6:	30 93 03 02 	sts	0x0203, r19
/*01*/	zoCommandSet[ZO_COMMAND_SET_GAIN_I] = zoCommandSetGainI;
    29fa:	89 e3       	ldi	r24, 0x39	; 57
    29fc:	94 e1       	ldi	r25, 0x14	; 20
    29fe:	90 93 cc 01 	sts	0x01CC, r25
    2a02:	80 93 cb 01 	sts	0x01CB, r24
		zoCommandsSetByteCount[ZO_COMMAND_SET_GAIN_I] = 2;
    2a06:	30 93 04 02 	sts	0x0204, r19
/*02*/	zoCommandSet[ZO_COMMAND_SET_GAIN_D] = zoCommandSetGainD;
    2a0a:	83 e2       	ldi	r24, 0x23	; 35
    2a0c:	94 e1       	ldi	r25, 0x14	; 20
    2a0e:	90 93 ce 01 	sts	0x01CE, r25
    2a12:	80 93 cd 01 	sts	0x01CD, r24
		zoCommandsSetByteCount[ZO_COMMAND_SET_GAIN_D] = 2;		
    2a16:	30 93 05 02 	sts	0x0205, r19
/*03*/	zoCommandSet[ZO_COMMAND_SET_PROFILE_ACCELERATION] =
    2a1a:	8d eb       	ldi	r24, 0xBD	; 189
    2a1c:	93 e1       	ldi	r25, 0x13	; 19
    2a1e:	90 93 d0 01 	sts	0x01D0, r25
    2a22:	80 93 cf 01 	sts	0x01CF, r24
		zoCommandSetProfileAcceleration;
		zoCommandsSetByteCount[ZO_COMMAND_SET_PROFILE_ACCELERATION] = 4;		
    2a26:	24 e0       	ldi	r18, 0x04	; 4
    2a28:	20 93 06 02 	sts	0x0206, r18
/*04*/	zoCommandSet[ZO_COMMAND_SET_PROFILE_VELOCITY] =	zoCommandSetProfileVelocity;
    2a2c:	8d e8       	ldi	r24, 0x8D	; 141
    2a2e:	93 e1       	ldi	r25, 0x13	; 19
    2a30:	90 93 d2 01 	sts	0x01D2, r25
    2a34:	80 93 d1 01 	sts	0x01D1, r24
		zoCommandsSetByteCount[ZO_COMMAND_SET_PROFILE_VELOCITY] = 4;		
    2a38:	20 93 07 02 	sts	0x0207, r18
/*05*/	zoCommandSet[ZO_COMMAND_SET_CURRENT_LIMIT] = zoCommandSetCurrentLimit;
    2a3c:	83 e0       	ldi	r24, 0x03	; 3
    2a3e:	94 e1       	ldi	r25, 0x14	; 20
    2a40:	90 93 d4 01 	sts	0x01D4, r25
    2a44:	80 93 d3 01 	sts	0x01D3, r24
		zoCommandsSetByteCount[ZO_COMMAND_SET_CURRENT_LIMIT] = 2;		
    2a48:	30 93 08 02 	sts	0x0208, r19
/*06*/	zoCommandSet[ZO_COMMAND_SET_CURRENT_LIMIT_DURATION] =
    2a4c:	8d ee       	ldi	r24, 0xED	; 237
    2a4e:	93 e1       	ldi	r25, 0x13	; 19
    2a50:	90 93 d6 01 	sts	0x01D6, r25
    2a54:	80 93 d5 01 	sts	0x01D5, r24
		zoCommandSetCurrentLimitDuration;
		zoCommandsSetByteCount[ZO_COMMAND_SET_CURRENT_LIMIT_DURATION] = 2;				
    2a58:	30 93 09 02 	sts	0x0209, r19
/*07*/	zoCommandSet[ZO_COMMAND_VELOCITY_MOVE] = zoCommandVelocityMove;
    2a5c:	84 e6       	ldi	r24, 0x64	; 100
    2a5e:	9e e0       	ldi	r25, 0x0E	; 14
    2a60:	90 93 d8 01 	sts	0x01D8, r25
    2a64:	80 93 d7 01 	sts	0x01D7, r24
		zoCommandsSetByteCount[ZO_COMMAND_VELOCITY_MOVE] = 4;						
    2a68:	20 93 0a 02 	sts	0x020A, r18
/*08*/	zoCommandSet[ZO_COMMAND_ABSOLUTE_POSITION_MOVE] = zoCommandAbsolutePositionMove;
    2a6c:	84 e8       	ldi	r24, 0x84	; 132
    2a6e:	9b e0       	ldi	r25, 0x0B	; 11
    2a70:	90 93 da 01 	sts	0x01DA, r25
    2a74:	80 93 d9 01 	sts	0x01D9, r24
		zoCommandsSetByteCount[ZO_COMMAND_ABSOLUTE_POSITION_MOVE] = 4;						
    2a78:	20 93 0b 02 	sts	0x020B, r18
/*09*/	zoCommandSet[ZO_COMMAND_RELATIVE_POSITION_MOVE] = zoCommandRelativePositionMove;
    2a7c:	8a e9       	ldi	r24, 0x9A	; 154
    2a7e:	9b e0       	ldi	r25, 0x0B	; 11
    2a80:	90 93 dc 01 	sts	0x01DC, r25
    2a84:	80 93 db 01 	sts	0x01DB, r24
		zoCommandsSetByteCount[ZO_COMMAND_RELATIVE_POSITION_MOVE] = 4;						
    2a88:	20 93 0c 02 	sts	0x020C, r18
/*0A*/  zoCommandSet[ZO_COMMAND_PROFILED_VELOCITY_MOVE] = zoCommandProfiledVelocityMove;
    2a8c:	89 e3       	ldi	r24, 0x39	; 57
    2a8e:	9e e0       	ldi	r25, 0x0E	; 14
    2a90:	90 93 de 01 	sts	0x01DE, r25
    2a94:	80 93 dd 01 	sts	0x01DD, r24
		zoCommandsSetByteCount[ZO_COMMAND_PROFILED_VELOCITY_MOVE] = 4;
    2a98:	20 93 0d 02 	sts	0x020D, r18
/*0B*/  zoCommandSet[ZO_COMMAND_PROFILED_ABSOLUTE_POSITION_MOVE] =
    2a9c:	8e e6       	ldi	r24, 0x6E	; 110
    2a9e:	92 e1       	ldi	r25, 0x12	; 18
    2aa0:	90 93 e0 01 	sts	0x01E0, r25
    2aa4:	80 93 df 01 	sts	0x01DF, r24
		zoCommandProfiledAbsolutePositionMove;
		zoCommandsSetByteCount[ZO_COMMAND_PROFILED_ABSOLUTE_POSITION_MOVE] = 4;
    2aa8:	20 93 0e 02 	sts	0x020E, r18
/*0C*/	zoCommandSet[ZO_COMMAND_PROFILED_RELATIVE_POSITION_MOVE] =
    2aac:	86 e5       	ldi	r24, 0x56	; 86
    2aae:	92 e1       	ldi	r25, 0x12	; 18
    2ab0:	90 93 e2 01 	sts	0x01E2, r25
    2ab4:	80 93 e1 01 	sts	0x01E1, r24
		zoCommandProfiledRelativePositionMove;
		zoCommandsSetByteCount[ZO_COMMAND_PROFILED_RELATIVE_POSITION_MOVE] = 4;
    2ab8:	20 93 0f 02 	sts	0x020F, r18
/*0D*/	zoCommandSet[ZO_COMMAND_SET_VELOCITY_SETPOINT] = zoCommandSetVelocitySetpoint;
    2abc:	8c eb       	ldi	r24, 0xBC	; 188
    2abe:	9b e0       	ldi	r25, 0x0B	; 11
    2ac0:	90 93 e4 01 	sts	0x01E4, r25
    2ac4:	80 93 e3 01 	sts	0x01E3, r24
		zoCommandsSetByteCount[ZO_COMMAND_SET_VELOCITY_SETPOINT] = 4;
    2ac8:	20 93 10 02 	sts	0x0210, r18
/*0E*/	zoCommandSet[ZO_COMMAND_SET_ABSOLUTE_POSITION_SETPOINT] =
    2acc:	82 ed       	ldi	r24, 0xD2	; 210
    2ace:	9b e0       	ldi	r25, 0x0B	; 11
    2ad0:	90 93 e6 01 	sts	0x01E6, r25
    2ad4:	80 93 e5 01 	sts	0x01E5, r24
		zoCommandSetAbsolutePositionSetpoint;
		zoCommandsSetByteCount[ZO_COMMAND_SET_ABSOLUTE_POSITION_SETPOINT] = 4;
    2ad8:	20 93 11 02 	sts	0x0211, r18
/*0F*/	zoCommandSet[ZO_COMMAND_SET_RELATIVE_POSITION_SETPOINT] =
    2adc:	88 ee       	ldi	r24, 0xE8	; 232
    2ade:	9b e0       	ldi	r25, 0x0B	; 11
    2ae0:	90 93 e8 01 	sts	0x01E8, r25
    2ae4:	80 93 e7 01 	sts	0x01E7, r24
		zoCommandSetRelativePositionSetpoint;
		zoCommandsSetByteCount[ZO_COMMAND_SET_RELATIVE_POSITION_SETPOINT] = 4;
    2ae8:	20 93 12 02 	sts	0x0212, r18
/*10*/	zoCommandSet[ZO_COMMAND_SET_PROFILED_VELOCITY_SETPOINT] =
    2aec:	8e ef       	ldi	r24, 0xFE	; 254
    2aee:	9b e0       	ldi	r25, 0x0B	; 11
    2af0:	90 93 ea 01 	sts	0x01EA, r25
    2af4:	80 93 e9 01 	sts	0x01E9, r24
		zoCommandSetProfiledVelocitySetpoint;
		zoCommandsSetByteCount[ZO_COMMAND_SET_PROFILED_VELOCITY_SETPOINT] = 4;
    2af8:	20 93 13 02 	sts	0x0213, r18
/*11*/	zoCommandSet[ZO_COMMAND_SET_PROFILED_ABSOLUTE_POSITION_SETPOINT] =
    2afc:	84 e1       	ldi	r24, 0x14	; 20
    2afe:	9c e0       	ldi	r25, 0x0C	; 12
    2b00:	90 93 ec 01 	sts	0x01EC, r25
    2b04:	80 93 eb 01 	sts	0x01EB, r24
		zoCommandSetProfiledAbsolutePositionSetpoint;
		zoCommandsSetByteCount[ZO_COMMAND_SET_PROFILED_ABSOLUTE_POSITION_SETPOINT] = 4;
    2b08:	20 93 14 02 	sts	0x0214, r18
/*12*/	zoCommandSet[ZO_COMMAND_SET_PROFILED_RELATIVE_POSITION_SETPOINT] =	
    2b0c:	8a e2       	ldi	r24, 0x2A	; 42
    2b0e:	9c e0       	ldi	r25, 0x0C	; 12
    2b10:	90 93 ee 01 	sts	0x01EE, r25
    2b14:	80 93 ed 01 	sts	0x01ED, r24
		zoCommandSetProfiledRelativePositionSetpoint;
		zoCommandsSetByteCount[ZO_COMMAND_SET_PROFILED_RELATIVE_POSITION_SETPOINT] = 4;
    2b18:	20 93 15 02 	sts	0x0215, r18
/*13*/	zoCommandSet[ZO_COMMAND_CONFIGURE_DIGITAL_IO] =	zoCommandConfigureDigitalIO;
    2b1c:	81 e1       	ldi	r24, 0x11	; 17
    2b1e:	93 e1       	ldi	r25, 0x13	; 19
    2b20:	90 93 f0 01 	sts	0x01F0, r25
    2b24:	80 93 ef 01 	sts	0x01EF, r24
		zoCommandsSetByteCount[ZO_COMMAND_CONFIGURE_DIGITAL_IO] = 1;
    2b28:	31 e0       	ldi	r19, 0x01	; 1
    2b2a:	30 93 16 02 	sts	0x0216, r19
/*14*/	zoCommandSet[ZO_COMMAND_SET_DIGITAL_OUT] = zoCommandSetDigitalOut;
    2b2e:	80 e4       	ldi	r24, 0x40	; 64
    2b30:	9c e0       	ldi	r25, 0x0C	; 12
    2b32:	90 93 f2 01 	sts	0x01F2, r25
    2b36:	80 93 f1 01 	sts	0x01F1, r24
		zoCommandsSetByteCount[ZO_COMMAND_SET_DIGITAL_OUT] = 1;
    2b3a:	30 93 17 02 	sts	0x0217, r19
/*15*/	zoCommandSet[ZO_COMMAND_SET_NODE_ID] = zoCommandSetNodeID;
    2b3e:	82 e0       	ldi	r24, 0x02	; 2
    2b40:	93 e1       	ldi	r25, 0x13	; 19
    2b42:	90 93 f4 01 	sts	0x01F4, r25
    2b46:	80 93 f3 01 	sts	0x01F3, r24
		zoCommandsSetByteCount[ZO_COMMAND_SET_NODE_ID] = 1;
    2b4a:	30 93 18 02 	sts	0x0218, r19
/*16*/  zoCommandSet[ZO_COMMAND_SET_LOCAL_ACCEPTANCE_MASK] = 
    2b4e:	83 ef       	ldi	r24, 0xF3	; 243
    2b50:	92 e1       	ldi	r25, 0x12	; 18
    2b52:	90 93 f6 01 	sts	0x01F6, r25
    2b56:	80 93 f5 01 	sts	0x01F5, r24
		zoCommandSetLocalAcceptanceMask;
		zoCommandsSetByteCount[ZO_COMMAND_SET_LOCAL_ACCEPTANCE_MASK] = 1;
    2b5a:	30 93 19 02 	sts	0x0219, r19
/*17*/  zoCommandSet[ZO_COMMAND_SET_BAUD_UART] = zoCommandSetBaudUart;
    2b5e:	83 e7       	ldi	r24, 0x73	; 115
    2b60:	93 e1       	ldi	r25, 0x13	; 19
    2b62:	90 93 f8 01 	sts	0x01F8, r25
    2b66:	80 93 f7 01 	sts	0x01F7, r24
		zoCommandsSetByteCount[ZO_COMMAND_SET_BAUD_UART] = 4;
    2b6a:	20 93 1a 02 	sts	0x021A, r18
/*18*/	zoCommandSet[ZO_COMMAND_RESET_POSITION] = zoCommandResetPosition;
    2b6e:	80 e7       	ldi	r24, 0x70	; 112
    2b70:	93 e1       	ldi	r25, 0x13	; 19
    2b72:	90 93 fa 01 	sts	0x01FA, r25
    2b76:	80 93 f9 01 	sts	0x01F9, r24
		zoCommandsSetByteCount[ZO_COMMAND_RESET_POSITION] = 0;		
    2b7a:	10 92 1b 02 	sts	0x021B, r1
/*19*/	zoCommandSet[ZO_COMMAND_START] = zoCommandStart;
    2b7e:	e8 e4       	ldi	r30, 0x48	; 72
    2b80:	f3 e1       	ldi	r31, 0x13	; 19
    2b82:	f0 93 fc 01 	sts	0x01FC, r31
    2b86:	e0 93 fb 01 	sts	0x01FB, r30
		zoCommandsSetByteCount[ZO_COMMAND_START] = 0;		
    2b8a:	10 92 1c 02 	sts	0x021C, r1
/*1A*/	zoCommandSet[ZO_COMMAND_HALT] =	zoCommandHalt;
    2b8e:	61 e5       	ldi	r22, 0x51	; 81
    2b90:	7e e0       	ldi	r23, 0x0E	; 14
    2b92:	70 93 fe 01 	sts	0x01FE, r23
    2b96:	60 93 fd 01 	sts	0x01FD, r22
		zoCommandsSetByteCount[ZO_COMMAND_HALT] = 0;
    2b9a:	10 92 1d 02 	sts	0x021D, r1
/*1B*/	zoCommandSet[ZO_COMMAND_STOP] =	zoCommandStop;
    2b9e:	4d e3       	ldi	r20, 0x3D	; 61
    2ba0:	53 e1       	ldi	r21, 0x13	; 19
    2ba2:	50 93 00 02 	sts	0x0200, r21
    2ba6:	40 93 ff 01 	sts	0x01FF, r20
		zoCommandsSetByteCount[ZO_COMMAND_STOP] = 0;
    2baa:	10 92 1e 02 	sts	0x021E, r1
/*1C*/  zoCommandSet[ZO_COMMAND_SET_ERROR_REPORTING_LEVEL] =
    2bae:	86 ed       	ldi	r24, 0xD6	; 214
    2bb0:	92 e1       	ldi	r25, 0x12	; 18
    2bb2:	90 93 02 02 	sts	0x0202, r25
    2bb6:	80 93 01 02 	sts	0x0201, r24
		zoCommandSetErrorReportingLevel;
		zoCommandsSetByteCount[ZO_COMMAND_SET_ERROR_REPORTING_LEVEL] = 1;
    2bba:	30 93 1f 02 	sts	0x021F, r19

/*64*/	zoCommandGet[ZO_COMMAND_GET_GAIN_P-ZO_PROTOCOL_GET_COMMANDS_START] =	
    2bbe:	81 e6       	ldi	r24, 0x61	; 97
    2bc0:	9c e0       	ldi	r25, 0x0C	; 12
    2bc2:	90 93 21 02 	sts	0x0221, r25
    2bc6:	80 93 20 02 	sts	0x0220, r24
		zoCommandGetGainP;
/*65*/	zoCommandGet[ZO_COMMAND_GET_GAIN_I-ZO_PROTOCOL_GET_COMMANDS_START] =
    2bca:	80 e7       	ldi	r24, 0x70	; 112
    2bcc:	9c e0       	ldi	r25, 0x0C	; 12
    2bce:	90 93 23 02 	sts	0x0223, r25
    2bd2:	80 93 22 02 	sts	0x0222, r24
		zoCommandGetGainI;
/*66*/	zoCommandGet[ZO_COMMAND_GET_GAIN_D-ZO_PROTOCOL_GET_COMMANDS_START] =	
    2bd6:	8f e7       	ldi	r24, 0x7F	; 127
    2bd8:	9c e0       	ldi	r25, 0x0C	; 12
    2bda:	90 93 25 02 	sts	0x0225, r25
    2bde:	80 93 24 02 	sts	0x0224, r24
		zoCommandGetGainD;
/*67*/	zoCommandGet[ZO_COMMAND_GET_PROFILE_ACCELERATION-ZO_PROTOCOL_GET_COMMANDS_START] =
    2be2:	8e e8       	ldi	r24, 0x8E	; 142
    2be4:	9c e0       	ldi	r25, 0x0C	; 12
    2be6:	90 93 27 02 	sts	0x0227, r25
    2bea:	80 93 26 02 	sts	0x0226, r24
		zoCommandGetProfileAcceleration;
/*68*/	zoCommandGet[ZO_COMMAND_GET_PROFILE_VELOCITY-ZO_PROTOCOL_GET_COMMANDS_START] =	
    2bee:	83 ea       	ldi	r24, 0xA3	; 163
    2bf0:	9c e0       	ldi	r25, 0x0C	; 12
    2bf2:	90 93 29 02 	sts	0x0229, r25
    2bf6:	80 93 28 02 	sts	0x0228, r24
		zoCommandGetProfileVelocity;
/*69*/	zoCommandGet[ZO_COMMAND_GET_CURRENT_LIMIT-ZO_PROTOCOL_GET_COMMANDS_START] =
    2bfa:	88 eb       	ldi	r24, 0xB8	; 184
    2bfc:	9c e0       	ldi	r25, 0x0C	; 12
    2bfe:	90 93 2b 02 	sts	0x022B, r25
    2c02:	80 93 2a 02 	sts	0x022A, r24
		zoCommandGetCurrentLimit;
/*6A*/	zoCommandGet[ZO_COMMAND_GET_CURRENT_LIMIT_DURATION-ZO_PROTOCOL_GET_COMMANDS_START]= 
    2c06:	87 ec       	ldi	r24, 0xC7	; 199
    2c08:	9c e0       	ldi	r25, 0x0C	; 12
    2c0a:	90 93 2d 02 	sts	0x022D, r25
    2c0e:	80 93 2c 02 	sts	0x022C, r24
		zoCommandGetCurrentLimitDuration;
/*6B*/	zoCommandGet[ZO_COMMAND_GET_DIO_CONFIGURATION-ZO_PROTOCOL_GET_COMMANDS_START] =	
    2c12:	86 ed       	ldi	r24, 0xD6	; 214
    2c14:	9c e0       	ldi	r25, 0x0C	; 12
    2c16:	90 93 2f 02 	sts	0x022F, r25
    2c1a:	80 93 2e 02 	sts	0x022E, r24
		zoCommandGetDigitalIoConfiguration;
/*6C*/	zoCommandGet[ZO_COMMAND_GET_LOCAL_ACCEPTANCE_MASK-ZO_PROTOCOL_GET_COMMANDS_START]= 
    2c1e:	8d ed       	ldi	r24, 0xDD	; 221
    2c20:	9c e0       	ldi	r25, 0x0C	; 12
    2c22:	90 93 31 02 	sts	0x0231, r25
    2c26:	80 93 30 02 	sts	0x0230, r24
		zoCommandGetLocalAcceptanceMask;
/*6D*/	zoCommandGet[ZO_COMMAND_GET_DIGITAL_IN-ZO_PROTOCOL_GET_COMMANDS_START] =	
    2c2a:	84 ee       	ldi	r24, 0xE4	; 228
    2c2c:	9c e0       	ldi	r25, 0x0C	; 12
    2c2e:	90 93 33 02 	sts	0x0233, r25
    2c32:	80 93 32 02 	sts	0x0232, r24
		zoCommandGetDigitalIn;
/*6E*/  zoCommandGet[ZO_COMMAND_GET_ANALOG_IN-ZO_PROTOCOL_GET_COMMANDS_START] =
    2c36:	87 ea       	ldi	r24, 0xA7	; 167
    2c38:	92 e1       	ldi	r25, 0x12	; 18
    2c3a:	90 93 35 02 	sts	0x0235, r25
    2c3e:	80 93 34 02 	sts	0x0234, r24
		zoCommandGetAnalogIn;
/*6F*/  zoCommandGet[ZO_COMMAND_GET_POSITION-ZO_PROTOCOL_GET_COMMANDS_START] =	
    2c42:	81 e4       	ldi	r24, 0x41	; 65
    2c44:	9e e0       	ldi	r25, 0x0E	; 14
    2c46:	90 93 37 02 	sts	0x0237, r25
    2c4a:	80 93 36 02 	sts	0x0236, r24
		zoCommandGetPosition;
/*70*/	zoCommandGet[ZO_COMMAND_GET_ABSOLUTE_POSITION-ZO_PROTOCOL_GET_COMMANDS_START]=
    2c4e:	88 ec       	ldi	r24, 0xC8	; 200
    2c50:	92 e1       	ldi	r25, 0x12	; 18
    2c52:	90 93 39 02 	sts	0x0239, r25
    2c56:	80 93 38 02 	sts	0x0238, r24
		zoCommandGetAbsolutePosition;
/*71*/	zoCommandGet[ZO_COMMAND_GET_VELOCITY-ZO_PROTOCOL_GET_COMMANDS_START]=	
    2c5a:	8b ef       	ldi	r24, 0xFB	; 251
    2c5c:	9c e0       	ldi	r25, 0x0C	; 12
    2c5e:	90 93 3b 02 	sts	0x023B, r25
    2c62:	80 93 3a 02 	sts	0x023A, r24
		zoCommandGetVelocity;
/*72*/	zoCommandGet[ZO_COMMAND_GET_CURRENT-ZO_PROTOCOL_GET_COMMANDS_START]=	
    2c66:	88 e9       	ldi	r24, 0x98	; 152
    2c68:	92 e1       	ldi	r25, 0x12	; 18
    2c6a:	90 93 3d 02 	sts	0x023D, r25
    2c6e:	80 93 3c 02 	sts	0x023C, r24
		zoCommandGetCurrent;
/*73*/	zoCommandGet[ZO_COMMAND_GET_WARNING-ZO_PROTOCOL_GET_COMMANDS_START]=
    2c72:	86 e7       	ldi	r24, 0x76	; 118
    2c74:	92 e1       	ldi	r25, 0x12	; 18
    2c76:	90 93 3f 02 	sts	0x023F, r25
    2c7a:	80 93 3e 02 	sts	0x023E, r24
		zoCommandGetWarning;

/*C8*/	zoCommandBrc[ZO_COMMAND_DO_MOVE-ZO_PROTOCOL_BRC_COMMANDS_START]
    2c7e:	8b ea       	ldi	r24, 0xAB	; 171
    2c80:	91 e1       	ldi	r25, 0x11	; 17
    2c82:	90 93 41 02 	sts	0x0241, r25
    2c86:	80 93 40 02 	sts	0x0240, r24
		= zoCommandDoMove;
/*C9*/	zoCommandBrc[ZO_COMMAND_GLOBAL_START-ZO_PROTOCOL_BRC_COMMANDS_START]
    2c8a:	f0 93 43 02 	sts	0x0243, r31
    2c8e:	e0 93 42 02 	sts	0x0242, r30
		= zoCommandStart; 
/*CA*/	zoCommandBrc[ZO_COMMAND_GLOBAL_HALT-ZO_PROTOCOL_BRC_COMMANDS_START]
    2c92:	70 93 45 02 	sts	0x0245, r23
    2c96:	60 93 44 02 	sts	0x0244, r22
		= zoCommandHalt;
/*CB*/	zoCommandBrc[ZO_COMMAND_GLOBAL_STOP-ZO_PROTOCOL_BRC_COMMANDS_START]
    2c9a:	50 93 47 02 	sts	0x0247, r21
    2c9e:	40 93 46 02 	sts	0x0246, r20
		= zoCommandStop;
}
    2ca2:	08 95       	ret

00002ca4 <zoAdcInit>:
								FALSE,FALSE,FALSE,FALSE,FALSE};

// initialize a2d converter
void zoAdcInit(void)
{
	DDRC = 0x00;
    2ca4:	17 b8       	out	0x07, r1	; 7
	DIDR0 = 0x00;
    2ca6:	10 92 7e 00 	sts	0x007E, r1
	PRR &= ~_BV(PRADC);								// enable ADC power
    2caa:	e4 e6       	ldi	r30, 0x64	; 100
    2cac:	f0 e0       	ldi	r31, 0x00	; 0
    2cae:	80 81       	ld	r24, Z
    2cb0:	8e 7f       	andi	r24, 0xFE	; 254
    2cb2:	80 83       	st	Z, r24
	ADCSRA |= _BV(ADEN);							// enable ADC (turn on ADC power)
    2cb4:	ea e7       	ldi	r30, 0x7A	; 122
    2cb6:	f0 e0       	ldi	r31, 0x00	; 0
    2cb8:	80 81       	ld	r24, Z
    2cba:	80 68       	ori	r24, 0x80	; 128
    2cbc:	80 83       	st	Z, r24
	ADCSRA |= _BV(ADATE);							// enable auto triggering
    2cbe:	80 81       	ld	r24, Z
    2cc0:	80 62       	ori	r24, 0x20	; 32
    2cc2:	80 83       	st	Z, r24
	sei();											// turn on interrupts (if not already on)
}

inline void zoAdcSetPrescaler(ZO_ADC_PRESCALE prescale)
{
	ADCSRA = (ADCSRA & ~ADC_PRESCALE_MASK)|prescale;
    2cc4:	80 81       	ld	r24, Z
    2cc6:	87 60       	ori	r24, 0x07	; 7
    2cc8:	80 83       	st	Z, r24
}

inline void zoAdcSetReference(ZO_ADC_REFERENCE ref)
{
	ADMUX = (ADMUX & ~ADC_REFERENCE_MASK)|ref;
    2cca:	ec e7       	ldi	r30, 0x7C	; 124
    2ccc:	f0 e0       	ldi	r31, 0x00	; 0
    2cce:	80 81       	ld	r24, Z
    2cd0:	8f 73       	andi	r24, 0x3F	; 63
    2cd2:	80 64       	ori	r24, 0x40	; 64
    2cd4:	80 83       	st	Z, r24
}

inline void zoAdcSetTrigger(ZO_ADC_TRIGGER trig)
{
	ADCSRB = (ADCSRB & ~ADC_TRIGGER_MASK)|trig;
    2cd6:	eb e7       	ldi	r30, 0x7B	; 123
    2cd8:	f0 e0       	ldi	r31, 0x00	; 0
    2cda:	80 81       	ld	r24, Z
    2cdc:	88 7f       	andi	r24, 0xF8	; 248
    2cde:	80 83       	st	Z, r24
{
	u08 ch;
	
	ch= (u08)channel; 
	
	enterCritical();
    2ce0:	0f b6       	in	r0, 0x3f	; 63
    2ce2:	0f 92       	push	r0
    2ce4:	f8 94       	cli
	AdcChannelOn[ch] = TRUE;
    2ce6:	8f ef       	ldi	r24, 0xFF	; 255
    2ce8:	80 93 5f 02 	sts	0x025F, r24
	exitCritical();
    2cec:	0f 90       	pop	r0
    2cee:	0f be       	out	0x3f, r0	; 63
	ADCSRA |= _BV(ADATE);							// enable auto triggering
	zoAdcSetPrescaler(ZO_ADC_PRESCALE_128);			// set default prescaler
	zoAdcSetReference(ZO_ADC_REFERENCE_AVCC);		// set default reference
	zoAdcSetTrigger(ZO_ADC_TRIGGER_FREE_RUNNING);	// set free running mode
	zoAdcChannelEnable(ZO_ADC_CHANNEL_0);			// enable at least on channel
	ADMUX &= ~_BV(ADLAR);							// set to right-adjusted result
    2cf0:	ec e7       	ldi	r30, 0x7C	; 124
    2cf2:	f0 e0       	ldi	r31, 0x00	; 0
    2cf4:	80 81       	ld	r24, Z
    2cf6:	8f 7d       	andi	r24, 0xDF	; 223
    2cf8:	80 83       	st	Z, r24
	ADCSRA |= _BV(ADIE);							// enable ADC interrupts
    2cfa:	ea e7       	ldi	r30, 0x7A	; 122
    2cfc:	f0 e0       	ldi	r31, 0x00	; 0
    2cfe:	80 81       	ld	r24, Z
    2d00:	88 60       	ori	r24, 0x08	; 8
    2d02:	80 83       	st	Z, r24
	ADCSRA |= _BV(ADSC)|_BV(ADIF);					// start free running conversions
    2d04:	80 81       	ld	r24, Z
    2d06:	80 65       	ori	r24, 0x50	; 80
    2d08:	80 83       	st	Z, r24
	
	sei();											// turn on interrupts (if not already on)
    2d0a:	78 94       	sei
}
    2d0c:	08 95       	ret

00002d0e <zoAdcSetPrescaler>:

inline void zoAdcSetPrescaler(ZO_ADC_PRESCALE prescale)
{
	ADCSRA = (ADCSRA & ~ADC_PRESCALE_MASK)|prescale;
    2d0e:	ea e7       	ldi	r30, 0x7A	; 122
    2d10:	f0 e0       	ldi	r31, 0x00	; 0
    2d12:	90 81       	ld	r25, Z
    2d14:	98 7f       	andi	r25, 0xF8	; 248
    2d16:	98 2b       	or	r25, r24
    2d18:	90 83       	st	Z, r25
}
    2d1a:	08 95       	ret

00002d1c <zoAdcSetReference>:

inline void zoAdcSetReference(ZO_ADC_REFERENCE ref)
{
	ADMUX = (ADMUX & ~ADC_REFERENCE_MASK)|ref;
    2d1c:	ec e7       	ldi	r30, 0x7C	; 124
    2d1e:	f0 e0       	ldi	r31, 0x00	; 0
    2d20:	90 81       	ld	r25, Z
    2d22:	9f 73       	andi	r25, 0x3F	; 63
    2d24:	98 2b       	or	r25, r24
    2d26:	90 83       	st	Z, r25
}
    2d28:	08 95       	ret

00002d2a <zoAdcSetTrigger>:

inline void zoAdcSetTrigger(ZO_ADC_TRIGGER trig)
{
	ADCSRB = (ADCSRB & ~ADC_TRIGGER_MASK)|trig;
    2d2a:	eb e7       	ldi	r30, 0x7B	; 123
    2d2c:	f0 e0       	ldi	r31, 0x00	; 0
    2d2e:	90 81       	ld	r25, Z
    2d30:	98 7f       	andi	r25, 0xF8	; 248
    2d32:	98 2b       	or	r25, r24
    2d34:	90 83       	st	Z, r25
}
    2d36:	08 95       	ret

00002d38 <zoAdcOff>:

inline void zoAdcOff(void)
{
	ADCSRA &= ~_BV(ADIE);	//disable interrupts
    2d38:	ea e7       	ldi	r30, 0x7A	; 122
    2d3a:	f0 e0       	ldi	r31, 0x00	; 0
    2d3c:	80 81       	ld	r24, Z
    2d3e:	87 7f       	andi	r24, 0xF7	; 247
    2d40:	80 83       	st	Z, r24
	ADCSRA &= ~_BV(ADEN);	//turn off adc power
    2d42:	80 81       	ld	r24, Z
    2d44:	8f 77       	andi	r24, 0x7F	; 127
    2d46:	80 83       	st	Z, r24
}
    2d48:	08 95       	ret

00002d4a <zoAdcChannelEnable>:
{
	u08 ch;
	
	ch= (u08)channel; 
	
	enterCritical();
    2d4a:	0f b6       	in	r0, 0x3f	; 63
    2d4c:	0f 92       	push	r0
    2d4e:	f8 94       	cli
	AdcChannelOn[ch] = TRUE;
    2d50:	ef e5       	ldi	r30, 0x5F	; 95
    2d52:	f2 e0       	ldi	r31, 0x02	; 2
    2d54:	e8 0f       	add	r30, r24
    2d56:	f1 1d       	adc	r31, r1
    2d58:	8f ef       	ldi	r24, 0xFF	; 255
    2d5a:	80 83       	st	Z, r24
	exitCritical();
    2d5c:	0f 90       	pop	r0
    2d5e:	0f be       	out	0x3f, r0	; 63
}
    2d60:	08 95       	ret

00002d62 <zoAdcChannelDisable>:
{
	u08 ch;
	
	ch= (u08)channel; 
	
	enterCritical();
    2d62:	0f b6       	in	r0, 0x3f	; 63
    2d64:	0f 92       	push	r0
    2d66:	f8 94       	cli
	AdcChannelOn[ch] = FALSE;
    2d68:	ef e5       	ldi	r30, 0x5F	; 95
    2d6a:	f2 e0       	ldi	r31, 0x02	; 2
    2d6c:	e8 0f       	add	r30, r24
    2d6e:	f1 1d       	adc	r31, r1
    2d70:	10 82       	st	Z, r1
	exitCritical();
    2d72:	0f 90       	pop	r0
    2d74:	0f be       	out	0x3f, r0	; 63
}
    2d76:	08 95       	ret

00002d78 <zoAdcRead>:

u16 zoAdcRead(ZO_ADC_CHANNEL channel)
{
    2d78:	e8 2f       	mov	r30, r24
	u16 result;
	u08 ch;
	
	ch = (u08)channel;

	enterCritical();
    2d7a:	0f b6       	in	r0, 0x3f	; 63
    2d7c:	0f 92       	push	r0
    2d7e:	f8 94       	cli
	result = AdcResult[ch];
    2d80:	f0 e0       	ldi	r31, 0x00	; 0
    2d82:	ee 0f       	add	r30, r30
    2d84:	ff 1f       	adc	r31, r31
    2d86:	e7 5b       	subi	r30, 0xB7	; 183
    2d88:	fd 4f       	sbci	r31, 0xFD	; 253
    2d8a:	20 81       	ld	r18, Z
    2d8c:	31 81       	ldd	r19, Z+1	; 0x01
	exitCritical();
    2d8e:	0f 90       	pop	r0
    2d90:	0f be       	out	0x3f, r0	; 63

	return result;
}
    2d92:	c9 01       	movw	r24, r18
    2d94:	08 95       	ret

00002d96 <__vector_21>:

ISR(ADC_vect)
{
    2d96:	1f 92       	push	r1
    2d98:	0f 92       	push	r0
    2d9a:	0f b6       	in	r0, 0x3f	; 63
    2d9c:	0f 92       	push	r0
    2d9e:	11 24       	eor	r1, r1
    2da0:	2f 93       	push	r18
    2da2:	4f 93       	push	r20
    2da4:	5f 93       	push	r21
    2da6:	8f 93       	push	r24
    2da8:	9f 93       	push	r25
    2daa:	ef 93       	push	r30
    2dac:	ff 93       	push	r31
	AdcResult[AdcCurrentChannel] = ADCL;			// read in the result first ADCL
    2dae:	e0 91 48 02 	lds	r30, 0x0248
    2db2:	f0 e0       	ldi	r31, 0x00	; 0
    2db4:	80 91 78 00 	lds	r24, 0x0078
    2db8:	90 e0       	ldi	r25, 0x00	; 0
    2dba:	ee 0f       	add	r30, r30
    2dbc:	ff 1f       	adc	r31, r31
    2dbe:	e7 5b       	subi	r30, 0xB7	; 183
    2dc0:	fd 4f       	sbci	r31, 0xFD	; 253
    2dc2:	91 83       	std	Z+1, r25	; 0x01
    2dc4:	80 83       	st	Z, r24
	AdcResult[AdcCurrentChannel] |= (ADCH<<8);	// then ADCH
    2dc6:	e0 91 48 02 	lds	r30, 0x0248
    2dca:	f0 e0       	ldi	r31, 0x00	; 0
    2dcc:	ee 0f       	add	r30, r30
    2dce:	ff 1f       	adc	r31, r31
    2dd0:	e7 5b       	subi	r30, 0xB7	; 183
    2dd2:	fd 4f       	sbci	r31, 0xFD	; 253
    2dd4:	40 81       	ld	r20, Z
    2dd6:	51 81       	ldd	r21, Z+1	; 0x01
    2dd8:	20 91 79 00 	lds	r18, 0x0079
    2ddc:	92 2f       	mov	r25, r18
    2dde:	80 e0       	ldi	r24, 0x00	; 0
    2de0:	84 2b       	or	r24, r20
    2de2:	95 2b       	or	r25, r21
    2de4:	91 83       	std	Z+1, r25	; 0x01
    2de6:	80 83       	st	Z, r24

	//scan next active channel
	do {
		AdcCurrentChannel++;
    2de8:	80 91 48 02 	lds	r24, 0x0248
    2dec:	8f 5f       	subi	r24, 0xFF	; 255
    2dee:	80 93 48 02 	sts	0x0248, r24
		if(AdcCurrentChannel > 10)
    2df2:	80 91 48 02 	lds	r24, 0x0248
    2df6:	8b 30       	cpi	r24, 0x0B	; 11
    2df8:	10 f0       	brcs	.+4      	; 0x2dfe <__vector_21+0x68>
			AdcCurrentChannel = 0;
    2dfa:	10 92 48 02 	sts	0x0248, r1
	}while( !AdcChannelOn[AdcCurrentChannel] );
    2dfe:	e0 91 48 02 	lds	r30, 0x0248
    2e02:	f0 e0       	ldi	r31, 0x00	; 0
    2e04:	e1 5a       	subi	r30, 0xA1	; 161
    2e06:	fd 4f       	sbci	r31, 0xFD	; 253
    2e08:	80 81       	ld	r24, Z
    2e0a:	88 23       	and	r24, r24
    2e0c:	69 f3       	breq	.-38     	; 0x2de8 <__vector_21+0x52>

	//configure mux for next conversion
	if(AdcCurrentChannel <= ZO_ADC_CHANNEL_TEMPERATURE)
    2e0e:	80 91 48 02 	lds	r24, 0x0248
    2e12:	89 30       	cpi	r24, 0x09	; 9
    2e14:	a8 f0       	brcs	.+42     	; 0x2e40 <__vector_21+0xaa>
		ADMUX = (ADMUX & ~ADC_CHANNEL_MASK)|AdcCurrentChannel;	
	else
		ADMUX = (ADMUX & ~ADC_CHANNEL_MASK)|(AdcCurrentChannel+5);	
    2e16:	90 91 7c 00 	lds	r25, 0x007C
    2e1a:	80 91 48 02 	lds	r24, 0x0248
    2e1e:	8b 5f       	subi	r24, 0xFB	; 251
    2e20:	90 7f       	andi	r25, 0xF0	; 240
    2e22:	89 2b       	or	r24, r25
    2e24:	80 93 7c 00 	sts	0x007C, r24
}
    2e28:	ff 91       	pop	r31
    2e2a:	ef 91       	pop	r30
    2e2c:	9f 91       	pop	r25
    2e2e:	8f 91       	pop	r24
    2e30:	5f 91       	pop	r21
    2e32:	4f 91       	pop	r20
    2e34:	2f 91       	pop	r18
    2e36:	0f 90       	pop	r0
    2e38:	0f be       	out	0x3f, r0	; 63
    2e3a:	0f 90       	pop	r0
    2e3c:	1f 90       	pop	r1
    2e3e:	18 95       	reti
			AdcCurrentChannel = 0;
	}while( !AdcChannelOn[AdcCurrentChannel] );

	//configure mux for next conversion
	if(AdcCurrentChannel <= ZO_ADC_CHANNEL_TEMPERATURE)
		ADMUX = (ADMUX & ~ADC_CHANNEL_MASK)|AdcCurrentChannel;	
    2e40:	80 91 7c 00 	lds	r24, 0x007C
    2e44:	90 91 48 02 	lds	r25, 0x0248
    2e48:	80 7f       	andi	r24, 0xF0	; 240
    2e4a:	89 2b       	or	r24, r25
    2e4c:	80 93 7c 00 	sts	0x007C, r24
    2e50:	eb cf       	rjmp	.-42     	; 0x2e28 <__vector_21+0x92>

00002e52 <zoSpiInit>:
#include <avr/interrupt.h>

void zoSpiInit(void)
{
	//Configure SPI pins
	DDRB |= _BV(2);		// SS must be output for Master mode to work
    2e52:	22 9a       	sbi	0x04, 2	; 4
	DDRB |= _BV(3);		// set MOSI as output	
    2e54:	23 9a       	sbi	0x04, 3	; 4
	DDRB &= ~_BV(4);	// set MISO as input
    2e56:	24 98       	cbi	0x04, 4	; 4
	DDRB |= _BV(5);		// set SCK as output
    2e58:	25 9a       	sbi	0x04, 5	; 4
	PORTB |= _BV(5);	// set SCK high
    2e5a:	2d 9a       	sbi	0x05, 5	; 5
	PORTB |= _BV(2);	//set SS high
    2e5c:	2a 9a       	sbi	0x05, 2	; 5

	//Configure SPI functionality
	SPCR = 0x00;
    2e5e:	1c bc       	out	0x2c, r1	; 44
	SPCR |= _BV(MSTR);	//configure as master
    2e60:	8c b5       	in	r24, 0x2c	; 44
    2e62:	80 61       	ori	r24, 0x10	; 16
    2e64:	8c bd       	out	0x2c, r24	; 44
	SPCR |= _BV(SPR1);	//SPI clock = F_CPU/32
    2e66:	8c b5       	in	r24, 0x2c	; 44
    2e68:	82 60       	ori	r24, 0x02	; 2
    2e6a:	8c bd       	out	0x2c, r24	; 44
	SPCR |= _BV(CPHA);
    2e6c:	8c b5       	in	r24, 0x2c	; 44
    2e6e:	84 60       	ori	r24, 0x04	; 4
    2e70:	8c bd       	out	0x2c, r24	; 44
	SPSR |= _BV(SPI2X);
    2e72:	8d b5       	in	r24, 0x2d	; 45
    2e74:	81 60       	ori	r24, 0x01	; 1
    2e76:	8d bd       	out	0x2d, r24	; 45
	SPCR |= _BV(SPE);	//enable SPI
    2e78:	8c b5       	in	r24, 0x2c	; 44
    2e7a:	80 64       	ori	r24, 0x40	; 64
    2e7c:	8c bd       	out	0x2c, r24	; 44
}
    2e7e:	08 95       	ret

00002e80 <zoSpiTransferByte>:

u08 zoSpiTransferByte(u08 byte)
{
	SPDR = byte;
    2e80:	8e bd       	out	0x2e, r24	; 46
	while(!(SPSR & _BV(SPIF)));
    2e82:	0d b4       	in	r0, 0x2d	; 45
    2e84:	07 fe       	sbrs	r0, 7
    2e86:	fd cf       	rjmp	.-6      	; 0x2e82 <zoSpiTransferByte+0x2>
	return SPDR;
    2e88:	8e b5       	in	r24, 0x2e	; 46
    2e8a:	08 95       	ret

00002e8c <zoI2cSetBitrate>:
	// enable interrupts
	sei();
}

bool zoI2cSetBitrate(u16 bitrateKHz)
{
    2e8c:	bc 01       	movw	r22, r24
	u08 bitrate_div;
	
	if( (bitrateKHz > 400)||(bitrateKHz==0) )
    2e8e:	01 97       	sbiw	r24, 0x01	; 1
    2e90:	80 59       	subi	r24, 0x90	; 144
    2e92:	91 40       	sbci	r25, 0x01	; 1
    2e94:	10 f0       	brcs	.+4      	; 0x2e9a <zoI2cSetBitrate+0xe>
    2e96:	80 e0       	ldi	r24, 0x00	; 0
    2e98:	08 95       	ret
		return FALSE;
	
	// calculate bitrate division
	bitrate_div = ((F_CPU/1000l)/bitrateKHz);
    2e9a:	80 e2       	ldi	r24, 0x20	; 32
    2e9c:	9e e4       	ldi	r25, 0x4E	; 78
    2e9e:	0e 94 92 25 	call	0x4b24	; 0x4b24 <__udivmodhi4>
	if(bitrate_div >= 16)
    2ea2:	60 31       	cpi	r22, 0x10	; 16
    2ea4:	30 f0       	brcs	.+12     	; 0x2eb2 <zoI2cSetBitrate+0x26>
		bitrate_div = (bitrate_div-16)/2;
    2ea6:	86 2f       	mov	r24, r22
    2ea8:	90 e0       	ldi	r25, 0x00	; 0
    2eaa:	40 97       	sbiw	r24, 0x10	; 16
    2eac:	95 95       	asr	r25
    2eae:	87 95       	ror	r24
    2eb0:	68 2f       	mov	r22, r24
	TWBR = bitrate_div;
    2eb2:	60 93 b8 00 	sts	0x00B8, r22
    2eb6:	8f ef       	ldi	r24, 0xFF	; 255
	
	return TRUE;
}
    2eb8:	08 95       	ret

00002eba <zoI2cSetLocalDeviceAddr>:

inline bool zoI2cSetLocalDeviceAddr(u08 deviceAddr, u08 genCallEn)
{
	if((deviceAddr>0x7F)||(deviceAddr==0))
    2eba:	18 16       	cp	r1, r24
    2ebc:	14 f0       	brlt	.+4      	; 0x2ec2 <zoI2cSetLocalDeviceAddr+0x8>
    2ebe:	80 e0       	ldi	r24, 0x00	; 0
    2ec0:	08 95       	ret
		return FALSE;
	
	TWAR = ((deviceAddr<<1) | (genCallEn?1:0));
    2ec2:	90 e0       	ldi	r25, 0x00	; 0
    2ec4:	88 0f       	add	r24, r24
    2ec6:	99 1f       	adc	r25, r25
    2ec8:	20 e0       	ldi	r18, 0x00	; 0
    2eca:	66 23       	and	r22, r22
    2ecc:	29 f4       	brne	.+10     	; 0x2ed8 <zoI2cSetLocalDeviceAddr+0x1e>
    2ece:	28 2b       	or	r18, r24
    2ed0:	20 93 ba 00 	sts	0x00BA, r18
    2ed4:	8f ef       	ldi	r24, 0xFF	; 255
	return TRUE;
}
    2ed6:	08 95       	ret
inline bool zoI2cSetLocalDeviceAddr(u08 deviceAddr, u08 genCallEn)
{
	if((deviceAddr>0x7F)||(deviceAddr==0))
		return FALSE;
	
	TWAR = ((deviceAddr<<1) | (genCallEn?1:0));
    2ed8:	21 e0       	ldi	r18, 0x01	; 1
    2eda:	f9 cf       	rjmp	.-14     	; 0x2ece <zoI2cSetLocalDeviceAddr+0x14>

00002edc <zoI2cSetWaitOnBusReadyTimeOut>:
	return TRUE;
}

inline void zoI2cSetWaitOnBusReadyTimeOut(u16 miliseconds)
{
	BusReadyTimeOut = miliseconds;
    2edc:	90 93 69 01 	sts	0x0169, r25
    2ee0:	80 93 68 01 	sts	0x0168, r24
}
    2ee4:	08 95       	ret

00002ee6 <zoI2cSetWaitOnTransmitTimeOut>:

inline void zoI2cSetWaitOnTransmitTimeOut(u16 miliseconds)
{
	TransmitTimeOut = miliseconds;
    2ee6:	90 93 67 01 	sts	0x0167, r25
    2eea:	80 93 66 01 	sts	0x0166, r24
}
    2eee:	08 95       	ret

00002ef0 <zoI2cSetWaitOnReceiveTimeOut>:

inline void zoI2cSetWaitOnReceiveTimeOut(u16 miliseconds)
{
	ReceiveTimeOut = miliseconds;
    2ef0:	90 93 6b 01 	sts	0x016B, r25
    2ef4:	80 93 6a 01 	sts	0x016A, r24
}
    2ef8:	08 95       	ret

00002efa <zoI2cSetSlaveReceiveHandler>:

inline void zoI2cSetSlaveReceiveHandler(void (*i2cSlaveRx_func)(u08 receiveDataLength, u08* receiveData))
{
	zoI2cSlaveReceive = i2cSlaveRx_func;
    2efa:	90 93 be 02 	sts	0x02BE, r25
    2efe:	80 93 bd 02 	sts	0x02BD, r24
}
    2f02:	08 95       	ret

00002f04 <zoI2cSetSlaveTransmitHandler>:

inline void zoI2cSetSlaveTransmitHandler(u08 (*i2cSlaveTx_func)(u08 transmitDataLengthMax, u08* transmitData))
{
	zoI2cSlaveTransmit = i2cSlaveTx_func;
    2f04:	90 93 c0 02 	sts	0x02C0, r25
    2f08:	80 93 bf 02 	sts	0x02BF, r24
}
    2f0c:	08 95       	ret

00002f0e <zoI2cSendStart>:

inline void zoI2cSendStart(void)
{
	// send start condition
	TWCR = (TWCR & TWCR_CMD_MASK)|_BV(TWINT)|_BV(TWSTA);
    2f0e:	ec eb       	ldi	r30, 0xBC	; 188
    2f10:	f0 e0       	ldi	r31, 0x00	; 0
    2f12:	80 81       	ld	r24, Z
    2f14:	8f 70       	andi	r24, 0x0F	; 15
    2f16:	80 6a       	ori	r24, 0xA0	; 160
    2f18:	80 83       	st	Z, r24
}
    2f1a:	08 95       	ret

00002f1c <zoI2cSendStop>:

inline void zoI2cSendStop(void)
{
	// transmit stop condition
	// leave with TWEA on for slave receiving
	TWCR = ( TWCR & TWCR_CMD_MASK ) | _BV(TWINT)|_BV(TWEA)|_BV(TWSTO);
    2f1c:	ec eb       	ldi	r30, 0xBC	; 188
    2f1e:	f0 e0       	ldi	r31, 0x00	; 0
    2f20:	80 81       	ld	r24, Z
    2f22:	8f 70       	andi	r24, 0x0F	; 15
    2f24:	80 6d       	ori	r24, 0xD0	; 208
    2f26:	80 83       	st	Z, r24
}
    2f28:	08 95       	ret

00002f2a <zoI2cWaitForComplete>:

inline void zoI2cWaitForComplete(void)
{
	// wait for i2c interface to complete operation
	while( !(TWCR & _BV(TWINT)) );
    2f2a:	80 91 bc 00 	lds	r24, 0x00BC
    2f2e:	87 ff       	sbrs	r24, 7
    2f30:	fc cf       	rjmp	.-8      	; 0x2f2a <zoI2cWaitForComplete>
}
    2f32:	08 95       	ret

00002f34 <zoI2cSendByte>:

inline void zoI2cSendByte(u08 data)
{
	TWDR = data;
    2f34:	80 93 bb 00 	sts	0x00BB, r24
	TWCR = (TWCR & TWCR_CMD_MASK)|_BV(TWINT);	//send
    2f38:	ec eb       	ldi	r30, 0xBC	; 188
    2f3a:	f0 e0       	ldi	r31, 0x00	; 0
    2f3c:	80 81       	ld	r24, Z
    2f3e:	8f 70       	andi	r24, 0x0F	; 15
    2f40:	80 68       	ori	r24, 0x80	; 128
    2f42:	80 83       	st	Z, r24
}
    2f44:	08 95       	ret

00002f46 <zoI2cAcknowledgeRx>:

inline void zoI2cAcknowledgeRx(bool acknowledge)
{
	if( acknowledge )
    2f46:	88 23       	and	r24, r24
    2f48:	39 f4       	brne	.+14     	; 0x2f58 <zoI2cAcknowledgeRx+0x12>
		TWCR = (TWCR & TWCR_CMD_MASK)|_BV(TWINT)|_BV(TWEA);
	else
		TWCR = (TWCR & TWCR_CMD_MASK)|_BV(TWINT);
    2f4a:	80 91 bc 00 	lds	r24, 0x00BC
    2f4e:	8f 70       	andi	r24, 0x0F	; 15
    2f50:	80 68       	ori	r24, 0x80	; 128
    2f52:	80 93 bc 00 	sts	0x00BC, r24
    2f56:	08 95       	ret
}

inline void zoI2cAcknowledgeRx(bool acknowledge)
{
	if( acknowledge )
		TWCR = (TWCR & TWCR_CMD_MASK)|_BV(TWINT)|_BV(TWEA);
    2f58:	80 91 bc 00 	lds	r24, 0x00BC
    2f5c:	8f 70       	andi	r24, 0x0F	; 15
    2f5e:	80 6c       	ori	r24, 0xC0	; 192
    2f60:	80 93 bc 00 	sts	0x00BC, r24
    2f64:	08 95       	ret

00002f66 <__vector_24>:


//! I2C (TWI) interrupt service routine
//SIGNAL(SIG_2WIRE_SERIAL)
ISR(TWI_vect)
{
    2f66:	1f 92       	push	r1
    2f68:	0f 92       	push	r0
    2f6a:	0f b6       	in	r0, 0x3f	; 63
    2f6c:	0f 92       	push	r0
    2f6e:	11 24       	eor	r1, r1
    2f70:	2f 93       	push	r18
    2f72:	3f 93       	push	r19
    2f74:	4f 93       	push	r20
    2f76:	5f 93       	push	r21
    2f78:	6f 93       	push	r22
    2f7a:	7f 93       	push	r23
    2f7c:	8f 93       	push	r24
    2f7e:	9f 93       	push	r25
    2f80:	af 93       	push	r26
    2f82:	bf 93       	push	r27
    2f84:	ef 93       	push	r30
    2f86:	ff 93       	push	r31
	// read status bits	and shift right by 3. Execute corresponding functor
	zoI2cFunctor[( TWSR >> 3 )]();
    2f88:	e0 91 b9 00 	lds	r30, 0x00B9
    2f8c:	e6 95       	lsr	r30
    2f8e:	e6 95       	lsr	r30
    2f90:	e6 95       	lsr	r30
    2f92:	f0 e0       	ldi	r31, 0x00	; 0
    2f94:	ee 0f       	add	r30, r30
    2f96:	ff 1f       	adc	r31, r31
    2f98:	ef 53       	subi	r30, 0x3F	; 63
    2f9a:	fd 4f       	sbci	r31, 0xFD	; 253
    2f9c:	01 90       	ld	r0, Z+
    2f9e:	f0 81       	ld	r31, Z
    2fa0:	e0 2d       	mov	r30, r0
    2fa2:	09 95       	icall
}
    2fa4:	ff 91       	pop	r31
    2fa6:	ef 91       	pop	r30
    2fa8:	bf 91       	pop	r27
    2faa:	af 91       	pop	r26
    2fac:	9f 91       	pop	r25
    2fae:	8f 91       	pop	r24
    2fb0:	7f 91       	pop	r23
    2fb2:	6f 91       	pop	r22
    2fb4:	5f 91       	pop	r21
    2fb6:	4f 91       	pop	r20
    2fb8:	3f 91       	pop	r19
    2fba:	2f 91       	pop	r18
    2fbc:	0f 90       	pop	r0
    2fbe:	0f be       	out	0x3f, r0	; 63
    2fc0:	0f 90       	pop	r0
    2fc2:	1f 90       	pop	r1
    2fc4:	18 95       	reti

00002fc6 <zoI2cFunctorStart>:

// 0x01, 0x02 : Start or repeated start
void zoI2cFunctorStart(void)		
{
	// send device address
	zoI2cSendByte(I2cDeviceAddrRW);	
    2fc6:	80 91 78 02 	lds	r24, 0x0278
	while( !(TWCR & _BV(TWINT)) );
}

inline void zoI2cSendByte(u08 data)
{
	TWDR = data;
    2fca:	80 93 bb 00 	sts	0x00BB, r24
	TWCR = (TWCR & TWCR_CMD_MASK)|_BV(TWINT);	//send
    2fce:	ec eb       	ldi	r30, 0xBC	; 188
    2fd0:	f0 e0       	ldi	r31, 0x00	; 0
    2fd2:	80 81       	ld	r24, Z
    2fd4:	8f 70       	andi	r24, 0x0F	; 15
    2fd6:	80 68       	ori	r24, 0x80	; 128
    2fd8:	80 83       	st	Z, r24
// 0x01, 0x02 : Start or repeated start
void zoI2cFunctorStart(void)		
{
	// send device address
	zoI2cSendByte(I2cDeviceAddrRW);	
}
    2fda:	08 95       	ret

00002fdc <zoI2cFunctorMtAck>:

//0x03: Slave address acknowledged, 0x05: Data acknowledged 
void zoI2cFunctorMtAck(void)
{
	if(I2cSendDataIndex < I2cSendDataLength)
    2fdc:	90 91 99 02 	lds	r25, 0x0299
    2fe0:	80 91 9a 02 	lds	r24, 0x029A
    2fe4:	98 17       	cp	r25, r24
    2fe6:	48 f0       	brcs	.+18     	; 0x2ffa <zoI2cFunctorMtAck+0x1e>

inline void zoI2cSendStop(void)
{
	// transmit stop condition
	// leave with TWEA on for slave receiving
	TWCR = ( TWCR & TWCR_CMD_MASK ) | _BV(TWINT)|_BV(TWEA)|_BV(TWSTO);
    2fe8:	80 91 bc 00 	lds	r24, 0x00BC
    2fec:	8f 70       	andi	r24, 0x0F	; 15
    2fee:	80 6d       	ori	r24, 0xD0	; 208
    2ff0:	80 93 bc 00 	sts	0x00BC, r24
	if(I2cSendDataIndex < I2cSendDataLength)
		zoI2cSendByte( I2cSendData[I2cSendDataIndex++] );
	else
	{
		zoI2cSendStop();			// transmit stop condition, enable SLA ACK
		I2cState = I2C_IDLE;		// set state
    2ff4:	10 92 77 02 	sts	0x0277, r1
    2ff8:	08 95       	ret

//0x03: Slave address acknowledged, 0x05: Data acknowledged 
void zoI2cFunctorMtAck(void)
{
	if(I2cSendDataIndex < I2cSendDataLength)
		zoI2cSendByte( I2cSendData[I2cSendDataIndex++] );
    2ffa:	e9 2f       	mov	r30, r25
    2ffc:	f0 e0       	ldi	r31, 0x00	; 0
    2ffe:	e7 58       	subi	r30, 0x87	; 135
    3000:	fd 4f       	sbci	r31, 0xFD	; 253
    3002:	80 81       	ld	r24, Z
    3004:	9f 5f       	subi	r25, 0xFF	; 255
    3006:	90 93 99 02 	sts	0x0299, r25
	while( !(TWCR & _BV(TWINT)) );
}

inline void zoI2cSendByte(u08 data)
{
	TWDR = data;
    300a:	80 93 bb 00 	sts	0x00BB, r24
	TWCR = (TWCR & TWCR_CMD_MASK)|_BV(TWINT);	//send
    300e:	80 91 bc 00 	lds	r24, 0x00BC
    3012:	8f 70       	andi	r24, 0x0F	; 15
    3014:	80 68       	ori	r24, 0x80	; 128
    3016:	80 93 bc 00 	sts	0x00BC, r24
    301a:	08 95       	ret

0000301c <zoI2cFunctorMrDataNAck>:
}

// 0x0B: Data received, NACK reply issued
void zoI2cFunctorMrDataNAck(void)
{
	I2cReceiveData[I2cReceiveDataIndex++] = TWDR;
    301c:	80 91 bb 02 	lds	r24, 0x02BB
    3020:	90 91 bb 00 	lds	r25, 0x00BB
    3024:	eb e9       	ldi	r30, 0x9B	; 155
    3026:	f2 e0       	ldi	r31, 0x02	; 2
    3028:	e8 0f       	add	r30, r24
    302a:	f1 1d       	adc	r31, r1
    302c:	90 83       	st	Z, r25
    302e:	8f 5f       	subi	r24, 0xFF	; 255
    3030:	80 93 bb 02 	sts	0x02BB, r24

inline void zoI2cSendStop(void)
{
	// transmit stop condition
	// leave with TWEA on for slave receiving
	TWCR = ( TWCR & TWCR_CMD_MASK ) | _BV(TWINT)|_BV(TWEA)|_BV(TWSTO);
    3034:	ec eb       	ldi	r30, 0xBC	; 188
    3036:	f0 e0       	ldi	r31, 0x00	; 0
    3038:	80 81       	ld	r24, Z
    303a:	8f 70       	andi	r24, 0x0F	; 15
    303c:	80 6d       	ori	r24, 0xD0	; 208
    303e:	80 83       	st	Z, r24
// 0x0B: Data received, NACK reply issued
void zoI2cFunctorMrDataNAck(void)
{
	I2cReceiveData[I2cReceiveDataIndex++] = TWDR;
	zoI2cSendStop();
	I2cState = I2C_IDLE;
    3040:	10 92 77 02 	sts	0x0277, r1
}
    3044:	08 95       	ret

00003046 <zoI2cFunctorSrAck>:
// 0x0E, 0x0F: GCA+W has been received, ACK has been returned
void zoI2cFunctorSrAck(void)
{
	// we are being addressed as slave for writing (data will be received from master)
	// set state
	I2cState = I2C_SLAVE_RX;
    3046:	85 e0       	ldi	r24, 0x05	; 5
    3048:	80 93 77 02 	sts	0x0277, r24
	// prepare buffer
	I2cReceiveDataIndex = 0;
    304c:	10 92 bb 02 	sts	0x02BB, r1
	// receive data byte and return ACK
	TWCR = (TWCR&TWCR_CMD_MASK)|_BV(TWINT)|_BV(TWEA);
    3050:	ec eb       	ldi	r30, 0xBC	; 188
    3052:	f0 e0       	ldi	r31, 0x00	; 0
    3054:	80 81       	ld	r24, Z
    3056:	8f 70       	andi	r24, 0x0F	; 15
    3058:	80 6c       	ori	r24, 0xC0	; 192
    305a:	80 83       	st	Z, r24
}
    305c:	08 95       	ret

0000305e <zoI2cFunctorStop>:

//0x14: STOP or REPEATED START has been received while addressed as slave
void zoI2cFunctorStop(void)
{
	// switch to SR mode with SLA ACK
	TWCR = (TWCR&TWCR_CMD_MASK)|_BV(TWINT)|_BV(TWEA);
    305e:	80 91 bc 00 	lds	r24, 0x00BC
    3062:	8f 70       	andi	r24, 0x0F	; 15
    3064:	80 6c       	ori	r24, 0xC0	; 192
    3066:	80 93 bc 00 	sts	0x00BC, r24
	// i2c receive is complete, call i2cSlaveReceive
	if(zoI2cSlaveReceive) zoI2cSlaveReceive(I2cReceiveDataIndex, I2cReceiveData);
    306a:	e0 91 bd 02 	lds	r30, 0x02BD
    306e:	f0 91 be 02 	lds	r31, 0x02BE
    3072:	30 97       	sbiw	r30, 0x00	; 0
    3074:	29 f0       	breq	.+10     	; 0x3080 <zoI2cFunctorStop+0x22>
    3076:	80 91 bb 02 	lds	r24, 0x02BB
    307a:	6b e9       	ldi	r22, 0x9B	; 155
    307c:	72 e0       	ldi	r23, 0x02	; 2
    307e:	09 95       	icall
	// set state
	I2cState = I2C_IDLE;
    3080:	10 92 77 02 	sts	0x0277, r1
}
    3084:	08 95       	ret

00003086 <zoI2cFunctorStAck>:
//0x16: GCA+R has been received, ACK has been returned 
void zoI2cFunctorStAck(void)
{
	// we are being addressed as slave for reading (data must be transmitted back to master)
	// set state
	I2cState = I2C_SLAVE_TX;
    3086:	84 e0       	ldi	r24, 0x04	; 4
    3088:	80 93 77 02 	sts	0x0277, r24
	// request data from application
	if(zoI2cSlaveTransmit) I2cSendDataLength = zoI2cSlaveTransmit(ZO_I2C_BUFFER_SIZE, I2cSendData);
    308c:	e0 91 bf 02 	lds	r30, 0x02BF
    3090:	f0 91 c0 02 	lds	r31, 0x02C0
    3094:	30 97       	sbiw	r30, 0x00	; 0
    3096:	31 f0       	breq	.+12     	; 0x30a4 <zoI2cFunctorStAck+0x1e>
    3098:	80 e2       	ldi	r24, 0x20	; 32
    309a:	69 e7       	ldi	r22, 0x79	; 121
    309c:	72 e0       	ldi	r23, 0x02	; 2
    309e:	09 95       	icall
    30a0:	80 93 9a 02 	sts	0x029A, r24
	// reset data index
	I2cSendDataIndex = 0;
	// transmit data byte
	TWDR = I2cSendData[I2cSendDataIndex++];
    30a4:	80 91 79 02 	lds	r24, 0x0279
    30a8:	80 93 bb 00 	sts	0x00BB, r24
    30ac:	81 e0       	ldi	r24, 0x01	; 1
    30ae:	80 93 99 02 	sts	0x0299, r24
	if(I2cSendDataIndex < I2cSendDataLength)
    30b2:	80 91 9a 02 	lds	r24, 0x029A
    30b6:	82 30       	cpi	r24, 0x02	; 2
    30b8:	38 f4       	brcc	.+14     	; 0x30c8 <zoI2cFunctorStAck+0x42>
		// expect ACK to data byte
		TWCR = (TWCR&TWCR_CMD_MASK)|_BV(TWINT)|_BV(TWEA);
	else
		// expect NACK to data byte
		TWCR = (TWCR&TWCR_CMD_MASK)|_BV(TWINT);
    30ba:	80 91 bc 00 	lds	r24, 0x00BC
    30be:	8f 70       	andi	r24, 0x0F	; 15
    30c0:	80 68       	ori	r24, 0x80	; 128
    30c2:	80 93 bc 00 	sts	0x00BC, r24
    30c6:	08 95       	ret
	I2cSendDataIndex = 0;
	// transmit data byte
	TWDR = I2cSendData[I2cSendDataIndex++];
	if(I2cSendDataIndex < I2cSendDataLength)
		// expect ACK to data byte
		TWCR = (TWCR&TWCR_CMD_MASK)|_BV(TWINT)|_BV(TWEA);
    30c8:	80 91 bc 00 	lds	r24, 0x00BC
    30cc:	8f 70       	andi	r24, 0x0F	; 15
    30ce:	80 6c       	ori	r24, 0xC0	; 192
    30d0:	80 93 bc 00 	sts	0x00BC, r24
    30d4:	08 95       	ret

000030d6 <zoI2cFunctorStDataAck>:

//0x17: data byte has been transmitted, ACK has been received
void zoI2cFunctorStDataAck(void)
{
	// transmit data byte
	TWDR = I2cSendData[I2cSendDataIndex++];
    30d6:	90 91 99 02 	lds	r25, 0x0299
    30da:	e9 2f       	mov	r30, r25
    30dc:	f0 e0       	ldi	r31, 0x00	; 0
    30de:	e7 58       	subi	r30, 0x87	; 135
    30e0:	fd 4f       	sbci	r31, 0xFD	; 253
    30e2:	80 81       	ld	r24, Z
    30e4:	80 93 bb 00 	sts	0x00BB, r24
    30e8:	9f 5f       	subi	r25, 0xFF	; 255
    30ea:	90 93 99 02 	sts	0x0299, r25
	if(I2cSendDataIndex < I2cSendDataLength)
    30ee:	80 91 9a 02 	lds	r24, 0x029A
    30f2:	98 17       	cp	r25, r24
    30f4:	38 f0       	brcs	.+14     	; 0x3104 <zoI2cFunctorStDataAck+0x2e>
		// expect ACK to data byte
		TWCR = (TWCR&TWCR_CMD_MASK)|_BV(TWINT)|_BV(TWEA);
	else
		// expect NACK to data byte
		TWCR = (TWCR&TWCR_CMD_MASK)|_BV(TWINT);
    30f6:	80 91 bc 00 	lds	r24, 0x00BC
    30fa:	8f 70       	andi	r24, 0x0F	; 15
    30fc:	80 68       	ori	r24, 0x80	; 128
    30fe:	80 93 bc 00 	sts	0x00BC, r24
    3102:	08 95       	ret
{
	// transmit data byte
	TWDR = I2cSendData[I2cSendDataIndex++];
	if(I2cSendDataIndex < I2cSendDataLength)
		// expect ACK to data byte
		TWCR = (TWCR&TWCR_CMD_MASK)|_BV(TWINT)|_BV(TWEA);
    3104:	80 91 bc 00 	lds	r24, 0x00BC
    3108:	8f 70       	andi	r24, 0x0F	; 15
    310a:	80 6c       	ori	r24, 0xC0	; 192
    310c:	80 93 bc 00 	sts	0x00BC, r24
    3110:	08 95       	ret

00003112 <zoI2cFunctorStDataNAck>:

// 0x18, 0x19: data byte has been transmitted, NACK has been received 
void zoI2cFunctorStDataNAck(void)
{
	// switch to open slave
	TWCR = (TWCR&TWCR_CMD_MASK)|_BV(TWINT)|_BV(TWEA);
    3112:	ec eb       	ldi	r30, 0xBC	; 188
    3114:	f0 e0       	ldi	r31, 0x00	; 0
    3116:	80 81       	ld	r24, Z
    3118:	8f 70       	andi	r24, 0x0F	; 15
    311a:	80 6c       	ori	r24, 0xC0	; 192
    311c:	80 83       	st	Z, r24
	// set state
	I2cState = I2C_IDLE;
    311e:	10 92 77 02 	sts	0x0277, r1
}
    3122:	08 95       	ret

00003124 <zoI2cFunctorNull>:
{
	zoErrorPut(&zoI2cError,ZO_I2C_ERROR_INDETERMINATE);
}

//Null functor: all other indexes
void zoI2cFunctorNull(void) {}
    3124:	08 95       	ret

00003126 <zoI2cFunctorInit>:

void zoI2cFunctorInit(void)
{
	zoI2cFunctor[TW_BUS_ERROR]				= zoI2cFunctorBusError;
    3126:	88 e5       	ldi	r24, 0x58	; 88
    3128:	99 e1       	ldi	r25, 0x19	; 25
    312a:	90 93 c2 02 	sts	0x02C2, r25
    312e:	80 93 c1 02 	sts	0x02C1, r24
	zoI2cFunctor[TW_START]					= zoI2cFunctorStart;
    3132:	83 ee       	ldi	r24, 0xE3	; 227
    3134:	97 e1       	ldi	r25, 0x17	; 23
    3136:	90 93 c4 02 	sts	0x02C4, r25
    313a:	80 93 c3 02 	sts	0x02C3, r24
	zoI2cFunctor[TW_REP_START]				= zoI2cFunctorStart;
    313e:	90 93 c6 02 	sts	0x02C6, r25
    3142:	80 93 c5 02 	sts	0x02C5, r24
	zoI2cFunctor[TW_MT_SLA_ACK]				= zoI2cFunctorMtAck;
    3146:	8e ee       	ldi	r24, 0xEE	; 238
    3148:	97 e1       	ldi	r25, 0x17	; 23
    314a:	90 93 c8 02 	sts	0x02C8, r25
    314e:	80 93 c7 02 	sts	0x02C7, r24
	zoI2cFunctor[TW_MT_SLA_NACK]			= zoI2cFunctorMasterNAck;
    3152:	2a e4       	ldi	r18, 0x4A	; 74
    3154:	39 e1       	ldi	r19, 0x19	; 25
    3156:	30 93 ca 02 	sts	0x02CA, r19
    315a:	20 93 c9 02 	sts	0x02C9, r18
	zoI2cFunctor[TW_MT_DATA_ACK]			= zoI2cFunctorMtAck;
    315e:	90 93 cc 02 	sts	0x02CC, r25
    3162:	80 93 cb 02 	sts	0x02CB, r24
	zoI2cFunctor[TW_MT_DATA_NACK]			= zoI2cFunctorMasterNAck;
    3166:	30 93 ce 02 	sts	0x02CE, r19
    316a:	20 93 cd 02 	sts	0x02CD, r18
	zoI2cFunctor[TW_MT_ARB_LOST]			= zoI2cFunctorArbitrationLost;
    316e:	8c e3       	ldi	r24, 0x3C	; 60
    3170:	99 e1       	ldi	r25, 0x19	; 25
    3172:	90 93 d0 02 	sts	0x02D0, r25
    3176:	80 93 cf 02 	sts	0x02CF, r24
	zoI2cFunctor[TW_MR_SLA_ACK]				= zoI2cFunctorMrSlaveAck;
    317a:	8f e1       	ldi	r24, 0x1F	; 31
    317c:	9a e1       	ldi	r25, 0x1A	; 26
    317e:	90 93 d2 02 	sts	0x02D2, r25
    3182:	80 93 d1 02 	sts	0x02D1, r24
	zoI2cFunctor[TW_MR_SLA_NACK]			= zoI2cFunctorMasterNAck;
    3186:	30 93 d4 02 	sts	0x02D4, r19
    318a:	20 93 d3 02 	sts	0x02D3, r18
	zoI2cFunctor[TW_MR_DATA_ACK]			= zoI2cFunctorMrDataAck;
    318e:	83 e5       	ldi	r24, 0x53	; 83
    3190:	9a e1       	ldi	r25, 0x1A	; 26
    3192:	90 93 d6 02 	sts	0x02D6, r25
    3196:	80 93 d5 02 	sts	0x02D5, r24
	zoI2cFunctor[TW_MR_DATA_NACK]			= zoI2cFunctorMrDataNAck;
    319a:	8e e0       	ldi	r24, 0x0E	; 14
    319c:	98 e1       	ldi	r25, 0x18	; 24
    319e:	90 93 d8 02 	sts	0x02D8, r25
    31a2:	80 93 d7 02 	sts	0x02D7, r24
	zoI2cFunctor[TW_SR_SLA_ACK]				= zoI2cFunctorSrAck;
    31a6:	83 e2       	ldi	r24, 0x23	; 35
    31a8:	98 e1       	ldi	r25, 0x18	; 24
    31aa:	90 93 da 02 	sts	0x02DA, r25
    31ae:	80 93 d9 02 	sts	0x02D9, r24
	zoI2cFunctor[TW_SR_ARB_LOST_SLA_ACK]	= zoI2cFunctorSrAck;
    31b2:	90 93 dc 02 	sts	0x02DC, r25
    31b6:	80 93 db 02 	sts	0x02DB, r24
	zoI2cFunctor[TW_SR_GCALL_ACK]			= zoI2cFunctorSrAck;
    31ba:	90 93 de 02 	sts	0x02DE, r25
    31be:	80 93 dd 02 	sts	0x02DD, r24
	zoI2cFunctor[TW_SR_ARB_LOST_GCALL_ACK]	= zoI2cFunctorSrAck;
    31c2:	90 93 e0 02 	sts	0x02E0, r25
    31c6:	80 93 df 02 	sts	0x02DF, r24
	zoI2cFunctor[TW_SR_DATA_ACK]			= zoI2cFunctorSrDataAck;
    31ca:	27 e3       	ldi	r18, 0x37	; 55
    31cc:	3a e1       	ldi	r19, 0x1A	; 26
    31ce:	30 93 e2 02 	sts	0x02E2, r19
    31d2:	20 93 e1 02 	sts	0x02E1, r18
	zoI2cFunctor[TW_SR_DATA_NACK]			= zoI2cFunctorSrDataNack;
    31d6:	88 e1       	ldi	r24, 0x18	; 24
    31d8:	9a e1       	ldi	r25, 0x1A	; 26
    31da:	90 93 e4 02 	sts	0x02E4, r25
    31de:	80 93 e3 02 	sts	0x02E3, r24
	zoI2cFunctor[TW_SR_GCALL_DATA_ACK]		= zoI2cFunctorSrDataAck;
    31e2:	30 93 e6 02 	sts	0x02E6, r19
    31e6:	20 93 e5 02 	sts	0x02E5, r18
	zoI2cFunctor[TW_SR_GCALL_DATA_NACK]		= zoI2cFunctorSrDataNack;
    31ea:	90 93 e8 02 	sts	0x02E8, r25
    31ee:	80 93 e7 02 	sts	0x02E7, r24
	zoI2cFunctor[TW_SR_STOP]				= zoI2cFunctorStop;
    31f2:	8f e2       	ldi	r24, 0x2F	; 47
    31f4:	98 e1       	ldi	r25, 0x18	; 24
    31f6:	90 93 ea 02 	sts	0x02EA, r25
    31fa:	80 93 e9 02 	sts	0x02E9, r24
	zoI2cFunctor[TW_ST_SLA_ACK]				= zoI2cFunctorStAck;
    31fe:	83 e4       	ldi	r24, 0x43	; 67
    3200:	98 e1       	ldi	r25, 0x18	; 24
    3202:	90 93 ec 02 	sts	0x02EC, r25
    3206:	80 93 eb 02 	sts	0x02EB, r24
	zoI2cFunctor[TW_ST_ARB_LOST_SLA_ACK]	= zoI2cFunctorStAck;
    320a:	90 93 ee 02 	sts	0x02EE, r25
    320e:	80 93 ed 02 	sts	0x02ED, r24
	zoI2cFunctor[TW_ST_DATA_ACK]			= zoI2cFunctorStDataAck;
    3212:	8b e6       	ldi	r24, 0x6B	; 107
    3214:	98 e1       	ldi	r25, 0x18	; 24
    3216:	90 93 f0 02 	sts	0x02F0, r25
    321a:	80 93 ef 02 	sts	0x02EF, r24
	zoI2cFunctor[TW_ST_DATA_NACK]			= zoI2cFunctorStDataNAck;
    321e:	89 e8       	ldi	r24, 0x89	; 137
    3220:	98 e1       	ldi	r25, 0x18	; 24
    3222:	90 93 f2 02 	sts	0x02F2, r25
    3226:	80 93 f1 02 	sts	0x02F1, r24
	zoI2cFunctor[TW_ST_LAST_DATA]			= zoI2cFunctorStDataNAck;
    322a:	90 93 f4 02 	sts	0x02F4, r25
    322e:	80 93 f3 02 	sts	0x02F3, r24
	zoI2cFunctor[0x1A]						= zoI2cFunctorNull;
    3232:	82 e9       	ldi	r24, 0x92	; 146
    3234:	98 e1       	ldi	r25, 0x18	; 24
    3236:	90 93 f6 02 	sts	0x02F6, r25
    323a:	80 93 f5 02 	sts	0x02F5, r24
	zoI2cFunctor[0x1B]						= zoI2cFunctorNull;
    323e:	90 93 f8 02 	sts	0x02F8, r25
    3242:	80 93 f7 02 	sts	0x02F7, r24
	zoI2cFunctor[0x1C]						= zoI2cFunctorNull;
    3246:	90 93 fa 02 	sts	0x02FA, r25
    324a:	80 93 f9 02 	sts	0x02F9, r24
	zoI2cFunctor[0x1D]						= zoI2cFunctorNull;
    324e:	90 93 fc 02 	sts	0x02FC, r25
    3252:	80 93 fb 02 	sts	0x02FB, r24
	zoI2cFunctor[0x1E]						= zoI2cFunctorNull;
    3256:	90 93 fe 02 	sts	0x02FE, r25
    325a:	80 93 fd 02 	sts	0x02FD, r24
	zoI2cFunctor[TW_NO_INFO]				= zoI2cFunctorNoInfo;
    325e:	86 e3       	ldi	r24, 0x36	; 54
    3260:	99 e1       	ldi	r25, 0x19	; 25
    3262:	90 93 00 03 	sts	0x0300, r25
    3266:	80 93 ff 02 	sts	0x02FF, r24
}
    326a:	08 95       	ret

0000326c <zoI2cFunctorNoInfo>:
}

//0x1F: No relevant state information
void zoI2cFunctorNoInfo(void)
{
	zoErrorPut(&zoI2cError,ZO_I2C_ERROR_INDETERMINATE);
    326c:	8a e6       	ldi	r24, 0x6A	; 106
    326e:	92 e0       	ldi	r25, 0x02	; 2
    3270:	64 e0       	ldi	r22, 0x04	; 4
    3272:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <zoErrorPut>
}
    3276:	08 95       	ret

00003278 <zoI2cFunctorArbitrationLost>:

//0x07: Bus arbitration lost
void zoI2cFunctorArbitrationLost(void)
{
	// release bus
	TWCR = (TWCR&TWCR_CMD_MASK)|_BV(TWINT);
    3278:	ec eb       	ldi	r30, 0xBC	; 188
    327a:	f0 e0       	ldi	r31, 0x00	; 0
    327c:	80 81       	ld	r24, Z
    327e:	8f 70       	andi	r24, 0x0F	; 15
    3280:	80 68       	ori	r24, 0x80	; 128
    3282:	80 83       	st	Z, r24
	// set state
	zoErrorPut(&zoI2cError,ZO_I2C_ERROR_ARBITRATION_LOST);
    3284:	8a e6       	ldi	r24, 0x6A	; 106
    3286:	92 e0       	ldi	r25, 0x02	; 2
    3288:	63 e0       	ldi	r22, 0x03	; 3
    328a:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <zoErrorPut>
	I2cState = I2C_IDLE;
    328e:	10 92 77 02 	sts	0x0277, r1
}
    3292:	08 95       	ret

00003294 <zoI2cFunctorMasterNAck>:

inline void zoI2cSendStop(void)
{
	// transmit stop condition
	// leave with TWEA on for slave receiving
	TWCR = ( TWCR & TWCR_CMD_MASK ) | _BV(TWINT)|_BV(TWEA)|_BV(TWSTO);
    3294:	ec eb       	ldi	r30, 0xBC	; 188
    3296:	f0 e0       	ldi	r31, 0x00	; 0
    3298:	80 81       	ld	r24, Z
    329a:	8f 70       	andi	r24, 0x0F	; 15
    329c:	80 6d       	ori	r24, 0xD0	; 208
    329e:	80 83       	st	Z, r24

// 0x09, 0x04: Slave address not acknowledged, 0x06: Data not acknowledged
void zoI2cFunctorMasterNAck(void)
{
	zoI2cSendStop();
	zoErrorPut(&zoI2cError,ZO_I2C_ERROR_NODEV);
    32a0:	8a e6       	ldi	r24, 0x6A	; 106
    32a2:	92 e0       	ldi	r25, 0x02	; 2
    32a4:	61 e0       	ldi	r22, 0x01	; 1
    32a6:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <zoErrorPut>
	I2cState = I2C_IDLE;
    32aa:	10 92 77 02 	sts	0x0277, r1
}
    32ae:	08 95       	ret

000032b0 <zoI2cFunctorBusError>:

// 0x00: Bus error due to illegal start or stop condition
void zoI2cFunctorBusError(void)
{
	// reset internal hardware and release bus
	TWCR =  ( TWCR & TWCR_CMD_MASK )|_BV(TWINT)|_BV(TWSTO)|_BV(TWEA);
    32b0:	ec eb       	ldi	r30, 0xBC	; 188
    32b2:	f0 e0       	ldi	r31, 0x00	; 0
    32b4:	80 81       	ld	r24, Z
    32b6:	8f 70       	andi	r24, 0x0F	; 15
    32b8:	80 6d       	ori	r24, 0xD0	; 208
    32ba:	80 83       	st	Z, r24
	// set state
	zoErrorPut(&zoI2cError,ZO_I2C_ERROR_BUS_ERROR);
    32bc:	8a e6       	ldi	r24, 0x6A	; 106
    32be:	92 e0       	ldi	r25, 0x02	; 2
    32c0:	62 e0       	ldi	r22, 0x02	; 2
    32c2:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <zoErrorPut>
	I2cState = I2C_IDLE;
    32c6:	10 92 77 02 	sts	0x0277, r1
	
}
    32ca:	08 95       	ret

000032cc <zoI2cMasterSend>:
		TWCR = (TWCR & TWCR_CMD_MASK)|_BV(TWINT);
}

#if ZO_I2C_ENABLE_MASTER_TRANSMIT == 1
bool zoI2cMasterSend(u08 deviceAddr, u08 length, u08 *data)
{
    32cc:	cf 92       	push	r12
    32ce:	df 92       	push	r13
    32d0:	ef 92       	push	r14
    32d2:	ff 92       	push	r15
    32d4:	0f 93       	push	r16
    32d6:	1f 93       	push	r17
    32d8:	df 93       	push	r29
    32da:	cf 93       	push	r28
    32dc:	00 d0       	rcall	.+0      	; 0x32de <zoI2cMasterSend+0x12>
    32de:	cd b7       	in	r28, 0x3d	; 61
    32e0:	de b7       	in	r29, 0x3e	; 62
    32e2:	d8 2e       	mov	r13, r24
    32e4:	f6 2e       	mov	r15, r22
    32e6:	e4 2e       	mov	r14, r20
    32e8:	c5 2e       	mov	r12, r21
	u08 i;
	u16 timer;
	// wait for interface to be ready
	
	zoSystemTimerTimeOutInit(&timer);
    32ea:	8e 01       	movw	r16, r28
    32ec:	0f 5f       	subi	r16, 0xFF	; 255
    32ee:	1f 4f       	sbci	r17, 0xFF	; 255
    32f0:	c8 01       	movw	r24, r16
    32f2:	0e 94 42 01 	call	0x284	; 0x284 <zoSystemTimerTimeOutInit>
	while(I2cState)
    32f6:	80 91 77 02 	lds	r24, 0x0277
    32fa:	88 23       	and	r24, r24
    32fc:	d1 f0       	breq	.+52     	; 0x3332 <zoI2cMasterSend+0x66>
	{
		if(zoSystemTimerTimeOutExpired(&timer,BusReadyTimeOut))
    32fe:	60 91 68 01 	lds	r22, 0x0168
    3302:	70 91 69 01 	lds	r23, 0x0169
    3306:	c8 01       	movw	r24, r16
    3308:	0e 94 78 01 	call	0x2f0	; 0x2f0 <zoSystemTimerTimeOutExpired>
    330c:	88 23       	and	r24, r24
    330e:	99 f3       	breq	.-26     	; 0x32f6 <zoI2cMasterSend+0x2a>
		{
			zoErrorPut(&zoI2cError,ZO_I2C_ERROR_WAIT_ON_BUS_READY_TIMEOUT);
    3310:	8a e6       	ldi	r24, 0x6A	; 106
    3312:	92 e0       	ldi	r25, 0x02	; 2
    3314:	65 e0       	ldi	r22, 0x05	; 5
    3316:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <zoErrorPut>
    331a:	80 e0       	ldi	r24, 0x00	; 0
	I2cSendDataLength = length;
	// send start condition
	zoI2cSendStart();

	return TRUE;
}
    331c:	0f 90       	pop	r0
    331e:	0f 90       	pop	r0
    3320:	cf 91       	pop	r28
    3322:	df 91       	pop	r29
    3324:	1f 91       	pop	r17
    3326:	0f 91       	pop	r16
    3328:	ff 90       	pop	r15
    332a:	ef 90       	pop	r14
    332c:	df 90       	pop	r13
    332e:	cf 90       	pop	r12
    3330:	08 95       	ret
			return FALSE;
		}
	}

	// set state
	I2cState = I2C_MASTER_TX;
    3332:	82 e0       	ldi	r24, 0x02	; 2
    3334:	80 93 77 02 	sts	0x0277, r24
	// save data
	I2cDeviceAddrRW = ((deviceAddr<<1) & 0xFE);	// RW cleared: write operation
    3338:	8d 2d       	mov	r24, r13
    333a:	90 e0       	ldi	r25, 0x00	; 0
    333c:	88 0f       	add	r24, r24
    333e:	99 1f       	adc	r25, r25
    3340:	80 93 78 02 	sts	0x0278, r24
	for(i=0; i<length; i++)
    3344:	ff 20       	and	r15, r15
    3346:	61 f0       	breq	.+24     	; 0x3360 <zoI2cMasterSend+0x94>
    3348:	a9 e7       	ldi	r26, 0x79	; 121
    334a:	b2 e0       	ldi	r27, 0x02	; 2
    334c:	8e 2d       	mov	r24, r14
    334e:	9c 2d       	mov	r25, r12
    3350:	9c 01       	movw	r18, r24
    3352:	f9 01       	movw	r30, r18
		I2cSendData[i] = *data++;
    3354:	81 91       	ld	r24, Z+
    3356:	8d 93       	st	X+, r24

	// set state
	I2cState = I2C_MASTER_TX;
	// save data
	I2cDeviceAddrRW = ((deviceAddr<<1) & 0xFE);	// RW cleared: write operation
	for(i=0; i<length; i++)
    3358:	8e 2f       	mov	r24, r30
    335a:	8e 19       	sub	r24, r14
    335c:	8f 15       	cp	r24, r15
    335e:	d0 f3       	brcs	.-12     	; 0x3354 <zoI2cMasterSend+0x88>
		I2cSendData[i] = *data++;
	I2cSendDataIndex = 0;
    3360:	10 92 99 02 	sts	0x0299, r1
	I2cSendDataLength = length;
    3364:	f0 92 9a 02 	sts	0x029A, r15
}

inline void zoI2cSendStart(void)
{
	// send start condition
	TWCR = (TWCR & TWCR_CMD_MASK)|_BV(TWINT)|_BV(TWSTA);
    3368:	80 91 bc 00 	lds	r24, 0x00BC
    336c:	8f 70       	andi	r24, 0x0F	; 15
    336e:	80 6a       	ori	r24, 0xA0	; 160
    3370:	80 93 bc 00 	sts	0x00BC, r24
    3374:	8f ef       	ldi	r24, 0xFF	; 255
    3376:	d2 cf       	rjmp	.-92     	; 0x331c <zoI2cMasterSend+0x50>

00003378 <zoI2cMasterSendBlocking>:

	return TRUE;
}

bool zoI2cMasterSendBlocking(u08 deviceAddr, u08 length, u08 *data)
{
    3378:	0f 93       	push	r16
    337a:	1f 93       	push	r17
    337c:	df 93       	push	r29
    337e:	cf 93       	push	r28
    3380:	00 d0       	rcall	.+0      	; 0x3382 <zoI2cMasterSendBlocking+0xa>
    3382:	cd b7       	in	r28, 0x3d	; 61
    3384:	de b7       	in	r29, 0x3e	; 62
	u16 timer;

	if( !zoI2cMasterSend(deviceAddr,length,data) )
    3386:	0e 94 66 19 	call	0x32cc	; 0x32cc <zoI2cMasterSend>
    338a:	88 23       	and	r24, r24
    338c:	39 f4       	brne	.+14     	; 0x339c <zoI2cMasterSendBlocking+0x24>
			return FALSE;
		}
	}

	return(zoErrorIsEmpty(&zoI2cError));
}
    338e:	0f 90       	pop	r0
    3390:	0f 90       	pop	r0
    3392:	cf 91       	pop	r28
    3394:	df 91       	pop	r29
    3396:	1f 91       	pop	r17
    3398:	0f 91       	pop	r16
    339a:	08 95       	ret

	if( !zoI2cMasterSend(deviceAddr,length,data) )
		return FALSE;
		
	//wait on transmission of data
	zoSystemTimerTimeOutInit(&timer);
    339c:	8e 01       	movw	r16, r28
    339e:	0f 5f       	subi	r16, 0xFF	; 255
    33a0:	1f 4f       	sbci	r17, 0xFF	; 255
    33a2:	c8 01       	movw	r24, r16
    33a4:	0e 94 42 01 	call	0x284	; 0x284 <zoSystemTimerTimeOutInit>
	while(I2cState != I2C_IDLE)
    33a8:	80 91 77 02 	lds	r24, 0x0277
    33ac:	88 23       	and	r24, r24
    33ae:	b1 f0       	breq	.+44     	; 0x33dc <zoI2cMasterSendBlocking+0x64>
	{
		if(zoSystemTimerTimeOutExpired(&timer,TransmitTimeOut))
    33b0:	60 91 66 01 	lds	r22, 0x0166
    33b4:	70 91 67 01 	lds	r23, 0x0167
    33b8:	c8 01       	movw	r24, r16
    33ba:	0e 94 78 01 	call	0x2f0	; 0x2f0 <zoSystemTimerTimeOutExpired>
    33be:	88 23       	and	r24, r24
    33c0:	99 f3       	breq	.-26     	; 0x33a8 <zoI2cMasterSendBlocking+0x30>
		{
			zoErrorPut(&zoI2cError,ZO_I2C_ERROR_WAIT_ON_TRANSMIT_TIMEOUT);
    33c2:	8a e6       	ldi	r24, 0x6A	; 106
    33c4:	92 e0       	ldi	r25, 0x02	; 2
    33c6:	66 e0       	ldi	r22, 0x06	; 6
    33c8:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <zoErrorPut>
    33cc:	80 e0       	ldi	r24, 0x00	; 0
			return FALSE;
		}
	}

	return(zoErrorIsEmpty(&zoI2cError));
}
    33ce:	0f 90       	pop	r0
    33d0:	0f 90       	pop	r0
    33d2:	cf 91       	pop	r28
    33d4:	df 91       	pop	r29
    33d6:	1f 91       	pop	r17
    33d8:	0f 91       	pop	r16
    33da:	08 95       	ret
			zoErrorPut(&zoI2cError,ZO_I2C_ERROR_WAIT_ON_TRANSMIT_TIMEOUT);
			return FALSE;
		}
	}

	return(zoErrorIsEmpty(&zoI2cError));
    33dc:	8a e6       	ldi	r24, 0x6A	; 106
    33de:	92 e0       	ldi	r25, 0x02	; 2
    33e0:	0e 94 ad 00 	call	0x15a	; 0x15a <zoErrorIsEmpty>
    33e4:	d4 cf       	rjmp	.-88     	; 0x338e <zoI2cMasterSendBlocking+0x16>

000033e6 <zoI2cInit>:
// functions
void zoI2cInit(void)
{
	// set pull-up resistors on I2C bus pins
	// TODO: should #ifdef these to support other processors
	PORTC |= _BV(4);	// i2c SCL on ATmega8,48,88,168
    33e6:	44 9a       	sbi	0x08, 4	; 8
	PORTC |= _BV(5);	// i2c SDA on ATmega8,48,88,168
    33e8:	45 9a       	sbi	0x08, 5	; 8

	// clear SlaveReceive and SlaveTransmit handler to null
	zoI2cSlaveReceive = 0;
    33ea:	10 92 be 02 	sts	0x02BE, r1
    33ee:	10 92 bd 02 	sts	0x02BD, r1
	zoI2cSlaveTransmit = 0;
    33f2:	10 92 c0 02 	sts	0x02C0, r1
    33f6:	10 92 bf 02 	sts	0x02BF, r1

	//initialize functors for isr
	zoI2cFunctorInit();
    33fa:	0e 94 93 18 	call	0x3126	; 0x3126 <zoI2cFunctorInit>
	
	//initialize error buffer
	zoErrorInit(&zoI2cError);
    33fe:	8a e6       	ldi	r24, 0x6A	; 106
    3400:	92 e0       	ldi	r25, 0x02	; 2
    3402:	0e 94 53 00 	call	0xa6	; 0xa6 <zoErrorInit>

	//initialize system timer
	zoSystemTimerInit();
    3406:	0e 94 10 01 	call	0x220	; 0x220 <zoSystemTimerInit>
		
	// set i2c bit rate to 100KHz
	zoI2cSetBitrate(ZO_I2C_DEFAULT_BITRATE_KHZ);
    340a:	84 e6       	ldi	r24, 0x64	; 100
    340c:	90 e0       	ldi	r25, 0x00	; 0
    340e:	0e 94 46 17 	call	0x2e8c	; 0x2e8c <zoI2cSetBitrate>
	// enable TWI (two-wire interface)
	TWCR |= _BV(TWEN);
    3412:	ec eb       	ldi	r30, 0xBC	; 188
    3414:	f0 e0       	ldi	r31, 0x00	; 0
    3416:	80 81       	ld	r24, Z
    3418:	84 60       	ori	r24, 0x04	; 4
    341a:	80 83       	st	Z, r24
	// set state
	I2cState = I2C_IDLE;
    341c:	10 92 77 02 	sts	0x0277, r1
	// enable TWI interrupt and slave address ACK
	TWCR |= _BV(TWIE);
    3420:	80 81       	ld	r24, Z
    3422:	81 60       	ori	r24, 0x01	; 1
    3424:	80 83       	st	Z, r24
	TWCR |= _BV(TWEA);
    3426:	80 81       	ld	r24, Z
    3428:	80 64       	ori	r24, 0x40	; 64
    342a:	80 83       	st	Z, r24
	
	//outb(TWCR, (inb(TWCR)&TWCR_CMD_MASK)|BV(TWINT)|BV(TWEA));
	// enable interrupts
	sei();
    342c:	78 94       	sei
}
    342e:	08 95       	ret

00003430 <zoI2cFunctorSrDataNack>:
inline void zoI2cAcknowledgeRx(bool acknowledge)
{
	if( acknowledge )
		TWCR = (TWCR & TWCR_CMD_MASK)|_BV(TWINT)|_BV(TWEA);
	else
		TWCR = (TWCR & TWCR_CMD_MASK)|_BV(TWINT);
    3430:	ec eb       	ldi	r30, 0xBC	; 188
    3432:	f0 e0       	ldi	r31, 0x00	; 0
    3434:	80 81       	ld	r24, Z
    3436:	8f 70       	andi	r24, 0x0F	; 15
    3438:	80 68       	ori	r24, 0x80	; 128
    343a:	80 83       	st	Z, r24
//0x11, 0x13: data byte has been received, NACK has been returned 
void zoI2cFunctorSrDataNack(void)
{
	// receive data byte and return NACK
	zoI2cAcknowledgeRx(FALSE);
}
    343c:	08 95       	ret

0000343e <zoI2cFunctorMrSlaveAck>:
}

//0x08: Slave address acknowledged
void zoI2cFunctorMrSlaveAck(void)
{
	if(I2cReceiveDataIndex < (I2cReceiveDataLength-1))
    343e:	20 91 bb 02 	lds	r18, 0x02BB
    3442:	30 e0       	ldi	r19, 0x00	; 0
    3444:	80 91 bc 02 	lds	r24, 0x02BC
    3448:	90 e0       	ldi	r25, 0x00	; 0
    344a:	01 97       	sbiw	r24, 0x01	; 1
    344c:	28 17       	cp	r18, r24
    344e:	39 07       	cpc	r19, r25
    3450:	3c f0       	brlt	.+14     	; 0x3460 <zoI2cFunctorMrSlaveAck+0x22>
inline void zoI2cAcknowledgeRx(bool acknowledge)
{
	if( acknowledge )
		TWCR = (TWCR & TWCR_CMD_MASK)|_BV(TWINT)|_BV(TWEA);
	else
		TWCR = (TWCR & TWCR_CMD_MASK)|_BV(TWINT);
    3452:	80 91 bc 00 	lds	r24, 0x00BC
    3456:	8f 70       	andi	r24, 0x0F	; 15
    3458:	80 68       	ori	r24, 0x80	; 128
    345a:	80 93 bc 00 	sts	0x00BC, r24
    345e:	08 95       	ret
}

inline void zoI2cAcknowledgeRx(bool acknowledge)
{
	if( acknowledge )
		TWCR = (TWCR & TWCR_CMD_MASK)|_BV(TWINT)|_BV(TWEA);
    3460:	80 91 bc 00 	lds	r24, 0x00BC
    3464:	8f 70       	andi	r24, 0x0F	; 15
    3466:	80 6c       	ori	r24, 0xC0	; 192
    3468:	80 93 bc 00 	sts	0x00BC, r24
    346c:	08 95       	ret

0000346e <zoI2cFunctorSrDataAck>:

// 0x10, 0x12: data byte has been received, ACK has been returned 
void zoI2cFunctorSrDataAck(void)
{
	// get previously received data byte
	I2cReceiveData[I2cReceiveDataIndex++] = TWDR;
    346e:	80 91 bb 02 	lds	r24, 0x02BB
    3472:	90 91 bb 00 	lds	r25, 0x00BB
    3476:	e8 2f       	mov	r30, r24
    3478:	f0 e0       	ldi	r31, 0x00	; 0
    347a:	e5 56       	subi	r30, 0x65	; 101
    347c:	fd 4f       	sbci	r31, 0xFD	; 253
    347e:	90 83       	st	Z, r25
    3480:	8f 5f       	subi	r24, 0xFF	; 255
    3482:	80 93 bb 02 	sts	0x02BB, r24
	// check receive buffer status
	if(I2cReceiveDataIndex < ZO_I2C_BUFFER_SIZE)
    3486:	80 32       	cpi	r24, 0x20	; 32
    3488:	38 f0       	brcs	.+14     	; 0x3498 <zoI2cFunctorSrDataAck+0x2a>
inline void zoI2cAcknowledgeRx(bool acknowledge)
{
	if( acknowledge )
		TWCR = (TWCR & TWCR_CMD_MASK)|_BV(TWINT)|_BV(TWEA);
	else
		TWCR = (TWCR & TWCR_CMD_MASK)|_BV(TWINT);
    348a:	80 91 bc 00 	lds	r24, 0x00BC
    348e:	8f 70       	andi	r24, 0x0F	; 15
    3490:	80 68       	ori	r24, 0x80	; 128
    3492:	80 93 bc 00 	sts	0x00BC, r24
    3496:	08 95       	ret
}

inline void zoI2cAcknowledgeRx(bool acknowledge)
{
	if( acknowledge )
		TWCR = (TWCR & TWCR_CMD_MASK)|_BV(TWINT)|_BV(TWEA);
    3498:	80 91 bc 00 	lds	r24, 0x00BC
    349c:	8f 70       	andi	r24, 0x0F	; 15
    349e:	80 6c       	ori	r24, 0xC0	; 192
    34a0:	80 93 bc 00 	sts	0x00BC, r24
    34a4:	08 95       	ret

000034a6 <zoI2cFunctorMrDataAck>:

//0x0A: Data acknowledged
void zoI2cFunctorMrDataAck(void)
{
	// store received data byte
	I2cReceiveData[I2cReceiveDataIndex++] = TWDR;
    34a6:	20 91 bb 02 	lds	r18, 0x02BB
    34aa:	80 91 bb 00 	lds	r24, 0x00BB
    34ae:	e2 2f       	mov	r30, r18
    34b0:	f0 e0       	ldi	r31, 0x00	; 0
    34b2:	e5 56       	subi	r30, 0x65	; 101
    34b4:	fd 4f       	sbci	r31, 0xFD	; 253
    34b6:	80 83       	st	Z, r24
    34b8:	2f 5f       	subi	r18, 0xFF	; 255
    34ba:	20 93 bb 02 	sts	0x02BB, r18

	if(I2cReceiveDataIndex < (I2cReceiveDataLength-1))
    34be:	30 e0       	ldi	r19, 0x00	; 0
    34c0:	80 91 bc 02 	lds	r24, 0x02BC
    34c4:	90 e0       	ldi	r25, 0x00	; 0
    34c6:	01 97       	sbiw	r24, 0x01	; 1
    34c8:	28 17       	cp	r18, r24
    34ca:	39 07       	cpc	r19, r25
    34cc:	3c f0       	brlt	.+14     	; 0x34dc <zoI2cFunctorMrDataAck+0x36>
inline void zoI2cAcknowledgeRx(bool acknowledge)
{
	if( acknowledge )
		TWCR = (TWCR & TWCR_CMD_MASK)|_BV(TWINT)|_BV(TWEA);
	else
		TWCR = (TWCR & TWCR_CMD_MASK)|_BV(TWINT);
    34ce:	80 91 bc 00 	lds	r24, 0x00BC
    34d2:	8f 70       	andi	r24, 0x0F	; 15
    34d4:	80 68       	ori	r24, 0x80	; 128
    34d6:	80 93 bc 00 	sts	0x00BC, r24
    34da:	08 95       	ret
}

inline void zoI2cAcknowledgeRx(bool acknowledge)
{
	if( acknowledge )
		TWCR = (TWCR & TWCR_CMD_MASK)|_BV(TWINT)|_BV(TWEA);
    34dc:	80 91 bc 00 	lds	r24, 0x00BC
    34e0:	8f 70       	andi	r24, 0x0F	; 15
    34e2:	80 6c       	ori	r24, 0xC0	; 192
    34e4:	80 93 bc 00 	sts	0x00BC, r24
    34e8:	08 95       	ret

000034ea <zoProtocolI2cSetLAM>:
	zoRxPacketReceived = TRUE;
}

inline void zoProtocolI2cSetLAM(u08 localAcceptanceMask)
{
	TWAMR = (~localAcceptanceMask)<<1;
    34ea:	80 95       	com	r24
    34ec:	88 0f       	add	r24, r24
    34ee:	80 93 bd 00 	sts	0x00BD, r24
}
    34f2:	08 95       	ret

000034f4 <zoProtocolI2cSetBitrate>:

inline bool zoProtocolI2cSetBitrate(u32 bitsPerSecond)
{
	return (zoI2cSetBitrate(bitsPerSecond/1000));
    34f4:	28 ee       	ldi	r18, 0xE8	; 232
    34f6:	33 e0       	ldi	r19, 0x03	; 3
    34f8:	40 e0       	ldi	r20, 0x00	; 0
    34fa:	50 e0       	ldi	r21, 0x00	; 0
    34fc:	0e 94 a6 25 	call	0x4b4c	; 0x4b4c <__udivmodsi4>
    3500:	da 01       	movw	r26, r20
    3502:	c9 01       	movw	r24, r18
    3504:	0e 94 46 17 	call	0x2e8c	; 0x2e8c <zoI2cSetBitrate>
}
    3508:	08 95       	ret

0000350a <zoProtocolI2cGetPacket>:
									  (packet->byteCount + 5),
									  str));
}

bool zoProtocolI2cGetPacket(ZO_PROTOCOL_PACKET* packet)
{
    350a:	cf 93       	push	r28
    350c:	df 93       	push	r29
    350e:	ec 01       	movw	r28, r24
	u08 i;

	if( !zoErrorIsEmpty(zoProtocolI2cError) )
    3510:	80 91 6c 01 	lds	r24, 0x016C
    3514:	90 91 6d 01 	lds	r25, 0x016D
    3518:	0e 94 ad 00 	call	0x15a	; 0x15a <zoErrorIsEmpty>
    351c:	88 23       	and	r24, r24
    351e:	21 f0       	breq	.+8      	; 0x3528 <zoProtocolI2cGetPacket+0x1e>
		return FALSE;

	if( zoRxPacketReceived )
    3520:	80 91 01 03 	lds	r24, 0x0301
    3524:	88 23       	and	r24, r24
    3526:	21 f4       	brne	.+8      	; 0x3530 <zoProtocolI2cGetPacket+0x26>
			packet->data[i] = RxPacket.data[i];
		
		//indicate received packet was used
		zoRxPacketReceived = FALSE;
		exitCritical();
		return TRUE;
    3528:	80 e0       	ldi	r24, 0x00	; 0
	}
	else
		return FALSE;
}
    352a:	df 91       	pop	r29
    352c:	cf 91       	pop	r28
    352e:	08 95       	ret
	if( !zoErrorIsEmpty(zoProtocolI2cError) )
		return FALSE;

	if( zoRxPacketReceived )
	{
		enterCritical();
    3530:	0f b6       	in	r0, 0x3f	; 63
    3532:	0f 92       	push	r0
    3534:	f8 94       	cli
		//copy buffered packet
		packet->AddressedNodeID = RxPacket.AddressedNodeID;		
    3536:	80 91 02 03 	lds	r24, 0x0302
    353a:	88 83       	st	Y, r24
		packet->OwnNodeID = RxPacket.OwnNodeID;
    353c:	80 91 03 03 	lds	r24, 0x0303
    3540:	89 83       	std	Y+1, r24	; 0x01
		packet->commandID = RxPacket.commandID;
    3542:	80 91 04 03 	lds	r24, 0x0304
    3546:	8a 83       	std	Y+2, r24	; 0x02
		packet->byteCount = RxPacket.byteCount;
    3548:	20 91 05 03 	lds	r18, 0x0305
    354c:	2b 83       	std	Y+3, r18	; 0x03
		packet->lrc = RxPacket.lrc;
    354e:	80 91 16 03 	lds	r24, 0x0316
    3552:	8c 8b       	std	Y+20, r24	; 0x14
		
		for(i=0;i<packet->byteCount;i++)
    3554:	22 23       	and	r18, r18
    3556:	71 f0       	breq	.+28     	; 0x3574 <zoProtocolI2cGetPacket+0x6a>
    3558:	90 e0       	ldi	r25, 0x00	; 0
			packet->data[i] = RxPacket.data[i];
    355a:	e9 2f       	mov	r30, r25
    355c:	f0 e0       	ldi	r31, 0x00	; 0
    355e:	df 01       	movw	r26, r30
    3560:	ae 5f       	subi	r26, 0xFE	; 254
    3562:	bc 4f       	sbci	r27, 0xFC	; 252
    3564:	14 96       	adiw	r26, 0x04	; 4
    3566:	8c 91       	ld	r24, X
    3568:	ec 0f       	add	r30, r28
    356a:	fd 1f       	adc	r31, r29
    356c:	84 83       	std	Z+4, r24	; 0x04
		packet->OwnNodeID = RxPacket.OwnNodeID;
		packet->commandID = RxPacket.commandID;
		packet->byteCount = RxPacket.byteCount;
		packet->lrc = RxPacket.lrc;
		
		for(i=0;i<packet->byteCount;i++)
    356e:	9f 5f       	subi	r25, 0xFF	; 255
    3570:	92 17       	cp	r25, r18
    3572:	98 f3       	brcs	.-26     	; 0x355a <zoProtocolI2cGetPacket+0x50>
			packet->data[i] = RxPacket.data[i];
		
		//indicate received packet was used
		zoRxPacketReceived = FALSE;
    3574:	10 92 01 03 	sts	0x0301, r1
		exitCritical();
    3578:	0f 90       	pop	r0
    357a:	0f be       	out	0x3f, r0	; 63
    357c:	8f ef       	ldi	r24, 0xFF	; 255
    357e:	d5 cf       	rjmp	.-86     	; 0x352a <zoProtocolI2cGetPacket+0x20>

00003580 <zoProtocolI2cPutPacket>:
	//assign slave receive handler
	zoI2cSetSlaveReceiveHandler(i2cSlaveRx);
}

bool zoProtocolI2cPutPacket(const ZO_PROTOCOL_PACKET* packet)
{
    3580:	df 93       	push	r29
    3582:	cf 93       	push	r28
    3584:	cd b7       	in	r28, 0x3d	; 61
    3586:	de b7       	in	r29, 0x3e	; 62
    3588:	65 97       	sbiw	r28, 0x15	; 21
    358a:	0f b6       	in	r0, 0x3f	; 63
    358c:	f8 94       	cli
    358e:	de bf       	out	0x3e, r29	; 62
    3590:	0f be       	out	0x3f, r0	; 63
    3592:	cd bf       	out	0x3d, r28	; 61
    3594:	9c 01       	movw	r18, r24
	u08 str[ZO_PROTOCOL_PACKET_SIZE];
	u08 i;

	str[0] = packet->AddressedNodeID;
    3596:	fc 01       	movw	r30, r24
    3598:	80 81       	ld	r24, Z
    359a:	89 83       	std	Y+1, r24	; 0x01
	str[1] = packet->OwnNodeID;
    359c:	81 81       	ldd	r24, Z+1	; 0x01
    359e:	8a 83       	std	Y+2, r24	; 0x02
	str[2] = packet->commandID;
    35a0:	82 81       	ldd	r24, Z+2	; 0x02
    35a2:	8b 83       	std	Y+3, r24	; 0x03
	str[3] = packet->byteCount;
    35a4:	83 81       	ldd	r24, Z+3	; 0x03
    35a6:	8c 83       	std	Y+4, r24	; 0x04
	
	for( i=0; i< packet->byteCount; i++ )
    35a8:	88 23       	and	r24, r24
    35aa:	51 f1       	breq	.+84     	; 0x3600 <zoProtocolI2cPutPacket+0x80>
    35ac:	90 e0       	ldi	r25, 0x00	; 0
    35ae:	ae 01       	movw	r20, r28
    35b0:	4b 5f       	subi	r20, 0xFB	; 251
    35b2:	5f 4f       	sbci	r21, 0xFF	; 255
		str[4+i] = packet->data[i];
    35b4:	e9 2f       	mov	r30, r25
    35b6:	f0 e0       	ldi	r31, 0x00	; 0
    35b8:	da 01       	movw	r26, r20
    35ba:	ae 0f       	add	r26, r30
    35bc:	bf 1f       	adc	r27, r31
    35be:	e2 0f       	add	r30, r18
    35c0:	f3 1f       	adc	r31, r19
    35c2:	84 81       	ldd	r24, Z+4	; 0x04
    35c4:	8c 93       	st	X, r24
	str[0] = packet->AddressedNodeID;
	str[1] = packet->OwnNodeID;
	str[2] = packet->commandID;
	str[3] = packet->byteCount;
	
	for( i=0; i< packet->byteCount; i++ )
    35c6:	9f 5f       	subi	r25, 0xFF	; 255
    35c8:	f9 01       	movw	r30, r18
    35ca:	83 81       	ldd	r24, Z+3	; 0x03
    35cc:	98 17       	cp	r25, r24
    35ce:	90 f3       	brcs	.-28     	; 0x35b4 <zoProtocolI2cPutPacket+0x34>
		str[4+i] = packet->data[i];

	str[(packet->byteCount + 4)] = packet->lrc;
    35d0:	48 0f       	add	r20, r24
    35d2:	51 1d       	adc	r21, r1
    35d4:	f9 01       	movw	r30, r18
    35d6:	84 89       	ldd	r24, Z+20	; 0x14
    35d8:	fa 01       	movw	r30, r20
    35da:	80 83       	st	Z, r24
	
	return ( zoI2cMasterSendBlocking(packet->AddressedNodeID,
    35dc:	f9 01       	movw	r30, r18
    35de:	63 81       	ldd	r22, Z+3	; 0x03
    35e0:	6b 5f       	subi	r22, 0xFB	; 251
    35e2:	80 81       	ld	r24, Z
    35e4:	ae 01       	movw	r20, r28
    35e6:	4f 5f       	subi	r20, 0xFF	; 255
    35e8:	5f 4f       	sbci	r21, 0xFF	; 255
    35ea:	0e 94 bc 19 	call	0x3378	; 0x3378 <zoI2cMasterSendBlocking>
									  (packet->byteCount + 5),
									  str));
}
    35ee:	65 96       	adiw	r28, 0x15	; 21
    35f0:	0f b6       	in	r0, 0x3f	; 63
    35f2:	f8 94       	cli
    35f4:	de bf       	out	0x3e, r29	; 62
    35f6:	0f be       	out	0x3f, r0	; 63
    35f8:	cd bf       	out	0x3d, r28	; 61
    35fa:	cf 91       	pop	r28
    35fc:	df 91       	pop	r29
    35fe:	08 95       	ret
    3600:	ae 01       	movw	r20, r28
    3602:	4b 5f       	subi	r20, 0xFB	; 251
    3604:	5f 4f       	sbci	r21, 0xFF	; 255
    3606:	e4 cf       	rjmp	.-56     	; 0x35d0 <zoProtocolI2cPutPacket+0x50>

00003608 <zoProtocolI2cInit>:
ZO_ERROR *zoProtocolI2cError = &zoI2cError;

//ZO_ERROR zoProtocolI2cError = ZO_ERROR_DEFAULTS;

void zoProtocolI2cInit(u08 ownNodeID, u16 kBps)
{
    3608:	ff 92       	push	r15
    360a:	0f 93       	push	r16
    360c:	1f 93       	push	r17
    360e:	f8 2e       	mov	r15, r24
    3610:	8b 01       	movw	r16, r22
	//initialize with default baud rate of 100KHz
	zoI2cInit();
    3612:	0e 94 f3 19 	call	0x33e6	; 0x33e6 <zoI2cInit>
	zoI2cSetLocalDeviceAddr(ownNodeID,1);
    3616:	8f 2d       	mov	r24, r15
    3618:	61 e0       	ldi	r22, 0x01	; 1
    361a:	0e 94 5d 17 	call	0x2eba	; 0x2eba <zoI2cSetLocalDeviceAddr>
	zoI2cSetBitrate(kBps);
    361e:	c8 01       	movw	r24, r16
    3620:	0e 94 46 17 	call	0x2e8c	; 0x2e8c <zoI2cSetBitrate>
	//assign slave receive handler
	zoI2cSetSlaveReceiveHandler(i2cSlaveRx);
    3624:	8a e1       	ldi	r24, 0x1A	; 26
    3626:	9b e1       	ldi	r25, 0x1B	; 27
    3628:	0e 94 7d 17 	call	0x2efa	; 0x2efa <zoI2cSetSlaveReceiveHandler>
}
    362c:	1f 91       	pop	r17
    362e:	0f 91       	pop	r16
    3630:	ff 90       	pop	r15
    3632:	08 95       	ret

00003634 <i2cSlaveRx>:
	else
		return FALSE;
}

void i2cSlaveRx(u08 rxLength,u08* rxData)
{
    3634:	1f 93       	push	r17
    3636:	cf 93       	push	r28
    3638:	df 93       	push	r29
    363a:	18 2f       	mov	r17, r24
    363c:	eb 01       	movw	r28, r22
	u08 i;
	
	if(zoRxPacketReceived == TRUE)
    363e:	80 91 01 03 	lds	r24, 0x0301
    3642:	8f 3f       	cpi	r24, 0xFF	; 255
    3644:	09 f4       	brne	.+2      	; 0x3648 <i2cSlaveRx+0x14>
    3646:	46 c0       	rjmp	.+140    	; 0x36d4 <i2cSlaveRx+0xa0>
		zoErrorPutIsr(zoProtocolI2cError,ZO_PROTOCOL_I2C_ERROR_RX_PACKET_OVERWRITTEN);

	RxPacket.AddressedNodeID = *rxData++;
    3648:	fe 01       	movw	r30, r28
    364a:	81 91       	ld	r24, Z+
    364c:	80 93 02 03 	sts	0x0302, r24
	RxPacket.OwnNodeID = *rxData++;
    3650:	89 81       	ldd	r24, Y+1	; 0x01
    3652:	80 93 03 03 	sts	0x0303, r24
    3656:	df 01       	movw	r26, r30
    3658:	11 96       	adiw	r26, 0x01	; 1
	RxPacket.commandID = *rxData++;
    365a:	81 81       	ldd	r24, Z+1	; 0x01
    365c:	80 93 04 03 	sts	0x0304, r24
    3660:	ad 01       	movw	r20, r26
    3662:	4f 5f       	subi	r20, 0xFF	; 255
    3664:	5f 4f       	sbci	r21, 0xFF	; 255
	RxPacket.byteCount = *rxData++;
    3666:	11 96       	adiw	r26, 0x01	; 1
    3668:	8c 91       	ld	r24, X
    366a:	80 93 05 03 	sts	0x0305, r24
	
	if( (RxPacket.byteCount + ZO_PROTOCOL_INFO_SIZE) != rxLength)
    366e:	80 91 05 03 	lds	r24, 0x0305
    3672:	90 e0       	ldi	r25, 0x00	; 0
    3674:	05 96       	adiw	r24, 0x05	; 5
    3676:	21 2f       	mov	r18, r17
    3678:	30 e0       	ldi	r19, 0x00	; 0
    367a:	82 17       	cp	r24, r18
    367c:	93 07       	cpc	r25, r19
    367e:	e1 f4       	brne	.+56     	; 0x36b8 <i2cSlaveRx+0x84>
		zoErrorPutIsr(zoProtocolI2cError,ZO_PROTOCOL_I2C_ERROR_RX_PACKET_OVERWRITTEN);

	RxPacket.AddressedNodeID = *rxData++;
	RxPacket.OwnNodeID = *rxData++;
	RxPacket.commandID = *rxData++;
	RxPacket.byteCount = *rxData++;
    3680:	da 01       	movw	r26, r20
    3682:	11 96       	adiw	r26, 0x01	; 1
		zoErrorPutIsr(zoProtocolI2cError,ZO_PROTOCOL_I2C_ERROR_INVALID_RX_BYTECOUNT);
		zoRxPacketReceived = TRUE;
		return;
	}

	for( i=0; i < RxPacket.byteCount ; i++ )
    3684:	80 91 05 03 	lds	r24, 0x0305
    3688:	88 23       	and	r24, r24
    368a:	61 f0       	breq	.+24     	; 0x36a4 <i2cSlaveRx+0x70>
	
	if( (RxPacket.byteCount + ZO_PROTOCOL_INFO_SIZE) != rxLength)
	{
		zoErrorPutIsr(zoProtocolI2cError,ZO_PROTOCOL_I2C_ERROR_INVALID_RX_BYTECOUNT);
		zoRxPacketReceived = TRUE;
		return;
    368c:	90 e0       	ldi	r25, 0x00	; 0
	}

	for( i=0; i < RxPacket.byteCount ; i++ )
		RxPacket.data[i] = *rxData++;
    368e:	e9 2f       	mov	r30, r25
    3690:	f0 e0       	ldi	r31, 0x00	; 0
    3692:	8d 91       	ld	r24, X+
    3694:	ee 5f       	subi	r30, 0xFE	; 254
    3696:	fc 4f       	sbci	r31, 0xFC	; 252
    3698:	84 83       	std	Z+4, r24	; 0x04
		zoErrorPutIsr(zoProtocolI2cError,ZO_PROTOCOL_I2C_ERROR_INVALID_RX_BYTECOUNT);
		zoRxPacketReceived = TRUE;
		return;
	}

	for( i=0; i < RxPacket.byteCount ; i++ )
    369a:	9f 5f       	subi	r25, 0xFF	; 255
    369c:	80 91 05 03 	lds	r24, 0x0305
    36a0:	98 17       	cp	r25, r24
    36a2:	a8 f3       	brcs	.-22     	; 0x368e <i2cSlaveRx+0x5a>
		RxPacket.data[i] = *rxData++;

	RxPacket.lrc = *rxData;
    36a4:	8c 91       	ld	r24, X
    36a6:	80 93 16 03 	sts	0x0316, r24

	//indicate we received a packet
	zoRxPacketReceived = TRUE;
    36aa:	8f ef       	ldi	r24, 0xFF	; 255
    36ac:	80 93 01 03 	sts	0x0301, r24
}
    36b0:	df 91       	pop	r29
    36b2:	cf 91       	pop	r28
    36b4:	1f 91       	pop	r17
    36b6:	08 95       	ret
	RxPacket.commandID = *rxData++;
	RxPacket.byteCount = *rxData++;
	
	if( (RxPacket.byteCount + ZO_PROTOCOL_INFO_SIZE) != rxLength)
	{
		zoErrorPutIsr(zoProtocolI2cError,ZO_PROTOCOL_I2C_ERROR_INVALID_RX_BYTECOUNT);
    36b8:	80 91 6c 01 	lds	r24, 0x016C
    36bc:	90 91 6d 01 	lds	r25, 0x016D
    36c0:	62 e1       	ldi	r22, 0x12	; 18
    36c2:	0e 94 86 00 	call	0x10c	; 0x10c <zoErrorPutIsr>
		zoRxPacketReceived = TRUE;
    36c6:	8f ef       	ldi	r24, 0xFF	; 255
    36c8:	80 93 01 03 	sts	0x0301, r24

	RxPacket.lrc = *rxData;

	//indicate we received a packet
	zoRxPacketReceived = TRUE;
}
    36cc:	df 91       	pop	r29
    36ce:	cf 91       	pop	r28
    36d0:	1f 91       	pop	r17
    36d2:	08 95       	ret
void i2cSlaveRx(u08 rxLength,u08* rxData)
{
	u08 i;
	
	if(zoRxPacketReceived == TRUE)
		zoErrorPutIsr(zoProtocolI2cError,ZO_PROTOCOL_I2C_ERROR_RX_PACKET_OVERWRITTEN);
    36d4:	80 91 6c 01 	lds	r24, 0x016C
    36d8:	90 91 6d 01 	lds	r25, 0x016D
    36dc:	61 e1       	ldi	r22, 0x11	; 17
    36de:	0e 94 86 00 	call	0x10c	; 0x10c <zoErrorPutIsr>
    36e2:	b2 cf       	rjmp	.-156    	; 0x3648 <i2cSlaveRx+0x14>

000036e4 <zoUartSetBaud>:

   return TRUE;
}

bool zoUartSetBaud(u32 baudRate)
{
    36e4:	9b 01       	movw	r18, r22
    36e6:	ac 01       	movw	r20, r24
	u32 ubrrReg = 0;

	//configure baud rate
	ubrrReg = (F_CPU/baudRate/8 - 1);
    36e8:	60 ea       	ldi	r22, 0xA0	; 160
    36ea:	75 e2       	ldi	r23, 0x25	; 37
    36ec:	86 e2       	ldi	r24, 0x26	; 38
    36ee:	90 e0       	ldi	r25, 0x00	; 0
    36f0:	0e 94 a6 25 	call	0x4b4c	; 0x4b4c <__udivmodsi4>
    36f4:	21 50       	subi	r18, 0x01	; 1
    36f6:	30 40       	sbci	r19, 0x00	; 0
    36f8:	40 40       	sbci	r20, 0x00	; 0
    36fa:	50 40       	sbci	r21, 0x00	; 0
	if( ( ubrrReg > 65535) || ( ubrrReg < 1 ) )
    36fc:	da 01       	movw	r26, r20
    36fe:	c9 01       	movw	r24, r18
    3700:	01 97       	sbiw	r24, 0x01	; 1
    3702:	a1 09       	sbc	r26, r1
    3704:	b1 09       	sbc	r27, r1
    3706:	8f 5f       	subi	r24, 0xFF	; 255
    3708:	9f 4f       	sbci	r25, 0xFF	; 255
    370a:	a0 40       	sbci	r26, 0x00	; 0
    370c:	b0 40       	sbci	r27, 0x00	; 0
    370e:	10 f0       	brcs	.+4      	; 0x3714 <zoUartSetBaud+0x30>
    3710:	80 e0       	ldi	r24, 0x00	; 0
    3712:	08 95       	ret
		return FALSE;

	UBRR0H = (u08)((ubrrReg >> 8) & 0x00FF);		//baud rate divisor high byte
    3714:	bb 27       	eor	r27, r27
    3716:	a5 2f       	mov	r26, r21
    3718:	94 2f       	mov	r25, r20
    371a:	83 2f       	mov	r24, r19
    371c:	80 93 c5 00 	sts	0x00C5, r24
	UBRR0L = (u08)(ubrrReg & 0x00FF);				//baud rate divisor low byte
    3720:	20 93 c4 00 	sts	0x00C4, r18
    3724:	8f ef       	ldi	r24, 0xFF	; 255

	return TRUE;
}
    3726:	08 95       	ret

00003728 <zoUartSetDataBits>:

inline void zoUartSetDataBits(ZO_UART_DATA_BITS dataBits)
{
	UCSR0C = (UCSR0C & ~DATA_BITS_MASK_UCSR0C) | (dataBits & DATA_BITS_MASK_UCSR0C);
    3728:	e2 ec       	ldi	r30, 0xC2	; 194
    372a:	f0 e0       	ldi	r31, 0x00	; 0
    372c:	90 81       	ld	r25, Z
    372e:	28 2f       	mov	r18, r24
    3730:	26 70       	andi	r18, 0x06	; 6
    3732:	99 7f       	andi	r25, 0xF9	; 249
    3734:	29 2b       	or	r18, r25
    3736:	20 83       	st	Z, r18
	UCSR0B = (UCSR0B & ~DATA_BITS_MASK_UCSR0B) | ((dataBits>>1) & DATA_BITS_MASK_UCSR0B);
    3738:	e1 ec       	ldi	r30, 0xC1	; 193
    373a:	f0 e0       	ldi	r31, 0x00	; 0
    373c:	90 81       	ld	r25, Z
    373e:	86 95       	lsr	r24
    3740:	84 70       	andi	r24, 0x04	; 4
    3742:	9b 7f       	andi	r25, 0xFB	; 251
    3744:	98 2b       	or	r25, r24
    3746:	90 83       	st	Z, r25
}
    3748:	08 95       	ret

0000374a <zoUartSetParity>:

inline void zoUartSetParity(ZO_UART_PARITY parity)
{
	UCSR0C = (UCSR0C & ~PARITY_BITS_MASK)|parity;
    374a:	e2 ec       	ldi	r30, 0xC2	; 194
    374c:	f0 e0       	ldi	r31, 0x00	; 0
    374e:	90 81       	ld	r25, Z
    3750:	9f 7c       	andi	r25, 0xCF	; 207
    3752:	98 2b       	or	r25, r24
    3754:	90 83       	st	Z, r25
}
    3756:	08 95       	ret

00003758 <zoUartSetStopBits>:

inline void zoUartSetStopBits(ZO_UART_STOP_BITS stopBits)
{
	UCSR0C = (UCSR0C & ~STOP_BITS_MASK)|stopBits;
    3758:	e2 ec       	ldi	r30, 0xC2	; 194
    375a:	f0 e0       	ldi	r31, 0x00	; 0
    375c:	90 81       	ld	r25, Z
    375e:	9f 77       	andi	r25, 0x7F	; 127
    3760:	98 2b       	or	r25, r24
    3762:	90 83       	st	Z, r25
}
    3764:	08 95       	ret

00003766 <zoUartInitRs485>:

void zoUartInitRs485(volatile u08 *port, u08 pinConnectedToReDe)
{
    3766:	dc 01       	movw	r26, r24
	Rs485Used = TRUE;
    3768:	8f ef       	ldi	r24, 0xFF	; 255
    376a:	80 93 2c 03 	sts	0x032C, r24
	Rs485ReDePort = port;
    376e:	b0 93 36 03 	sts	0x0336, r27
    3772:	a0 93 35 03 	sts	0x0335, r26
	Rs485ReDePin = pinConnectedToReDe;
    3776:	60 93 37 03 	sts	0x0337, r22

	*(port-1) |= _BV(pinConnectedToReDe);	//configure DDR register
    377a:	fd 01       	movw	r30, r26
    377c:	22 91       	ld	r18, -Z
    377e:	81 e0       	ldi	r24, 0x01	; 1
    3780:	90 e0       	ldi	r25, 0x00	; 0
    3782:	02 c0       	rjmp	.+4      	; 0x3788 <zoUartInitRs485+0x22>
    3784:	88 0f       	add	r24, r24
    3786:	99 1f       	adc	r25, r25
    3788:	6a 95       	dec	r22
    378a:	e2 f7       	brpl	.-8      	; 0x3784 <zoUartInitRs485+0x1e>
    378c:	28 2b       	or	r18, r24
    378e:	20 83       	st	Z, r18
	*port &= ~_BV(pinConnectedToReDe);		//configure PORT register 
    3790:	2c 91       	ld	r18, X
    3792:	80 95       	com	r24
    3794:	82 23       	and	r24, r18
    3796:	8c 93       	st	X, r24
											//reset reDePin -> receive mode
	UCSR0B |= _BV(TXCIE0);					// Enable Transmit Complete Interrupt
    3798:	e1 ec       	ldi	r30, 0xC1	; 193
    379a:	f0 e0       	ldi	r31, 0x00	; 0
    379c:	80 81       	ld	r24, Z
    379e:	80 64       	ori	r24, 0x40	; 64
    37a0:	80 83       	st	Z, r24
}
    37a2:	08 95       	ret

000037a4 <zoUartSetTransmitTimeOut>:
	}
}

inline void zoUartSetTransmitTimeOut(u16 miliseconds)
{
	TransmitTimeOut = miliseconds;
    37a4:	90 93 6f 01 	sts	0x016F, r25
    37a8:	80 93 6e 01 	sts	0x016E, r24
}
    37ac:	08 95       	ret

000037ae <__vector_20>:
	else
        UCSR0B &= ~_BV(UDRIE0);			// Buffer empty, Disable Tx interrupts
}

ISR(USART_TX_vect)
{
    37ae:	1f 92       	push	r1
    37b0:	0f 92       	push	r0
    37b2:	0f b6       	in	r0, 0x3f	; 63
    37b4:	0f 92       	push	r0
    37b6:	11 24       	eor	r1, r1
    37b8:	2f 93       	push	r18
    37ba:	3f 93       	push	r19
    37bc:	8f 93       	push	r24
    37be:	9f 93       	push	r25
    37c0:	ef 93       	push	r30
    37c2:	ff 93       	push	r31
	*Rs485ReDePort &= ~_BV(Rs485ReDePin);	// Clear RS485 Pin for receive mode
    37c4:	e0 91 35 03 	lds	r30, 0x0335
    37c8:	f0 91 36 03 	lds	r31, 0x0336
    37cc:	30 81       	ld	r19, Z
    37ce:	20 91 37 03 	lds	r18, 0x0337
    37d2:	81 e0       	ldi	r24, 0x01	; 1
    37d4:	90 e0       	ldi	r25, 0x00	; 0
    37d6:	02 c0       	rjmp	.+4      	; 0x37dc <__vector_20+0x2e>
    37d8:	88 0f       	add	r24, r24
    37da:	99 1f       	adc	r25, r25
    37dc:	2a 95       	dec	r18
    37de:	e2 f7       	brpl	.-8      	; 0x37d8 <__vector_20+0x2a>
    37e0:	80 95       	com	r24
    37e2:	83 23       	and	r24, r19
    37e4:	80 83       	st	Z, r24
	//UCSR0B &=~ _BV(TXCIE0);					// Disable trasnmit complete interrupt
    37e6:	ff 91       	pop	r31
    37e8:	ef 91       	pop	r30
    37ea:	9f 91       	pop	r25
    37ec:	8f 91       	pop	r24
    37ee:	3f 91       	pop	r19
    37f0:	2f 91       	pop	r18
    37f2:	0f 90       	pop	r0
    37f4:	0f be       	out	0x3f, r0	; 63
    37f6:	0f 90       	pop	r0
    37f8:	1f 90       	pop	r1
    37fa:	18 95       	reti

000037fc <zoUartRxBufferIsEmpty>:
	return zoBufferIsFull(&TxBuffer);
}

inline bool zoUartRxBufferIsEmpty(void)
{
	return zoBufferIsEmpty(&RxBuffer);
    37fc:	8d e2       	ldi	r24, 0x2D	; 45
    37fe:	93 e0       	ldi	r25, 0x03	; 3
    3800:	0e 94 99 1e 	call	0x3d32	; 0x3d32 <zoBufferIsEmpty>
}
    3804:	08 95       	ret

00003806 <__vector_19>:
	else
		zoErrorPutIsr(&zoUartError,ZO_UART_ERROR_RX_BUFFER_OVERFLOW);
}

ISR(USART_UDRE_vect)
{
    3806:	1f 92       	push	r1
    3808:	0f 92       	push	r0
    380a:	0f b6       	in	r0, 0x3f	; 63
    380c:	0f 92       	push	r0
    380e:	11 24       	eor	r1, r1
    3810:	2f 93       	push	r18
    3812:	3f 93       	push	r19
    3814:	4f 93       	push	r20
    3816:	5f 93       	push	r21
    3818:	6f 93       	push	r22
    381a:	7f 93       	push	r23
    381c:	8f 93       	push	r24
    381e:	9f 93       	push	r25
    3820:	af 93       	push	r26
    3822:	bf 93       	push	r27
    3824:	ef 93       	push	r30
    3826:	ff 93       	push	r31
	if(!zoBufferIsEmpty(&TxBuffer))
    3828:	84 e2       	ldi	r24, 0x24	; 36
    382a:	93 e0       	ldi	r25, 0x03	; 3
    382c:	0e 94 99 1e 	call	0x3d32	; 0x3d32 <zoBufferIsEmpty>
    3830:	88 23       	and	r24, r24
    3832:	59 f5       	brne	.+86     	; 0x388a <__vector_19+0x84>
	{
		if(Rs485Used)
    3834:	80 91 2c 03 	lds	r24, 0x032C
    3838:	88 23       	and	r24, r24
    383a:	81 f0       	breq	.+32     	; 0x385c <__vector_19+0x56>
			*Rs485ReDePort |= _BV(Rs485ReDePin);
    383c:	e0 91 35 03 	lds	r30, 0x0335
    3840:	f0 91 36 03 	lds	r31, 0x0336
    3844:	20 81       	ld	r18, Z
    3846:	30 91 37 03 	lds	r19, 0x0337
    384a:	81 e0       	ldi	r24, 0x01	; 1
    384c:	90 e0       	ldi	r25, 0x00	; 0
    384e:	02 c0       	rjmp	.+4      	; 0x3854 <__vector_19+0x4e>
    3850:	88 0f       	add	r24, r24
    3852:	99 1f       	adc	r25, r25
    3854:	3a 95       	dec	r19
    3856:	e2 f7       	brpl	.-8      	; 0x3850 <__vector_19+0x4a>
    3858:	28 2b       	or	r18, r24
    385a:	20 83       	st	Z, r18

		UDR0 = zoBufferGetIsr(&TxBuffer);
    385c:	84 e2       	ldi	r24, 0x24	; 36
    385e:	93 e0       	ldi	r25, 0x03	; 3
    3860:	0e 94 ba 1e 	call	0x3d74	; 0x3d74 <zoBufferGetIsr>
    3864:	80 93 c6 00 	sts	0x00C6, r24
	}
	else
        UCSR0B &= ~_BV(UDRIE0);			// Buffer empty, Disable Tx interrupts
}
    3868:	ff 91       	pop	r31
    386a:	ef 91       	pop	r30
    386c:	bf 91       	pop	r27
    386e:	af 91       	pop	r26
    3870:	9f 91       	pop	r25
    3872:	8f 91       	pop	r24
    3874:	7f 91       	pop	r23
    3876:	6f 91       	pop	r22
    3878:	5f 91       	pop	r21
    387a:	4f 91       	pop	r20
    387c:	3f 91       	pop	r19
    387e:	2f 91       	pop	r18
    3880:	0f 90       	pop	r0
    3882:	0f be       	out	0x3f, r0	; 63
    3884:	0f 90       	pop	r0
    3886:	1f 90       	pop	r1
    3888:	18 95       	reti
			*Rs485ReDePort |= _BV(Rs485ReDePin);

		UDR0 = zoBufferGetIsr(&TxBuffer);
	}
	else
        UCSR0B &= ~_BV(UDRIE0);			// Buffer empty, Disable Tx interrupts
    388a:	80 91 c1 00 	lds	r24, 0x00C1
    388e:	8f 7d       	andi	r24, 0xDF	; 223
    3890:	80 93 c1 00 	sts	0x00C1, r24
    3894:	e9 cf       	rjmp	.-46     	; 0x3868 <__vector_19+0x62>

00003896 <zoUartTxBufferIsFull>:
	TransmitTimeOut = miliseconds;
}

inline bool zoUartTxBufferIsFull(void)
{
	return zoBufferIsFull(&TxBuffer);
    3896:	84 e2       	ldi	r24, 0x24	; 36
    3898:	93 e0       	ldi	r25, 0x03	; 3
    389a:	0e 94 a1 1e 	call	0x3d42	; 0x3d42 <zoBufferIsFull>
}
    389e:	08 95       	ret

000038a0 <__vector_18>:
	}
	return TRUE;
}

ISR(USART_RX_vect)
{
    38a0:	1f 92       	push	r1
    38a2:	0f 92       	push	r0
    38a4:	0f b6       	in	r0, 0x3f	; 63
    38a6:	0f 92       	push	r0
    38a8:	11 24       	eor	r1, r1
    38aa:	1f 93       	push	r17
    38ac:	2f 93       	push	r18
    38ae:	3f 93       	push	r19
    38b0:	4f 93       	push	r20
    38b2:	5f 93       	push	r21
    38b4:	6f 93       	push	r22
    38b6:	7f 93       	push	r23
    38b8:	8f 93       	push	r24
    38ba:	9f 93       	push	r25
    38bc:	af 93       	push	r26
    38be:	bf 93       	push	r27
    38c0:	ef 93       	push	r30
    38c2:	ff 93       	push	r31
    u08   c;

	if ((UCSR0A & _BV(FE0)) != 0x00)					//is there a frame error?
    38c4:	80 91 c0 00 	lds	r24, 0x00C0
    38c8:	84 fd       	sbrc	r24, 4
    38ca:	39 c0       	rjmp	.+114    	; 0x393e <__vector_18+0x9e>
		zoErrorPutIsr(&zoUartError,ZO_UART_ERROR_RX_FRAME_ERROR);	//Yes->indicate it.

	if ((UCSR0A & _BV(UPE0)) != 0x00)					//is there a parity error?
    38cc:	80 91 c0 00 	lds	r24, 0x00C0
    38d0:	82 fd       	sbrc	r24, 2
    38d2:	2f c0       	rjmp	.+94     	; 0x3932 <__vector_18+0x92>
		zoErrorPutIsr(&zoUartError,ZO_UART_ERROR_RX_PARITY_ERROR);	//Yes->indicate it.

	if ( (UCSR0A & _BV(DOR0)) != 0x00 )					//Is there data overrun?
    38d4:	80 91 c0 00 	lds	r24, 0x00C0
    38d8:	83 fd       	sbrc	r24, 3
    38da:	25 c0       	rjmp	.+74     	; 0x3926 <__vector_18+0x86>
		zoErrorPutIsr(&zoUartError,ZO_UART_ERROR_RX_DATA_OVERRUN);	//Yes->indicate it.
														 
	//Above three bits are cleared automatically when UDR0 is read.												//
	c  = UDR0;											
    38dc:	10 91 c6 00 	lds	r17, 0x00C6

    if( !zoBufferIsFull(&RxBuffer) )
    38e0:	8d e2       	ldi	r24, 0x2D	; 45
    38e2:	93 e0       	ldi	r25, 0x03	; 3
    38e4:	0e 94 a1 1e 	call	0x3d42	; 0x3d42 <zoBufferIsFull>
    38e8:	88 23       	and	r24, r24
    38ea:	b9 f0       	breq	.+46     	; 0x391a <__vector_18+0x7a>
		zoBufferPutIsr(&RxBuffer,c);
	else
		zoErrorPutIsr(&zoUartError,ZO_UART_ERROR_RX_BUFFER_OVERFLOW);
    38ec:	87 e1       	ldi	r24, 0x17	; 23
    38ee:	93 e0       	ldi	r25, 0x03	; 3
    38f0:	65 e0       	ldi	r22, 0x05	; 5
    38f2:	0e 94 86 00 	call	0x10c	; 0x10c <zoErrorPutIsr>
}
    38f6:	ff 91       	pop	r31
    38f8:	ef 91       	pop	r30
    38fa:	bf 91       	pop	r27
    38fc:	af 91       	pop	r26
    38fe:	9f 91       	pop	r25
    3900:	8f 91       	pop	r24
    3902:	7f 91       	pop	r23
    3904:	6f 91       	pop	r22
    3906:	5f 91       	pop	r21
    3908:	4f 91       	pop	r20
    390a:	3f 91       	pop	r19
    390c:	2f 91       	pop	r18
    390e:	1f 91       	pop	r17
    3910:	0f 90       	pop	r0
    3912:	0f be       	out	0x3f, r0	; 63
    3914:	0f 90       	pop	r0
    3916:	1f 90       	pop	r1
    3918:	18 95       	reti
														 
	//Above three bits are cleared automatically when UDR0 is read.												//
	c  = UDR0;											

    if( !zoBufferIsFull(&RxBuffer) )
		zoBufferPutIsr(&RxBuffer,c);
    391a:	8d e2       	ldi	r24, 0x2D	; 45
    391c:	93 e0       	ldi	r25, 0x03	; 3
    391e:	61 2f       	mov	r22, r17
    3920:	0e 94 e5 1e 	call	0x3dca	; 0x3dca <zoBufferPutIsr>
    3924:	e8 cf       	rjmp	.-48     	; 0x38f6 <__vector_18+0x56>

	if ((UCSR0A & _BV(UPE0)) != 0x00)					//is there a parity error?
		zoErrorPutIsr(&zoUartError,ZO_UART_ERROR_RX_PARITY_ERROR);	//Yes->indicate it.

	if ( (UCSR0A & _BV(DOR0)) != 0x00 )					//Is there data overrun?
		zoErrorPutIsr(&zoUartError,ZO_UART_ERROR_RX_DATA_OVERRUN);	//Yes->indicate it.
    3926:	87 e1       	ldi	r24, 0x17	; 23
    3928:	93 e0       	ldi	r25, 0x03	; 3
    392a:	66 e0       	ldi	r22, 0x06	; 6
    392c:	0e 94 86 00 	call	0x10c	; 0x10c <zoErrorPutIsr>
    3930:	d5 cf       	rjmp	.-86     	; 0x38dc <__vector_18+0x3c>

	if ((UCSR0A & _BV(FE0)) != 0x00)					//is there a frame error?
		zoErrorPutIsr(&zoUartError,ZO_UART_ERROR_RX_FRAME_ERROR);	//Yes->indicate it.

	if ((UCSR0A & _BV(UPE0)) != 0x00)					//is there a parity error?
		zoErrorPutIsr(&zoUartError,ZO_UART_ERROR_RX_PARITY_ERROR);	//Yes->indicate it.
    3932:	87 e1       	ldi	r24, 0x17	; 23
    3934:	93 e0       	ldi	r25, 0x03	; 3
    3936:	64 e0       	ldi	r22, 0x04	; 4
    3938:	0e 94 86 00 	call	0x10c	; 0x10c <zoErrorPutIsr>
    393c:	cb cf       	rjmp	.-106    	; 0x38d4 <__vector_18+0x34>
ISR(USART_RX_vect)
{
    u08   c;

	if ((UCSR0A & _BV(FE0)) != 0x00)					//is there a frame error?
		zoErrorPutIsr(&zoUartError,ZO_UART_ERROR_RX_FRAME_ERROR);	//Yes->indicate it.
    393e:	87 e1       	ldi	r24, 0x17	; 23
    3940:	93 e0       	ldi	r25, 0x03	; 3
    3942:	63 e0       	ldi	r22, 0x03	; 3
    3944:	0e 94 86 00 	call	0x10c	; 0x10c <zoErrorPutIsr>
    3948:	c1 cf       	rjmp	.-126    	; 0x38cc <__vector_18+0x2c>

0000394a <zoUartGetChar>:

	return TRUE;
}

bool zoUartGetChar(u08* byte)
{
    394a:	cf 93       	push	r28
    394c:	df 93       	push	r29
    394e:	ec 01       	movw	r28, r24
	if(!zoErrorIsEmpty(&zoUartError))		//check if receive ISR got some error
    3950:	87 e1       	ldi	r24, 0x17	; 23
    3952:	93 e0       	ldi	r25, 0x03	; 3
    3954:	0e 94 ad 00 	call	0x15a	; 0x15a <zoErrorIsEmpty>
    3958:	88 23       	and	r24, r24
    395a:	21 f4       	brne	.+8      	; 0x3964 <zoUartGetChar+0x1a>
        return FALSE;
    }

	*byte = zoBufferGet(&RxBuffer);

	return TRUE;
    395c:	80 e0       	ldi	r24, 0x00	; 0
}
    395e:	df 91       	pop	r29
    3960:	cf 91       	pop	r28
    3962:	08 95       	ret
	return zoBufferIsFull(&TxBuffer);
}

inline bool zoUartRxBufferIsEmpty(void)
{
	return zoBufferIsEmpty(&RxBuffer);
    3964:	8d e2       	ldi	r24, 0x2D	; 45
    3966:	93 e0       	ldi	r25, 0x03	; 3
    3968:	0e 94 99 1e 	call	0x3d32	; 0x3d32 <zoBufferIsEmpty>
bool zoUartGetChar(u08* byte)
{
	if(!zoErrorIsEmpty(&zoUartError))		//check if receive ISR got some error
		return FALSE;

    if( zoUartRxBufferIsEmpty() )
    396c:	88 23       	and	r24, r24
    396e:	b1 f7       	brne	.-20     	; 0x395c <zoUartGetChar+0x12>
	{
        //zoErrorPut(&zoUartError,ZO_UART_ERROR_RX_BUFFER_EMPTY);
        return FALSE;
    }

	*byte = zoBufferGet(&RxBuffer);
    3970:	8d e2       	ldi	r24, 0x2D	; 45
    3972:	93 e0       	ldi	r25, 0x03	; 3
    3974:	0e 94 a5 1f 	call	0x3f4a	; 0x3f4a <zoBufferGet>
    3978:	88 83       	st	Y, r24
    397a:	8f ef       	ldi	r24, 0xFF	; 255
    397c:	f0 cf       	rjmp	.-32     	; 0x395e <zoUartGetChar+0x14>

0000397e <zoUartPutChar>:

	zoBufferFlush(&RxBuffer);
}

bool zoUartPutChar(const u08 c)
{
    397e:	ff 92       	push	r15
    3980:	0f 93       	push	r16
    3982:	1f 93       	push	r17
    3984:	df 93       	push	r29
    3986:	cf 93       	push	r28
    3988:	00 d0       	rcall	.+0      	; 0x398a <zoUartPutChar+0xc>
    398a:	cd b7       	in	r28, 0x3d	; 61
    398c:	de b7       	in	r29, 0x3e	; 62
    398e:	f8 2e       	mov	r15, r24
	u16 timer;
	
	//wait with timeout for a space in the transmit buffer
	zoSystemTimerTimeOutInit(&timer);
    3990:	8e 01       	movw	r16, r28
    3992:	0f 5f       	subi	r16, 0xFF	; 255
    3994:	1f 4f       	sbci	r17, 0xFF	; 255
    3996:	c8 01       	movw	r24, r16
    3998:	0e 94 42 01 	call	0x284	; 0x284 <zoSystemTimerTimeOutInit>
    while(zoBufferIsFull(&TxBuffer))
    399c:	84 e2       	ldi	r24, 0x24	; 36
    399e:	93 e0       	ldi	r25, 0x03	; 3
    39a0:	0e 94 a1 1e 	call	0x3d42	; 0x3d42 <zoBufferIsFull>
    39a4:	88 23       	and	r24, r24
    39a6:	b9 f0       	breq	.+46     	; 0x39d6 <zoUartPutChar+0x58>
	{
		if(zoSystemTimerTimeOutExpired(&timer,TransmitTimeOut))
    39a8:	60 91 6e 01 	lds	r22, 0x016E
    39ac:	70 91 6f 01 	lds	r23, 0x016F
    39b0:	c8 01       	movw	r24, r16
    39b2:	0e 94 78 01 	call	0x2f0	; 0x2f0 <zoSystemTimerTimeOutExpired>
    39b6:	88 23       	and	r24, r24
    39b8:	89 f3       	breq	.-30     	; 0x399c <zoUartPutChar+0x1e>
		{
			zoErrorPut(&zoUartError,ZO_UART_ERROR_TX_TIMEOUT);
    39ba:	87 e1       	ldi	r24, 0x17	; 23
    39bc:	93 e0       	ldi	r25, 0x03	; 3
    39be:	67 e0       	ldi	r22, 0x07	; 7
    39c0:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <zoErrorPut>
    39c4:	80 e0       	ldi	r24, 0x00	; 0

	if(TxBuffer.ctr == 1)						// See if this is the first character
		UCSR0B |= _BV(UDRIE0);					// Yes, Enable Tx interrupts

	return TRUE;
}
    39c6:	0f 90       	pop	r0
    39c8:	0f 90       	pop	r0
    39ca:	cf 91       	pop	r28
    39cc:	df 91       	pop	r29
    39ce:	1f 91       	pop	r17
    39d0:	0f 91       	pop	r16
    39d2:	ff 90       	pop	r15
    39d4:	08 95       	ret
			zoErrorPut(&zoUartError,ZO_UART_ERROR_TX_TIMEOUT);
			return FALSE;
		}
	}
	
	zoBufferPut(&TxBuffer,c);
    39d6:	84 e2       	ldi	r24, 0x24	; 36
    39d8:	93 e0       	ldi	r25, 0x03	; 3
    39da:	6f 2d       	mov	r22, r15
    39dc:	0e 94 75 1f 	call	0x3eea	; 0x3eea <zoBufferPut>

	if(TxBuffer.ctr == 1)						// See if this is the first character
    39e0:	80 91 25 03 	lds	r24, 0x0325
    39e4:	81 30       	cpi	r24, 0x01	; 1
    39e6:	49 f0       	breq	.+18     	; 0x39fa <zoUartPutChar+0x7c>
		UCSR0B |= _BV(UDRIE0);					// Yes, Enable Tx interrupts
    39e8:	8f ef       	ldi	r24, 0xFF	; 255

	return TRUE;
}
    39ea:	0f 90       	pop	r0
    39ec:	0f 90       	pop	r0
    39ee:	cf 91       	pop	r28
    39f0:	df 91       	pop	r29
    39f2:	1f 91       	pop	r17
    39f4:	0f 91       	pop	r16
    39f6:	ff 90       	pop	r15
    39f8:	08 95       	ret
	}
	
	zoBufferPut(&TxBuffer,c);

	if(TxBuffer.ctr == 1)						// See if this is the first character
		UCSR0B |= _BV(UDRIE0);					// Yes, Enable Tx interrupts
    39fa:	80 91 c1 00 	lds	r24, 0x00C1
    39fe:	80 62       	ori	r24, 0x20	; 32
    3a00:	80 93 c1 00 	sts	0x00C1, r24
    3a04:	8f ef       	ldi	r24, 0xFF	; 255
    3a06:	f1 cf       	rjmp	.-30     	; 0x39ea <zoUartPutChar+0x6c>

00003a08 <zoUartPutData>:
	}
	return TRUE;
}

bool zoUartPutData(const u08* buffer, u08 length)
{
    3a08:	0f 93       	push	r16
    3a0a:	1f 93       	push	r17
    3a0c:	cf 93       	push	r28
    3a0e:	df 93       	push	r29
    3a10:	08 2f       	mov	r16, r24
    3a12:	16 2f       	mov	r17, r22
	u08 i;

	for(i=0;i<length;i++)
    3a14:	66 23       	and	r22, r22
    3a16:	91 f0       	breq	.+36     	; 0x3a3c <zoUartPutData+0x34>
    3a18:	9c 01       	movw	r18, r24
    3a1a:	e9 01       	movw	r28, r18
    3a1c:	05 c0       	rjmp	.+10     	; 0x3a28 <zoUartPutData+0x20>
	{
		if(!zoUartPutChar(buffer[i]))
    3a1e:	21 96       	adiw	r28, 0x01	; 1

bool zoUartPutData(const u08* buffer, u08 length)
{
	u08 i;

	for(i=0;i<length;i++)
    3a20:	9e 01       	movw	r18, r28
    3a22:	20 1b       	sub	r18, r16
    3a24:	21 17       	cp	r18, r17
    3a26:	50 f4       	brcc	.+20     	; 0x3a3c <zoUartPutData+0x34>
	{
		if(!zoUartPutChar(buffer[i]))
    3a28:	88 81       	ld	r24, Y
    3a2a:	0e 94 bf 1c 	call	0x397e	; 0x397e <zoUartPutChar>
    3a2e:	88 23       	and	r24, r24
    3a30:	b1 f7       	brne	.-20     	; 0x3a1e <zoUartPutData+0x16>
			return FALSE;
	}
	return TRUE;
}
    3a32:	df 91       	pop	r29
    3a34:	cf 91       	pop	r28
    3a36:	1f 91       	pop	r17
    3a38:	0f 91       	pop	r16
    3a3a:	08 95       	ret

bool zoUartPutData(const u08* buffer, u08 length)
{
	u08 i;

	for(i=0;i<length;i++)
    3a3c:	8f ef       	ldi	r24, 0xFF	; 255
	{
		if(!zoUartPutChar(buffer[i]))
			return FALSE;
	}
	return TRUE;
}
    3a3e:	df 91       	pop	r29
    3a40:	cf 91       	pop	r28
    3a42:	1f 91       	pop	r17
    3a44:	0f 91       	pop	r16
    3a46:	08 95       	ret

00003a48 <zoUartPutString>:

	return TRUE;
}

bool zoUartPutString(const u08* buffer)
{
    3a48:	cf 93       	push	r28
    3a4a:	df 93       	push	r29
    3a4c:	ec 01       	movw	r28, r24
    3a4e:	01 c0       	rjmp	.+2      	; 0x3a52 <zoUartPutString+0xa>
	while(*buffer != '\0')
	{
		if(!zoUartPutChar(*buffer++))
    3a50:	21 96       	adiw	r28, 0x01	; 1
	return TRUE;
}

bool zoUartPutString(const u08* buffer)
{
	while(*buffer != '\0')
    3a52:	88 81       	ld	r24, Y
    3a54:	88 23       	and	r24, r24
    3a56:	39 f0       	breq	.+14     	; 0x3a66 <zoUartPutString+0x1e>
	{
		if(!zoUartPutChar(*buffer++))
    3a58:	0e 94 bf 1c 	call	0x397e	; 0x397e <zoUartPutChar>
    3a5c:	88 23       	and	r24, r24
    3a5e:	c1 f7       	brne	.-16     	; 0x3a50 <zoUartPutString+0x8>
			return FALSE;
	}
	return TRUE;
}
    3a60:	df 91       	pop	r29
    3a62:	cf 91       	pop	r28
    3a64:	08 95       	ret
	return TRUE;
}

bool zoUartPutString(const u08* buffer)
{
	while(*buffer != '\0')
    3a66:	8f ef       	ldi	r24, 0xFF	; 255
	{
		if(!zoUartPutChar(*buffer++))
			return FALSE;
	}
	return TRUE;
}
    3a68:	df 91       	pop	r29
    3a6a:	cf 91       	pop	r28
    3a6c:	08 95       	ret

00003a6e <zoUartRxFlush>:

void zoUartRxFlush(void)
{
	u08  dummy;

    while (bit_is_set(UCSR0A, RXC0))
    3a6e:	80 91 c0 00 	lds	r24, 0x00C0
    3a72:	87 ff       	sbrs	r24, 7
    3a74:	06 c0       	rjmp	.+12     	; 0x3a82 <zoUartRxFlush+0x14>
         dummy = UDR0;
    3a76:	80 91 c6 00 	lds	r24, 0x00C6

void zoUartRxFlush(void)
{
	u08  dummy;

    while (bit_is_set(UCSR0A, RXC0))
    3a7a:	80 91 c0 00 	lds	r24, 0x00C0
    3a7e:	87 fd       	sbrc	r24, 7
    3a80:	fa cf       	rjmp	.-12     	; 0x3a76 <zoUartRxFlush+0x8>
         dummy = UDR0;

	zoBufferFlush(&RxBuffer);
    3a82:	8d e2       	ldi	r24, 0x2D	; 45
    3a84:	93 e0       	ldi	r25, 0x03	; 3
    3a86:	0e 94 aa 1e 	call	0x3d54	; 0x3d54 <zoBufferFlush>
}
    3a8a:	08 95       	ret

00003a8c <zoUartSetBuffersSize>:
											//reset reDePin -> receive mode
	UCSR0B |= _BV(TXCIE0);					// Enable Transmit Complete Interrupt
}

inline bool zoUartSetBuffersSize(u08 size)
{
    3a8c:	1f 93       	push	r17
    3a8e:	18 2f       	mov	r17, r24
	if ( zoBufferInit(&RxBuffer,size) && zoBufferInit(&TxBuffer,size) )
    3a90:	8d e2       	ldi	r24, 0x2D	; 45
    3a92:	93 e0       	ldi	r25, 0x03	; 3
    3a94:	61 2f       	mov	r22, r17
    3a96:	0e 94 4d 1f 	call	0x3e9a	; 0x3e9a <zoBufferInit>
    3a9a:	88 23       	and	r24, r24
    3a9c:	41 f4       	brne	.+16     	; 0x3aae <zoUartSetBuffersSize+0x22>
		return TRUE;
	else
	{
		zoErrorPut(&zoUartError,ZO_UART_ERROR_MEMORY_ALLOCATION_ERROR);
    3a9e:	87 e1       	ldi	r24, 0x17	; 23
    3aa0:	93 e0       	ldi	r25, 0x03	; 3
    3aa2:	61 e0       	ldi	r22, 0x01	; 1
    3aa4:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <zoErrorPut>
    3aa8:	80 e0       	ldi	r24, 0x00	; 0
		return FALSE;
	}
}
    3aaa:	1f 91       	pop	r17
    3aac:	08 95       	ret
	UCSR0B |= _BV(TXCIE0);					// Enable Transmit Complete Interrupt
}

inline bool zoUartSetBuffersSize(u08 size)
{
	if ( zoBufferInit(&RxBuffer,size) && zoBufferInit(&TxBuffer,size) )
    3aae:	84 e2       	ldi	r24, 0x24	; 36
    3ab0:	93 e0       	ldi	r25, 0x03	; 3
    3ab2:	61 2f       	mov	r22, r17
    3ab4:	0e 94 4d 1f 	call	0x3e9a	; 0x3e9a <zoBufferInit>
    3ab8:	88 23       	and	r24, r24
    3aba:	89 f3       	breq	.-30     	; 0x3a9e <zoUartSetBuffersSize+0x12>
    3abc:	8f ef       	ldi	r24, 0xFF	; 255
    3abe:	f5 cf       	rjmp	.-22     	; 0x3aaa <zoUartSetBuffersSize+0x1e>

00003ac0 <zoUartInit>:
ZO_ERROR zoUartError = ZO_ERROR_DEFAULTS;

//Implementation__________________________________________________________________________
bool zoUartInit(void)
{
	UCSR0C = 0;
    3ac0:	10 92 c2 00 	sts	0x00C2, r1
	UCSR0B |= _BV(TXCIE0);					// Enable Transmit Complete Interrupt
}

inline bool zoUartSetBuffersSize(u08 size)
{
	if ( zoBufferInit(&RxBuffer,size) && zoBufferInit(&TxBuffer,size) )
    3ac4:	8d e2       	ldi	r24, 0x2D	; 45
    3ac6:	93 e0       	ldi	r25, 0x03	; 3
    3ac8:	60 e2       	ldi	r22, 0x20	; 32
    3aca:	0e 94 4d 1f 	call	0x3e9a	; 0x3e9a <zoBufferInit>
    3ace:	88 23       	and	r24, r24
    3ad0:	39 f4       	brne	.+14     	; 0x3ae0 <zoUartInit+0x20>
		return TRUE;
	else
	{
		zoErrorPut(&zoUartError,ZO_UART_ERROR_MEMORY_ALLOCATION_ERROR);
    3ad2:	87 e1       	ldi	r24, 0x17	; 23
    3ad4:	93 e0       	ldi	r25, 0x03	; 3
    3ad6:	61 e0       	ldi	r22, 0x01	; 1
    3ad8:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <zoErrorPut>
    3adc:	80 e0       	ldi	r24, 0x00	; 0
    3ade:	08 95       	ret
	UCSR0B |= _BV(TXCIE0);					// Enable Transmit Complete Interrupt
}

inline bool zoUartSetBuffersSize(u08 size)
{
	if ( zoBufferInit(&RxBuffer,size) && zoBufferInit(&TxBuffer,size) )
    3ae0:	84 e2       	ldi	r24, 0x24	; 36
    3ae2:	93 e0       	ldi	r25, 0x03	; 3
    3ae4:	60 e2       	ldi	r22, 0x20	; 32
    3ae6:	0e 94 4d 1f 	call	0x3e9a	; 0x3e9a <zoBufferInit>
    3aea:	88 23       	and	r24, r24
    3aec:	91 f3       	breq	.-28     	; 0x3ad2 <zoUartInit+0x12>
	UCSR0C = 0;

	if(!zoUartSetBuffersSize(ZO_UART_DEFAULT_BUFFER_SIZE))	//initialize buffers
		return FALSE;

	zoErrorInit(&zoUartError);								//initialize the error storage
    3aee:	87 e1       	ldi	r24, 0x17	; 23
    3af0:	93 e0       	ldi	r25, 0x03	; 3
    3af2:	0e 94 53 00 	call	0xa6	; 0xa6 <zoErrorInit>
	zoSystemTimerInit();
    3af6:	0e 94 10 01 	call	0x220	; 0x220 <zoSystemTimerInit>

   //general settings
	UCSR0A |= _BV(U2X0);									//double speed mode
    3afa:	80 91 c0 00 	lds	r24, 0x00C0
    3afe:	82 60       	ori	r24, 0x02	; 2
    3b00:	80 93 c0 00 	sts	0x00C0, r24
	UCSR0A &= ~_BV(MPCM0);									//no multiprocessor
    3b04:	80 91 c0 00 	lds	r24, 0x00C0
    3b08:	8e 7f       	andi	r24, 0xFE	; 254
    3b0a:	80 93 c0 00 	sts	0x00C0, r24
	UCSR0C &= ~(_BV(UMSEL01)|_BV(UMSEL00));					//asynchronous USART mode
    3b0e:	80 91 c2 00 	lds	r24, 0x00C2
    3b12:	8f 73       	andi	r24, 0x3F	; 63
    3b14:	80 93 c2 00 	sts	0x00C2, r24

	zoUartSetBaud(ZO_UART_DEFAULT_BAUD_RATE);
    3b18:	60 e0       	ldi	r22, 0x00	; 0
    3b1a:	72 ec       	ldi	r23, 0xC2	; 194
    3b1c:	81 e0       	ldi	r24, 0x01	; 1
    3b1e:	90 e0       	ldi	r25, 0x00	; 0
    3b20:	0e 94 72 1b 	call	0x36e4	; 0x36e4 <zoUartSetBaud>
	zoUartSetDataBits(ZO_UART_DEFAULT_DATA_BITS);
    3b24:	86 e0       	ldi	r24, 0x06	; 6
    3b26:	0e 94 94 1b 	call	0x3728	; 0x3728 <zoUartSetDataBits>
	UCSR0B = (UCSR0B & ~DATA_BITS_MASK_UCSR0B) | ((dataBits>>1) & DATA_BITS_MASK_UCSR0B);
}

inline void zoUartSetParity(ZO_UART_PARITY parity)
{
	UCSR0C = (UCSR0C & ~PARITY_BITS_MASK)|parity;
    3b2a:	80 91 c2 00 	lds	r24, 0x00C2
    3b2e:	8f 7c       	andi	r24, 0xCF	; 207
    3b30:	80 93 c2 00 	sts	0x00C2, r24
}

inline void zoUartSetStopBits(ZO_UART_STOP_BITS stopBits)
{
	UCSR0C = (UCSR0C & ~STOP_BITS_MASK)|stopBits;
    3b34:	80 91 c2 00 	lds	r24, 0x00C2
    3b38:	8f 77       	andi	r24, 0x7F	; 127
    3b3a:	80 93 c2 00 	sts	0x00C2, r24
	zoUartSetBaud(ZO_UART_DEFAULT_BAUD_RATE);
	zoUartSetDataBits(ZO_UART_DEFAULT_DATA_BITS);
	zoUartSetParity(ZO_UART_DEFAULT_PARITY);
	zoUartSetStopBits(ZO_UART_DEFAULT_STOP_BITS);

	UCSR0B |= _BV(TXEN0) | _BV(RXEN0) | _BV(RXCIE0) ;	//enable transmit,receive and receive interrupt
    3b3e:	80 91 c1 00 	lds	r24, 0x00C1
    3b42:	88 69       	ori	r24, 0x98	; 152
    3b44:	80 93 c1 00 	sts	0x00C1, r24
	zoUartRxFlush();
    3b48:	0e 94 37 1d 	call	0x3a6e	; 0x3a6e <zoUartRxFlush>

	sei();
    3b4c:	78 94       	sei
    3b4e:	8f ef       	ldi	r24, 0xFF	; 255

   return TRUE;
}
    3b50:	08 95       	ret

00003b52 <zoProtocolUartSetLAM>:
	return IsWholePacket;
}

inline void zoProtocolUartSetLAM(u08 localAcceptanceMask)
{
	zoProtocolUartLAM = localAcceptanceMask;
    3b52:	80 93 72 01 	sts	0x0172, r24
}
    3b56:	08 95       	ret

00003b58 <zoProtocolUartSetBitrate>:

inline bool zoProtocolUartSetBitrate(u32 bitsPerSecond)
{
	return zoUartSetBaud(bitsPerSecond);
    3b58:	0e 94 72 1b 	call	0x36e4	; 0x36e4 <zoUartSetBaud>
}
    3b5c:	08 95       	ret

00003b5e <zoProtocolUartGetPacket>:
	
	return TRUE;
}

bool zoProtocolUartGetPacket(ZO_PROTOCOL_PACKET* packet)
{
    3b5e:	0f 93       	push	r16
    3b60:	1f 93       	push	r17
    3b62:	df 93       	push	r29
    3b64:	cf 93       	push	r28
    3b66:	0f 92       	push	r0
    3b68:	cd b7       	in	r28, 0x3d	; 61
    3b6a:	de b7       	in	r29, 0x3e	; 62
    3b6c:	8c 01       	movw	r16, r24
	
	//TODO:put a timeout on reception for a whole packet
	//so the decoder can escape from a tottaly wrong packet:
	//eg when half a packet is received because of some unknown interruption of reception

	if( !zoUartGetChar(&c) )
    3b6e:	ce 01       	movw	r24, r28
    3b70:	01 96       	adiw	r24, 0x01	; 1
    3b72:	0e 94 a5 1c 	call	0x394a	; 0x394a <zoUartGetChar>
    3b76:	88 23       	and	r24, r24
    3b78:	09 f1       	breq	.+66     	; 0x3bbc <zoProtocolUartGetPacket+0x5e>
		return FALSE;

	switch(DecoderState) 
    3b7a:	80 91 38 03 	lds	r24, 0x0338
    3b7e:	83 30       	cpi	r24, 0x03	; 3
    3b80:	c9 f1       	breq	.+114    	; 0x3bf4 <zoProtocolUartGetPacket+0x96>
    3b82:	84 30       	cpi	r24, 0x04	; 4
    3b84:	10 f1       	brcs	.+68     	; 0x3bca <zoProtocolUartGetPacket+0x6c>
    3b86:	85 30       	cpi	r24, 0x05	; 5
    3b88:	09 f4       	brne	.+2      	; 0x3b8c <zoProtocolUartGetPacket+0x2e>
    3b8a:	5e c0       	rjmp	.+188    	; 0x3c48 <zoProtocolUartGetPacket+0xea>
    3b8c:	85 30       	cpi	r24, 0x05	; 5
    3b8e:	d0 f5       	brcc	.+116    	; 0x3c04 <zoProtocolUartGetPacket+0xa6>
		packet->OwnNodeID = c;
		DecoderState = WAIT_ON_COMMAND_ID;
		break;

	case WAIT_ON_COMMAND_ID:
		packet->commandID = c;
    3b90:	89 81       	ldd	r24, Y+1	; 0x01
    3b92:	d8 01       	movw	r26, r16
    3b94:	12 96       	adiw	r26, 0x02	; 2
    3b96:	8c 93       	st	X, r24
		DecoderState = WAIT_ON_BYTECOUNT;
    3b98:	85 e0       	ldi	r24, 0x05	; 5
    3b9a:	80 93 38 03 	sts	0x0338, r24
    3b9e:	80 e0       	ldi	r24, 0x00	; 0
		IsWholePacket = TRUE;
		break;
	}

	return IsWholePacket;
}
    3ba0:	0f 90       	pop	r0
    3ba2:	cf 91       	pop	r28
    3ba4:	df 91       	pop	r29
    3ba6:	1f 91       	pop	r17
    3ba8:	0f 91       	pop	r16
    3baa:	08 95       	ret
		return FALSE;

	switch(DecoderState) 
	{
	case WAIT_ON_HEADER_0:
		DecoderState = (c==ZO_PROTOCOL_HEADER_0)?WAIT_ON_HEADER_1:WAIT_ON_HEADER_0;
    3bac:	10 92 38 03 	sts	0x0338, r1
    3bb0:	89 81       	ldd	r24, Y+1	; 0x01
    3bb2:	85 35       	cpi	r24, 0x55	; 85
    3bb4:	19 f4       	brne	.+6      	; 0x3bbc <zoProtocolUartGetPacket+0x5e>
    3bb6:	81 e0       	ldi	r24, 0x01	; 1
    3bb8:	80 93 38 03 	sts	0x0338, r24
			DecoderState =	WAIT_ON_LRC;
		break;

	case WAIT_ON_LRC:
		packet->lrc = c;
		DecoderState = WAIT_ON_HEADER_0; 
    3bbc:	80 e0       	ldi	r24, 0x00	; 0
		IsWholePacket = TRUE;
		break;
	}

	return IsWholePacket;
}
    3bbe:	0f 90       	pop	r0
    3bc0:	cf 91       	pop	r28
    3bc2:	df 91       	pop	r29
    3bc4:	1f 91       	pop	r17
    3bc6:	0f 91       	pop	r16
    3bc8:	08 95       	ret
	//eg when half a packet is received because of some unknown interruption of reception

	if( !zoUartGetChar(&c) )
		return FALSE;

	switch(DecoderState) 
    3bca:	81 30       	cpi	r24, 0x01	; 1
    3bcc:	09 f4       	brne	.+2      	; 0x3bd0 <zoProtocolUartGetPacket+0x72>
    3bce:	48 c0       	rjmp	.+144    	; 0x3c60 <zoProtocolUartGetPacket+0x102>
    3bd0:	82 30       	cpi	r24, 0x02	; 2
    3bd2:	60 f3       	brcs	.-40     	; 0x3bac <zoProtocolUartGetPacket+0x4e>
	case WAIT_ON_HEADER_1:
		DecoderState = (c==ZO_PROTOCOL_HEADER_1)?WAIT_ON_ADDRESSED_NODE_ID:WAIT_ON_HEADER_0;
		break;

	case WAIT_ON_ADDRESSED_NODE_ID:
		if( ( (c & zoProtocolUartLAM) == (OwnNodeID & zoProtocolUartLAM ) ) ||
    3bd4:	29 81       	ldd	r18, Y+1	; 0x01
    3bd6:	80 91 39 03 	lds	r24, 0x0339
    3bda:	82 27       	eor	r24, r18
    3bdc:	90 91 72 01 	lds	r25, 0x0172
    3be0:	89 23       	and	r24, r25
    3be2:	09 f4       	brne	.+2      	; 0x3be6 <zoProtocolUartGetPacket+0x88>
    3be4:	42 c0       	rjmp	.+132    	; 0x3c6a <zoProtocolUartGetPacket+0x10c>
    3be6:	22 23       	and	r18, r18
    3be8:	09 f4       	brne	.+2      	; 0x3bec <zoProtocolUartGetPacket+0x8e>
    3bea:	3f c0       	rjmp	.+126    	; 0x3c6a <zoProtocolUartGetPacket+0x10c>
		{
			DecoderState = WAIT_ON_OWN_NODE_ID;
			packet->AddressedNodeID = c;
		}
		else
			DecoderState = WAIT_ON_HEADER_0;
    3bec:	10 92 38 03 	sts	0x0338, r1
    3bf0:	80 e0       	ldi	r24, 0x00	; 0
    3bf2:	e5 cf       	rjmp	.-54     	; 0x3bbe <zoProtocolUartGetPacket+0x60>
		break;

	case WAIT_ON_OWN_NODE_ID:
		packet->OwnNodeID = c;
    3bf4:	89 81       	ldd	r24, Y+1	; 0x01
    3bf6:	f8 01       	movw	r30, r16
    3bf8:	81 83       	std	Z+1, r24	; 0x01
		DecoderState = WAIT_ON_COMMAND_ID;
    3bfa:	84 e0       	ldi	r24, 0x04	; 4
    3bfc:	80 93 38 03 	sts	0x0338, r24
    3c00:	80 e0       	ldi	r24, 0x00	; 0
    3c02:	dd cf       	rjmp	.-70     	; 0x3bbe <zoProtocolUartGetPacket+0x60>
	//eg when half a packet is received because of some unknown interruption of reception

	if( !zoUartGetChar(&c) )
		return FALSE;

	switch(DecoderState) 
    3c04:	86 30       	cpi	r24, 0x06	; 6
    3c06:	49 f0       	breq	.+18     	; 0x3c1a <zoProtocolUartGetPacket+0xbc>
    3c08:	87 30       	cpi	r24, 0x07	; 7
    3c0a:	c1 f6       	brne	.-80     	; 0x3bbc <zoProtocolUartGetPacket+0x5e>
		if(byteCount == 0)
			DecoderState =	WAIT_ON_LRC;
		break;

	case WAIT_ON_LRC:
		packet->lrc = c;
    3c0c:	89 81       	ldd	r24, Y+1	; 0x01
    3c0e:	f8 01       	movw	r30, r16
    3c10:	84 8b       	std	Z+20, r24	; 0x14
		DecoderState = WAIT_ON_HEADER_0; 
    3c12:	10 92 38 03 	sts	0x0338, r1
    3c16:	8f ef       	ldi	r24, 0xFF	; 255
    3c18:	d2 cf       	rjmp	.-92     	; 0x3bbe <zoProtocolUartGetPacket+0x60>
		else
			DecoderState = WAIT_ON_LRC;
		break;

	case WAIT_ON_DATA:
		packet->data[packet->byteCount - byteCount--] = c;
    3c1a:	80 91 3a 03 	lds	r24, 0x033A
    3c1e:	d8 01       	movw	r26, r16
    3c20:	13 96       	adiw	r26, 0x03	; 3
    3c22:	ec 91       	ld	r30, X
    3c24:	f0 e0       	ldi	r31, 0x00	; 0
    3c26:	e8 1b       	sub	r30, r24
    3c28:	f1 09       	sbc	r31, r1
    3c2a:	e0 0f       	add	r30, r16
    3c2c:	f1 1f       	adc	r31, r17
    3c2e:	99 81       	ldd	r25, Y+1	; 0x01
    3c30:	94 83       	std	Z+4, r25	; 0x04
    3c32:	81 50       	subi	r24, 0x01	; 1
    3c34:	80 93 3a 03 	sts	0x033A, r24
		if(byteCount == 0)
    3c38:	88 23       	and	r24, r24
    3c3a:	09 f0       	breq	.+2      	; 0x3c3e <zoProtocolUartGetPacket+0xe0>
    3c3c:	bf cf       	rjmp	.-130    	; 0x3bbc <zoProtocolUartGetPacket+0x5e>
			DecoderState =	WAIT_ON_LRC;
    3c3e:	87 e0       	ldi	r24, 0x07	; 7
    3c40:	80 93 38 03 	sts	0x0338, r24
    3c44:	80 e0       	ldi	r24, 0x00	; 0
    3c46:	bb cf       	rjmp	.-138    	; 0x3bbe <zoProtocolUartGetPacket+0x60>
		packet->commandID = c;
		DecoderState = WAIT_ON_BYTECOUNT;
		break;

	case WAIT_ON_BYTECOUNT:
		packet->byteCount = c;
    3c48:	89 81       	ldd	r24, Y+1	; 0x01
    3c4a:	f8 01       	movw	r30, r16
    3c4c:	83 83       	std	Z+3, r24	; 0x03
		byteCount = packet->byteCount;	//store for internal use
    3c4e:	80 93 3a 03 	sts	0x033A, r24
		if(byteCount > 0)
    3c52:	88 23       	and	r24, r24
    3c54:	a1 f3       	breq	.-24     	; 0x3c3e <zoProtocolUartGetPacket+0xe0>
			DecoderState = WAIT_ON_DATA;
    3c56:	86 e0       	ldi	r24, 0x06	; 6
    3c58:	80 93 38 03 	sts	0x0338, r24
    3c5c:	80 e0       	ldi	r24, 0x00	; 0
    3c5e:	af cf       	rjmp	.-162    	; 0x3bbe <zoProtocolUartGetPacket+0x60>
	case WAIT_ON_HEADER_0:
		DecoderState = (c==ZO_PROTOCOL_HEADER_0)?WAIT_ON_HEADER_1:WAIT_ON_HEADER_0;
		break;

	case WAIT_ON_HEADER_1:
		DecoderState = (c==ZO_PROTOCOL_HEADER_1)?WAIT_ON_ADDRESSED_NODE_ID:WAIT_ON_HEADER_0;
    3c60:	89 81       	ldd	r24, Y+1	; 0x01
    3c62:	8a 3a       	cpi	r24, 0xAA	; 170
    3c64:	49 f0       	breq	.+18     	; 0x3c78 <zoProtocolUartGetPacket+0x11a>
    3c66:	80 e0       	ldi	r24, 0x00	; 0
    3c68:	98 cf       	rjmp	.-208    	; 0x3b9a <zoProtocolUartGetPacket+0x3c>

	case WAIT_ON_ADDRESSED_NODE_ID:
		if( ( (c & zoProtocolUartLAM) == (OwnNodeID & zoProtocolUartLAM ) ) ||
			( c == ZO_PROTOCOL_BROADCAST_ID ) )
		{
			DecoderState = WAIT_ON_OWN_NODE_ID;
    3c6a:	83 e0       	ldi	r24, 0x03	; 3
    3c6c:	80 93 38 03 	sts	0x0338, r24
			packet->AddressedNodeID = c;
    3c70:	d8 01       	movw	r26, r16
    3c72:	2c 93       	st	X, r18
    3c74:	80 e0       	ldi	r24, 0x00	; 0
    3c76:	a3 cf       	rjmp	.-186    	; 0x3bbe <zoProtocolUartGetPacket+0x60>
	case WAIT_ON_HEADER_0:
		DecoderState = (c==ZO_PROTOCOL_HEADER_0)?WAIT_ON_HEADER_1:WAIT_ON_HEADER_0;
		break;

	case WAIT_ON_HEADER_1:
		DecoderState = (c==ZO_PROTOCOL_HEADER_1)?WAIT_ON_ADDRESSED_NODE_ID:WAIT_ON_HEADER_0;
    3c78:	82 e0       	ldi	r24, 0x02	; 2
    3c7a:	8f cf       	rjmp	.-226    	; 0x3b9a <zoProtocolUartGetPacket+0x3c>

00003c7c <zoProtocolUartPutPacket>:

	return success;
}

bool zoProtocolUartPutPacket(const ZO_PROTOCOL_PACKET* packet)
{
    3c7c:	cf 93       	push	r28
    3c7e:	df 93       	push	r29
    3c80:	ec 01       	movw	r28, r24
	if(!zoUartPutChar(ZO_PROTOCOL_HEADER_0))
    3c82:	85 e5       	ldi	r24, 0x55	; 85
    3c84:	0e 94 bf 1c 	call	0x397e	; 0x397e <zoUartPutChar>
    3c88:	88 23       	and	r24, r24
    3c8a:	21 f4       	brne	.+8      	; 0x3c94 <zoProtocolUartPutPacket+0x18>
		return FALSE;

	if(!zoUartPutData(packet->data,packet->byteCount))
		return FALSE;

	if(!zoUartPutChar(packet->lrc))
    3c8c:	80 e0       	ldi	r24, 0x00	; 0
		return FALSE;
	
	return TRUE;
}
    3c8e:	df 91       	pop	r29
    3c90:	cf 91       	pop	r28
    3c92:	08 95       	ret
bool zoProtocolUartPutPacket(const ZO_PROTOCOL_PACKET* packet)
{
	if(!zoUartPutChar(ZO_PROTOCOL_HEADER_0))
		return FALSE;

	if(!zoUartPutChar(ZO_PROTOCOL_HEADER_1))
    3c94:	8a ea       	ldi	r24, 0xAA	; 170
    3c96:	0e 94 bf 1c 	call	0x397e	; 0x397e <zoUartPutChar>
    3c9a:	88 23       	and	r24, r24
    3c9c:	b9 f3       	breq	.-18     	; 0x3c8c <zoProtocolUartPutPacket+0x10>
		return FALSE;

	if(!zoUartPutChar(packet->AddressedNodeID))
    3c9e:	88 81       	ld	r24, Y
    3ca0:	0e 94 bf 1c 	call	0x397e	; 0x397e <zoUartPutChar>
    3ca4:	88 23       	and	r24, r24
    3ca6:	91 f3       	breq	.-28     	; 0x3c8c <zoProtocolUartPutPacket+0x10>
		return FALSE;

	if(!zoUartPutChar(packet->OwnNodeID))
    3ca8:	89 81       	ldd	r24, Y+1	; 0x01
    3caa:	0e 94 bf 1c 	call	0x397e	; 0x397e <zoUartPutChar>
    3cae:	88 23       	and	r24, r24
    3cb0:	69 f3       	breq	.-38     	; 0x3c8c <zoProtocolUartPutPacket+0x10>
		return FALSE;

	if(!zoUartPutChar(packet->commandID))
    3cb2:	8a 81       	ldd	r24, Y+2	; 0x02
    3cb4:	0e 94 bf 1c 	call	0x397e	; 0x397e <zoUartPutChar>
    3cb8:	88 23       	and	r24, r24
    3cba:	41 f3       	breq	.-48     	; 0x3c8c <zoProtocolUartPutPacket+0x10>
		return FALSE;

	if(!zoUartPutChar(packet->byteCount))
    3cbc:	8b 81       	ldd	r24, Y+3	; 0x03
    3cbe:	0e 94 bf 1c 	call	0x397e	; 0x397e <zoUartPutChar>
    3cc2:	88 23       	and	r24, r24
    3cc4:	19 f3       	breq	.-58     	; 0x3c8c <zoProtocolUartPutPacket+0x10>
		return FALSE;

	if(!zoUartPutData(packet->data,packet->byteCount))
    3cc6:	ce 01       	movw	r24, r28
    3cc8:	04 96       	adiw	r24, 0x04	; 4
    3cca:	6b 81       	ldd	r22, Y+3	; 0x03
    3ccc:	0e 94 04 1d 	call	0x3a08	; 0x3a08 <zoUartPutData>
    3cd0:	88 23       	and	r24, r24
    3cd2:	e1 f2       	breq	.-72     	; 0x3c8c <zoProtocolUartPutPacket+0x10>
		return FALSE;

	if(!zoUartPutChar(packet->lrc))
    3cd4:	8c 89       	ldd	r24, Y+20	; 0x14
    3cd6:	0e 94 bf 1c 	call	0x397e	; 0x397e <zoUartPutChar>
    3cda:	88 23       	and	r24, r24
    3cdc:	b9 f2       	breq	.-82     	; 0x3c8c <zoProtocolUartPutPacket+0x10>
    3cde:	8f ef       	ldi	r24, 0xFF	; 255
    3ce0:	d6 cf       	rjmp	.-84     	; 0x3c8e <zoProtocolUartPutPacket+0x12>

00003ce2 <zoProtocolUartInit>:
static u08 zoProtocolUartLAM = 0xFF;

ZO_ERROR *zoProtocolUartError = &zoUartError;

bool zoProtocolUartInit(ZO_PROTOCOL_HW_TYPE hw, u08 ownNodeID, u32 baudRate)
{
    3ce2:	df 92       	push	r13
    3ce4:	ef 92       	push	r14
    3ce6:	ff 92       	push	r15
    3ce8:	0f 93       	push	r16
    3cea:	1f 93       	push	r17
    3cec:	d6 2e       	mov	r13, r22
    3cee:	79 01       	movw	r14, r18
    3cf0:	8a 01       	movw	r16, r20
	bool success = TRUE;
	
	if( hw == ZO_PROTOCOL_HW_HALF_DUPLEX_RS485 )
    3cf2:	82 30       	cpi	r24, 0x02	; 2
    3cf4:	c1 f0       	breq	.+48     	; 0x3d26 <zoProtocolUartInit+0x44>
		zoUartInitRs485(&PORTD,PD2);
	
	//no error checking for valid node ID, this is left to be done in a higher level
	OwnNodeID = ownNodeID;	//store the node ID
    3cf6:	d0 92 39 03 	sts	0x0339, r13

	if(!zoUartInit())
    3cfa:	0e 94 60 1d 	call	0x3ac0	; 0x3ac0 <zoUartInit>
    3cfe:	88 23       	and	r24, r24
    3d00:	79 f4       	brne	.+30     	; 0x3d20 <zoProtocolUartInit+0x3e>
    3d02:	dd 24       	eor	r13, r13
		success = FALSE;
	
	if(!zoUartSetBaud(baudRate))
    3d04:	c8 01       	movw	r24, r16
    3d06:	b7 01       	movw	r22, r14
    3d08:	0e 94 72 1b 	call	0x36e4	; 0x36e4 <zoUartSetBaud>
    3d0c:	88 23       	and	r24, r24
    3d0e:	09 f4       	brne	.+2      	; 0x3d12 <zoProtocolUartInit+0x30>
    3d10:	dd 24       	eor	r13, r13
		success = FALSE;

	return success;
}
    3d12:	8d 2d       	mov	r24, r13
    3d14:	1f 91       	pop	r17
    3d16:	0f 91       	pop	r16
    3d18:	ff 90       	pop	r15
    3d1a:	ef 90       	pop	r14
    3d1c:	df 90       	pop	r13
    3d1e:	08 95       	ret
		zoUartInitRs485(&PORTD,PD2);
	
	//no error checking for valid node ID, this is left to be done in a higher level
	OwnNodeID = ownNodeID;	//store the node ID

	if(!zoUartInit())
    3d20:	dd 24       	eor	r13, r13
    3d22:	da 94       	dec	r13
    3d24:	ef cf       	rjmp	.-34     	; 0x3d04 <zoProtocolUartInit+0x22>
bool zoProtocolUartInit(ZO_PROTOCOL_HW_TYPE hw, u08 ownNodeID, u32 baudRate)
{
	bool success = TRUE;
	
	if( hw == ZO_PROTOCOL_HW_HALF_DUPLEX_RS485 )
		zoUartInitRs485(&PORTD,PD2);
    3d26:	8b e2       	ldi	r24, 0x2B	; 43
    3d28:	90 e0       	ldi	r25, 0x00	; 0
    3d2a:	62 e0       	ldi	r22, 0x02	; 2
    3d2c:	0e 94 b3 1b 	call	0x3766	; 0x3766 <zoUartInitRs485>
    3d30:	e2 cf       	rjmp	.-60     	; 0x3cf6 <zoProtocolUartInit+0x14>

00003d32 <zoBufferIsEmpty>:
#include <stdlib.h>
#include <string.h>
#include "zoMcu.h"

inline bool zoBufferIsEmpty(ZO_BUFFER *p)
{
    3d32:	fc 01       	movw	r30, r24
	return (p->ctr > 0)?FALSE:TRUE;
    3d34:	81 81       	ldd	r24, Z+1	; 0x01
    3d36:	88 23       	and	r24, r24
    3d38:	11 f0       	breq	.+4      	; 0x3d3e <zoBufferIsEmpty+0xc>
    3d3a:	80 e0       	ldi	r24, 0x00	; 0
}
    3d3c:	08 95       	ret
#include <string.h>
#include "zoMcu.h"

inline bool zoBufferIsEmpty(ZO_BUFFER *p)
{
	return (p->ctr > 0)?FALSE:TRUE;
    3d3e:	8f ef       	ldi	r24, 0xFF	; 255
    3d40:	08 95       	ret

00003d42 <zoBufferIsFull>:
}

inline bool zoBufferIsFull(ZO_BUFFER *p)
{
    3d42:	fc 01       	movw	r30, r24
	return (p->ctr < p->size)?FALSE:TRUE;
    3d44:	91 81       	ldd	r25, Z+1	; 0x01
    3d46:	80 81       	ld	r24, Z
    3d48:	98 17       	cp	r25, r24
    3d4a:	10 f4       	brcc	.+4      	; 0x3d50 <zoBufferIsFull+0xe>
    3d4c:	80 e0       	ldi	r24, 0x00	; 0
}
    3d4e:	08 95       	ret
	return (p->ctr > 0)?FALSE:TRUE;
}

inline bool zoBufferIsFull(ZO_BUFFER *p)
{
	return (p->ctr < p->size)?FALSE:TRUE;
    3d50:	8f ef       	ldi	r24, 0xFF	; 255
    3d52:	08 95       	ret

00003d54 <zoBufferFlush>:
}

void zoBufferFlush(ZO_BUFFER *p)
{
    3d54:	fc 01       	movw	r30, r24
	enterCritical();
    3d56:	0f b6       	in	r0, 0x3f	; 63
    3d58:	0f 92       	push	r0
    3d5a:	f8 94       	cli
	p->pIn = p->data;
    3d5c:	86 81       	ldd	r24, Z+6	; 0x06
    3d5e:	97 81       	ldd	r25, Z+7	; 0x07
    3d60:	93 83       	std	Z+3, r25	; 0x03
    3d62:	82 83       	std	Z+2, r24	; 0x02
	p->pOut = p->data;
    3d64:	86 81       	ldd	r24, Z+6	; 0x06
    3d66:	97 81       	ldd	r25, Z+7	; 0x07
    3d68:	95 83       	std	Z+5, r25	; 0x05
    3d6a:	84 83       	std	Z+4, r24	; 0x04
	p->ctr = 0;
    3d6c:	11 82       	std	Z+1, r1	; 0x01
	exitCritical();
    3d6e:	0f 90       	pop	r0
    3d70:	0f be       	out	0x3f, r0	; 63
}
    3d72:	08 95       	ret

00003d74 <zoBufferGetIsr>:

	return success;
}

inline u08  zoBufferGetIsr(ZO_BUFFER *p)
{
    3d74:	dc 01       	movw	r26, r24
	u08 c;

	p->ctr--;							//decrement count of bytes in buffer
    3d76:	11 96       	adiw	r26, 0x01	; 1
    3d78:	8c 91       	ld	r24, X
    3d7a:	11 97       	sbiw	r26, 0x01	; 1
    3d7c:	81 50       	subi	r24, 0x01	; 1
    3d7e:	11 96       	adiw	r26, 0x01	; 1
    3d80:	8c 93       	st	X, r24
    3d82:	11 97       	sbiw	r26, 0x01	; 1
	c = *p->pOut++;					//get one piece of data
    3d84:	14 96       	adiw	r26, 0x04	; 4
    3d86:	ed 91       	ld	r30, X+
    3d88:	fc 91       	ld	r31, X
    3d8a:	15 97       	sbiw	r26, 0x05	; 5
    3d8c:	31 91       	ld	r19, Z+
    3d8e:	15 96       	adiw	r26, 0x05	; 5
    3d90:	fc 93       	st	X, r31
    3d92:	ee 93       	st	-X, r30
    3d94:	14 97       	sbiw	r26, 0x04	; 4
	if(p->pOut == &p->data[p->size])	//wrap pout pointer
    3d96:	14 96       	adiw	r26, 0x04	; 4
    3d98:	4d 91       	ld	r20, X+
    3d9a:	5c 91       	ld	r21, X
    3d9c:	15 97       	sbiw	r26, 0x05	; 5
    3d9e:	16 96       	adiw	r26, 0x06	; 6
    3da0:	8d 91       	ld	r24, X+
    3da2:	9c 91       	ld	r25, X
    3da4:	17 97       	sbiw	r26, 0x07	; 7
    3da6:	2c 91       	ld	r18, X
    3da8:	82 0f       	add	r24, r18
    3daa:	91 1d       	adc	r25, r1
    3dac:	48 17       	cp	r20, r24
    3dae:	59 07       	cpc	r21, r25
    3db0:	11 f0       	breq	.+4      	; 0x3db6 <zoBufferGetIsr+0x42>
		p->pOut = &p->data[0];
	
	return c;
}
    3db2:	83 2f       	mov	r24, r19
    3db4:	08 95       	ret
	u08 c;

	p->ctr--;							//decrement count of bytes in buffer
	c = *p->pOut++;					//get one piece of data
	if(p->pOut == &p->data[p->size])	//wrap pout pointer
		p->pOut = &p->data[0];
    3db6:	16 96       	adiw	r26, 0x06	; 6
    3db8:	8d 91       	ld	r24, X+
    3dba:	9c 91       	ld	r25, X
    3dbc:	17 97       	sbiw	r26, 0x07	; 7
    3dbe:	15 96       	adiw	r26, 0x05	; 5
    3dc0:	9c 93       	st	X, r25
    3dc2:	8e 93       	st	-X, r24
    3dc4:	14 97       	sbiw	r26, 0x04	; 4
	
	return c;
}
    3dc6:	83 2f       	mov	r24, r19
    3dc8:	08 95       	ret

00003dca <zoBufferPutIsr>:
	exitCritical();
	return c;	
}

inline void zoBufferPutIsr(ZO_BUFFER *p,const u08 data)
{
    3dca:	dc 01       	movw	r26, r24
	p->ctr++;
    3dcc:	11 96       	adiw	r26, 0x01	; 1
    3dce:	8c 91       	ld	r24, X
    3dd0:	11 97       	sbiw	r26, 0x01	; 1
    3dd2:	8f 5f       	subi	r24, 0xFF	; 255
    3dd4:	11 96       	adiw	r26, 0x01	; 1
    3dd6:	8c 93       	st	X, r24
    3dd8:	11 97       	sbiw	r26, 0x01	; 1
	*p->pIn++ = data;
    3dda:	12 96       	adiw	r26, 0x02	; 2
    3ddc:	ed 91       	ld	r30, X+
    3dde:	fc 91       	ld	r31, X
    3de0:	13 97       	sbiw	r26, 0x03	; 3
    3de2:	61 93       	st	Z+, r22
    3de4:	13 96       	adiw	r26, 0x03	; 3
    3de6:	fc 93       	st	X, r31
    3de8:	ee 93       	st	-X, r30
    3dea:	12 97       	sbiw	r26, 0x02	; 2
	if(p->pIn == &p->data[p->size])	//wrap the pIn ptr
    3dec:	12 96       	adiw	r26, 0x02	; 2
    3dee:	4d 91       	ld	r20, X+
    3df0:	5c 91       	ld	r21, X
    3df2:	13 97       	sbiw	r26, 0x03	; 3
    3df4:	16 96       	adiw	r26, 0x06	; 6
    3df6:	8d 91       	ld	r24, X+
    3df8:	9c 91       	ld	r25, X
    3dfa:	17 97       	sbiw	r26, 0x07	; 7
    3dfc:	2c 91       	ld	r18, X
    3dfe:	82 0f       	add	r24, r18
    3e00:	91 1d       	adc	r25, r1
    3e02:	48 17       	cp	r20, r24
    3e04:	59 07       	cpc	r21, r25
    3e06:	09 f0       	breq	.+2      	; 0x3e0a <zoBufferPutIsr+0x40>
    3e08:	08 95       	ret
		p->pIn = &p->data[0];
    3e0a:	16 96       	adiw	r26, 0x06	; 6
    3e0c:	8d 91       	ld	r24, X+
    3e0e:	9c 91       	ld	r25, X
    3e10:	17 97       	sbiw	r26, 0x07	; 7
    3e12:	13 96       	adiw	r26, 0x03	; 3
    3e14:	9c 93       	st	X, r25
    3e16:	8e 93       	st	-X, r24
    3e18:	12 97       	sbiw	r26, 0x02	; 2
    3e1a:	08 95       	ret

00003e1c <zoBufferReadIsr>:
	zoBufferPutIsr(p,data);
	exitCritical();
}

inline u08 zoBufferReadIsr(ZO_BUFFER *p,u08 index)
{
    3e1c:	dc 01       	movw	r26, r24
	u08* c;
	
	c = p->pOut + index;
    3e1e:	14 96       	adiw	r26, 0x04	; 4
    3e20:	ed 91       	ld	r30, X+
    3e22:	fc 91       	ld	r31, X
    3e24:	15 97       	sbiw	r26, 0x05	; 5
    3e26:	70 e0       	ldi	r23, 0x00	; 0
    3e28:	e6 0f       	add	r30, r22
    3e2a:	f7 1f       	adc	r31, r23
	if( c > &p->data[p->size] )
    3e2c:	16 96       	adiw	r26, 0x06	; 6
    3e2e:	8d 91       	ld	r24, X+
    3e30:	9c 91       	ld	r25, X
    3e32:	17 97       	sbiw	r26, 0x07	; 7
    3e34:	2c 91       	ld	r18, X
    3e36:	82 0f       	add	r24, r18
    3e38:	91 1d       	adc	r25, r1
    3e3a:	8e 17       	cp	r24, r30
    3e3c:	9f 07       	cpc	r25, r31
    3e3e:	48 f4       	brcc	.+18     	; 0x3e52 <zoBufferReadIsr+0x36>
		c = p->pOut - p->size + index;
    3e40:	14 96       	adiw	r26, 0x04	; 4
    3e42:	ed 91       	ld	r30, X+
    3e44:	fc 91       	ld	r31, X
    3e46:	15 97       	sbiw	r26, 0x05	; 5
    3e48:	8c 91       	ld	r24, X
    3e4a:	68 1b       	sub	r22, r24
    3e4c:	71 09       	sbc	r23, r1
    3e4e:	e6 0f       	add	r30, r22
    3e50:	f7 1f       	adc	r31, r23
	
	return *c;
}
    3e52:	80 81       	ld	r24, Z
    3e54:	08 95       	ret

00003e56 <zoBufferRead>:

u08  zoBufferRead(ZO_BUFFER *p,u08 index)
{
    3e56:	dc 01       	movw	r26, r24
	u08 c;
	enterCritical();
    3e58:	0f b6       	in	r0, 0x3f	; 63
    3e5a:	0f 92       	push	r0
    3e5c:	f8 94       	cli

inline u08 zoBufferReadIsr(ZO_BUFFER *p,u08 index)
{
	u08* c;
	
	c = p->pOut + index;
    3e5e:	14 96       	adiw	r26, 0x04	; 4
    3e60:	ed 91       	ld	r30, X+
    3e62:	fc 91       	ld	r31, X
    3e64:	15 97       	sbiw	r26, 0x05	; 5
    3e66:	70 e0       	ldi	r23, 0x00	; 0
    3e68:	e6 0f       	add	r30, r22
    3e6a:	f7 1f       	adc	r31, r23
	if( c > &p->data[p->size] )
    3e6c:	16 96       	adiw	r26, 0x06	; 6
    3e6e:	8d 91       	ld	r24, X+
    3e70:	9c 91       	ld	r25, X
    3e72:	17 97       	sbiw	r26, 0x07	; 7
    3e74:	2c 91       	ld	r18, X
    3e76:	82 0f       	add	r24, r18
    3e78:	91 1d       	adc	r25, r1
    3e7a:	8e 17       	cp	r24, r30
    3e7c:	9f 07       	cpc	r25, r31
    3e7e:	48 f4       	brcc	.+18     	; 0x3e92 <zoBufferRead+0x3c>
		c = p->pOut - p->size + index;
    3e80:	14 96       	adiw	r26, 0x04	; 4
    3e82:	ed 91       	ld	r30, X+
    3e84:	fc 91       	ld	r31, X
    3e86:	15 97       	sbiw	r26, 0x05	; 5
    3e88:	8c 91       	ld	r24, X
    3e8a:	68 1b       	sub	r22, r24
    3e8c:	71 09       	sbc	r23, r1
    3e8e:	e6 0f       	add	r30, r22
    3e90:	f7 1f       	adc	r31, r23
u08  zoBufferRead(ZO_BUFFER *p,u08 index)
{
	u08 c;
	enterCritical();
	c = zoBufferReadIsr(p,index);
	exitCritical();
    3e92:	0f 90       	pop	r0
    3e94:	0f be       	out	0x3f, r0	; 63
	return c;
}
    3e96:	80 81       	ld	r24, Z
    3e98:	08 95       	ret

00003e9a <zoBufferInit>:
	p->ctr = 0;
	exitCritical();
}

bool zoBufferInit(ZO_BUFFER *p,u08 size)
{
    3e9a:	cf 93       	push	r28
    3e9c:	df 93       	push	r29
    3e9e:	ec 01       	movw	r28, r24
    3ea0:	86 2f       	mov	r24, r22
	bool success = FALSE;
	enterCritical();
    3ea2:	0f b6       	in	r0, 0x3f	; 63
    3ea4:	0f 92       	push	r0
    3ea6:	f8 94       	cli

	p->ctr = 0;						//initialize counter to 0
    3ea8:	19 82       	std	Y+1, r1	; 0x01
	p->size = size;					//store size
    3eaa:	68 83       	st	Y, r22
	p->data = (u08*)calloc(size,1);		//allocate memory for data
    3eac:	90 e0       	ldi	r25, 0x00	; 0
    3eae:	61 e0       	ldi	r22, 0x01	; 1
    3eb0:	70 e0       	ldi	r23, 0x00	; 0
    3eb2:	0e 94 e3 25 	call	0x4bc6	; 0x4bc6 <calloc>
    3eb6:	9f 83       	std	Y+7, r25	; 0x07
    3eb8:	8e 83       	std	Y+6, r24	; 0x06
	
	if( p->data != NULL )				//if allocation was successfull
    3eba:	8e 81       	ldd	r24, Y+6	; 0x06
    3ebc:	9f 81       	ldd	r25, Y+7	; 0x07
    3ebe:	89 2b       	or	r24, r25
    3ec0:	31 f4       	brne	.+12     	; 0x3ece <zoBufferInit+0x34>
    3ec2:	80 e0       	ldi	r24, 0x00	; 0
		p->pIn = p->data;	//initialize in pointer to start of data
		p->pOut = p->data;	//initialize out pinter to start of data
		success = TRUE;
	}

	exitCritical();
    3ec4:	0f 90       	pop	r0
    3ec6:	0f be       	out	0x3f, r0	; 63

	return success;
}
    3ec8:	df 91       	pop	r29
    3eca:	cf 91       	pop	r28
    3ecc:	08 95       	ret
	p->size = size;					//store size
	p->data = (u08*)calloc(size,1);		//allocate memory for data
	
	if( p->data != NULL )				//if allocation was successfull
	{
		p->pIn = p->data;	//initialize in pointer to start of data
    3ece:	8e 81       	ldd	r24, Y+6	; 0x06
    3ed0:	9f 81       	ldd	r25, Y+7	; 0x07
    3ed2:	9b 83       	std	Y+3, r25	; 0x03
    3ed4:	8a 83       	std	Y+2, r24	; 0x02
		p->pOut = p->data;	//initialize out pinter to start of data
    3ed6:	8e 81       	ldd	r24, Y+6	; 0x06
    3ed8:	9f 81       	ldd	r25, Y+7	; 0x07
    3eda:	9d 83       	std	Y+5, r25	; 0x05
    3edc:	8c 83       	std	Y+4, r24	; 0x04
    3ede:	8f ef       	ldi	r24, 0xFF	; 255
		success = TRUE;
	}

	exitCritical();
    3ee0:	0f 90       	pop	r0
    3ee2:	0f be       	out	0x3f, r0	; 63

	return success;
}
    3ee4:	df 91       	pop	r29
    3ee6:	cf 91       	pop	r28
    3ee8:	08 95       	ret

00003eea <zoBufferPut>:
	if(p->pIn == &p->data[p->size])	//wrap the pIn ptr
		p->pIn = &p->data[0];
}

void zoBufferPut(ZO_BUFFER *p,const u08 data)
{
    3eea:	dc 01       	movw	r26, r24
	enterCritical();
    3eec:	0f b6       	in	r0, 0x3f	; 63
    3eee:	0f 92       	push	r0
    3ef0:	f8 94       	cli
	return c;	
}

inline void zoBufferPutIsr(ZO_BUFFER *p,const u08 data)
{
	p->ctr++;
    3ef2:	11 96       	adiw	r26, 0x01	; 1
    3ef4:	8c 91       	ld	r24, X
    3ef6:	11 97       	sbiw	r26, 0x01	; 1
    3ef8:	8f 5f       	subi	r24, 0xFF	; 255
    3efa:	11 96       	adiw	r26, 0x01	; 1
    3efc:	8c 93       	st	X, r24
    3efe:	11 97       	sbiw	r26, 0x01	; 1
	*p->pIn++ = data;
    3f00:	12 96       	adiw	r26, 0x02	; 2
    3f02:	ed 91       	ld	r30, X+
    3f04:	fc 91       	ld	r31, X
    3f06:	13 97       	sbiw	r26, 0x03	; 3
    3f08:	61 93       	st	Z+, r22
    3f0a:	13 96       	adiw	r26, 0x03	; 3
    3f0c:	fc 93       	st	X, r31
    3f0e:	ee 93       	st	-X, r30
    3f10:	12 97       	sbiw	r26, 0x02	; 2
	if(p->pIn == &p->data[p->size])	//wrap the pIn ptr
    3f12:	12 96       	adiw	r26, 0x02	; 2
    3f14:	4d 91       	ld	r20, X+
    3f16:	5c 91       	ld	r21, X
    3f18:	13 97       	sbiw	r26, 0x03	; 3
    3f1a:	16 96       	adiw	r26, 0x06	; 6
    3f1c:	8d 91       	ld	r24, X+
    3f1e:	9c 91       	ld	r25, X
    3f20:	17 97       	sbiw	r26, 0x07	; 7
    3f22:	2c 91       	ld	r18, X
    3f24:	82 0f       	add	r24, r18
    3f26:	91 1d       	adc	r25, r1
    3f28:	48 17       	cp	r20, r24
    3f2a:	59 07       	cpc	r21, r25
    3f2c:	19 f0       	breq	.+6      	; 0x3f34 <zoBufferPut+0x4a>

void zoBufferPut(ZO_BUFFER *p,const u08 data)
{
	enterCritical();
	zoBufferPutIsr(p,data);
	exitCritical();
    3f2e:	0f 90       	pop	r0
    3f30:	0f be       	out	0x3f, r0	; 63
}
    3f32:	08 95       	ret
inline void zoBufferPutIsr(ZO_BUFFER *p,const u08 data)
{
	p->ctr++;
	*p->pIn++ = data;
	if(p->pIn == &p->data[p->size])	//wrap the pIn ptr
		p->pIn = &p->data[0];
    3f34:	16 96       	adiw	r26, 0x06	; 6
    3f36:	8d 91       	ld	r24, X+
    3f38:	9c 91       	ld	r25, X
    3f3a:	17 97       	sbiw	r26, 0x07	; 7
    3f3c:	13 96       	adiw	r26, 0x03	; 3
    3f3e:	9c 93       	st	X, r25
    3f40:	8e 93       	st	-X, r24
    3f42:	12 97       	sbiw	r26, 0x02	; 2

void zoBufferPut(ZO_BUFFER *p,const u08 data)
{
	enterCritical();
	zoBufferPutIsr(p,data);
	exitCritical();
    3f44:	0f 90       	pop	r0
    3f46:	0f be       	out	0x3f, r0	; 63
}
    3f48:	08 95       	ret

00003f4a <zoBufferGet>:
	
	return c;
}

u08  zoBufferGet(ZO_BUFFER *p)
{
    3f4a:	dc 01       	movw	r26, r24
	u08 c;
	
	enterCritical();
    3f4c:	0f b6       	in	r0, 0x3f	; 63
    3f4e:	0f 92       	push	r0
    3f50:	f8 94       	cli

inline u08  zoBufferGetIsr(ZO_BUFFER *p)
{
	u08 c;

	p->ctr--;							//decrement count of bytes in buffer
    3f52:	11 96       	adiw	r26, 0x01	; 1
    3f54:	8c 91       	ld	r24, X
    3f56:	11 97       	sbiw	r26, 0x01	; 1
    3f58:	81 50       	subi	r24, 0x01	; 1
    3f5a:	11 96       	adiw	r26, 0x01	; 1
    3f5c:	8c 93       	st	X, r24
    3f5e:	11 97       	sbiw	r26, 0x01	; 1
	c = *p->pOut++;					//get one piece of data
    3f60:	14 96       	adiw	r26, 0x04	; 4
    3f62:	ed 91       	ld	r30, X+
    3f64:	fc 91       	ld	r31, X
    3f66:	15 97       	sbiw	r26, 0x05	; 5
    3f68:	31 91       	ld	r19, Z+
    3f6a:	15 96       	adiw	r26, 0x05	; 5
    3f6c:	fc 93       	st	X, r31
    3f6e:	ee 93       	st	-X, r30
    3f70:	14 97       	sbiw	r26, 0x04	; 4
	if(p->pOut == &p->data[p->size])	//wrap pout pointer
    3f72:	14 96       	adiw	r26, 0x04	; 4
    3f74:	4d 91       	ld	r20, X+
    3f76:	5c 91       	ld	r21, X
    3f78:	15 97       	sbiw	r26, 0x05	; 5
    3f7a:	16 96       	adiw	r26, 0x06	; 6
    3f7c:	8d 91       	ld	r24, X+
    3f7e:	9c 91       	ld	r25, X
    3f80:	17 97       	sbiw	r26, 0x07	; 7
    3f82:	2c 91       	ld	r18, X
    3f84:	82 0f       	add	r24, r18
    3f86:	91 1d       	adc	r25, r1
    3f88:	48 17       	cp	r20, r24
    3f8a:	59 07       	cpc	r21, r25
    3f8c:	21 f0       	breq	.+8      	; 0x3f96 <zoBufferGet+0x4c>
{
	u08 c;
	
	enterCritical();
	c= zoBufferGetIsr(p);
	exitCritical();
    3f8e:	0f 90       	pop	r0
    3f90:	0f be       	out	0x3f, r0	; 63
	return c;	
}
    3f92:	83 2f       	mov	r24, r19
    3f94:	08 95       	ret
	u08 c;

	p->ctr--;							//decrement count of bytes in buffer
	c = *p->pOut++;					//get one piece of data
	if(p->pOut == &p->data[p->size])	//wrap pout pointer
		p->pOut = &p->data[0];
    3f96:	16 96       	adiw	r26, 0x06	; 6
    3f98:	8d 91       	ld	r24, X+
    3f9a:	9c 91       	ld	r25, X
    3f9c:	17 97       	sbiw	r26, 0x07	; 7
    3f9e:	15 96       	adiw	r26, 0x05	; 5
    3fa0:	9c 93       	st	X, r25
    3fa2:	8e 93       	st	-X, r24
    3fa4:	14 97       	sbiw	r26, 0x04	; 4
{
	u08 c;
	
	enterCritical();
	c= zoBufferGetIsr(p);
	exitCritical();
    3fa6:	0f 90       	pop	r0
    3fa8:	0f be       	out	0x3f, r0	; 63
	return c;	
}
    3faa:	83 2f       	mov	r24, r19
    3fac:	08 95       	ret

00003fae <zoIcpSetPrescaler>:
	sei();											//enable global interrupts
}

void zoIcpSetPrescaler(ZO_ICP_PRESCALE prescale)
{
	enterCritical();
    3fae:	0f b6       	in	r0, 0x3f	; 63
    3fb0:	0f 92       	push	r0
    3fb2:	f8 94       	cli
	TCCR1B = (TCCR1B & 0xF8) | prescale;
    3fb4:	e1 e8       	ldi	r30, 0x81	; 129
    3fb6:	f0 e0       	ldi	r31, 0x00	; 0
    3fb8:	90 81       	ld	r25, Z
    3fba:	98 7f       	andi	r25, 0xF8	; 248
    3fbc:	98 2b       	or	r25, r24
    3fbe:	90 83       	st	Z, r25
	exitCritical();
    3fc0:	0f 90       	pop	r0
    3fc2:	0f be       	out	0x3f, r0	; 63
}
    3fc4:	08 95       	ret

00003fc6 <zoIcpSetMode>:

void zoIcpSetMode(ZO_ICP_MODE mode)
{
	enterCritical();
    3fc6:	0f b6       	in	r0, 0x3f	; 63
    3fc8:	0f 92       	push	r0
    3fca:	f8 94       	cli

	IcpMode = mode;
    3fcc:	80 93 48 03 	sts	0x0348, r24

	DDRB &= ~_BV(PB0);								//configure PB0 as input
    3fd0:	20 98       	cbi	0x04, 0	; 4
	PORTB |= _BV(PB0);								//enable pull up
    3fd2:	28 9a       	sbi	0x05, 0	; 5

	if( mode == ZO_ICP_MODE_LOW_HIGH_LOW )
    3fd4:	81 30       	cpi	r24, 0x01	; 1
    3fd6:	41 f0       	breq	.+16     	; 0x3fe8 <zoIcpSetMode+0x22>
		TCCR1B |= _BV(6) ;		//configure edge select as per mode
	else
		TCCR1B &= ~_BV(6);
    3fd8:	80 91 81 00 	lds	r24, 0x0081
    3fdc:	8f 7b       	andi	r24, 0xBF	; 191
    3fde:	80 93 81 00 	sts	0x0081, r24

	exitCritical();
    3fe2:	0f 90       	pop	r0
    3fe4:	0f be       	out	0x3f, r0	; 63
}
    3fe6:	08 95       	ret

	DDRB &= ~_BV(PB0);								//configure PB0 as input
	PORTB |= _BV(PB0);								//enable pull up

	if( mode == ZO_ICP_MODE_LOW_HIGH_LOW )
		TCCR1B |= _BV(6) ;		//configure edge select as per mode
    3fe8:	80 91 81 00 	lds	r24, 0x0081
    3fec:	80 64       	ori	r24, 0x40	; 64
    3fee:	80 93 81 00 	sts	0x0081, r24
	else
		TCCR1B &= ~_BV(6);

	exitCritical();
    3ff2:	0f 90       	pop	r0
    3ff4:	0f be       	out	0x3f, r0	; 63
}
    3ff6:	08 95       	ret

00003ff8 <zoIcpAttachUserFunctionOnCapture>:

void zoIcpAttachUserFunctionOnCapture( void(*userFunc)(u16 timerTicks) )
{
	enterCritical();
    3ff8:	0f b6       	in	r0, 0x3f	; 63
    3ffa:	0f 92       	push	r0
    3ffc:	f8 94       	cli
	IcpUserFunction = userFunc;
    3ffe:	90 93 47 03 	sts	0x0347, r25
    4002:	80 93 46 03 	sts	0x0346, r24
	exitCritical();
    4006:	0f 90       	pop	r0
    4008:	0f be       	out	0x3f, r0	; 63
}
    400a:	08 95       	ret

0000400c <zoIcpAttachUserFunctionOnOverFlow>:

void zoIcpAttachUserFunctionOnOverFlow(void(*userFunc)(void))
{
	enterCritical();
    400c:	0f b6       	in	r0, 0x3f	; 63
    400e:	0f 92       	push	r0
    4010:	f8 94       	cli
	OvflUserFunction = userFunc;
    4012:	90 93 3c 03 	sts	0x033C, r25
    4016:	80 93 3b 03 	sts	0x033B, r24
	exitCritical();
    401a:	0f 90       	pop	r0
    401c:	0f be       	out	0x3f, r0	; 63
}
    401e:	08 95       	ret

00004020 <zoIcpAttachUserFunctionOnCaptureFailure>:

void zoIcpAttachUserFunctionOnCaptureFailure(void(*userFunc)(void))
{
	enterCritical();
    4020:	0f b6       	in	r0, 0x3f	; 63
    4022:	0f 92       	push	r0
    4024:	f8 94       	cli
	IcpFailedUserFunction = userFunc;
    4026:	90 93 45 03 	sts	0x0345, r25
    402a:	80 93 44 03 	sts	0x0344, r24
	exitCritical();
    402e:	0f 90       	pop	r0
    4030:	0f be       	out	0x3f, r0	; 63
}
    4032:	08 95       	ret

00004034 <zoIcpIsrEnable>:

void zoIcpIsrEnable(void)
{
	enterCritical();
    4034:	0f b6       	in	r0, 0x3f	; 63
    4036:	0f 92       	push	r0
    4038:	f8 94       	cli
	TCNT1 = 0x0000;
    403a:	10 92 85 00 	sts	0x0085, r1
    403e:	10 92 84 00 	sts	0x0084, r1
	ICR1 = 0x0000;
    4042:	10 92 87 00 	sts	0x0087, r1
    4046:	10 92 86 00 	sts	0x0086, r1
	exitCritical();
    404a:	0f 90       	pop	r0
    404c:	0f be       	out	0x3f, r0	; 63

	TIFR1 |= _BV(ICF1);								//clear ICF1 interrupt flag manually
    404e:	b5 9a       	sbi	0x16, 5	; 22
	TIMSK1 |= _BV(ICIE1);							//enable input capture interrupt
    4050:	ef e6       	ldi	r30, 0x6F	; 111
    4052:	f0 e0       	ldi	r31, 0x00	; 0
    4054:	80 81       	ld	r24, Z
    4056:	80 62       	ori	r24, 0x20	; 32
    4058:	80 83       	st	Z, r24
}
    405a:	08 95       	ret

0000405c <zoIcpInit>:
static void (*IcpFailedUserFunction)(void) = 0;

void zoIcpInit(void)
{
	//configure defaults
	zoIcpSetMode(ZO_ICP_MODE_DEFAULT);				//configure default mode
    405c:	81 e0       	ldi	r24, 0x01	; 1
    405e:	0e 94 e3 1f 	call	0x3fc6	; 0x3fc6 <zoIcpSetMode>
	sei();											//enable global interrupts
}

void zoIcpSetPrescaler(ZO_ICP_PRESCALE prescale)
{
	enterCritical();
    4062:	0f b6       	in	r0, 0x3f	; 63
    4064:	0f 92       	push	r0
    4066:	f8 94       	cli
	TCCR1B = (TCCR1B & 0xF8) | prescale;
    4068:	e1 e8       	ldi	r30, 0x81	; 129
    406a:	f0 e0       	ldi	r31, 0x00	; 0
    406c:	80 81       	ld	r24, Z
    406e:	88 7f       	andi	r24, 0xF8	; 248
    4070:	81 60       	ori	r24, 0x01	; 1
    4072:	80 83       	st	Z, r24
	exitCritical();
    4074:	0f 90       	pop	r0
    4076:	0f be       	out	0x3f, r0	; 63
	//configure defaults
	zoIcpSetMode(ZO_ICP_MODE_DEFAULT);				//configure default mode
	zoIcpSetPrescaler(ZO_ICP_PRESCALE_DEFAULT);		//configure default prescaler
	
	//initialize timer1 used for input capture
	TCCR1A = 0x00;									//all waveform generation disabled
    4078:	10 92 80 00 	sts	0x0080, r1
	TCCR1B |= _BV(ICNC1);							//enable input noise canceller
    407c:	e1 e8       	ldi	r30, 0x81	; 129
    407e:	f0 e0       	ldi	r31, 0x00	; 0
    4080:	80 81       	ld	r24, Z
    4082:	80 68       	ori	r24, 0x80	; 128
    4084:	80 83       	st	Z, r24
	
	zoIcpIsrEnable();	
    4086:	0e 94 1a 20 	call	0x4034	; 0x4034 <zoIcpIsrEnable>
	sei();											//enable global interrupts
    408a:	78 94       	sei
}
    408c:	08 95       	ret

0000408e <zoIcpIsrDisable>:
	TIMSK1 |= _BV(ICIE1);							//enable input capture interrupt
}

void zoIcpIsrDisable(void)
{
	TIMSK1 &= ~_BV(5);								//disable input capture interrupt
    408e:	ef e6       	ldi	r30, 0x6F	; 111
    4090:	f0 e0       	ldi	r31, 0x00	; 0
    4092:	80 81       	ld	r24, Z
    4094:	8f 7d       	andi	r24, 0xDF	; 223
    4096:	80 83       	st	Z, r24
	TIFR1 |= _BV(5);								//clear ICF1 interrupt flag manually
    4098:	b5 9a       	sbi	0x16, 5	; 22

	enterCritical();
    409a:	0f b6       	in	r0, 0x3f	; 63
    409c:	0f 92       	push	r0
    409e:	f8 94       	cli
	TCNT1 = 0x0000;
    40a0:	10 92 85 00 	sts	0x0085, r1
    40a4:	10 92 84 00 	sts	0x0084, r1
	ICR1 = 0x0000;
    40a8:	10 92 87 00 	sts	0x0087, r1
    40ac:	10 92 86 00 	sts	0x0086, r1
	exitCritical();
    40b0:	0f 90       	pop	r0
    40b2:	0f be       	out	0x3f, r0	; 63
}
    40b4:	08 95       	ret

000040b6 <zoIcpOverFlowIsrEnable>:

inline void zoIcpOverFlowIsrEnable(void)
{
	TIMSK1 |= _BV(TOIE1); 
    40b6:	ef e6       	ldi	r30, 0x6F	; 111
    40b8:	f0 e0       	ldi	r31, 0x00	; 0
    40ba:	80 81       	ld	r24, Z
    40bc:	81 60       	ori	r24, 0x01	; 1
    40be:	80 83       	st	Z, r24
}
    40c0:	08 95       	ret

000040c2 <zoIcpOverFlowIsrDisable>:

inline void zoIcpOverFlowIsrDisable(void)
{
	TIMSK1 &= ~_BV(TOIE1);
    40c2:	ef e6       	ldi	r30, 0x6F	; 111
    40c4:	f0 e0       	ldi	r31, 0x00	; 0
    40c6:	80 81       	ld	r24, Z
    40c8:	8e 7f       	andi	r24, 0xFE	; 254
    40ca:	80 83       	st	Z, r24
}
    40cc:	08 95       	ret

000040ce <zoIcpGetPulseWidh>:

bool zoIcpGetPulseWidh(u16 *icpTimerTicks)
{
    40ce:	fc 01       	movw	r30, r24
	enterCritical();
    40d0:	0f b6       	in	r0, 0x3f	; 63
    40d2:	0f 92       	push	r0
    40d4:	f8 94       	cli
	*icpTimerTicks = IcpTimerTicks;
    40d6:	80 91 42 03 	lds	r24, 0x0342
    40da:	90 91 43 03 	lds	r25, 0x0343
    40de:	91 83       	std	Z+1, r25	; 0x01
    40e0:	80 83       	st	Z, r24
	exitCritical();
    40e2:	0f 90       	pop	r0
    40e4:	0f be       	out	0x3f, r0	; 63

	if( *icpTimerTicks != 0 )
    40e6:	89 2b       	or	r24, r25
    40e8:	11 f4       	brne	.+4      	; 0x40ee <zoIcpGetPulseWidh+0x20>
    40ea:	80 e0       	ldi	r24, 0x00	; 0
    40ec:	08 95       	ret
    40ee:	8f ef       	ldi	r24, 0xFF	; 255
		return TRUE;
	else
		return FALSE;
}
    40f0:	08 95       	ret

000040f2 <__vector_10>:

ISR(TIMER1_CAPT_vect)
{
    40f2:	1f 92       	push	r1
    40f4:	0f 92       	push	r0
    40f6:	0f b6       	in	r0, 0x3f	; 63
    40f8:	0f 92       	push	r0
    40fa:	11 24       	eor	r1, r1
    40fc:	2f 93       	push	r18
    40fe:	3f 93       	push	r19
    4100:	4f 93       	push	r20
    4102:	5f 93       	push	r21
    4104:	6f 93       	push	r22
    4106:	7f 93       	push	r23
    4108:	8f 93       	push	r24
    410a:	9f 93       	push	r25
    410c:	af 93       	push	r26
    410e:	bf 93       	push	r27
    4110:	ef 93       	push	r30
    4112:	ff 93       	push	r31
	u16 icr;

	icr = ICR1;
    4114:	40 91 86 00 	lds	r20, 0x0086
    4118:	50 91 87 00 	lds	r21, 0x0087

	if( (PINB & 0x01) == IcpMode  )
    411c:	83 b1       	in	r24, 0x03	; 3
    411e:	20 91 48 03 	lds	r18, 0x0348
    4122:	90 e0       	ldi	r25, 0x00	; 0
    4124:	81 70       	andi	r24, 0x01	; 1
    4126:	90 70       	andi	r25, 0x00	; 0
    4128:	30 e0       	ldi	r19, 0x00	; 0
    412a:	82 17       	cp	r24, r18
    412c:	93 07       	cpc	r25, r19
    412e:	09 f4       	brne	.+2      	; 0x4132 <__vector_10+0x40>
    4130:	57 c0       	rjmp	.+174    	; 0x41e0 <__vector_10+0xee>

		HighLow++;
	}
	else
	{
		PulseOffTicks = icr;
    4132:	50 93 41 03 	sts	0x0341, r21
    4136:	40 93 40 03 	sts	0x0340, r20
		IcpTimerTicks = PulseOffTicks - PulseOnTicks;
    413a:	80 91 40 03 	lds	r24, 0x0340
    413e:	90 91 41 03 	lds	r25, 0x0341
    4142:	20 91 3d 03 	lds	r18, 0x033D
    4146:	30 91 3e 03 	lds	r19, 0x033E
    414a:	82 1b       	sub	r24, r18
    414c:	93 0b       	sbc	r25, r19
    414e:	90 93 43 03 	sts	0x0343, r25
    4152:	80 93 42 03 	sts	0x0342, r24

		HighLow--;
    4156:	80 91 3f 03 	lds	r24, 0x033F
    415a:	81 50       	subi	r24, 0x01	; 1
    415c:	80 93 3f 03 	sts	0x033F, r24

		if ( IcpMode == ZO_ICP_MODE_LOW_HIGH_LOW )
    4160:	80 91 48 03 	lds	r24, 0x0348
    4164:	81 30       	cpi	r24, 0x01	; 1
    4166:	b1 f1       	breq	.+108    	; 0x41d4 <__vector_10+0xe2>
			TCCR1B |= _BV(6);
		else
			TCCR1B &= ~_BV(6);
    4168:	80 91 81 00 	lds	r24, 0x0081
    416c:	8f 7b       	andi	r24, 0xBF	; 191
    416e:	80 93 81 00 	sts	0x0081, r24
		
		TCNT1 = 0x0000;
    4172:	10 92 85 00 	sts	0x0085, r1
    4176:	10 92 84 00 	sts	0x0084, r1

		if( ( HighLow != 0 ) || ( PulseOnTicks > PulseOffTicks ) )							
    417a:	80 91 3f 03 	lds	r24, 0x033F
    417e:	88 23       	and	r24, r24
    4180:	59 f4       	brne	.+22     	; 0x4198 <__vector_10+0xa6>
    4182:	20 91 3d 03 	lds	r18, 0x033D
    4186:	30 91 3e 03 	lds	r19, 0x033E
    418a:	80 91 40 03 	lds	r24, 0x0340
    418e:	90 91 41 03 	lds	r25, 0x0341
    4192:	82 17       	cp	r24, r18
    4194:	93 07       	cpc	r25, r19
    4196:	b8 f5       	brcc	.+110    	; 0x4206 <__vector_10+0x114>
		{
			HighLow = 0;							//set up for next time
    4198:	10 92 3f 03 	sts	0x033F, r1
			IcpTimerTicks = 0;						//indicate it by zero pulse width
    419c:	10 92 43 03 	sts	0x0343, r1
    41a0:	10 92 42 03 	sts	0x0342, r1
			if(IcpFailedUserFunction)
    41a4:	e0 91 44 03 	lds	r30, 0x0344
    41a8:	f0 91 45 03 	lds	r31, 0x0345
    41ac:	30 97       	sbiw	r30, 0x00	; 0
    41ae:	09 f0       	breq	.+2      	; 0x41b2 <__vector_10+0xc0>
				IcpFailedUserFunction();
    41b0:	09 95       	icall
		{
			if(IcpUserFunction)
				IcpUserFunction(IcpTimerTicks);
		}
	}
}
    41b2:	ff 91       	pop	r31
    41b4:	ef 91       	pop	r30
    41b6:	bf 91       	pop	r27
    41b8:	af 91       	pop	r26
    41ba:	9f 91       	pop	r25
    41bc:	8f 91       	pop	r24
    41be:	7f 91       	pop	r23
    41c0:	6f 91       	pop	r22
    41c2:	5f 91       	pop	r21
    41c4:	4f 91       	pop	r20
    41c6:	3f 91       	pop	r19
    41c8:	2f 91       	pop	r18
    41ca:	0f 90       	pop	r0
    41cc:	0f be       	out	0x3f, r0	; 63
    41ce:	0f 90       	pop	r0
    41d0:	1f 90       	pop	r1
    41d2:	18 95       	reti
		IcpTimerTicks = PulseOffTicks - PulseOnTicks;

		HighLow--;

		if ( IcpMode == ZO_ICP_MODE_LOW_HIGH_LOW )
			TCCR1B |= _BV(6);
    41d4:	80 91 81 00 	lds	r24, 0x0081
    41d8:	80 64       	ori	r24, 0x40	; 64
    41da:	80 93 81 00 	sts	0x0081, r24
    41de:	c9 cf       	rjmp	.-110    	; 0x4172 <__vector_10+0x80>

	icr = ICR1;

	if( (PINB & 0x01) == IcpMode  )
	{
		PulseOnTicks = icr;
    41e0:	50 93 3e 03 	sts	0x033E, r21
    41e4:	40 93 3d 03 	sts	0x033D, r20

		if ( IcpMode == ZO_ICP_MODE_LOW_HIGH_LOW )
    41e8:	80 91 48 03 	lds	r24, 0x0348
    41ec:	81 30       	cpi	r24, 0x01	; 1
    41ee:	b9 f0       	breq	.+46     	; 0x421e <__vector_10+0x12c>
			TCCR1B &= ~_BV(6);
		else
			TCCR1B |= _BV(6);
    41f0:	80 91 81 00 	lds	r24, 0x0081
    41f4:	80 64       	ori	r24, 0x40	; 64
    41f6:	80 93 81 00 	sts	0x0081, r24

		HighLow++;
    41fa:	80 91 3f 03 	lds	r24, 0x033F
    41fe:	8f 5f       	subi	r24, 0xFF	; 255
    4200:	80 93 3f 03 	sts	0x033F, r24
    4204:	d6 cf       	rjmp	.-84     	; 0x41b2 <__vector_10+0xc0>
			if(IcpFailedUserFunction)
				IcpFailedUserFunction();
		}
		else
		{
			if(IcpUserFunction)
    4206:	e0 91 46 03 	lds	r30, 0x0346
    420a:	f0 91 47 03 	lds	r31, 0x0347
    420e:	30 97       	sbiw	r30, 0x00	; 0
    4210:	81 f2       	breq	.-96     	; 0x41b2 <__vector_10+0xc0>
				IcpUserFunction(IcpTimerTicks);
    4212:	80 91 42 03 	lds	r24, 0x0342
    4216:	90 91 43 03 	lds	r25, 0x0343
    421a:	09 95       	icall
    421c:	ca cf       	rjmp	.-108    	; 0x41b2 <__vector_10+0xc0>
	if( (PINB & 0x01) == IcpMode  )
	{
		PulseOnTicks = icr;

		if ( IcpMode == ZO_ICP_MODE_LOW_HIGH_LOW )
			TCCR1B &= ~_BV(6);
    421e:	80 91 81 00 	lds	r24, 0x0081
    4222:	8f 7b       	andi	r24, 0xBF	; 191
    4224:	80 93 81 00 	sts	0x0081, r24
    4228:	e8 cf       	rjmp	.-48     	; 0x41fa <__vector_10+0x108>

0000422a <__vector_13>:
	}
}


ISR(TIMER1_OVF_vect)
{
    422a:	1f 92       	push	r1
    422c:	0f 92       	push	r0
    422e:	0f b6       	in	r0, 0x3f	; 63
    4230:	0f 92       	push	r0
    4232:	11 24       	eor	r1, r1
    4234:	2f 93       	push	r18
    4236:	3f 93       	push	r19
    4238:	4f 93       	push	r20
    423a:	5f 93       	push	r21
    423c:	6f 93       	push	r22
    423e:	7f 93       	push	r23
    4240:	8f 93       	push	r24
    4242:	9f 93       	push	r25
    4244:	af 93       	push	r26
    4246:	bf 93       	push	r27
    4248:	ef 93       	push	r30
    424a:	ff 93       	push	r31
	if(OvflUserFunction)
    424c:	e0 91 3b 03 	lds	r30, 0x033B
    4250:	f0 91 3c 03 	lds	r31, 0x033C
    4254:	30 97       	sbiw	r30, 0x00	; 0
    4256:	09 f0       	breq	.+2      	; 0x425a <__vector_13+0x30>
		OvflUserFunction();
    4258:	09 95       	icall
    425a:	ff 91       	pop	r31
    425c:	ef 91       	pop	r30
    425e:	bf 91       	pop	r27
    4260:	af 91       	pop	r26
    4262:	9f 91       	pop	r25
    4264:	8f 91       	pop	r24
    4266:	7f 91       	pop	r23
    4268:	6f 91       	pop	r22
    426a:	5f 91       	pop	r21
    426c:	4f 91       	pop	r20
    426e:	3f 91       	pop	r19
    4270:	2f 91       	pop	r18
    4272:	0f 90       	pop	r0
    4274:	0f be       	out	0x3f, r0	; 63
    4276:	0f 90       	pop	r0
    4278:	1f 90       	pop	r1
    427a:	18 95       	reti

0000427c <icpFailedInterruptHandler>:

static volatile bool goingup = TRUE;

void icpFailedInterruptHandler(void)
{
	IsRcServoStarted = FALSE;
    427c:	10 92 49 03 	sts	0x0349, r1
	ValidCommandCount = 0;
    4280:	10 92 53 03 	sts	0x0353, r1
	//Sms.Control.State = ZO_SMS_CONTROL_NO_CONTROL;
	//zoMotorSetState(FALSE);
}
    4284:	08 95       	ret

00004286 <icpTimerOverFlowInterruptHandler>:

void icpTimerOverFlowInterruptHandler(void)
{
	IsRcServoStarted = FALSE;
    4286:	10 92 49 03 	sts	0x0349, r1
	ValidCommandCount = 0;
    428a:	10 92 53 03 	sts	0x0353, r1
	//Sms.Control.State = ZO_SMS_CONTROL_NO_CONTROL;
	//zoMotorSetState(FALSE);
}
    428e:	08 95       	ret

00004290 <zoProtocolRcServoParse>:
	zoIcpAttachUserFunctionOnCaptureFailure(icpFailedInterruptHandler);
	zoIcpAttachUserFunctionOnOverFlow(icpTimerOverFlowInterruptHandler);
}

void zoProtocolRcServoParse(void)
{
    4290:	df 93       	push	r29
    4292:	cf 93       	push	r28
    4294:	00 d0       	rcall	.+0      	; 0x4296 <zoProtocolRcServoParse+0x6>
    4296:	cd b7       	in	r28, 0x3d	; 61
    4298:	de b7       	in	r29, 0x3e	; 62
	s16 commandPos;
	u16 pulseWidth;
	
	if( IsRcServoStarted && IsNewRcServoSetPoint )
    429a:	80 91 49 03 	lds	r24, 0x0349
    429e:	88 23       	and	r24, r24
    42a0:	21 f0       	breq	.+8      	; 0x42aa <zoProtocolRcServoParse+0x1a>
    42a2:	80 91 4a 03 	lds	r24, 0x034A
    42a6:	88 23       	and	r24, r24
    42a8:	29 f4       	brne	.+10     	; 0x42b4 <zoProtocolRcServoParse+0x24>
			
			//give the setpoint
			Sms.Pid.SetPoint = (s32)PrevPositionCommand;
		}
	}
}
    42aa:	0f 90       	pop	r0
    42ac:	0f 90       	pop	r0
    42ae:	cf 91       	pop	r28
    42b0:	df 91       	pop	r29
    42b2:	08 95       	ret
	s16 commandPos;
	u16 pulseWidth;
	
	if( IsRcServoStarted && IsNewRcServoSetPoint )
	{
		IsNewRcServoSetPoint = FALSE;
    42b4:	10 92 4a 03 	sts	0x034A, r1
		if(!zoIcpGetPulseWidh(&pulseWidth))
    42b8:	ce 01       	movw	r24, r28
    42ba:	01 96       	adiw	r24, 0x01	; 1
    42bc:	0e 94 67 20 	call	0x40ce	; 0x40ce <zoIcpGetPulseWidh>
    42c0:	88 23       	and	r24, r24
    42c2:	99 f3       	breq	.-26     	; 0x42aa <zoProtocolRcServoParse+0x1a>
			return;
	
		if( ( pulseWidth > 1200 ) && ( pulseWidth < 6300 ) )
    42c4:	69 81       	ldd	r22, Y+1	; 0x01
    42c6:	7a 81       	ldd	r23, Y+2	; 0x02
    42c8:	cb 01       	movw	r24, r22
    42ca:	81 5b       	subi	r24, 0xB1	; 177
    42cc:	94 40       	sbci	r25, 0x04	; 4
    42ce:	8b 5e       	subi	r24, 0xEB	; 235
    42d0:	93 41       	sbci	r25, 0x13	; 19
    42d2:	58 f7       	brcc	.-42     	; 0x42aa <zoProtocolRcServoParse+0x1a>
		{
			//convert pulse to ticks
			commandPos = (s16)( CLOCK_TICKS_TO_ENCODER_TICKS_FACTOR * 
    42d4:	80 e0       	ldi	r24, 0x00	; 0
    42d6:	90 e0       	ldi	r25, 0x00	; 0
    42d8:	0e 94 28 24 	call	0x4850	; 0x4850 <__floatunsisf>
    42dc:	27 e1       	ldi	r18, 0x17	; 23
    42de:	37 eb       	ldi	r19, 0xB7	; 183
    42e0:	41 e5       	ldi	r20, 0x51	; 81
    42e2:	5f e3       	ldi	r21, 0x3F	; 63
    42e4:	0e 94 b6 24 	call	0x496c	; 0x496c <__mulsf3>
    42e8:	0e 94 f7 23 	call	0x47ee	; 0x47ee <__fixsfsi>
				( (double)pulseWidth ) );

			//absolute positioning around zero
			if(InitialPos <= 2048)
    42ec:	80 91 4b 03 	lds	r24, 0x034B
    42f0:	90 91 4c 03 	lds	r25, 0x034C
    42f4:	81 50       	subi	r24, 0x01	; 1
    42f6:	98 40       	sbci	r25, 0x08	; 8
    42f8:	08 f4       	brcc	.+2      	; 0x42fc <zoProtocolRcServoParse+0x6c>
    42fa:	7f c0       	rjmp	.+254    	; 0x43fa <zoProtocolRcServoParse+0x16a>
				commandPos = commandPos - InitialPos - 3072;
			else
				commandPos = commandPos - InitialPos + 1024;
    42fc:	80 91 4b 03 	lds	r24, 0x034B
    4300:	90 91 4c 03 	lds	r25, 0x034C
    4304:	68 1b       	sub	r22, r24
    4306:	79 0b       	sbc	r23, r25
    4308:	60 50       	subi	r22, 0x00	; 0
    430a:	7c 4f       	sbci	r23, 0xFC	; 252

			//proceed values in time
			PrevPrevPositionCommand = PrevPositionCommand;
    430c:	80 91 4d 03 	lds	r24, 0x034D
    4310:	90 91 4e 03 	lds	r25, 0x034E
    4314:	90 93 50 03 	sts	0x0350, r25
    4318:	80 93 4f 03 	sts	0x034F, r24
			PrevPositionCommand = PositionCommand;
    431c:	80 91 51 03 	lds	r24, 0x0351
    4320:	90 91 52 03 	lds	r25, 0x0352
    4324:	90 93 4e 03 	sts	0x034E, r25
    4328:	80 93 4d 03 	sts	0x034D, r24
			PositionCommand = (PositionCommand + commandPos)>>1;	//weighted running average
    432c:	80 91 51 03 	lds	r24, 0x0351
    4330:	90 91 52 03 	lds	r25, 0x0352
    4334:	68 0f       	add	r22, r24
    4336:	79 1f       	adc	r23, r25
    4338:	75 95       	asr	r23
    433a:	67 95       	ror	r22
    433c:	70 93 52 03 	sts	0x0352, r23
    4340:	60 93 51 03 	sts	0x0351, r22

			//anti-spike filter
			if( ( abs(PositionCommand - PrevPositionCommand) > abs(PositionCommand - PrevPrevPositionCommand) ) 
    4344:	20 91 51 03 	lds	r18, 0x0351
    4348:	30 91 52 03 	lds	r19, 0x0352
    434c:	80 91 4d 03 	lds	r24, 0x034D
    4350:	90 91 4e 03 	lds	r25, 0x034E
    4354:	60 91 51 03 	lds	r22, 0x0351
    4358:	70 91 52 03 	lds	r23, 0x0352
    435c:	40 91 4f 03 	lds	r20, 0x034F
    4360:	50 91 50 03 	lds	r21, 0x0350
    4364:	28 1b       	sub	r18, r24
    4366:	39 0b       	sbc	r19, r25
    4368:	37 fd       	sbrc	r19, 7
    436a:	54 c0       	rjmp	.+168    	; 0x4414 <zoProtocolRcServoParse+0x184>
    436c:	cb 01       	movw	r24, r22
    436e:	84 1b       	sub	r24, r20
    4370:	95 0b       	sbc	r25, r21
    4372:	97 fd       	sbrc	r25, 7
    4374:	4b c0       	rjmp	.+150    	; 0x440c <zoProtocolRcServoParse+0x17c>
    4376:	82 17       	cp	r24, r18
    4378:	93 07       	cpc	r25, r19
    437a:	e4 f0       	brlt	.+56     	; 0x43b4 <zoProtocolRcServoParse+0x124>
    437c:	20 91 4f 03 	lds	r18, 0x034F
    4380:	30 91 50 03 	lds	r19, 0x0350
    4384:	80 91 4d 03 	lds	r24, 0x034D
    4388:	90 91 4e 03 	lds	r25, 0x034E
    438c:	60 91 51 03 	lds	r22, 0x0351
    4390:	70 91 52 03 	lds	r23, 0x0352
    4394:	40 91 4f 03 	lds	r20, 0x034F
    4398:	50 91 50 03 	lds	r21, 0x0350
    439c:	28 1b       	sub	r18, r24
    439e:	39 0b       	sbc	r19, r25
    43a0:	37 fd       	sbrc	r19, 7
    43a2:	43 c0       	rjmp	.+134    	; 0x442a <zoProtocolRcServoParse+0x19a>
    43a4:	cb 01       	movw	r24, r22
    43a6:	84 1b       	sub	r24, r20
    43a8:	95 0b       	sbc	r25, r21
    43aa:	97 fd       	sbrc	r25, 7
    43ac:	3a c0       	rjmp	.+116    	; 0x4422 <zoProtocolRcServoParse+0x192>
    43ae:	82 17       	cp	r24, r18
    43b0:	93 07       	cpc	r25, r19
    43b2:	94 f4       	brge	.+36     	; 0x43d8 <zoProtocolRcServoParse+0x148>
				|| ( abs(PrevPrevPositionCommand - PrevPositionCommand) > abs(PositionCommand - PrevPrevPositionCommand) )  )
				PrevPositionCommand = (PositionCommand + PrevPrevPositionCommand)/2;
    43b4:	80 91 51 03 	lds	r24, 0x0351
    43b8:	90 91 52 03 	lds	r25, 0x0352
    43bc:	20 91 4f 03 	lds	r18, 0x034F
    43c0:	30 91 50 03 	lds	r19, 0x0350
    43c4:	28 0f       	add	r18, r24
    43c6:	39 1f       	adc	r19, r25
    43c8:	37 fd       	sbrc	r19, 7
    43ca:	28 c0       	rjmp	.+80     	; 0x441c <zoProtocolRcServoParse+0x18c>
    43cc:	35 95       	asr	r19
    43ce:	27 95       	ror	r18
    43d0:	30 93 4e 03 	sts	0x034E, r19
    43d4:	20 93 4d 03 	sts	0x034D, r18
			
			//give the setpoint
			Sms.Pid.SetPoint = (s32)PrevPositionCommand;
    43d8:	80 91 4d 03 	lds	r24, 0x034D
    43dc:	90 91 4e 03 	lds	r25, 0x034E
    43e0:	aa 27       	eor	r26, r26
    43e2:	97 fd       	sbrc	r25, 7
    43e4:	a0 95       	com	r26
    43e6:	ba 2f       	mov	r27, r26
    43e8:	80 93 57 01 	sts	0x0157, r24
    43ec:	90 93 58 01 	sts	0x0158, r25
    43f0:	a0 93 59 01 	sts	0x0159, r26
    43f4:	b0 93 5a 01 	sts	0x015A, r27
    43f8:	58 cf       	rjmp	.-336    	; 0x42aa <zoProtocolRcServoParse+0x1a>
			commandPos = (s16)( CLOCK_TICKS_TO_ENCODER_TICKS_FACTOR * 
				( (double)pulseWidth ) );

			//absolute positioning around zero
			if(InitialPos <= 2048)
				commandPos = commandPos - InitialPos - 3072;
    43fa:	80 91 4b 03 	lds	r24, 0x034B
    43fe:	90 91 4c 03 	lds	r25, 0x034C
    4402:	68 1b       	sub	r22, r24
    4404:	79 0b       	sbc	r23, r25
    4406:	60 50       	subi	r22, 0x00	; 0
    4408:	7c 40       	sbci	r23, 0x0C	; 12
    440a:	80 cf       	rjmp	.-256    	; 0x430c <zoProtocolRcServoParse+0x7c>
			PrevPrevPositionCommand = PrevPositionCommand;
			PrevPositionCommand = PositionCommand;
			PositionCommand = (PositionCommand + commandPos)>>1;	//weighted running average

			//anti-spike filter
			if( ( abs(PositionCommand - PrevPositionCommand) > abs(PositionCommand - PrevPrevPositionCommand) ) 
    440c:	90 95       	com	r25
    440e:	81 95       	neg	r24
    4410:	9f 4f       	sbci	r25, 0xFF	; 255
    4412:	b1 cf       	rjmp	.-158    	; 0x4376 <zoProtocolRcServoParse+0xe6>
    4414:	30 95       	com	r19
    4416:	21 95       	neg	r18
    4418:	3f 4f       	sbci	r19, 0xFF	; 255
    441a:	a8 cf       	rjmp	.-176    	; 0x436c <zoProtocolRcServoParse+0xdc>
				|| ( abs(PrevPrevPositionCommand - PrevPositionCommand) > abs(PositionCommand - PrevPrevPositionCommand) )  )
				PrevPositionCommand = (PositionCommand + PrevPrevPositionCommand)/2;
    441c:	2f 5f       	subi	r18, 0xFF	; 255
    441e:	3f 4f       	sbci	r19, 0xFF	; 255
    4420:	d5 cf       	rjmp	.-86     	; 0x43cc <zoProtocolRcServoParse+0x13c>
			PrevPrevPositionCommand = PrevPositionCommand;
			PrevPositionCommand = PositionCommand;
			PositionCommand = (PositionCommand + commandPos)>>1;	//weighted running average

			//anti-spike filter
			if( ( abs(PositionCommand - PrevPositionCommand) > abs(PositionCommand - PrevPrevPositionCommand) ) 
    4422:	90 95       	com	r25
    4424:	81 95       	neg	r24
    4426:	9f 4f       	sbci	r25, 0xFF	; 255
    4428:	c2 cf       	rjmp	.-124    	; 0x43ae <zoProtocolRcServoParse+0x11e>
    442a:	30 95       	com	r19
    442c:	21 95       	neg	r18
    442e:	3f 4f       	sbci	r19, 0xFF	; 255
    4430:	b9 cf       	rjmp	.-142    	; 0x43a4 <zoProtocolRcServoParse+0x114>

00004432 <zoProtocolRcServoInit>:
	}
}

void zoProtocolRcServoInit(void)
{
	zoIcpInit();
    4432:	0e 94 2e 20 	call	0x405c	; 0x405c <zoIcpInit>
	zoIcpSetPrescaler(ZO_ICP_PRESCALE_8);
    4436:	82 e0       	ldi	r24, 0x02	; 2
    4438:	0e 94 d7 1f 	call	0x3fae	; 0x3fae <zoIcpSetPrescaler>

	enterCritical();
    443c:	0f b6       	in	r0, 0x3f	; 63
    443e:	0f 92       	push	r0
    4440:	f8 94       	cli
	InitialPos = 0;
    4442:	10 92 4c 03 	sts	0x034C, r1
    4446:	10 92 4b 03 	sts	0x034B, r1
	PositionCommand = 0;
    444a:	10 92 52 03 	sts	0x0352, r1
    444e:	10 92 51 03 	sts	0x0351, r1
	ValidCommandCount = 0;
    4452:	10 92 53 03 	sts	0x0353, r1
	IsRcServoStarted = FALSE;
    4456:	10 92 49 03 	sts	0x0349, r1
	IsNewRcServoSetPoint = FALSE;
    445a:	10 92 4a 03 	sts	0x034A, r1
	exitCritical();
    445e:	0f 90       	pop	r0
    4460:	0f be       	out	0x3f, r0	; 63

	zoIcpAttachUserFunctionOnCapture(icpInterruptHandler);
    4462:	8e e3       	ldi	r24, 0x3E	; 62
    4464:	92 e2       	ldi	r25, 0x22	; 34
    4466:	0e 94 fc 1f 	call	0x3ff8	; 0x3ff8 <zoIcpAttachUserFunctionOnCapture>
	zoIcpAttachUserFunctionOnCaptureFailure(icpFailedInterruptHandler);
    446a:	8e e3       	ldi	r24, 0x3E	; 62
    446c:	91 e2       	ldi	r25, 0x21	; 33
    446e:	0e 94 10 20 	call	0x4020	; 0x4020 <zoIcpAttachUserFunctionOnCaptureFailure>
	zoIcpAttachUserFunctionOnOverFlow(icpTimerOverFlowInterruptHandler);
    4472:	83 e4       	ldi	r24, 0x43	; 67
    4474:	91 e2       	ldi	r25, 0x21	; 33
    4476:	0e 94 06 20 	call	0x400c	; 0x400c <zoIcpAttachUserFunctionOnOverFlow>
}
    447a:	08 95       	ret

0000447c <icpInterruptHandler>:
	//zoMotorSetState(FALSE);
}

void icpInterruptHandler(u16 pulseWidth)
{
	if( IsRcServoStarted )
    447c:	80 91 49 03 	lds	r24, 0x0349
    4480:	88 23       	and	r24, r24
    4482:	49 f4       	brne	.+18     	; 0x4496 <icpInterruptHandler+0x1a>
		IsNewRcServoSetPoint = TRUE;
	else
	{
		if( ValidCommandCount++ >= 10 )
    4484:	80 91 53 03 	lds	r24, 0x0353
    4488:	8f 5f       	subi	r24, 0xFF	; 255
    448a:	80 93 53 03 	sts	0x0353, r24
    448e:	81 50       	subi	r24, 0x01	; 1
    4490:	8a 30       	cpi	r24, 0x0A	; 10
    4492:	28 f4       	brcc	.+10     	; 0x449e <icpInterruptHandler+0x22>
    4494:	08 95       	ret
}

void icpInterruptHandler(u16 pulseWidth)
{
	if( IsRcServoStarted )
		IsNewRcServoSetPoint = TRUE;
    4496:	8f ef       	ldi	r24, 0xFF	; 255
    4498:	80 93 4a 03 	sts	0x034A, r24
    449c:	08 95       	ret
	else
	{
		if( ValidCommandCount++ >= 10 )
		{
			Sms.BufferdSetPoint.type = ZO_SMS_SETPOINT_NONE;
    449e:	10 92 61 01 	sts	0x0161, r1
			zoEncoderReset();
    44a2:	0e 94 0c 04 	call	0x818	; 0x818 <zoEncoderReset>
			Sms.Pid.PrevError = 0;
    44a6:	10 92 4b 01 	sts	0x014B, r1
    44aa:	10 92 4c 01 	sts	0x014C, r1
    44ae:	10 92 4d 01 	sts	0x014D, r1
    44b2:	10 92 4e 01 	sts	0x014E, r1
			Sms.Pid.Integral = 0;
    44b6:	10 92 4f 01 	sts	0x014F, r1
    44ba:	10 92 50 01 	sts	0x0150, r1
    44be:	10 92 51 01 	sts	0x0151, r1
    44c2:	10 92 52 01 	sts	0x0152, r1
			Sms.Pid.SetPoint = zoEncoderGetPos();
    44c6:	0e 94 4a 04 	call	0x894	; 0x894 <zoEncoderGetPos>
    44ca:	60 93 57 01 	sts	0x0157, r22
    44ce:	70 93 58 01 	sts	0x0158, r23
    44d2:	80 93 59 01 	sts	0x0159, r24
    44d6:	90 93 5a 01 	sts	0x015A, r25
			zoMotorSetState(TRUE);
    44da:	8f ef       	ldi	r24, 0xFF	; 255
    44dc:	0e 94 96 05 	call	0xb2c	; 0xb2c <zoMotorSetState>
			InitialPos = zoEncoderGetPosAbsolute();
    44e0:	0e 94 51 03 	call	0x6a2	; 0x6a2 <zoEncoderGetPosAbsolute>
    44e4:	90 93 4c 03 	sts	0x034C, r25
    44e8:	80 93 4b 03 	sts	0x034B, r24
			Sms.Control.State = ZO_SMS_CONTROL_POSITION_CONTROL;
    44ec:	81 e0       	ldi	r24, 0x01	; 1
    44ee:	80 93 03 01 	sts	0x0103, r24
			IsRcServoStarted = TRUE;
    44f2:	8f ef       	ldi	r24, 0xFF	; 255
    44f4:	80 93 49 03 	sts	0x0349, r24
			ValidCommandCount = 0;
    44f8:	10 92 53 03 	sts	0x0353, r1
    44fc:	08 95       	ret

000044fe <main>:

#include "zoUart.h"
#include <util/delay.h>

int main(void)
{
    44fe:	af 92       	push	r10
    4500:	bf 92       	push	r11
    4502:	cf 92       	push	r12
    4504:	df 92       	push	r13
    4506:	ef 92       	push	r14
    4508:	ff 92       	push	r15
    450a:	0f 93       	push	r16
    450c:	1f 93       	push	r17
    450e:	df 93       	push	r29
    4510:	cf 93       	push	r28
    4512:	cd b7       	in	r28, 0x3d	; 61
    4514:	de b7       	in	r29, 0x3e	; 62
    4516:	c2 54       	subi	r28, 0x42	; 66
    4518:	d0 40       	sbci	r29, 0x00	; 0
    451a:	0f b6       	in	r0, 0x3f	; 63
    451c:	f8 94       	cli
    451e:	de bf       	out	0x3e, r29	; 62
    4520:	0f be       	out	0x3f, r0	; 63
    4522:	cd bf       	out	0x3d, r28	; 61
	//uncomment below two lines to restore defaults by programming the MCU
	//zoSmsRestoreDefaults();
	//while(1);
	
	//initialize all hardware and control
	zoSmsInit();		
    4524:	0e 94 3e 08 	call	0x107c	; 0x107c <zoSmsInit>
	
	//initialize commands
	zoCommandsInit();
    4528:	0e 94 f0 14 	call	0x29e0	; 0x29e0 <zoCommandsInit>

	//initialize i2c communications
	zoProtocolInit(ZO_PROTOCOL_HW_I2C,&halI2c,Sms.Settings.NodeID);
    452c:	80 e0       	ldi	r24, 0x00	; 0
    452e:	5e 01       	movw	r10, r28
    4530:	08 94       	sec
    4532:	a1 1c       	adc	r10, r1
    4534:	b1 1c       	adc	r11, r1
    4536:	b5 01       	movw	r22, r10
    4538:	40 91 08 01 	lds	r20, 0x0108
    453c:	0e 94 f8 02 	call	0x5f0	; 0x5f0 <zoProtocolInit>
	hal->setLAM(lam);
}

inline void zoProtocolSetBitrate(ZO_PROTOCOL_HAL *hal,u32 bitrate)
{
	hal->setBitRate(bitrate);
    4540:	60 91 12 01 	lds	r22, 0x0112
    4544:	70 91 13 01 	lds	r23, 0x0113
    4548:	80 91 14 01 	lds	r24, 0x0114
    454c:	90 91 15 01 	lds	r25, 0x0115
    4550:	eb 85       	ldd	r30, Y+11	; 0x0b
    4552:	fc 85       	ldd	r31, Y+12	; 0x0c
    4554:	09 95       	icall

u08 zoProtocolLRC(const u08* crcBytes, u08 crcByteCount);

inline void zoProtocolSetLAM(ZO_PROTOCOL_HAL *hal,u08 lam)
{
	hal->setLAM(lam);
    4556:	e9 85       	ldd	r30, Y+9	; 0x09
    4558:	fa 85       	ldd	r31, Y+10	; 0x0a
    455a:	80 91 16 01 	lds	r24, 0x0116
    455e:	09 95       	icall
	zoProtocolSetBitrate(&halI2c,Sms.Settings.BaudI2C);
	zoProtocolSetLAM(&halI2c,Sms.Settings.localAcceptanceMask);
	
	//initialize uart communications
	zoProtocolInit(ZO_PROTOCOL_HW_HALF_DUPLEX_RS485,&halUart,Sms.Settings.NodeID);
    4560:	9d e0       	ldi	r25, 0x0D	; 13
    4562:	c9 2e       	mov	r12, r25
    4564:	d1 2c       	mov	r13, r1
    4566:	cc 0e       	add	r12, r28
    4568:	dd 1e       	adc	r13, r29
    456a:	82 e0       	ldi	r24, 0x02	; 2
    456c:	b6 01       	movw	r22, r12
    456e:	40 91 08 01 	lds	r20, 0x0108
    4572:	0e 94 f8 02 	call	0x5f0	; 0x5f0 <zoProtocolInit>
}

inline void zoProtocolSetBitrate(ZO_PROTOCOL_HAL *hal,u32 bitrate)
{
	hal->setBitRate(bitrate);
    4576:	60 91 0e 01 	lds	r22, 0x010E
    457a:	70 91 0f 01 	lds	r23, 0x010F
    457e:	80 91 10 01 	lds	r24, 0x0110
    4582:	90 91 11 01 	lds	r25, 0x0111
    4586:	ef 89       	ldd	r30, Y+23	; 0x17
    4588:	f8 8d       	ldd	r31, Y+24	; 0x18
    458a:	09 95       	icall

u08 zoProtocolLRC(const u08* crcBytes, u08 crcByteCount);

inline void zoProtocolSetLAM(ZO_PROTOCOL_HAL *hal,u08 lam)
{
	hal->setLAM(lam);
    458c:	ed 89       	ldd	r30, Y+21	; 0x15
    458e:	fe 89       	ldd	r31, Y+22	; 0x16
    4590:	80 91 16 01 	lds	r24, 0x0116
    4594:	09 95       	icall
	zoProtocolSetBitrate(&halUart,Sms.Settings.BaudUart);
	zoProtocolSetLAM(&halUart,Sms.Settings.localAcceptanceMask);

	//initialize PPM-VPM communication as per standard rc-servo communication
	zoProtocolRcServoInit();
    4596:	0e 94 19 22 	call	0x4432	; 0x4432 <zoProtocolRcServoInit>
    459a:	8e 01       	movw	r16, r28
    459c:	07 5e       	subi	r16, 0xE7	; 231
    459e:	1f 4f       	sbci	r17, 0xFF	; 255
    45a0:	8e e2       	ldi	r24, 0x2E	; 46
    45a2:	e8 2e       	mov	r14, r24
    45a4:	f1 2c       	mov	r15, r1
    45a6:	ec 0e       	add	r14, r28
    45a8:	fd 1e       	adc	r15, r29
	while(1)
	{
		//TODO:watchdog and fail-continue implementation		
		
		//poll the hardware for errors
		zoSmsErrorPoll();		
    45aa:	0e 94 41 0b 	call	0x1682	; 0x1682 <zoSmsErrorPoll>
		
		//Parse RC-Servo input
		zoProtocolRcServoParse();
    45ae:	0e 94 48 21 	call	0x4290	; 0x4290 <zoProtocolRcServoParse>

		//Parse I2C
		if(zoProtocolParse(&halI2c,&packetI2c))
    45b2:	c5 01       	movw	r24, r10
    45b4:	b8 01       	movw	r22, r16
    45b6:	0e 94 40 02 	call	0x480	; 0x480 <zoProtocolParse>
    45ba:	88 23       	and	r24, r24
    45bc:	c9 f0       	breq	.+50     	; 0x45f0 <main+0xf2>
		{
			//if there arent any other errors present, execute the command.
			if( zoErrorIsEmpty(&zoSmsError) )
    45be:	8c e9       	ldi	r24, 0x9C	; 156
    45c0:	91 e0       	ldi	r25, 0x01	; 1
    45c2:	0e 94 ad 00 	call	0x15a	; 0x15a <zoErrorIsEmpty>
    45c6:	88 23       	and	r24, r24
    45c8:	a9 f5       	brne	.+106    	; 0x4634 <main+0x136>
				if( !zoCommandsServiceCommand(&packetI2c) )
					zoSmsErrorHandleServiceCommandFailure();
			}
			
			//respond to command, if we fail try another 5 times to respond
			if( !zoProtocolCommandResponse(&halI2c,&packetI2c,&zoSmsError) )
    45ca:	c5 01       	movw	r24, r10
    45cc:	b8 01       	movw	r22, r16
    45ce:	4c e9       	ldi	r20, 0x9C	; 156
    45d0:	51 e0       	ldi	r21, 0x01	; 1
    45d2:	0e 94 d0 01 	call	0x3a0	; 0x3a0 <zoProtocolCommandResponse>
    45d6:	88 23       	and	r24, r24
    45d8:	41 f1       	breq	.+80     	; 0x462a <main+0x12c>
		else
			zoSmsErrorHandleParseFailure(&halI2c,&packetI2c);


		//Parse Uart
		if(zoProtocolParse(&halUart,&packetUart))
    45da:	c6 01       	movw	r24, r12
    45dc:	b7 01       	movw	r22, r14
    45de:	0e 94 40 02 	call	0x480	; 0x480 <zoProtocolParse>
    45e2:	88 23       	and	r24, r24
    45e4:	79 f4       	brne	.+30     	; 0x4604 <main+0x106>
			//respond to command, if we fail try another 5 times to respond
			if( !zoProtocolCommandResponse(&halUart,&packetUart,&zoSmsError) )
				zoSmsErrorHandleCommandResponseFailure(&halUart,&packetUart);
		}
		else
			zoSmsErrorHandleParseFailure(&halUart,&packetUart);
    45e6:	c6 01       	movw	r24, r12
    45e8:	b7 01       	movw	r22, r14
    45ea:	0e 94 f4 0a 	call	0x15e8	; 0x15e8 <zoSmsErrorHandleParseFailure>
    45ee:	dd cf       	rjmp	.-70     	; 0x45aa <main+0xac>
			//respond to command, if we fail try another 5 times to respond
			if( !zoProtocolCommandResponse(&halI2c,&packetI2c,&zoSmsError) )
				zoSmsErrorHandleCommandResponseFailure(&halI2c,&packetI2c);
		}
		else
			zoSmsErrorHandleParseFailure(&halI2c,&packetI2c);
    45f0:	c5 01       	movw	r24, r10
    45f2:	b8 01       	movw	r22, r16
    45f4:	0e 94 f4 0a 	call	0x15e8	; 0x15e8 <zoSmsErrorHandleParseFailure>


		//Parse Uart
		if(zoProtocolParse(&halUart,&packetUart))
    45f8:	c6 01       	movw	r24, r12
    45fa:	b7 01       	movw	r22, r14
    45fc:	0e 94 40 02 	call	0x480	; 0x480 <zoProtocolParse>
    4600:	88 23       	and	r24, r24
    4602:	89 f3       	breq	.-30     	; 0x45e6 <main+0xe8>
		{
			//if there arent any other errors present, execute the command.
			if( zoErrorIsEmpty(&zoSmsError) )
    4604:	8c e9       	ldi	r24, 0x9C	; 156
    4606:	91 e0       	ldi	r25, 0x01	; 1
    4608:	0e 94 ad 00 	call	0x15a	; 0x15a <zoErrorIsEmpty>
    460c:	88 23       	and	r24, r24
    460e:	d1 f4       	brne	.+52     	; 0x4644 <main+0x146>
				if( !zoCommandsServiceCommand(&packetUart) )
					zoSmsErrorHandleServiceCommandFailure();
			}
			
			//respond to command, if we fail try another 5 times to respond
			if( !zoProtocolCommandResponse(&halUart,&packetUart,&zoSmsError) )
    4610:	c6 01       	movw	r24, r12
    4612:	b7 01       	movw	r22, r14
    4614:	4c e9       	ldi	r20, 0x9C	; 156
    4616:	51 e0       	ldi	r21, 0x01	; 1
    4618:	0e 94 d0 01 	call	0x3a0	; 0x3a0 <zoProtocolCommandResponse>
    461c:	88 23       	and	r24, r24
    461e:	29 f6       	brne	.-118    	; 0x45aa <main+0xac>
				zoSmsErrorHandleCommandResponseFailure(&halUart,&packetUart);
    4620:	c6 01       	movw	r24, r12
    4622:	b7 01       	movw	r22, r14
    4624:	0e 94 a8 0a 	call	0x1550	; 0x1550 <zoSmsErrorHandleCommandResponseFailure>
    4628:	c0 cf       	rjmp	.-128    	; 0x45aa <main+0xac>
					zoSmsErrorHandleServiceCommandFailure();
			}
			
			//respond to command, if we fail try another 5 times to respond
			if( !zoProtocolCommandResponse(&halI2c,&packetI2c,&zoSmsError) )
				zoSmsErrorHandleCommandResponseFailure(&halI2c,&packetI2c);
    462a:	c5 01       	movw	r24, r10
    462c:	b8 01       	movw	r22, r16
    462e:	0e 94 a8 0a 	call	0x1550	; 0x1550 <zoSmsErrorHandleCommandResponseFailure>
    4632:	d3 cf       	rjmp	.-90     	; 0x45da <main+0xdc>
			//if there arent any other errors present, execute the command.
			if( zoErrorIsEmpty(&zoSmsError) )
			{
				//if the command was wrong, store errors so they can be indicated by 
				//the command response
				if( !zoCommandsServiceCommand(&packetI2c) )
    4634:	c8 01       	movw	r24, r16
    4636:	0e 94 65 14 	call	0x28ca	; 0x28ca <zoCommandsServiceCommand>
    463a:	88 23       	and	r24, r24
    463c:	31 f6       	brne	.-116    	; 0x45ca <main+0xcc>
					zoSmsErrorHandleServiceCommandFailure();
    463e:	0e 94 85 0a 	call	0x150a	; 0x150a <zoSmsErrorHandleServiceCommandFailure>
    4642:	c3 cf       	rjmp	.-122    	; 0x45ca <main+0xcc>
			//if there arent any other errors present, execute the command.
			if( zoErrorIsEmpty(&zoSmsError) )
			{
				//if the command was wrong, store errors so they can be indicated by 
				//the command response
				if( !zoCommandsServiceCommand(&packetUart) )
    4644:	c7 01       	movw	r24, r14
    4646:	0e 94 65 14 	call	0x28ca	; 0x28ca <zoCommandsServiceCommand>
    464a:	88 23       	and	r24, r24
    464c:	09 f7       	brne	.-62     	; 0x4610 <main+0x112>
					zoSmsErrorHandleServiceCommandFailure();
    464e:	0e 94 85 0a 	call	0x150a	; 0x150a <zoSmsErrorHandleServiceCommandFailure>
    4652:	de cf       	rjmp	.-68     	; 0x4610 <main+0x112>

00004654 <__subsf3>:
    4654:	50 58       	subi	r21, 0x80	; 128

00004656 <__addsf3>:
    4656:	bb 27       	eor	r27, r27
    4658:	aa 27       	eor	r26, r26
    465a:	0e d0       	rcall	.+28     	; 0x4678 <__addsf3x>
    465c:	4d c1       	rjmp	.+666    	; 0x48f8 <__fp_round>
    465e:	3e d1       	rcall	.+636    	; 0x48dc <__fp_pscA>
    4660:	30 f0       	brcs	.+12     	; 0x466e <__addsf3+0x18>
    4662:	43 d1       	rcall	.+646    	; 0x48ea <__fp_pscB>
    4664:	20 f0       	brcs	.+8      	; 0x466e <__addsf3+0x18>
    4666:	31 f4       	brne	.+12     	; 0x4674 <__addsf3+0x1e>
    4668:	9f 3f       	cpi	r25, 0xFF	; 255
    466a:	11 f4       	brne	.+4      	; 0x4670 <__addsf3+0x1a>
    466c:	1e f4       	brtc	.+6      	; 0x4674 <__addsf3+0x1e>
    466e:	33 c1       	rjmp	.+614    	; 0x48d6 <__fp_nan>
    4670:	0e f4       	brtc	.+2      	; 0x4674 <__addsf3+0x1e>
    4672:	e0 95       	com	r30
    4674:	e7 fb       	bst	r30, 7
    4676:	29 c1       	rjmp	.+594    	; 0x48ca <__fp_inf>

00004678 <__addsf3x>:
    4678:	e9 2f       	mov	r30, r25
    467a:	4f d1       	rcall	.+670    	; 0x491a <__fp_split3>
    467c:	80 f3       	brcs	.-32     	; 0x465e <__addsf3+0x8>
    467e:	ba 17       	cp	r27, r26
    4680:	62 07       	cpc	r22, r18
    4682:	73 07       	cpc	r23, r19
    4684:	84 07       	cpc	r24, r20
    4686:	95 07       	cpc	r25, r21
    4688:	18 f0       	brcs	.+6      	; 0x4690 <__addsf3x+0x18>
    468a:	71 f4       	brne	.+28     	; 0x46a8 <__addsf3x+0x30>
    468c:	9e f5       	brtc	.+102    	; 0x46f4 <__addsf3x+0x7c>
    468e:	67 c1       	rjmp	.+718    	; 0x495e <__fp_zero>
    4690:	0e f4       	brtc	.+2      	; 0x4694 <__addsf3x+0x1c>
    4692:	e0 95       	com	r30
    4694:	0b 2e       	mov	r0, r27
    4696:	ba 2f       	mov	r27, r26
    4698:	a0 2d       	mov	r26, r0
    469a:	0b 01       	movw	r0, r22
    469c:	b9 01       	movw	r22, r18
    469e:	90 01       	movw	r18, r0
    46a0:	0c 01       	movw	r0, r24
    46a2:	ca 01       	movw	r24, r20
    46a4:	a0 01       	movw	r20, r0
    46a6:	11 24       	eor	r1, r1
    46a8:	ff 27       	eor	r31, r31
    46aa:	59 1b       	sub	r21, r25
    46ac:	99 f0       	breq	.+38     	; 0x46d4 <__addsf3x+0x5c>
    46ae:	59 3f       	cpi	r21, 0xF9	; 249
    46b0:	50 f4       	brcc	.+20     	; 0x46c6 <__addsf3x+0x4e>
    46b2:	50 3e       	cpi	r21, 0xE0	; 224
    46b4:	68 f1       	brcs	.+90     	; 0x4710 <__addsf3x+0x98>
    46b6:	1a 16       	cp	r1, r26
    46b8:	f0 40       	sbci	r31, 0x00	; 0
    46ba:	a2 2f       	mov	r26, r18
    46bc:	23 2f       	mov	r18, r19
    46be:	34 2f       	mov	r19, r20
    46c0:	44 27       	eor	r20, r20
    46c2:	58 5f       	subi	r21, 0xF8	; 248
    46c4:	f3 cf       	rjmp	.-26     	; 0x46ac <__addsf3x+0x34>
    46c6:	46 95       	lsr	r20
    46c8:	37 95       	ror	r19
    46ca:	27 95       	ror	r18
    46cc:	a7 95       	ror	r26
    46ce:	f0 40       	sbci	r31, 0x00	; 0
    46d0:	53 95       	inc	r21
    46d2:	c9 f7       	brne	.-14     	; 0x46c6 <__addsf3x+0x4e>
    46d4:	7e f4       	brtc	.+30     	; 0x46f4 <__addsf3x+0x7c>
    46d6:	1f 16       	cp	r1, r31
    46d8:	ba 0b       	sbc	r27, r26
    46da:	62 0b       	sbc	r22, r18
    46dc:	73 0b       	sbc	r23, r19
    46de:	84 0b       	sbc	r24, r20
    46e0:	ba f0       	brmi	.+46     	; 0x4710 <__addsf3x+0x98>
    46e2:	91 50       	subi	r25, 0x01	; 1
    46e4:	a1 f0       	breq	.+40     	; 0x470e <__addsf3x+0x96>
    46e6:	ff 0f       	add	r31, r31
    46e8:	bb 1f       	adc	r27, r27
    46ea:	66 1f       	adc	r22, r22
    46ec:	77 1f       	adc	r23, r23
    46ee:	88 1f       	adc	r24, r24
    46f0:	c2 f7       	brpl	.-16     	; 0x46e2 <__addsf3x+0x6a>
    46f2:	0e c0       	rjmp	.+28     	; 0x4710 <__addsf3x+0x98>
    46f4:	ba 0f       	add	r27, r26
    46f6:	62 1f       	adc	r22, r18
    46f8:	73 1f       	adc	r23, r19
    46fa:	84 1f       	adc	r24, r20
    46fc:	48 f4       	brcc	.+18     	; 0x4710 <__addsf3x+0x98>
    46fe:	87 95       	ror	r24
    4700:	77 95       	ror	r23
    4702:	67 95       	ror	r22
    4704:	b7 95       	ror	r27
    4706:	f7 95       	ror	r31
    4708:	9e 3f       	cpi	r25, 0xFE	; 254
    470a:	08 f0       	brcs	.+2      	; 0x470e <__addsf3x+0x96>
    470c:	b3 cf       	rjmp	.-154    	; 0x4674 <__addsf3+0x1e>
    470e:	93 95       	inc	r25
    4710:	88 0f       	add	r24, r24
    4712:	08 f0       	brcs	.+2      	; 0x4716 <__addsf3x+0x9e>
    4714:	99 27       	eor	r25, r25
    4716:	ee 0f       	add	r30, r30
    4718:	97 95       	ror	r25
    471a:	87 95       	ror	r24
    471c:	08 95       	ret

0000471e <__divsf3>:
    471e:	0c d0       	rcall	.+24     	; 0x4738 <__divsf3x>
    4720:	eb c0       	rjmp	.+470    	; 0x48f8 <__fp_round>
    4722:	e3 d0       	rcall	.+454    	; 0x48ea <__fp_pscB>
    4724:	40 f0       	brcs	.+16     	; 0x4736 <__divsf3+0x18>
    4726:	da d0       	rcall	.+436    	; 0x48dc <__fp_pscA>
    4728:	30 f0       	brcs	.+12     	; 0x4736 <__divsf3+0x18>
    472a:	21 f4       	brne	.+8      	; 0x4734 <__divsf3+0x16>
    472c:	5f 3f       	cpi	r21, 0xFF	; 255
    472e:	19 f0       	breq	.+6      	; 0x4736 <__divsf3+0x18>
    4730:	cc c0       	rjmp	.+408    	; 0x48ca <__fp_inf>
    4732:	51 11       	cpse	r21, r1
    4734:	15 c1       	rjmp	.+554    	; 0x4960 <__fp_szero>
    4736:	cf c0       	rjmp	.+414    	; 0x48d6 <__fp_nan>

00004738 <__divsf3x>:
    4738:	f0 d0       	rcall	.+480    	; 0x491a <__fp_split3>
    473a:	98 f3       	brcs	.-26     	; 0x4722 <__divsf3+0x4>

0000473c <__divsf3_pse>:
    473c:	99 23       	and	r25, r25
    473e:	c9 f3       	breq	.-14     	; 0x4732 <__divsf3+0x14>
    4740:	55 23       	and	r21, r21
    4742:	b1 f3       	breq	.-20     	; 0x4730 <__divsf3+0x12>
    4744:	95 1b       	sub	r25, r21
    4746:	55 0b       	sbc	r21, r21
    4748:	bb 27       	eor	r27, r27
    474a:	aa 27       	eor	r26, r26
    474c:	62 17       	cp	r22, r18
    474e:	73 07       	cpc	r23, r19
    4750:	84 07       	cpc	r24, r20
    4752:	38 f0       	brcs	.+14     	; 0x4762 <__divsf3_pse+0x26>
    4754:	9f 5f       	subi	r25, 0xFF	; 255
    4756:	5f 4f       	sbci	r21, 0xFF	; 255
    4758:	22 0f       	add	r18, r18
    475a:	33 1f       	adc	r19, r19
    475c:	44 1f       	adc	r20, r20
    475e:	aa 1f       	adc	r26, r26
    4760:	a9 f3       	breq	.-22     	; 0x474c <__divsf3_pse+0x10>
    4762:	33 d0       	rcall	.+102    	; 0x47ca <__divsf3_pse+0x8e>
    4764:	0e 2e       	mov	r0, r30
    4766:	3a f0       	brmi	.+14     	; 0x4776 <__divsf3_pse+0x3a>
    4768:	e0 e8       	ldi	r30, 0x80	; 128
    476a:	30 d0       	rcall	.+96     	; 0x47cc <__divsf3_pse+0x90>
    476c:	91 50       	subi	r25, 0x01	; 1
    476e:	50 40       	sbci	r21, 0x00	; 0
    4770:	e6 95       	lsr	r30
    4772:	00 1c       	adc	r0, r0
    4774:	ca f7       	brpl	.-14     	; 0x4768 <__divsf3_pse+0x2c>
    4776:	29 d0       	rcall	.+82     	; 0x47ca <__divsf3_pse+0x8e>
    4778:	fe 2f       	mov	r31, r30
    477a:	27 d0       	rcall	.+78     	; 0x47ca <__divsf3_pse+0x8e>
    477c:	66 0f       	add	r22, r22
    477e:	77 1f       	adc	r23, r23
    4780:	88 1f       	adc	r24, r24
    4782:	bb 1f       	adc	r27, r27
    4784:	26 17       	cp	r18, r22
    4786:	37 07       	cpc	r19, r23
    4788:	48 07       	cpc	r20, r24
    478a:	ab 07       	cpc	r26, r27
    478c:	b0 e8       	ldi	r27, 0x80	; 128
    478e:	09 f0       	breq	.+2      	; 0x4792 <__divsf3_pse+0x56>
    4790:	bb 0b       	sbc	r27, r27
    4792:	80 2d       	mov	r24, r0
    4794:	bf 01       	movw	r22, r30
    4796:	ff 27       	eor	r31, r31
    4798:	93 58       	subi	r25, 0x83	; 131
    479a:	5f 4f       	sbci	r21, 0xFF	; 255
    479c:	2a f0       	brmi	.+10     	; 0x47a8 <__divsf3_pse+0x6c>
    479e:	9e 3f       	cpi	r25, 0xFE	; 254
    47a0:	51 05       	cpc	r21, r1
    47a2:	68 f0       	brcs	.+26     	; 0x47be <__divsf3_pse+0x82>
    47a4:	92 c0       	rjmp	.+292    	; 0x48ca <__fp_inf>
    47a6:	dc c0       	rjmp	.+440    	; 0x4960 <__fp_szero>
    47a8:	5f 3f       	cpi	r21, 0xFF	; 255
    47aa:	ec f3       	brlt	.-6      	; 0x47a6 <__divsf3_pse+0x6a>
    47ac:	98 3e       	cpi	r25, 0xE8	; 232
    47ae:	dc f3       	brlt	.-10     	; 0x47a6 <__divsf3_pse+0x6a>
    47b0:	86 95       	lsr	r24
    47b2:	77 95       	ror	r23
    47b4:	67 95       	ror	r22
    47b6:	b7 95       	ror	r27
    47b8:	f7 95       	ror	r31
    47ba:	9f 5f       	subi	r25, 0xFF	; 255
    47bc:	c9 f7       	brne	.-14     	; 0x47b0 <__divsf3_pse+0x74>
    47be:	88 0f       	add	r24, r24
    47c0:	91 1d       	adc	r25, r1
    47c2:	96 95       	lsr	r25
    47c4:	87 95       	ror	r24
    47c6:	97 f9       	bld	r25, 7
    47c8:	08 95       	ret
    47ca:	e1 e0       	ldi	r30, 0x01	; 1
    47cc:	66 0f       	add	r22, r22
    47ce:	77 1f       	adc	r23, r23
    47d0:	88 1f       	adc	r24, r24
    47d2:	bb 1f       	adc	r27, r27
    47d4:	62 17       	cp	r22, r18
    47d6:	73 07       	cpc	r23, r19
    47d8:	84 07       	cpc	r24, r20
    47da:	ba 07       	cpc	r27, r26
    47dc:	20 f0       	brcs	.+8      	; 0x47e6 <__divsf3_pse+0xaa>
    47de:	62 1b       	sub	r22, r18
    47e0:	73 0b       	sbc	r23, r19
    47e2:	84 0b       	sbc	r24, r20
    47e4:	ba 0b       	sbc	r27, r26
    47e6:	ee 1f       	adc	r30, r30
    47e8:	88 f7       	brcc	.-30     	; 0x47cc <__divsf3_pse+0x90>
    47ea:	e0 95       	com	r30
    47ec:	08 95       	ret

000047ee <__fixsfsi>:
    47ee:	04 d0       	rcall	.+8      	; 0x47f8 <__fixunssfsi>
    47f0:	68 94       	set
    47f2:	b1 11       	cpse	r27, r1
    47f4:	b5 c0       	rjmp	.+362    	; 0x4960 <__fp_szero>
    47f6:	08 95       	ret

000047f8 <__fixunssfsi>:
    47f8:	98 d0       	rcall	.+304    	; 0x492a <__fp_splitA>
    47fa:	88 f0       	brcs	.+34     	; 0x481e <__fixunssfsi+0x26>
    47fc:	9f 57       	subi	r25, 0x7F	; 127
    47fe:	90 f0       	brcs	.+36     	; 0x4824 <__fixunssfsi+0x2c>
    4800:	b9 2f       	mov	r27, r25
    4802:	99 27       	eor	r25, r25
    4804:	b7 51       	subi	r27, 0x17	; 23
    4806:	a0 f0       	brcs	.+40     	; 0x4830 <__fixunssfsi+0x38>
    4808:	d1 f0       	breq	.+52     	; 0x483e <__fixunssfsi+0x46>
    480a:	66 0f       	add	r22, r22
    480c:	77 1f       	adc	r23, r23
    480e:	88 1f       	adc	r24, r24
    4810:	99 1f       	adc	r25, r25
    4812:	1a f0       	brmi	.+6      	; 0x481a <__fixunssfsi+0x22>
    4814:	ba 95       	dec	r27
    4816:	c9 f7       	brne	.-14     	; 0x480a <__fixunssfsi+0x12>
    4818:	12 c0       	rjmp	.+36     	; 0x483e <__fixunssfsi+0x46>
    481a:	b1 30       	cpi	r27, 0x01	; 1
    481c:	81 f0       	breq	.+32     	; 0x483e <__fixunssfsi+0x46>
    481e:	9f d0       	rcall	.+318    	; 0x495e <__fp_zero>
    4820:	b1 e0       	ldi	r27, 0x01	; 1
    4822:	08 95       	ret
    4824:	9c c0       	rjmp	.+312    	; 0x495e <__fp_zero>
    4826:	67 2f       	mov	r22, r23
    4828:	78 2f       	mov	r23, r24
    482a:	88 27       	eor	r24, r24
    482c:	b8 5f       	subi	r27, 0xF8	; 248
    482e:	39 f0       	breq	.+14     	; 0x483e <__fixunssfsi+0x46>
    4830:	b9 3f       	cpi	r27, 0xF9	; 249
    4832:	cc f3       	brlt	.-14     	; 0x4826 <__fixunssfsi+0x2e>
    4834:	86 95       	lsr	r24
    4836:	77 95       	ror	r23
    4838:	67 95       	ror	r22
    483a:	b3 95       	inc	r27
    483c:	d9 f7       	brne	.-10     	; 0x4834 <__fixunssfsi+0x3c>
    483e:	3e f4       	brtc	.+14     	; 0x484e <__fixunssfsi+0x56>
    4840:	90 95       	com	r25
    4842:	80 95       	com	r24
    4844:	70 95       	com	r23
    4846:	61 95       	neg	r22
    4848:	7f 4f       	sbci	r23, 0xFF	; 255
    484a:	8f 4f       	sbci	r24, 0xFF	; 255
    484c:	9f 4f       	sbci	r25, 0xFF	; 255
    484e:	08 95       	ret

00004850 <__floatunsisf>:
    4850:	e8 94       	clt
    4852:	09 c0       	rjmp	.+18     	; 0x4866 <__floatsisf+0x12>

00004854 <__floatsisf>:
    4854:	97 fb       	bst	r25, 7
    4856:	3e f4       	brtc	.+14     	; 0x4866 <__floatsisf+0x12>
    4858:	90 95       	com	r25
    485a:	80 95       	com	r24
    485c:	70 95       	com	r23
    485e:	61 95       	neg	r22
    4860:	7f 4f       	sbci	r23, 0xFF	; 255
    4862:	8f 4f       	sbci	r24, 0xFF	; 255
    4864:	9f 4f       	sbci	r25, 0xFF	; 255
    4866:	99 23       	and	r25, r25
    4868:	a9 f0       	breq	.+42     	; 0x4894 <__floatsisf+0x40>
    486a:	f9 2f       	mov	r31, r25
    486c:	96 e9       	ldi	r25, 0x96	; 150
    486e:	bb 27       	eor	r27, r27
    4870:	93 95       	inc	r25
    4872:	f6 95       	lsr	r31
    4874:	87 95       	ror	r24
    4876:	77 95       	ror	r23
    4878:	67 95       	ror	r22
    487a:	b7 95       	ror	r27
    487c:	f1 11       	cpse	r31, r1
    487e:	f8 cf       	rjmp	.-16     	; 0x4870 <__floatsisf+0x1c>
    4880:	fa f4       	brpl	.+62     	; 0x48c0 <__floatsisf+0x6c>
    4882:	bb 0f       	add	r27, r27
    4884:	11 f4       	brne	.+4      	; 0x488a <__floatsisf+0x36>
    4886:	60 ff       	sbrs	r22, 0
    4888:	1b c0       	rjmp	.+54     	; 0x48c0 <__floatsisf+0x6c>
    488a:	6f 5f       	subi	r22, 0xFF	; 255
    488c:	7f 4f       	sbci	r23, 0xFF	; 255
    488e:	8f 4f       	sbci	r24, 0xFF	; 255
    4890:	9f 4f       	sbci	r25, 0xFF	; 255
    4892:	16 c0       	rjmp	.+44     	; 0x48c0 <__floatsisf+0x6c>
    4894:	88 23       	and	r24, r24
    4896:	11 f0       	breq	.+4      	; 0x489c <__floatsisf+0x48>
    4898:	96 e9       	ldi	r25, 0x96	; 150
    489a:	11 c0       	rjmp	.+34     	; 0x48be <__floatsisf+0x6a>
    489c:	77 23       	and	r23, r23
    489e:	21 f0       	breq	.+8      	; 0x48a8 <__floatsisf+0x54>
    48a0:	9e e8       	ldi	r25, 0x8E	; 142
    48a2:	87 2f       	mov	r24, r23
    48a4:	76 2f       	mov	r23, r22
    48a6:	05 c0       	rjmp	.+10     	; 0x48b2 <__floatsisf+0x5e>
    48a8:	66 23       	and	r22, r22
    48aa:	71 f0       	breq	.+28     	; 0x48c8 <__floatsisf+0x74>
    48ac:	96 e8       	ldi	r25, 0x86	; 134
    48ae:	86 2f       	mov	r24, r22
    48b0:	70 e0       	ldi	r23, 0x00	; 0
    48b2:	60 e0       	ldi	r22, 0x00	; 0
    48b4:	2a f0       	brmi	.+10     	; 0x48c0 <__floatsisf+0x6c>
    48b6:	9a 95       	dec	r25
    48b8:	66 0f       	add	r22, r22
    48ba:	77 1f       	adc	r23, r23
    48bc:	88 1f       	adc	r24, r24
    48be:	da f7       	brpl	.-10     	; 0x48b6 <__floatsisf+0x62>
    48c0:	88 0f       	add	r24, r24
    48c2:	96 95       	lsr	r25
    48c4:	87 95       	ror	r24
    48c6:	97 f9       	bld	r25, 7
    48c8:	08 95       	ret

000048ca <__fp_inf>:
    48ca:	97 f9       	bld	r25, 7
    48cc:	9f 67       	ori	r25, 0x7F	; 127
    48ce:	80 e8       	ldi	r24, 0x80	; 128
    48d0:	70 e0       	ldi	r23, 0x00	; 0
    48d2:	60 e0       	ldi	r22, 0x00	; 0
    48d4:	08 95       	ret

000048d6 <__fp_nan>:
    48d6:	9f ef       	ldi	r25, 0xFF	; 255
    48d8:	80 ec       	ldi	r24, 0xC0	; 192
    48da:	08 95       	ret

000048dc <__fp_pscA>:
    48dc:	00 24       	eor	r0, r0
    48de:	0a 94       	dec	r0
    48e0:	16 16       	cp	r1, r22
    48e2:	17 06       	cpc	r1, r23
    48e4:	18 06       	cpc	r1, r24
    48e6:	09 06       	cpc	r0, r25
    48e8:	08 95       	ret

000048ea <__fp_pscB>:
    48ea:	00 24       	eor	r0, r0
    48ec:	0a 94       	dec	r0
    48ee:	12 16       	cp	r1, r18
    48f0:	13 06       	cpc	r1, r19
    48f2:	14 06       	cpc	r1, r20
    48f4:	05 06       	cpc	r0, r21
    48f6:	08 95       	ret

000048f8 <__fp_round>:
    48f8:	09 2e       	mov	r0, r25
    48fa:	03 94       	inc	r0
    48fc:	00 0c       	add	r0, r0
    48fe:	11 f4       	brne	.+4      	; 0x4904 <__fp_round+0xc>
    4900:	88 23       	and	r24, r24
    4902:	52 f0       	brmi	.+20     	; 0x4918 <__fp_round+0x20>
    4904:	bb 0f       	add	r27, r27
    4906:	40 f4       	brcc	.+16     	; 0x4918 <__fp_round+0x20>
    4908:	bf 2b       	or	r27, r31
    490a:	11 f4       	brne	.+4      	; 0x4910 <__fp_round+0x18>
    490c:	60 ff       	sbrs	r22, 0
    490e:	04 c0       	rjmp	.+8      	; 0x4918 <__fp_round+0x20>
    4910:	6f 5f       	subi	r22, 0xFF	; 255
    4912:	7f 4f       	sbci	r23, 0xFF	; 255
    4914:	8f 4f       	sbci	r24, 0xFF	; 255
    4916:	9f 4f       	sbci	r25, 0xFF	; 255
    4918:	08 95       	ret

0000491a <__fp_split3>:
    491a:	57 fd       	sbrc	r21, 7
    491c:	90 58       	subi	r25, 0x80	; 128
    491e:	44 0f       	add	r20, r20
    4920:	55 1f       	adc	r21, r21
    4922:	59 f0       	breq	.+22     	; 0x493a <__fp_splitA+0x10>
    4924:	5f 3f       	cpi	r21, 0xFF	; 255
    4926:	71 f0       	breq	.+28     	; 0x4944 <__fp_splitA+0x1a>
    4928:	47 95       	ror	r20

0000492a <__fp_splitA>:
    492a:	88 0f       	add	r24, r24
    492c:	97 fb       	bst	r25, 7
    492e:	99 1f       	adc	r25, r25
    4930:	61 f0       	breq	.+24     	; 0x494a <__fp_splitA+0x20>
    4932:	9f 3f       	cpi	r25, 0xFF	; 255
    4934:	79 f0       	breq	.+30     	; 0x4954 <__fp_splitA+0x2a>
    4936:	87 95       	ror	r24
    4938:	08 95       	ret
    493a:	12 16       	cp	r1, r18
    493c:	13 06       	cpc	r1, r19
    493e:	14 06       	cpc	r1, r20
    4940:	55 1f       	adc	r21, r21
    4942:	f2 cf       	rjmp	.-28     	; 0x4928 <__fp_split3+0xe>
    4944:	46 95       	lsr	r20
    4946:	f1 df       	rcall	.-30     	; 0x492a <__fp_splitA>
    4948:	08 c0       	rjmp	.+16     	; 0x495a <__fp_splitA+0x30>
    494a:	16 16       	cp	r1, r22
    494c:	17 06       	cpc	r1, r23
    494e:	18 06       	cpc	r1, r24
    4950:	99 1f       	adc	r25, r25
    4952:	f1 cf       	rjmp	.-30     	; 0x4936 <__fp_splitA+0xc>
    4954:	86 95       	lsr	r24
    4956:	71 05       	cpc	r23, r1
    4958:	61 05       	cpc	r22, r1
    495a:	08 94       	sec
    495c:	08 95       	ret

0000495e <__fp_zero>:
    495e:	e8 94       	clt

00004960 <__fp_szero>:
    4960:	bb 27       	eor	r27, r27
    4962:	66 27       	eor	r22, r22
    4964:	77 27       	eor	r23, r23
    4966:	cb 01       	movw	r24, r22
    4968:	97 f9       	bld	r25, 7
    496a:	08 95       	ret

0000496c <__mulsf3>:
    496c:	0b d0       	rcall	.+22     	; 0x4984 <__mulsf3x>
    496e:	c4 cf       	rjmp	.-120    	; 0x48f8 <__fp_round>
    4970:	b5 df       	rcall	.-150    	; 0x48dc <__fp_pscA>
    4972:	28 f0       	brcs	.+10     	; 0x497e <__mulsf3+0x12>
    4974:	ba df       	rcall	.-140    	; 0x48ea <__fp_pscB>
    4976:	18 f0       	brcs	.+6      	; 0x497e <__mulsf3+0x12>
    4978:	95 23       	and	r25, r21
    497a:	09 f0       	breq	.+2      	; 0x497e <__mulsf3+0x12>
    497c:	a6 cf       	rjmp	.-180    	; 0x48ca <__fp_inf>
    497e:	ab cf       	rjmp	.-170    	; 0x48d6 <__fp_nan>
    4980:	11 24       	eor	r1, r1
    4982:	ee cf       	rjmp	.-36     	; 0x4960 <__fp_szero>

00004984 <__mulsf3x>:
    4984:	ca df       	rcall	.-108    	; 0x491a <__fp_split3>
    4986:	a0 f3       	brcs	.-24     	; 0x4970 <__mulsf3+0x4>

00004988 <__mulsf3_pse>:
    4988:	95 9f       	mul	r25, r21
    498a:	d1 f3       	breq	.-12     	; 0x4980 <__mulsf3+0x14>
    498c:	95 0f       	add	r25, r21
    498e:	50 e0       	ldi	r21, 0x00	; 0
    4990:	55 1f       	adc	r21, r21
    4992:	62 9f       	mul	r22, r18
    4994:	f0 01       	movw	r30, r0
    4996:	72 9f       	mul	r23, r18
    4998:	bb 27       	eor	r27, r27
    499a:	f0 0d       	add	r31, r0
    499c:	b1 1d       	adc	r27, r1
    499e:	63 9f       	mul	r22, r19
    49a0:	aa 27       	eor	r26, r26
    49a2:	f0 0d       	add	r31, r0
    49a4:	b1 1d       	adc	r27, r1
    49a6:	aa 1f       	adc	r26, r26
    49a8:	64 9f       	mul	r22, r20
    49aa:	66 27       	eor	r22, r22
    49ac:	b0 0d       	add	r27, r0
    49ae:	a1 1d       	adc	r26, r1
    49b0:	66 1f       	adc	r22, r22
    49b2:	82 9f       	mul	r24, r18
    49b4:	22 27       	eor	r18, r18
    49b6:	b0 0d       	add	r27, r0
    49b8:	a1 1d       	adc	r26, r1
    49ba:	62 1f       	adc	r22, r18
    49bc:	73 9f       	mul	r23, r19
    49be:	b0 0d       	add	r27, r0
    49c0:	a1 1d       	adc	r26, r1
    49c2:	62 1f       	adc	r22, r18
    49c4:	83 9f       	mul	r24, r19
    49c6:	a0 0d       	add	r26, r0
    49c8:	61 1d       	adc	r22, r1
    49ca:	22 1f       	adc	r18, r18
    49cc:	74 9f       	mul	r23, r20
    49ce:	33 27       	eor	r19, r19
    49d0:	a0 0d       	add	r26, r0
    49d2:	61 1d       	adc	r22, r1
    49d4:	23 1f       	adc	r18, r19
    49d6:	84 9f       	mul	r24, r20
    49d8:	60 0d       	add	r22, r0
    49da:	21 1d       	adc	r18, r1
    49dc:	82 2f       	mov	r24, r18
    49de:	76 2f       	mov	r23, r22
    49e0:	6a 2f       	mov	r22, r26
    49e2:	11 24       	eor	r1, r1
    49e4:	9f 57       	subi	r25, 0x7F	; 127
    49e6:	50 40       	sbci	r21, 0x00	; 0
    49e8:	8a f0       	brmi	.+34     	; 0x4a0c <__mulsf3_pse+0x84>
    49ea:	e1 f0       	breq	.+56     	; 0x4a24 <__mulsf3_pse+0x9c>
    49ec:	88 23       	and	r24, r24
    49ee:	4a f0       	brmi	.+18     	; 0x4a02 <__mulsf3_pse+0x7a>
    49f0:	ee 0f       	add	r30, r30
    49f2:	ff 1f       	adc	r31, r31
    49f4:	bb 1f       	adc	r27, r27
    49f6:	66 1f       	adc	r22, r22
    49f8:	77 1f       	adc	r23, r23
    49fa:	88 1f       	adc	r24, r24
    49fc:	91 50       	subi	r25, 0x01	; 1
    49fe:	50 40       	sbci	r21, 0x00	; 0
    4a00:	a9 f7       	brne	.-22     	; 0x49ec <__mulsf3_pse+0x64>
    4a02:	9e 3f       	cpi	r25, 0xFE	; 254
    4a04:	51 05       	cpc	r21, r1
    4a06:	70 f0       	brcs	.+28     	; 0x4a24 <__mulsf3_pse+0x9c>
    4a08:	60 cf       	rjmp	.-320    	; 0x48ca <__fp_inf>
    4a0a:	aa cf       	rjmp	.-172    	; 0x4960 <__fp_szero>
    4a0c:	5f 3f       	cpi	r21, 0xFF	; 255
    4a0e:	ec f3       	brlt	.-6      	; 0x4a0a <__mulsf3_pse+0x82>
    4a10:	98 3e       	cpi	r25, 0xE8	; 232
    4a12:	dc f3       	brlt	.-10     	; 0x4a0a <__mulsf3_pse+0x82>
    4a14:	86 95       	lsr	r24
    4a16:	77 95       	ror	r23
    4a18:	67 95       	ror	r22
    4a1a:	b7 95       	ror	r27
    4a1c:	f7 95       	ror	r31
    4a1e:	e7 95       	ror	r30
    4a20:	9f 5f       	subi	r25, 0xFF	; 255
    4a22:	c1 f7       	brne	.-16     	; 0x4a14 <__mulsf3_pse+0x8c>
    4a24:	fe 2b       	or	r31, r30
    4a26:	88 0f       	add	r24, r24
    4a28:	91 1d       	adc	r25, r1
    4a2a:	96 95       	lsr	r25
    4a2c:	87 95       	ror	r24
    4a2e:	97 f9       	bld	r25, 7
    4a30:	08 95       	ret
    4a32:	11 f4       	brne	.+4      	; 0x4a38 <__mulsf3_pse+0xb0>
    4a34:	0e f4       	brtc	.+2      	; 0x4a38 <__mulsf3_pse+0xb0>
    4a36:	4f cf       	rjmp	.-354    	; 0x48d6 <__fp_nan>
    4a38:	41 c0       	rjmp	.+130    	; 0x4abc <__fp_mpack>

00004a3a <sqrt>:
    4a3a:	77 df       	rcall	.-274    	; 0x492a <__fp_splitA>
    4a3c:	d0 f3       	brcs	.-12     	; 0x4a32 <__mulsf3_pse+0xaa>
    4a3e:	99 23       	and	r25, r25
    4a40:	d9 f3       	breq	.-10     	; 0x4a38 <__mulsf3_pse+0xb0>
    4a42:	ce f3       	brts	.-14     	; 0x4a36 <__mulsf3_pse+0xae>
    4a44:	9f 57       	subi	r25, 0x7F	; 127
    4a46:	55 0b       	sbc	r21, r21
    4a48:	87 ff       	sbrs	r24, 7
    4a4a:	46 d0       	rcall	.+140    	; 0x4ad8 <__fp_norm2>
    4a4c:	00 24       	eor	r0, r0
    4a4e:	a0 e6       	ldi	r26, 0x60	; 96
    4a50:	40 ea       	ldi	r20, 0xA0	; 160
    4a52:	90 01       	movw	r18, r0
    4a54:	80 58       	subi	r24, 0x80	; 128
    4a56:	56 95       	lsr	r21
    4a58:	97 95       	ror	r25
    4a5a:	28 f4       	brcc	.+10     	; 0x4a66 <sqrt+0x2c>
    4a5c:	80 5c       	subi	r24, 0xC0	; 192
    4a5e:	66 0f       	add	r22, r22
    4a60:	77 1f       	adc	r23, r23
    4a62:	88 1f       	adc	r24, r24
    4a64:	20 f0       	brcs	.+8      	; 0x4a6e <sqrt+0x34>
    4a66:	26 17       	cp	r18, r22
    4a68:	37 07       	cpc	r19, r23
    4a6a:	48 07       	cpc	r20, r24
    4a6c:	30 f4       	brcc	.+12     	; 0x4a7a <sqrt+0x40>
    4a6e:	62 1b       	sub	r22, r18
    4a70:	73 0b       	sbc	r23, r19
    4a72:	84 0b       	sbc	r24, r20
    4a74:	20 29       	or	r18, r0
    4a76:	31 29       	or	r19, r1
    4a78:	4a 2b       	or	r20, r26
    4a7a:	a6 95       	lsr	r26
    4a7c:	17 94       	ror	r1
    4a7e:	07 94       	ror	r0
    4a80:	20 25       	eor	r18, r0
    4a82:	31 25       	eor	r19, r1
    4a84:	4a 27       	eor	r20, r26
    4a86:	58 f7       	brcc	.-42     	; 0x4a5e <sqrt+0x24>
    4a88:	66 0f       	add	r22, r22
    4a8a:	77 1f       	adc	r23, r23
    4a8c:	88 1f       	adc	r24, r24
    4a8e:	20 f0       	brcs	.+8      	; 0x4a98 <sqrt+0x5e>
    4a90:	26 17       	cp	r18, r22
    4a92:	37 07       	cpc	r19, r23
    4a94:	48 07       	cpc	r20, r24
    4a96:	30 f4       	brcc	.+12     	; 0x4aa4 <sqrt+0x6a>
    4a98:	62 0b       	sbc	r22, r18
    4a9a:	73 0b       	sbc	r23, r19
    4a9c:	84 0b       	sbc	r24, r20
    4a9e:	20 0d       	add	r18, r0
    4aa0:	31 1d       	adc	r19, r1
    4aa2:	41 1d       	adc	r20, r1
    4aa4:	a0 95       	com	r26
    4aa6:	81 f7       	brne	.-32     	; 0x4a88 <sqrt+0x4e>
    4aa8:	b9 01       	movw	r22, r18
    4aaa:	84 2f       	mov	r24, r20
    4aac:	91 58       	subi	r25, 0x81	; 129
    4aae:	88 0f       	add	r24, r24
    4ab0:	96 95       	lsr	r25
    4ab2:	87 95       	ror	r24
    4ab4:	08 95       	ret

00004ab6 <square>:
    4ab6:	9b 01       	movw	r18, r22
    4ab8:	ac 01       	movw	r20, r24
    4aba:	58 cf       	rjmp	.-336    	; 0x496c <__mulsf3>

00004abc <__fp_mpack>:
    4abc:	9f 3f       	cpi	r25, 0xFF	; 255
    4abe:	31 f0       	breq	.+12     	; 0x4acc <__fp_mpack_finite+0xc>

00004ac0 <__fp_mpack_finite>:
    4ac0:	91 50       	subi	r25, 0x01	; 1
    4ac2:	20 f4       	brcc	.+8      	; 0x4acc <__fp_mpack_finite+0xc>
    4ac4:	87 95       	ror	r24
    4ac6:	77 95       	ror	r23
    4ac8:	67 95       	ror	r22
    4aca:	b7 95       	ror	r27
    4acc:	88 0f       	add	r24, r24
    4ace:	91 1d       	adc	r25, r1
    4ad0:	96 95       	lsr	r25
    4ad2:	87 95       	ror	r24
    4ad4:	97 f9       	bld	r25, 7
    4ad6:	08 95       	ret

00004ad8 <__fp_norm2>:
    4ad8:	91 50       	subi	r25, 0x01	; 1
    4ada:	50 40       	sbci	r21, 0x00	; 0
    4adc:	66 0f       	add	r22, r22
    4ade:	77 1f       	adc	r23, r23
    4ae0:	88 1f       	adc	r24, r24
    4ae2:	d2 f7       	brpl	.-12     	; 0x4ad8 <__fp_norm2>
    4ae4:	08 95       	ret

00004ae6 <__mulsi3>:
    4ae6:	62 9f       	mul	r22, r18
    4ae8:	d0 01       	movw	r26, r0
    4aea:	73 9f       	mul	r23, r19
    4aec:	f0 01       	movw	r30, r0
    4aee:	82 9f       	mul	r24, r18
    4af0:	e0 0d       	add	r30, r0
    4af2:	f1 1d       	adc	r31, r1
    4af4:	64 9f       	mul	r22, r20
    4af6:	e0 0d       	add	r30, r0
    4af8:	f1 1d       	adc	r31, r1
    4afa:	92 9f       	mul	r25, r18
    4afc:	f0 0d       	add	r31, r0
    4afe:	83 9f       	mul	r24, r19
    4b00:	f0 0d       	add	r31, r0
    4b02:	74 9f       	mul	r23, r20
    4b04:	f0 0d       	add	r31, r0
    4b06:	65 9f       	mul	r22, r21
    4b08:	f0 0d       	add	r31, r0
    4b0a:	99 27       	eor	r25, r25
    4b0c:	72 9f       	mul	r23, r18
    4b0e:	b0 0d       	add	r27, r0
    4b10:	e1 1d       	adc	r30, r1
    4b12:	f9 1f       	adc	r31, r25
    4b14:	63 9f       	mul	r22, r19
    4b16:	b0 0d       	add	r27, r0
    4b18:	e1 1d       	adc	r30, r1
    4b1a:	f9 1f       	adc	r31, r25
    4b1c:	bd 01       	movw	r22, r26
    4b1e:	cf 01       	movw	r24, r30
    4b20:	11 24       	eor	r1, r1
    4b22:	08 95       	ret

00004b24 <__udivmodhi4>:
    4b24:	aa 1b       	sub	r26, r26
    4b26:	bb 1b       	sub	r27, r27
    4b28:	51 e1       	ldi	r21, 0x11	; 17
    4b2a:	07 c0       	rjmp	.+14     	; 0x4b3a <__udivmodhi4_ep>

00004b2c <__udivmodhi4_loop>:
    4b2c:	aa 1f       	adc	r26, r26
    4b2e:	bb 1f       	adc	r27, r27
    4b30:	a6 17       	cp	r26, r22
    4b32:	b7 07       	cpc	r27, r23
    4b34:	10 f0       	brcs	.+4      	; 0x4b3a <__udivmodhi4_ep>
    4b36:	a6 1b       	sub	r26, r22
    4b38:	b7 0b       	sbc	r27, r23

00004b3a <__udivmodhi4_ep>:
    4b3a:	88 1f       	adc	r24, r24
    4b3c:	99 1f       	adc	r25, r25
    4b3e:	5a 95       	dec	r21
    4b40:	a9 f7       	brne	.-22     	; 0x4b2c <__udivmodhi4_loop>
    4b42:	80 95       	com	r24
    4b44:	90 95       	com	r25
    4b46:	bc 01       	movw	r22, r24
    4b48:	cd 01       	movw	r24, r26
    4b4a:	08 95       	ret

00004b4c <__udivmodsi4>:
    4b4c:	a1 e2       	ldi	r26, 0x21	; 33
    4b4e:	1a 2e       	mov	r1, r26
    4b50:	aa 1b       	sub	r26, r26
    4b52:	bb 1b       	sub	r27, r27
    4b54:	fd 01       	movw	r30, r26
    4b56:	0d c0       	rjmp	.+26     	; 0x4b72 <__udivmodsi4_ep>

00004b58 <__udivmodsi4_loop>:
    4b58:	aa 1f       	adc	r26, r26
    4b5a:	bb 1f       	adc	r27, r27
    4b5c:	ee 1f       	adc	r30, r30
    4b5e:	ff 1f       	adc	r31, r31
    4b60:	a2 17       	cp	r26, r18
    4b62:	b3 07       	cpc	r27, r19
    4b64:	e4 07       	cpc	r30, r20
    4b66:	f5 07       	cpc	r31, r21
    4b68:	20 f0       	brcs	.+8      	; 0x4b72 <__udivmodsi4_ep>
    4b6a:	a2 1b       	sub	r26, r18
    4b6c:	b3 0b       	sbc	r27, r19
    4b6e:	e4 0b       	sbc	r30, r20
    4b70:	f5 0b       	sbc	r31, r21

00004b72 <__udivmodsi4_ep>:
    4b72:	66 1f       	adc	r22, r22
    4b74:	77 1f       	adc	r23, r23
    4b76:	88 1f       	adc	r24, r24
    4b78:	99 1f       	adc	r25, r25
    4b7a:	1a 94       	dec	r1
    4b7c:	69 f7       	brne	.-38     	; 0x4b58 <__udivmodsi4_loop>
    4b7e:	60 95       	com	r22
    4b80:	70 95       	com	r23
    4b82:	80 95       	com	r24
    4b84:	90 95       	com	r25
    4b86:	9b 01       	movw	r18, r22
    4b88:	ac 01       	movw	r20, r24
    4b8a:	bd 01       	movw	r22, r26
    4b8c:	cf 01       	movw	r24, r30
    4b8e:	08 95       	ret

00004b90 <__divmodsi4>:
    4b90:	97 fb       	bst	r25, 7
    4b92:	09 2e       	mov	r0, r25
    4b94:	05 26       	eor	r0, r21
    4b96:	0e d0       	rcall	.+28     	; 0x4bb4 <__divmodsi4_neg1>
    4b98:	57 fd       	sbrc	r21, 7
    4b9a:	04 d0       	rcall	.+8      	; 0x4ba4 <__divmodsi4_neg2>
    4b9c:	d7 df       	rcall	.-82     	; 0x4b4c <__udivmodsi4>
    4b9e:	0a d0       	rcall	.+20     	; 0x4bb4 <__divmodsi4_neg1>
    4ba0:	00 1c       	adc	r0, r0
    4ba2:	38 f4       	brcc	.+14     	; 0x4bb2 <__divmodsi4_exit>

00004ba4 <__divmodsi4_neg2>:
    4ba4:	50 95       	com	r21
    4ba6:	40 95       	com	r20
    4ba8:	30 95       	com	r19
    4baa:	21 95       	neg	r18
    4bac:	3f 4f       	sbci	r19, 0xFF	; 255
    4bae:	4f 4f       	sbci	r20, 0xFF	; 255
    4bb0:	5f 4f       	sbci	r21, 0xFF	; 255

00004bb2 <__divmodsi4_exit>:
    4bb2:	08 95       	ret

00004bb4 <__divmodsi4_neg1>:
    4bb4:	f6 f7       	brtc	.-4      	; 0x4bb2 <__divmodsi4_exit>
    4bb6:	90 95       	com	r25
    4bb8:	80 95       	com	r24
    4bba:	70 95       	com	r23
    4bbc:	61 95       	neg	r22
    4bbe:	7f 4f       	sbci	r23, 0xFF	; 255
    4bc0:	8f 4f       	sbci	r24, 0xFF	; 255
    4bc2:	9f 4f       	sbci	r25, 0xFF	; 255
    4bc4:	08 95       	ret

00004bc6 <calloc>:
    4bc6:	0f 93       	push	r16
    4bc8:	1f 93       	push	r17
    4bca:	cf 93       	push	r28
    4bcc:	df 93       	push	r29
    4bce:	68 9f       	mul	r22, r24
    4bd0:	80 01       	movw	r16, r0
    4bd2:	69 9f       	mul	r22, r25
    4bd4:	10 0d       	add	r17, r0
    4bd6:	78 9f       	mul	r23, r24
    4bd8:	10 0d       	add	r17, r0
    4bda:	11 24       	eor	r1, r1
    4bdc:	c8 01       	movw	r24, r16
    4bde:	0e 94 ff 25 	call	0x4bfe	; 0x4bfe <malloc>
    4be2:	ec 01       	movw	r28, r24
    4be4:	00 97       	sbiw	r24, 0x00	; 0
    4be6:	29 f0       	breq	.+10     	; 0x4bf2 <calloc+0x2c>
    4be8:	60 e0       	ldi	r22, 0x00	; 0
    4bea:	70 e0       	ldi	r23, 0x00	; 0
    4bec:	a8 01       	movw	r20, r16
    4bee:	0e 94 04 27 	call	0x4e08	; 0x4e08 <memset>
    4bf2:	ce 01       	movw	r24, r28
    4bf4:	df 91       	pop	r29
    4bf6:	cf 91       	pop	r28
    4bf8:	1f 91       	pop	r17
    4bfa:	0f 91       	pop	r16
    4bfc:	08 95       	ret

00004bfe <malloc>:
    4bfe:	cf 93       	push	r28
    4c00:	df 93       	push	r29
    4c02:	bc 01       	movw	r22, r24
    4c04:	82 30       	cpi	r24, 0x02	; 2
    4c06:	91 05       	cpc	r25, r1
    4c08:	10 f4       	brcc	.+4      	; 0x4c0e <malloc+0x10>
    4c0a:	62 e0       	ldi	r22, 0x02	; 2
    4c0c:	70 e0       	ldi	r23, 0x00	; 0
    4c0e:	a0 91 56 03 	lds	r26, 0x0356
    4c12:	b0 91 57 03 	lds	r27, 0x0357
    4c16:	ed 01       	movw	r28, r26
    4c18:	e0 e0       	ldi	r30, 0x00	; 0
    4c1a:	f0 e0       	ldi	r31, 0x00	; 0
    4c1c:	40 e0       	ldi	r20, 0x00	; 0
    4c1e:	50 e0       	ldi	r21, 0x00	; 0
    4c20:	21 c0       	rjmp	.+66     	; 0x4c64 <malloc+0x66>
    4c22:	88 81       	ld	r24, Y
    4c24:	99 81       	ldd	r25, Y+1	; 0x01
    4c26:	86 17       	cp	r24, r22
    4c28:	97 07       	cpc	r25, r23
    4c2a:	69 f4       	brne	.+26     	; 0x4c46 <malloc+0x48>
    4c2c:	8a 81       	ldd	r24, Y+2	; 0x02
    4c2e:	9b 81       	ldd	r25, Y+3	; 0x03
    4c30:	30 97       	sbiw	r30, 0x00	; 0
    4c32:	19 f0       	breq	.+6      	; 0x4c3a <malloc+0x3c>
    4c34:	93 83       	std	Z+3, r25	; 0x03
    4c36:	82 83       	std	Z+2, r24	; 0x02
    4c38:	04 c0       	rjmp	.+8      	; 0x4c42 <malloc+0x44>
    4c3a:	90 93 57 03 	sts	0x0357, r25
    4c3e:	80 93 56 03 	sts	0x0356, r24
    4c42:	fe 01       	movw	r30, r28
    4c44:	34 c0       	rjmp	.+104    	; 0x4cae <malloc+0xb0>
    4c46:	68 17       	cp	r22, r24
    4c48:	79 07       	cpc	r23, r25
    4c4a:	38 f4       	brcc	.+14     	; 0x4c5a <malloc+0x5c>
    4c4c:	41 15       	cp	r20, r1
    4c4e:	51 05       	cpc	r21, r1
    4c50:	19 f0       	breq	.+6      	; 0x4c58 <malloc+0x5a>
    4c52:	84 17       	cp	r24, r20
    4c54:	95 07       	cpc	r25, r21
    4c56:	08 f4       	brcc	.+2      	; 0x4c5a <malloc+0x5c>
    4c58:	ac 01       	movw	r20, r24
    4c5a:	fe 01       	movw	r30, r28
    4c5c:	8a 81       	ldd	r24, Y+2	; 0x02
    4c5e:	9b 81       	ldd	r25, Y+3	; 0x03
    4c60:	9c 01       	movw	r18, r24
    4c62:	e9 01       	movw	r28, r18
    4c64:	20 97       	sbiw	r28, 0x00	; 0
    4c66:	e9 f6       	brne	.-70     	; 0x4c22 <malloc+0x24>
    4c68:	41 15       	cp	r20, r1
    4c6a:	51 05       	cpc	r21, r1
    4c6c:	a9 f1       	breq	.+106    	; 0x4cd8 <malloc+0xda>
    4c6e:	ca 01       	movw	r24, r20
    4c70:	86 1b       	sub	r24, r22
    4c72:	97 0b       	sbc	r25, r23
    4c74:	04 97       	sbiw	r24, 0x04	; 4
    4c76:	08 f4       	brcc	.+2      	; 0x4c7a <malloc+0x7c>
    4c78:	ba 01       	movw	r22, r20
    4c7a:	e0 e0       	ldi	r30, 0x00	; 0
    4c7c:	f0 e0       	ldi	r31, 0x00	; 0
    4c7e:	2a c0       	rjmp	.+84     	; 0x4cd4 <malloc+0xd6>
    4c80:	8d 91       	ld	r24, X+
    4c82:	9c 91       	ld	r25, X
    4c84:	11 97       	sbiw	r26, 0x01	; 1
    4c86:	84 17       	cp	r24, r20
    4c88:	95 07       	cpc	r25, r21
    4c8a:	f9 f4       	brne	.+62     	; 0x4cca <malloc+0xcc>
    4c8c:	64 17       	cp	r22, r20
    4c8e:	75 07       	cpc	r23, r21
    4c90:	81 f4       	brne	.+32     	; 0x4cb2 <malloc+0xb4>
    4c92:	12 96       	adiw	r26, 0x02	; 2
    4c94:	8d 91       	ld	r24, X+
    4c96:	9c 91       	ld	r25, X
    4c98:	13 97       	sbiw	r26, 0x03	; 3
    4c9a:	30 97       	sbiw	r30, 0x00	; 0
    4c9c:	19 f0       	breq	.+6      	; 0x4ca4 <malloc+0xa6>
    4c9e:	93 83       	std	Z+3, r25	; 0x03
    4ca0:	82 83       	std	Z+2, r24	; 0x02
    4ca2:	04 c0       	rjmp	.+8      	; 0x4cac <malloc+0xae>
    4ca4:	90 93 57 03 	sts	0x0357, r25
    4ca8:	80 93 56 03 	sts	0x0356, r24
    4cac:	fd 01       	movw	r30, r26
    4cae:	32 96       	adiw	r30, 0x02	; 2
    4cb0:	4f c0       	rjmp	.+158    	; 0x4d50 <malloc+0x152>
    4cb2:	ca 01       	movw	r24, r20
    4cb4:	86 1b       	sub	r24, r22
    4cb6:	97 0b       	sbc	r25, r23
    4cb8:	fd 01       	movw	r30, r26
    4cba:	e8 0f       	add	r30, r24
    4cbc:	f9 1f       	adc	r31, r25
    4cbe:	61 93       	st	Z+, r22
    4cc0:	71 93       	st	Z+, r23
    4cc2:	02 97       	sbiw	r24, 0x02	; 2
    4cc4:	8d 93       	st	X+, r24
    4cc6:	9c 93       	st	X, r25
    4cc8:	43 c0       	rjmp	.+134    	; 0x4d50 <malloc+0x152>
    4cca:	fd 01       	movw	r30, r26
    4ccc:	82 81       	ldd	r24, Z+2	; 0x02
    4cce:	93 81       	ldd	r25, Z+3	; 0x03
    4cd0:	9c 01       	movw	r18, r24
    4cd2:	d9 01       	movw	r26, r18
    4cd4:	10 97       	sbiw	r26, 0x00	; 0
    4cd6:	a1 f6       	brne	.-88     	; 0x4c80 <malloc+0x82>
    4cd8:	80 91 54 03 	lds	r24, 0x0354
    4cdc:	90 91 55 03 	lds	r25, 0x0355
    4ce0:	89 2b       	or	r24, r25
    4ce2:	41 f4       	brne	.+16     	; 0x4cf4 <malloc+0xf6>
    4ce4:	80 91 75 01 	lds	r24, 0x0175
    4ce8:	90 91 76 01 	lds	r25, 0x0176
    4cec:	90 93 55 03 	sts	0x0355, r25
    4cf0:	80 93 54 03 	sts	0x0354, r24
    4cf4:	40 91 77 01 	lds	r20, 0x0177
    4cf8:	50 91 78 01 	lds	r21, 0x0178
    4cfc:	41 15       	cp	r20, r1
    4cfe:	51 05       	cpc	r21, r1
    4d00:	41 f4       	brne	.+16     	; 0x4d12 <malloc+0x114>
    4d02:	4d b7       	in	r20, 0x3d	; 61
    4d04:	5e b7       	in	r21, 0x3e	; 62
    4d06:	80 91 73 01 	lds	r24, 0x0173
    4d0a:	90 91 74 01 	lds	r25, 0x0174
    4d0e:	48 1b       	sub	r20, r24
    4d10:	59 0b       	sbc	r21, r25
    4d12:	20 91 54 03 	lds	r18, 0x0354
    4d16:	30 91 55 03 	lds	r19, 0x0355
    4d1a:	24 17       	cp	r18, r20
    4d1c:	35 07       	cpc	r19, r21
    4d1e:	b0 f4       	brcc	.+44     	; 0x4d4c <malloc+0x14e>
    4d20:	ca 01       	movw	r24, r20
    4d22:	82 1b       	sub	r24, r18
    4d24:	93 0b       	sbc	r25, r19
    4d26:	86 17       	cp	r24, r22
    4d28:	97 07       	cpc	r25, r23
    4d2a:	80 f0       	brcs	.+32     	; 0x4d4c <malloc+0x14e>
    4d2c:	ab 01       	movw	r20, r22
    4d2e:	4e 5f       	subi	r20, 0xFE	; 254
    4d30:	5f 4f       	sbci	r21, 0xFF	; 255
    4d32:	84 17       	cp	r24, r20
    4d34:	95 07       	cpc	r25, r21
    4d36:	50 f0       	brcs	.+20     	; 0x4d4c <malloc+0x14e>
    4d38:	42 0f       	add	r20, r18
    4d3a:	53 1f       	adc	r21, r19
    4d3c:	50 93 55 03 	sts	0x0355, r21
    4d40:	40 93 54 03 	sts	0x0354, r20
    4d44:	f9 01       	movw	r30, r18
    4d46:	61 93       	st	Z+, r22
    4d48:	71 93       	st	Z+, r23
    4d4a:	02 c0       	rjmp	.+4      	; 0x4d50 <malloc+0x152>
    4d4c:	e0 e0       	ldi	r30, 0x00	; 0
    4d4e:	f0 e0       	ldi	r31, 0x00	; 0
    4d50:	cf 01       	movw	r24, r30
    4d52:	df 91       	pop	r29
    4d54:	cf 91       	pop	r28
    4d56:	08 95       	ret

00004d58 <free>:
    4d58:	cf 93       	push	r28
    4d5a:	df 93       	push	r29
    4d5c:	00 97       	sbiw	r24, 0x00	; 0
    4d5e:	09 f4       	brne	.+2      	; 0x4d62 <free+0xa>
    4d60:	50 c0       	rjmp	.+160    	; 0x4e02 <free+0xaa>
    4d62:	ec 01       	movw	r28, r24
    4d64:	22 97       	sbiw	r28, 0x02	; 2
    4d66:	1b 82       	std	Y+3, r1	; 0x03
    4d68:	1a 82       	std	Y+2, r1	; 0x02
    4d6a:	a0 91 56 03 	lds	r26, 0x0356
    4d6e:	b0 91 57 03 	lds	r27, 0x0357
    4d72:	10 97       	sbiw	r26, 0x00	; 0
    4d74:	09 f1       	breq	.+66     	; 0x4db8 <free+0x60>
    4d76:	40 e0       	ldi	r20, 0x00	; 0
    4d78:	50 e0       	ldi	r21, 0x00	; 0
    4d7a:	ac 17       	cp	r26, r28
    4d7c:	bd 07       	cpc	r27, r29
    4d7e:	08 f1       	brcs	.+66     	; 0x4dc2 <free+0x6a>
    4d80:	bb 83       	std	Y+3, r27	; 0x03
    4d82:	aa 83       	std	Y+2, r26	; 0x02
    4d84:	fe 01       	movw	r30, r28
    4d86:	21 91       	ld	r18, Z+
    4d88:	31 91       	ld	r19, Z+
    4d8a:	e2 0f       	add	r30, r18
    4d8c:	f3 1f       	adc	r31, r19
    4d8e:	ae 17       	cp	r26, r30
    4d90:	bf 07       	cpc	r27, r31
    4d92:	79 f4       	brne	.+30     	; 0x4db2 <free+0x5a>
    4d94:	8d 91       	ld	r24, X+
    4d96:	9c 91       	ld	r25, X
    4d98:	11 97       	sbiw	r26, 0x01	; 1
    4d9a:	28 0f       	add	r18, r24
    4d9c:	39 1f       	adc	r19, r25
    4d9e:	2e 5f       	subi	r18, 0xFE	; 254
    4da0:	3f 4f       	sbci	r19, 0xFF	; 255
    4da2:	39 83       	std	Y+1, r19	; 0x01
    4da4:	28 83       	st	Y, r18
    4da6:	12 96       	adiw	r26, 0x02	; 2
    4da8:	8d 91       	ld	r24, X+
    4daa:	9c 91       	ld	r25, X
    4dac:	13 97       	sbiw	r26, 0x03	; 3
    4dae:	9b 83       	std	Y+3, r25	; 0x03
    4db0:	8a 83       	std	Y+2, r24	; 0x02
    4db2:	41 15       	cp	r20, r1
    4db4:	51 05       	cpc	r21, r1
    4db6:	71 f4       	brne	.+28     	; 0x4dd4 <free+0x7c>
    4db8:	d0 93 57 03 	sts	0x0357, r29
    4dbc:	c0 93 56 03 	sts	0x0356, r28
    4dc0:	20 c0       	rjmp	.+64     	; 0x4e02 <free+0xaa>
    4dc2:	12 96       	adiw	r26, 0x02	; 2
    4dc4:	8d 91       	ld	r24, X+
    4dc6:	9c 91       	ld	r25, X
    4dc8:	13 97       	sbiw	r26, 0x03	; 3
    4dca:	ad 01       	movw	r20, r26
    4dcc:	00 97       	sbiw	r24, 0x00	; 0
    4dce:	11 f0       	breq	.+4      	; 0x4dd4 <free+0x7c>
    4dd0:	dc 01       	movw	r26, r24
    4dd2:	d3 cf       	rjmp	.-90     	; 0x4d7a <free+0x22>
    4dd4:	fa 01       	movw	r30, r20
    4dd6:	d3 83       	std	Z+3, r29	; 0x03
    4dd8:	c2 83       	std	Z+2, r28	; 0x02
    4dda:	21 91       	ld	r18, Z+
    4ddc:	31 91       	ld	r19, Z+
    4dde:	e2 0f       	add	r30, r18
    4de0:	f3 1f       	adc	r31, r19
    4de2:	ce 17       	cp	r28, r30
    4de4:	df 07       	cpc	r29, r31
    4de6:	69 f4       	brne	.+26     	; 0x4e02 <free+0xaa>
    4de8:	88 81       	ld	r24, Y
    4dea:	99 81       	ldd	r25, Y+1	; 0x01
    4dec:	28 0f       	add	r18, r24
    4dee:	39 1f       	adc	r19, r25
    4df0:	2e 5f       	subi	r18, 0xFE	; 254
    4df2:	3f 4f       	sbci	r19, 0xFF	; 255
    4df4:	fa 01       	movw	r30, r20
    4df6:	31 83       	std	Z+1, r19	; 0x01
    4df8:	20 83       	st	Z, r18
    4dfa:	8a 81       	ldd	r24, Y+2	; 0x02
    4dfc:	9b 81       	ldd	r25, Y+3	; 0x03
    4dfe:	93 83       	std	Z+3, r25	; 0x03
    4e00:	82 83       	std	Z+2, r24	; 0x02
    4e02:	df 91       	pop	r29
    4e04:	cf 91       	pop	r28
    4e06:	08 95       	ret

00004e08 <memset>:
    4e08:	dc 01       	movw	r26, r24
    4e0a:	01 c0       	rjmp	.+2      	; 0x4e0e <memset+0x6>
    4e0c:	6d 93       	st	X+, r22
    4e0e:	41 50       	subi	r20, 0x01	; 1
    4e10:	50 40       	sbci	r21, 0x00	; 0
    4e12:	e0 f7       	brcc	.-8      	; 0x4e0c <memset+0x4>
    4e14:	08 95       	ret

00004e16 <__eerd_byte_m328p>:
    4e16:	f9 99       	sbic	0x1f, 1	; 31
    4e18:	fe cf       	rjmp	.-4      	; 0x4e16 <__eerd_byte_m328p>
    4e1a:	92 bd       	out	0x22, r25	; 34
    4e1c:	81 bd       	out	0x21, r24	; 33
    4e1e:	f8 9a       	sbi	0x1f, 0	; 31
    4e20:	99 27       	eor	r25, r25
    4e22:	80 b5       	in	r24, 0x20	; 32
    4e24:	08 95       	ret

00004e26 <__eerd_dword_m328p>:
    4e26:	a6 e1       	ldi	r26, 0x16	; 22
    4e28:	b0 e0       	ldi	r27, 0x00	; 0
    4e2a:	44 e0       	ldi	r20, 0x04	; 4
    4e2c:	50 e0       	ldi	r21, 0x00	; 0
    4e2e:	0c 94 3c 27 	jmp	0x4e78	; 0x4e78 <__eerd_blraw_m328p>

00004e32 <__eerd_word_m328p>:
    4e32:	a8 e1       	ldi	r26, 0x18	; 24
    4e34:	b0 e0       	ldi	r27, 0x00	; 0
    4e36:	42 e0       	ldi	r20, 0x02	; 2
    4e38:	50 e0       	ldi	r21, 0x00	; 0
    4e3a:	0c 94 3c 27 	jmp	0x4e78	; 0x4e78 <__eerd_blraw_m328p>

00004e3e <__eewr_byte_m328p>:
    4e3e:	26 2f       	mov	r18, r22

00004e40 <__eewr_r18_m328p>:
    4e40:	f9 99       	sbic	0x1f, 1	; 31
    4e42:	fe cf       	rjmp	.-4      	; 0x4e40 <__eewr_r18_m328p>
    4e44:	1f ba       	out	0x1f, r1	; 31
    4e46:	92 bd       	out	0x22, r25	; 34
    4e48:	81 bd       	out	0x21, r24	; 33
    4e4a:	20 bd       	out	0x20, r18	; 32
    4e4c:	0f b6       	in	r0, 0x3f	; 63
    4e4e:	f8 94       	cli
    4e50:	fa 9a       	sbi	0x1f, 2	; 31
    4e52:	f9 9a       	sbi	0x1f, 1	; 31
    4e54:	0f be       	out	0x3f, r0	; 63
    4e56:	01 96       	adiw	r24, 0x01	; 1
    4e58:	08 95       	ret

00004e5a <__eewr_dword_m328p>:
    4e5a:	24 2f       	mov	r18, r20
    4e5c:	0e 94 20 27 	call	0x4e40	; 0x4e40 <__eewr_r18_m328p>
    4e60:	25 2f       	mov	r18, r21
    4e62:	0e 94 20 27 	call	0x4e40	; 0x4e40 <__eewr_r18_m328p>
    4e66:	0c 94 35 27 	jmp	0x4e6a	; 0x4e6a <__eewr_word_m328p>

00004e6a <__eewr_word_m328p>:
    4e6a:	0e 94 1f 27 	call	0x4e3e	; 0x4e3e <__eewr_byte_m328p>
    4e6e:	27 2f       	mov	r18, r23
    4e70:	0c 94 20 27 	jmp	0x4e40	; 0x4e40 <__eewr_r18_m328p>

00004e74 <__eerd_block_m328p>:
    4e74:	dc 01       	movw	r26, r24
    4e76:	cb 01       	movw	r24, r22

00004e78 <__eerd_blraw_m328p>:
    4e78:	fc 01       	movw	r30, r24
    4e7a:	f9 99       	sbic	0x1f, 1	; 31
    4e7c:	fe cf       	rjmp	.-4      	; 0x4e7a <__eerd_blraw_m328p+0x2>
    4e7e:	06 c0       	rjmp	.+12     	; 0x4e8c <__eerd_blraw_m328p+0x14>
    4e80:	f2 bd       	out	0x22, r31	; 34
    4e82:	e1 bd       	out	0x21, r30	; 33
    4e84:	f8 9a       	sbi	0x1f, 0	; 31
    4e86:	31 96       	adiw	r30, 0x01	; 1
    4e88:	00 b4       	in	r0, 0x20	; 32
    4e8a:	0d 92       	st	X+, r0
    4e8c:	41 50       	subi	r20, 0x01	; 1
    4e8e:	50 40       	sbci	r21, 0x00	; 0
    4e90:	b8 f7       	brcc	.-18     	; 0x4e80 <__eerd_blraw_m328p+0x8>
    4e92:	08 95       	ret

00004e94 <_exit>:
    4e94:	f8 94       	cli

00004e96 <__stop_program>:
    4e96:	ff cf       	rjmp	.-2      	; 0x4e96 <__stop_program>
